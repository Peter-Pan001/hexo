<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CDC技术</title>
      <link href="/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/CDC%E6%8A%80%E6%9C%AF/"/>
      <url>/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/CDC%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<ul><li>CDC (全称 change data capture)-变化数据捕获，是识别源系统中数据何时发生更改的过程，以便下游流程或系统可以对该更改执行操作。一个常见的用例是 ==反映不同目标系统中的更改，以便系统中的数据保持同步。==</li><li>对于数据库而言，CDC更像是一种软件的设计模式，用来确定与跟踪以及更改了的数据</li><li>CDC作为一种数据集成方法，常发生在数据仓库环境中，因为捕获和保留数据状态是数据仓库的核心功能之一。</li></ul><p><img data-src="https://s1.ax1x.com/2022/06/03/XaS7zF.png" alt="CDC/01.png"></p><blockquote><p>以银行常见的数据库事件为例：存款与取款的操作通过对变更数据进行捕获与实时数据传输保证数据的时效性</p></blockquote><p><img data-src="https://s1.ax1x.com/2022/06/03/XaSvIx.png" alt="sd"></p><h2 id="ETL中的CDC"><a href="#ETL中的CDC" class="headerlink" title="ETL中的CDC"></a>ETL中的CDC</h2><ul><li>先讲一下ETL的概念，所谓ETL，实际上就是对数据进行提取Extract、转换Translate、加载Load，是一个数据集成过程。数据从各个源中提取并传递到数据仓库中，数据的抽取可通过数据库的批处理查询或CDC来获得数据。</li></ul><h2 id="CDC实现方法"><a href="#CDC实现方法" class="headerlink" title="CDC实现方法"></a>CDC实现方法</h2><h3 id="Audit-Columns-审核列"><a href="#Audit-Columns-审核列" class="headerlink" title="Audit Columns 审核列"></a>Audit Columns 审核列</h3><ul><li>常见的方式是在当前的数据库表中添加如：<code>Last_Update</code> 或 <code>Date_Modified</code> 列来检索从上次提取数据以来所变更的行情况。</li><li>主要逻辑：<ol><li>获取target表的<code>Created_Time</code> 和 <code>Updated_Time</code>最大值</li><li>从source表中选择<code>Created_Time</code> 大于 target表中最大的<code>Created_Time</code>所在行，此行为上次执行CDC后新建的行</li></ol></li></ul><p><img data-src="https://s1.ax1x.com/2022/06/03/XapmJf.png" alt="sc"></p><ol><li>从source表中选择 <code>Created_Time</code>大于target表中 <code>Updated_Time</code>最大值但小于target表 <code>Created_Time</code>最大值</li></ol><p><img data-src="https://s1.ax1x.com/2022/06/03/XapMQg.png" alt="sw"></p><ol><li>插入2中的新行后修改target表中3的现有行</li></ol><blockquote><p>优势：</p><p>借由本机应用逻辑构建 ，无需借助第三方工具</p><p>缺点：</p><p>增加数据库开销、易出错并出现数据一致性问题、无脚本进行删除跟踪会导致删除语句不会传递到target上</p></blockquote><h3 id="Table-Deltas-表-增量"><a href="#Table-Deltas-表-增量" class="headerlink" title="Table Deltas 表 增量"></a>Table Deltas 表 增量</h3><ul><li>通过数据库快照对比数据库表修改前后的差异，有的也称时间戳查询</li></ul><p><img data-src="https://s1.ax1x.com/2022/06/03/Xap8wn.png" alt="ie"></p><blockquote><p>优势：</p><p>提供已更改数据的准确视图。仅使用本机SQL Script</p><p>缺点：</p><p>对存储需求增加，需要使用数据源的三个副本： 源数据，修改前快照，修改后快照</p><p>扩展性较差</p></blockquote><h3 id="Trigger-based-CDC-基于触发器的CDC"><a href="#Trigger-based-CDC-基于触发器的CDC" class="headerlink" title="Trigger-based CDC 基于触发器的CDC"></a>Trigger-based CDC 基于触发器的CDC</h3><ul><li>通过定义数据库触发器并在影子表中创建自己的变更日志（change log），触发器在增删改查命令执行前或后进行触发，用于创建更改日志。（SQL Level执行）</li><li>该方法会导致各个表都需要Trigger，在进行数据修改时，运行Trigger会造成额外性能开销与维护上的管理负担。</li></ul><blockquote><p>优势：</p><p>shadow table 可提供所有事务的不可变详细日志 ，某些数据库在SQL API可提供支持</p><p>缺点：</p><p>每次进行数据操作会要求数据库进行多次写入，间接降低数据库性能</p></blockquote><h3 id="Log-Based-Change-Data-Capture-基于日志的CDC"><a href="#Log-Based-Change-Data-Capture-基于日志的CDC" class="headerlink" title="Log-Based Change Data Capture 基于日志的CDC"></a>Log-Based Change Data Capture 基于日志的CDC</h3><ul><li>数据库包含事务日志（也称为重做日志 transaction log），这些日志存储所有数据库事件，允许在发生崩溃时恢复数据库。</li></ul><p><img data-src="https://s1.ax1x.com/2022/06/03/XapaSU.png" alt="ix"></p><blockquote><p>数据捕获是无需进行应用级更改，无需扫描操作表，会显著降低系统性能</p><p>优势：</p><p>对production数据库系统的影响最新，各事务无需额外查询 ； 可在多个系统保持ACID的可靠性 ；无需修改production数据库系统模式</p><p>弊端：</p><p>日志记录格式随数据库版本更新而需要修改数据库日志逻辑 ；需要系统管理源数据库更改事件元数据</p></blockquote><h3 id="Data-Integration-Platforms-for-Change-Data-Capture-数据集成平台的CDC"><a href="#Data-Integration-Platforms-for-Change-Data-Capture-数据集成平台的CDC" class="headerlink" title="Data Integration Platforms for Change Data Capture 数据集成平台的CDC"></a>Data Integration Platforms for Change Data Capture 数据集成平台的CDC</h3><ul><li>数据集成平台可自动挖掘数据库<code>change log</code>处理并管理其他元数据</li></ul><h2 id="CDC应用实例"><a href="#CDC应用实例" class="headerlink" title="CDC应用实例"></a>CDC应用实例</h2><ul><li><strong>将数据流式传输到数据仓库</strong>  – 当今数据管道的核心功能之一是将数据从源数据库移动到数据仓库。这是因为大多数操作数据库并非旨在支持密集的分析处理，而数据仓库非常适合这些类型的操作。在这里，CDC是数据管道体系结构中的关键步骤，可促进从源数据仓库到目标数据仓库的数据迁移。</li><li><strong>将本地数据迁移到云</strong>  – 当组织希望执行资源密集型操作（如人工智能、机器学习或深度学习）时，他们通常会寻求基于云的数据仓库来促进高度资源密集型的数据处理过程。这样做的原因是，与本地部署相比，在云中运行这些操作的运营成本要低得多，这使得云的即用即付模型成为一个不错的选择。在这里，CDC可以在促进从本地到云的数据迁移方面发挥重要作用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络虚拟化</title>
      <link href="/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/%E7%BD%91%E7%BB%9C%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
      <url>/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/%E7%BD%91%E7%BB%9C%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-Bridge"><a href="#Linux-Bridge" class="headerlink" title="Linux Bridge"></a>Linux Bridge</h2><ul><li>Linux Bridge（网桥）是工作于二层的虚拟网络设备，功能类似于物理的交换机。</li><li>Bridge可以绑定其他Linux网络设备作为从设备，并将这些设备虚拟化为端口，当一个从设备被绑定到Bridge上时，就相当于真实网络中的交换机端口插入了一个连接有终端的网线，br0会根据MAC地址与端口的映射关系进行转发。</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/26/7qTS0g.png" alt="lbridge"></p><h2 id="OVS-开源虚拟以太网交换机"><a href="#OVS-开源虚拟以太网交换机" class="headerlink" title="OVS 开源虚拟以太网交换机"></a>OVS 开源虚拟以太网交换机</h2><blockquote><p>OVS能够支持多种标准的管理接口和协议，还可以支持跨多个物理服务器的分布式环境。OVS提供了对OpenFlow协议的支持，并且能够与众多开源的虚拟化平台相整合。主要有两个作用：传递虚拟机VM之间的流量，以及实现VM和外界网络的通信。</p></blockquote><p><img data-src="https://s4.ax1x.com/2022/01/26/7qTenU.png" alt="ovs"></p><ul><li>OVS提供了对OpenFlow协议的支持，并且能够与众多开源的虚拟化平台相整合。</li><li>OpenFlow交换机将原来完全由交换机/路由器控制的报文转发过程转化为由OpenFlow交换机（OpenFlow Switch）和控制服务器（Controller）来共同完成，从而实现了数据转发和路由控制的分离。控制器可以通过事先规定好的接口操作来控制OpenFlow交换机中的流表，从而达到控制数据转发的目的。</li><li>OpenFlow网络由OpenFlow交换机、FlowVisor和Controller三部分组成。OpenFlow交换机进行数据层的转发；FlowVisor对网络进行虚拟化；Controller对网络进行集中控制，实现控制层的功能。<br>OpenFlow交换机由流表、安全通道和OpenFlow协议三部分组成。</li></ul><h2 id="DVS-分布式虚拟交换机"><a href="#DVS-分布式虚拟交换机" class="headerlink" title="DVS 分布式虚拟交换机"></a>DVS 分布式虚拟交换机</h2><blockquote><p>每台主机都连接到分布式交换机中。分布式交换机的一端是与虚拟机相连的虚拟端口，另一端是与虚拟机所在主机上的物理以太网适配器相连的上行链路。通过它可以连接主机和虚拟机，实现系统网络互通。另外，分布式交换机在所有关联主机之间作为单个虚拟交换机使用。此功能可使虚拟机在跨主机进行迁移时确保其网络配置保持一致。</p></blockquote><p><img data-src="https://s4.ax1x.com/2022/01/26/7qTKAJ.png" alt="DVS"></p><h2 id="EVS-弹性虚拟交换"><a href="#EVS-弹性虚拟交换" class="headerlink" title="EVS 弹性虚拟交换"></a>EVS 弹性虚拟交换</h2><ul><li>Elastic Virtual Switch（EVS）是基于OVS转发技术，提升了其IO性能的一种弹性化虚拟交换。仍然符合openflow协议标准。</li><li>其中IO性能提升使用了Intel DPDK技术，通过用户态进程接管网卡数据收发，采用“IO独占核”技术，即每个端口分配一个核专门用于数据收发，这种轮询式的处理方式比中断式的处理更高效，因而IO性能方面有显著提升。</li><li>EVS关键技术：<ul><li>物理网卡访问：DPDK高速数据通道</li><li>报文处理：使用大页内存</li></ul></li><li>交换业务处理<ul><li>轮询转发，减少调度开销</li><li>多核（线程）并行处理</li><li>Openflow流表转发优化</li></ul></li><li>前后端：vhost-user技术</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/26/7qTMN9.png" alt="EVS"></p><ul><li>在Host上运行用户态EVS，借助于DPDK的网卡管理API和大页内存，来提升物理网卡收发包性能和处理能力。 </li><li>基于vhost-user技术，vhost在用户态直接和EVS交互，通过地址偏移获取DPDK大页地址，性能提升30%-40%。</li><li>利用批处理和轮询机制提升报文处理能力。</li></ul><h2 id="华为分布式交换方案"><a href="#华为分布式交换方案" class="headerlink" title="华为分布式交换方案"></a>华为分布式交换方案</h2><p><img data-src="https://s4.ax1x.com/2022/01/26/7qT31x.png" alt="fbsjhfa"></p><ul><li>集中管理：统一Portal和集中的管理，简化用户的管理和配置；</li><li>开源Open vSwitch：集成开源Open vSwitch，充分利用和集成了开源社区虚拟交换的能力；</li><li>提供丰富虚拟交换的二层特性，包括交换、QoS、安全隔离等。</li></ul><h3 id="FusionCompute分布式交换机"><a href="#FusionCompute分布式交换机" class="headerlink" title="FusionCompute分布式交换机"></a>FusionCompute分布式交换机</h3><p><img data-src="https://s4.ax1x.com/2022/01/26/7qTNHe.png" alt="fbjhj"></p><ul><li>分布式交换机模型基本特征：<ul><li>虚拟化管理员可以配置多个分布式交换机， ==每个分布式交换机可以覆盖集群中的多个CNA节点==</li><li>每个分布式交换机具有多个分布式的虚拟端口VSP，每个VSP具有各自的属性(速率)，为了管理方便采用Port Group组管理相同属性的一组端口，相同端口组的VLAN相同；</li><li>虚拟化管理员或业务系统（例如VDI/IDC）,可选择管理/存储/业务使用的不同物理接口；每个分布式交换机可以配置一个UpLink端口或者一个Uplink端口聚合组，用于VM对外的通信。 ==Uplink端口聚合组可以包含多个物理端口，端口聚合组可以配置负载均衡策略==</li><li>每个VM可以具有多个vNIC接口，vNIC可以和交换机的VSP一一对接；</li></ul></li></ul><h3 id="虚拟交换模型"><a href="#虚拟交换模型" class="headerlink" title="虚拟交换模型"></a>虚拟交换模型</h3><p><img data-src="https://s4.ax1x.com/2022/01/26/7qTdNd.png" alt="xnjhmx"></p><ul><li>虚拟化管理员可通过定义端口组 属性（安全/QoS）简化对虚拟机端口属性的设置；设置端口组属性，不影响虚拟机正常工作；</li><li>端口组：端口组是网络属性相同的一组端口的属性集合。管理员可以通过配置端口组属性（带宽QOS、2层安全属性、VLAN等）简化对虚拟机端口属性的设置。设置端口组属性，不影响虚拟机正常工作；</li><li>上行链路：分布式交换机关联的服务器物理网口；管理员可以查询上行链路的名称、速率、模式、状态等信息；</li><li>上行链路聚合：分布式交换机关联的服务器绑定网口，绑定网口可以包含多个物理网口，这些物理网口可以配置主备或负载均衡策略。</li></ul><h2 id="华为虚拟交换模式"><a href="#华为虚拟交换模式" class="headerlink" title="华为虚拟交换模式"></a>华为虚拟交换模式</h2><p><img data-src="https://s4.ax1x.com/2022/01/26/7qTD3t.png" alt="xnjhms"></p><ul><li>普通交换：普通模式下，虚拟机有前后端两个虚拟网卡设备，其中，前端网卡连接在虚拟交换机的虚端口上。虚拟机网络数据包 ==通过环形缓冲区和事件通道在前后端网卡之间传输== ，并最终通过后端网卡连接的虚拟交换机实现转发</li><li>SR-IOV：简单说来，支持SR-IOV的物理网卡可以虚拟出多个网卡以供虚拟机使用，==对于虚拟机来说就像是有一块单独的物理网卡一样== ，相比软件虚拟化提升了网络I/O的性能，相对于硬件直通(PCI Passthrough)又减少了硬件网卡数量上的需求</li><li>用户态交换：通过使用DPDK（Data Plane Development Kit，数据平面开发套件，DPDK是一系列库和驱动的集合）技术，用来在x86平台进行快速的数据包处理。它通过环境抽象层旁路内核协议栈、轮询模式的报文无中断收发、优化内存/缓冲区/队列管理、基于网卡多队列和流识别的负载均衡等多项技术， ==实现了在x86处理器架构下的高性能报文转发能力，提高虚拟机网络性能==</li></ul><h2 id="网络安全策略"><a href="#网络安全策略" class="headerlink" title="网络安全策略"></a>网络安全策略</h2><h3 id="二层网络安全策略"><a href="#二层网络安全策略" class="headerlink" title="二层网络安全策略"></a>二层网络安全策略</h3><blockquote><p>防止IP地址和MAC仿冒（IP和MAC绑定）：防止虚拟机用户通过修改虚拟网卡的IP、MAC地址发起IP、MAC仿冒攻击，增强用户虚拟机的网络安全。通过生成IP-MAC的绑定关系，基于IP源侧防护(IP Source Guard)与动态ARP检测（DAI）对非绑定关系的报文进行过滤。<br>防止DHCP Server仿冒(DHCP Server隔离)：禁止用户虚拟机启动DHCP Server服务，防止用户无意识或恶意启动DHCP Server服务，影响正常的虚拟机IP地址分配过程。</p></blockquote><h3 id="广播报文抑制"><a href="#广播报文抑制" class="headerlink" title="广播报文抑制"></a>广播报文抑制</h3><blockquote><p>虚拟交换机提供虚拟机虚端口发送方向的广播报文抑制开关，以及抑制阈值设置功能。可以通过开启虚拟机网卡所在端口组的广播包抑制开关设置阈值，减少过量广播报文对二层网络带宽的消耗。</p></blockquote><h3 id="安全组"><a href="#安全组" class="headerlink" title="安全组"></a>安全组</h3><blockquote><p>用户根据虚拟机安全需求创建安全组，每个安全组可以设定一组访问规则。当虚拟机加入安全组后，即受到该访问规则组的保护。用户通过在创建虚拟机时选定要加入的安全组来对自身的虚拟机进行安全隔离和访问控制。</p></blockquote><h2 id="Trunk口"><a href="#Trunk口" class="headerlink" title="Trunk口"></a>Trunk口</h2><blockquote><p>虚拟机网卡通过虚端口接入虚拟交换机进行网络数据包的收发。<br>虚拟交换机虚端口支持配置为Trunk类型，并允许设置Trunk的VLAN ID范围，之后虚端口便具备了同时收发携带不同VLAN标签的网络数据包的功能，从而满足了虚拟网卡支持Trunk类型端口的需求。</p></blockquote><p><img data-src="https://s4.ax1x.com/2022/01/26/7qTsjf.png" alt="trunkk"></p><ul><li>普通类型的虚端口只能属于一个VLAN，中继类型的虚端口可以允许多个VLAN接收和发送报文。普通虚拟机选择普通类型的端口，虚拟机的网卡启用VLAN设备的情况下选择中继类型的端口，否则虚拟机的网络可能不通。</li><li>端口组配置为中继的方式后，可以在linux虚拟机内创建多个VLAN设备，这些VLAN设备通过1个虚拟网卡即可以收发携带不同VLAN标签的网络数据包。使虚拟机不用创建多个虚拟网卡，即可收发携带不同VLAN标签的网络数据包。</li></ul><h2 id="网口绑定"><a href="#网口绑定" class="headerlink" title="网口绑定"></a>网口绑定</h2><p><img data-src="https://s4.ax1x.com/2022/01/26/7qT6u8.png" alt="wkbd"></p><ul><li>对于普通网卡，绑定模式可以选择以下几种：<ul><li>主备</li><li>轮询</li><li>基于源目的IP和端口负荷分担</li><li>基于源目的MAC的负荷分担</li><li>基于源目的MAC的LACP</li><li>基于源目的IP的LACP</li></ul></li><li>对于支持DPDK驱动的物理网卡，绑定模式可以选择以下几种：<ul><li>DPDK驱动的主备模式</li><li>DPDK驱动的基于源目的MAC的LACP模式</li><li>DPDK驱动的基于源目的IP和端口的LACP模式</li></ul></li></ul><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><ol><li><p>在FusionCompute分布式交换机里，虚拟机与外部网络通信依靠的是什么端口？[]{.gap} 。 {.quiz}</p><ul><li>Mgnt {.options}</li><li>存储接口 {.options}</li><li>上行链路 {.correct}</li><li>端口组 {.options}<br>{.options}     </li></ul></li><li><p>FusionCompute分布式交换机支持哪几种类型？（多选）[]{.gap} 。 {.quiz}</p><ul><li>普通模式 {.correct}</li><li>SR-IOV直通模式 {.correct}</li><li>用户态交换模式 {.correct}</li><li>标准模式 {.options}<br>{.options}</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储虚拟化</title>
      <link href="/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/%E5%AD%98%E5%82%A8%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
      <url>/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/%E5%AD%98%E5%82%A8%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="存储虚拟化架构"><a href="#存储虚拟化架构" class="headerlink" title="存储虚拟化架构"></a>存储虚拟化架构</h2><p><img data-src="https://s4.ax1x.com/2022/01/25/7byHUS.png" alt="cunchujiagou"></p><blockquote><p>SAN :存储区域网络（Storage Area Network，简称SAN）采用网状通道（Fibre Channel ，简称FC，区别与Fiber Channel光纤通道）技术，通过FC交换机连接存储阵列和服务器主机，建立专用于数据存储的区域网络。适用对网络性能没有太大要求、但安全要求高的场景<br>NAS：NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。主打高性能，但数据安全较为欠缺</p></blockquote><p><img data-src="https://s4.ax1x.com/2022/01/25/7b6FC4.png" alt="cunchujiagou02"></p><ul><li>FusionSphere存储虚拟化平台主要由文件系统、磁盘驱动和磁盘工具组成。SAN设备和本地磁盘等块设备连接到服务器上后，经过设备驱动层和通用块层后，对主机呈现一个磁盘设备。</li><li>文件系统建立在主机能够访问的存储设备上，创建文件系统的过程就是主机对存储设备执行格式化，在存储设备上写入文件系统的元数据和inode信息，建立文件到裸设备块的映射，并负责裸设备块的管理，包括空间分配和释放。 ==对于虚拟化来说，文件系统屏蔽了块层的操作，提供了文件级的抽象操作。虚拟机磁盘就是放在文件系统中的文件。==</li><li>虚拟机磁盘在使用时，需要由磁盘驱动挂载给虚拟机，并通过QEMU管理起来，用户虚拟机的所有读写IO都会由前端驱动截获，转发给QEMU进程，并转换为用户态驱动的读写操作，最终写入磁盘文件中。</li><li>虚拟机磁盘中包含了属性信息和数据区域，磁盘工具提供了一系列对虚拟机磁盘的操作，可以解析磁盘文件的文件头，读取或修改磁盘的属性信息，创建磁盘的数据区等操作。</li></ul><h2 id="VIMS虚拟集群存储文件系统"><a href="#VIMS虚拟集群存储文件系统" class="headerlink" title="VIMS虚拟集群存储文件系统"></a>VIMS虚拟集群存储文件系统</h2><blockquote><p>VIMS是一种高性能的集群文件系统，使虚拟化技术的应用超出了单个存储系统的限制，可让多个虚拟机共同访问一个整合的集群式存储池，从而显著提高了资源利用率。VIMS 是跨越多个存储服务器实现虚拟化的基础，它可启用存储热迁移、DRS（Storage Dynamic Resource Scheduler） 和High Availability 等各种服务。</p></blockquote><p><img data-src="https://s4.ax1x.com/2022/01/25/7b6EvR.png" alt="vircoutfile"></p><h3 id="VIMS分布式锁"><a href="#VIMS分布式锁" class="headerlink" title="VIMS分布式锁"></a>VIMS分布式锁</h3><ul><li>一个VIMS卷同时被多个CNA节点挂载，因此每个CNA节点都可以访问VIMS卷上的文件。为保证多节点读写同一文件的数据一致性，VIMS需要实现分布式文件锁。VIMS的DLM（Distribute lock manager）模块负责实现分布式文件锁，它提供集群概念上的锁服务，调用者通过DLM保证集群间的同步要求。</li></ul><h3 id="VIMS心跳"><a href="#VIMS心跳" class="headerlink" title="VIMS心跳"></a>VIMS心跳</h3><ul><li>VIMS存在两种心跳，磁盘心跳用于检测主机是否可以正常读写共享存储，网络心跳用于检测主机间网络通信是否正常。作为集群文件系统，挂载了VIMS卷的CNA节点从来都不是单独的个体，作为集群节点成员之一，通过网络心跳确保与其它节点进行正常的网络通信。</li></ul><h2 id="FC磁盘技术"><a href="#FC磁盘技术" class="headerlink" title="FC磁盘技术"></a>FC磁盘技术</h2><h3 id="普通磁盘"><a href="#普通磁盘" class="headerlink" title="普通磁盘"></a>普通磁盘</h3><blockquote><p>普通磁盘创建时大小与虚拟磁盘大小相同，并将文件所有位置填0，占用空间较大，置备时间较长<br>该磁盘创建所需时间会比创建其他类型的磁盘长,能够提供最好的性能体验和数据安全性</p></blockquote><ul><li>即写多少，分配多少</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/25/7b6ZK1.png" alt="ptcp"></p><h3 id="普通延时置零磁盘"><a href="#普通延时置零磁盘" class="headerlink" title="普通延时置零磁盘"></a>普通延时置零磁盘</h3><blockquote><p>普通延迟置零卷创建时大小与虚拟磁盘大小相同，但不会进行填0操作，占用空间较大，置备时间较普通卷短<br>普通延迟置零磁盘创建很快，创建时进行全空间分配，但未进行全置零动作，性能较普通磁盘有所下降。适用于对发放速度要求高的场景</p></blockquote><ul><li>比普通磁盘多了置零动作</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/25/7b6uVK.png" alt="ptyszlcp"></p><h3 id="精简磁盘"><a href="#精简磁盘" class="headerlink" title="精简磁盘"></a>精简磁盘</h3><blockquote><p>精简磁盘创建时大小为0，精简磁盘创建时含少量元数据信息，大小一般为几十K，创建时间均非常短。随着用户写入数据，精简磁盘的大小与实际占用空间将逐步增加<br>该磁盘用于FusionSphere系统中的精简磁盘，可以提高存储设备的利用率。精简磁盘使用动态磁盘技术，可以节省存储空间。该磁盘在创建时不进行空间分配，而是在用户IO写入磁盘文件时才进行空间动态分配，性能较普通磁盘有所下降。适用于用户对存储需求不明确，或是规划的容量比实际使用的容量多的场景</p></blockquote><ul><li>按需分配，要多少拿多少</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/25/7b6M5D.png" alt="jjcp"></p><h3 id="差分磁盘"><a href="#差分磁盘" class="headerlink" title="差分磁盘"></a>差分磁盘</h3><blockquote><p>差分磁盘必须基于一个已有的父磁盘来创建，它只记录相对于父磁盘的差异数据，包括数据的增改，差分磁盘不能脱离父磁盘而存在，如果父磁盘进行了修改，则差分磁盘的数据将不再可用。<br>对差分磁盘进行读操作，会首先读取差分磁盘中的数据区域，如果不存在，则表示该数据区域未被修改，则通过文件头的索引找到父磁盘，在对该区域进行读取。对差分磁盘进行写操作时，则直接写在差分磁盘上。<br>差分磁盘的结构和动态磁盘完全一致，文件头中会记录父磁盘的路径，数据区只记录和父磁盘差异数据，大小也会随着数据的写入而自动增长。</p></blockquote><p><img data-src="https://s4.ax1x.com/2022/01/25/7b632d.png" alt="cfcp"></p><h2 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h2><blockquote><p>虚拟机可以将当前状态保存在快照文件中，包括磁盘内容、内存和寄存器数据。用户可以通过恢复快照多次回到这一状态，虚拟机用户在执行一些重大、高危操作前，例如系统补丁，升级，破坏性测试前执行快照，可以用于故障时的快速还原。<br>FusionCompute支持普通快照、一致性快照以及内存快照。</p></blockquote><h3 id="创建快照"><a href="#创建快照" class="headerlink" title="创建快照"></a>创建快照</h3><p><img data-src="https://s4.ax1x.com/2022/01/25/7b68xA.png" alt="cjkz"></p><h3 id="回滚快照"><a href="#回滚快照" class="headerlink" title="回滚快照"></a>回滚快照</h3><p><img data-src="https://s4.ax1x.com/2022/01/25/7b6JKI.png" alt="hgkz"></p><h3 id="删除快照"><a href="#删除快照" class="headerlink" title="删除快照"></a>删除快照</h3><p><img data-src="https://s4.ax1x.com/2022/01/25/7b6UVf.png" alt="sckz"></p><h2 id="链接克隆"><a href="#链接克隆" class="headerlink" title="链接克隆"></a>链接克隆</h2><blockquote><p>链接克隆虚拟机可以基于同一个虚拟机模板，快速发放多个类似的虚拟机。通过对虚拟机模板的系统卷创建多个差分磁盘，将每个差分磁盘挂载给独立的虚拟机。应用于需要大量发放拥有相同或类似数据的虚拟机，且对性能要求不高。<br>在链接克隆场景下，将若干链接克隆虚拟机的共同模板中的热点数据放在主机内存中，达到快速读取的目的，能够极大提升虚拟机的启动和运行速度。</p></blockquote><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p><img data-src="https://s4.ax1x.com/2022/01/25/7b60Pg.png" alt="sxyl"></p><h2 id="存储热迁移"><a href="#存储热迁移" class="headerlink" title="存储热迁移"></a>存储热迁移</h2><blockquote><p>FusionSphere提供了虚拟机磁盘的冷迁移和热迁移，冷迁移是在虚拟机关机时候，将其磁盘文件从一个存储移动到另一个存储，热迁移可以在不中断业务的前提下，将虚拟机磁盘从一个存储迁移至另一个存储。</p></blockquote><ul><li>热迁移首先使用写时重定向，将虚拟机数据写入目的存储的一个差异磁盘，这样，原磁盘文件就变成只读的。</li><li>将源卷的所有的数据块依次读取出来并合并到目标端的差异磁盘中，等数据合并完成后，目的端的差分磁盘就拥有虚拟磁盘的所有最新数据。</li><li>去除目的端快照对源卷的依赖，将差分磁盘修改为动态磁盘，这样，目的端磁盘文件可以独立运行。</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/25/7b6rxs.png" alt="ccrqy"></p><h2 id="存储资源裸设备映射-RDM"><a href="#存储资源裸设备映射-RDM" class="headerlink" title="存储资源裸设备映射 (RDM)"></a>存储资源裸设备映射 (RDM)</h2><blockquote><p>Raw Device Mapping绕过hvpervisor，物理裸设备映射(RDM)能够将虚拟机下发的SCSI命令直接透传，使得虚拟机中的业务能够直接操作物理SCSI设备，避免由于虚拟化层的模拟导致功能丢失。<br>不支持链接克隆、存储瘦分配、磁盘在线/离线扩容 、存储增量快照 、iCache 、存储热迁移、存储QoS、磁盘备份、虚拟机转为模板等</p></blockquote><ul><li>技术特点<ul><li>虚拟机直接通过SCSI命令操作裸存储设备</li><li>兼容FC光纤存储和IP SAN存储</li><li>适用于需要高性能存储的应用，比如Oracle RAC<h2 id="存储扩容原理"><a href="#存储扩容原理" class="headerlink" title="存储扩容原理"></a>存储扩容原理</h2><blockquote><p>当需要扩容时，先在主节点上将新增的存储空间以线性映射的方式追加至虚拟块设备末尾，完成虚拟块设备的扩容后，再将新增的存储空间分成数段逐渐增加至文件系统 (更新文件系统中的元数据)，主节点完成数据存储的扩容。由于虚拟块设备的信息都是保存在节点内存中，则当其它节点发现数据存储空间有变化时，则需要更新虚拟块设备信息，完成扩容虚拟块设备。</p></blockquote></li></ul></li></ul><p><img data-src="https://s4.ax1x.com/2022/01/25/7b66rq.png" alt="cckr"></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FusionSphere架构</title>
      <link href="/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/FusionSphere%E6%9E%B6%E6%9E%84/"/>
      <url>/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/FusionSphere%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="FusionSphere虚拟化套件"><a href="#FusionSphere虚拟化套件" class="headerlink" title="FusionSphere虚拟化套件"></a>FusionSphere虚拟化套件</h2><blockquote><p>前面讲到，虚拟化是云计算的基础，但虚拟化不等于云计算，所有的云软件都要借助虚拟化才能实现</p></blockquote><ul><li>关于FusionSphere：<ul><li>华为FusionSphere虚拟化套件是业界领先的虚拟化解决方案，能够帮助客户带来如下的价值，从而大幅提升数据中心基础设施的效率。</li><li>定位特点：简化管理，优质性能</li><li>管理方面，支持多站点统一管理；支持跨地域容灾，保障业务连续性；支持物理机、第三方平台迁移</li><li>性能方面，包含大规格虚拟机；采用KVM引擎；支持多款显卡直通和虚拟化（GPU增强）；支持OVS+DPDK网络调优</li></ul></li></ul><h2 id="FusionSphere虚拟化组件构成"><a href="#FusionSphere虚拟化组件构成" class="headerlink" title="FusionSphere虚拟化组件构成"></a>FusionSphere虚拟化组件构成</h2><p><img data-src="https://s4.ax1x.com/2022/01/25/7bs2yq.png" alt="fspherecombat"></p><h2 id="FusionSphere服务器虚拟化架构"><a href="#FusionSphere服务器虚拟化架构" class="headerlink" title="FusionSphere服务器虚拟化架构"></a>FusionSphere服务器虚拟化架构</h2><p><img data-src="https://s4.ax1x.com/2022/01/25/7bsoY4.png" alt="fsphereserve"></p><blockquote><p>服务器虚拟化产品（FusionCompute）、虚拟化管理软件（FusionManager）、备份软件（eBackup ）和容灾软件（UltraVR）组成。主要实现硬件资源的虚拟化，以及对虚拟资源集中管理，提供基础备份、容灾，轻量级运营，云基础服务，性能管理等能力。</p></blockquote><ul><li>FusionCompute：提供对x86物理服务器，SAN设备的虚拟化能力，并提供软件定义网络基础能力。</li><li>FusionManager：使用FusionCompute能力，并集成防火墙，负载均衡器等的自动化管理能力，提供企业级和运营级的虚拟数据中心管理方案。</li><li>UltraVR： 提供跨站点容灾能力。</li><li>eBackup： 提供虚拟机的备份能力。</li></ul><ul><li><strong>组件说明：</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">组件</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Fusion Compute</td><td style="text-align:center">必选组件 &lt;/br&gt; Fusion Compute是 ==云操作系统软件== ，主要负责硬件资源的虚拟化，以及对虚拟资源、业务资源、用户资源的集中管理。通过统一的接囗，对这些虚拟资源进行集中调度和管理，从而降低业务的运行成本，保证系统的安全性和可靠性，协助运营商和企业构筑安全、绿色、节能的云数据中心能力。</td></tr><tr><td style="text-align:center">Fusion Manager</td><td style="text-align:center">可选组件 &lt;/br&gt; Fusion Manager主要 ==对云计算的软件和硬件进行全面的监控和管理== ，实现同构，异构VMware虚拟化多资源池管理，软硬件统一告警监控，并向内部运维管理人员提供管理门户</td></tr><tr><td style="text-align:center">eBackup</td><td style="text-align:center">可选组件 &lt;/br&gt; eBackup是虚拟化备份软件，配合Fusion Compute快照功能和CBT(Changed Block Tracking)备份功能实现Fusion Sphere的虚拟机数据备份方案。</td></tr><tr><td style="text-align:center">UltraVR</td><td style="text-align:center">可选组件 &lt;/br&gt; UltraVR是容灾业务管理软件，利用底层SAN存储系统提供的异步远程复制特性，提供虚拟机关腱数据的数据保护和容灾恢复。</td></tr></tbody></table></div><h2 id="FusionSphere应用场景"><a href="#FusionSphere应用场景" class="headerlink" title="FusionSphere应用场景"></a>FusionSphere应用场景</h2><ul><li>单虚拟化场景<ul><li>只采用FusionCompute作为统一的操作维护管理平台对整个系统进行操作与维护的应用场景</li></ul></li><li>多虚拟化场景<ul><li>多套虚拟化环境需要进行统一管理<ul><li>统一管理和维护：支持同时接入FusionCompute和VMware虚拟化环境，对多虚拟化环境的资源和业务进行统一的管理和维护。</li><li>统一监控告警：支持对多个虚拟化环境、多种物理设备的告警进行统一接入、监控和管理。</li></ul></li></ul></li><li>私有云场景<ul><li>多租户共享VPC场景</li><li>多租户私有VPC场景</li></ul></li></ul><h2 id="FusionSphere在整个华为云计算体系的定位"><a href="#FusionSphere在整个华为云计算体系的定位" class="headerlink" title="FusionSphere在整个华为云计算体系的定位"></a>FusionSphere在整个华为云计算体系的定位</h2><p><img data-src="https://s4.ax1x.com/2022/01/25/7byM1s.png" alt="fspherestand"></p><h2 id="FusionCompute架构"><a href="#FusionCompute架构" class="headerlink" title="FusionCompute架构"></a>FusionCompute架构</h2><p><img data-src="https://s4.ax1x.com/2022/01/25/7by8BV.png" alt="fcomputeking"></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fusion Compute安装</title>
      <link href="/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/Fusion%20Compute%E5%AE%89%E8%A3%85/"/>
      <url>/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/Fusion%20Compute%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li>PC机<ol><li>关闭防火墙</li><li>特定版本的浏览器。</li><li>Java7的届件安装，需要调整Java安全级别为最低。</li><li>实现PC与物理服务器的通信</li></ol></li><li><p>服务器</p><ol><li>获取管理网卡IP地址。</li><li>配置RAlD，建议前面两张网卡去配置RAID1，剩余的磁盘建议针对每个磁盘做RAID0。</li></ol></li><li><p>网络规划：</p><ol><li>CNA：192.168.22.130</li><li>VRM：192.168.1.107</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算虚拟化简介</title>
      <link href="/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/%E8%AE%A1%E7%AE%97%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
      <url>/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/%E8%AE%A1%E7%AE%97%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="何为虚拟化？"><a href="#何为虚拟化？" class="headerlink" title="何为虚拟化？"></a>何为虚拟化？</h2><blockquote><ul><li>虚拟化技术不等于云计算，云计算的实现不一定需要虚拟化，但虚拟化在IaaS中起着非常重要的作用（裸金属服务器）</li><li>裸金属服务器，又不仅限于物理服务器，它是物理服务器和云服务的结合。</li><li>“裸金属”，意味它不包括相应的操作系统和软件，这个是客户后期自选配置的。大部分云服务提供商的裸金属服务器产品，不提供本地硬盘（可以支持），主要提供CPU和内存。</li></ul></blockquote><ul><li>虚拟化是云计算基础，针对云计算能够提供不仅仅是IaaS服务PaaS和SaaS的大部分服务都是基于IaaS服务建立的</li></ul><h2 id="虚拟机如何创建？"><a href="#虚拟机如何创建？" class="headerlink" title="虚拟机如何创建？"></a>虚拟机如何创建？</h2><ul><li>虚拟机通过物理CPU的虚拟化技术，分配给虚拟机以资源，通过操作系统控制，形成虚拟机</li><li>或者通过虚拟化软件在实机的基础上建立</li></ul><h2 id="为什么要使用虚拟化"><a href="#为什么要使用虚拟化" class="headerlink" title="为什么要使用虚拟化"></a>为什么要使用虚拟化</h2><ul><li>使用虚拟化技术可以提高资源的利用率，实现软硬件的解耦</li><li>虚拟化的本质是将原来的的物理设备逻辑化</li><li>未使用虚拟化的软硬件是高耦合的，同一时刻只能运行一个OS，且硬件与OS比例1:1，并且硬件资源是独立的</li><li>使用虚拟化，可以实现软硬件解耦，同一时刻可以运行多个OS，且硬件与OS比例1:n，并且硬件资源是共享的</li></ul><h2 id="常见的虚拟化"><a href="#常见的虚拟化" class="headerlink" title="常见的虚拟化"></a>常见的虚拟化</h2><ul><li><p>开源：</p><ul><li>KVM、XEN</li></ul></li><li><p>闭源：</p><ul><li>Hyper-V、VMware、Fusion Sphere</li></ul></li></ul><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li>Guest OS ：虚拟机OS</li><li>Guest Machine ：虚拟处理的虚拟机</li><li>Hypervisor ：虚拟化监控机</li><li>Host OS ：运行在物理机上的OS</li><li>Host Machine ： 物理机</li></ul><h2 id="虚拟化架构"><a href="#虚拟化架构" class="headerlink" title="虚拟化架构"></a>虚拟化架构</h2><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">寄居虚拟化</th><th style="text-align:center">裸金属虚拟化</th><th style="text-align:center">操作系统虚拟化</th><th style="text-align:center">混合虚拟化</th></tr></thead><tbody><tr><td style="text-align:center">优点</td><td style="text-align:center">简单、易于实现</td><td style="text-align:center">虚拟机不依赖操作系统&lt;/br&gt;支持多种操作系统，多种应用</td><td style="text-align:center">简单、易于实现&lt;/br&gt;管理开销非常低</td><td style="text-align:center">相对于寄居虚拟化价格，没有冗余，性能高&lt;/br&gt;可支持多种操作系统</td></tr><tr><td style="text-align:center">缺点</td><td style="text-align:center">安装和运行应用程序依赖于主机操作系统对设备的支持&lt;/br&gt;管理开销较大，性能损耗大</td><td style="text-align:center">虚拟层内核开发难度大</td><td style="text-align:center">隔离性差，多容器共享同一操作系统</td><td style="text-align:center">需底层硬件支持虚拟化扩展功能</td></tr><tr><td style="text-align:center">厂家</td><td style="text-align:center">VMware Work</td><td style="text-align:center">VMware ESXServer&lt;/br&gt;Citrix XenServer&lt;/br&gt;Fusion Sphere</td><td style="text-align:center">Virtuozzo</td><td style="text-align:center">Redhat KVM</td></tr></tbody></table></div><p><img data-src="https://s4.ax1x.com/2022/01/19/7swXCV.png" alt="virtual frame"></p><h3 id="根据hypervisor的位置不同"><a href="#根据hypervisor的位置不同" class="headerlink" title="根据hypervisor的位置不同"></a>根据hypervisor的位置不同</h3><p><img data-src="https://s4.ax1x.com/2022/01/19/7swj3T.png" alt="classicforvir"></p><ul><li><strong>1型虚拟化</strong> 。Hypervisor直接安装在物理机上，多个虚拟机在Hypervisor运行。Hypervisor实现方式一般是一个特殊定制的Linux系统。Xen和VMWare的ESXi都属于这个类型。</li><li><strong>2型虚拟化</strong> 。物理机上首先安装常规的操作系统，比如Redhat、Ubuntu和Windows.Hypervisor作为OS上的一个程序模块运行，并对管理虚拟机进行管理。KVM、VirtualBox和VMWareWorkstation都属于这个类型。</li></ul><blockquote><p>理论上讲：</p><ul><li>1型虚拟化一般对硬件虚拟化功能进行了特别优化，性能上比2型要高。<br>KVM注重性能，XEN注重安全性，针对应用的访问路径开销，KVM比XEN要短</li><li>2型虚拟化因为基于普通的操作系统，会比较灵活，比如支持虚拟机嵌套。嵌套意味着可以在KVM虚拟机中再运行KVM</li></ul></blockquote><h3 id="Hypervisor作用"><a href="#Hypervisor作用" class="headerlink" title="Hypervisor作用"></a>Hypervisor作用</h3><ol><li>识别、捕获和响应虚拟机所发出的CPU特权指令或保护指令</li><li>负责处理虚拟机队列和调度，并将物理硬件的处理结果返回给相应的虚拟机。</li><li>VMM承担管理资源的重任，其还需向上提供拟机VM用于运行Guest OS，因此VMM还负责虚拟环境的创建和管理。</li></ol><h2 id="CPU虚拟化"><a href="#CPU虚拟化" class="headerlink" title="CPU虚拟化"></a>CPU虚拟化</h2><p><img data-src="https://s4.ax1x.com/2022/01/19/7swvgU.png" alt="cpuvir"></p><blockquote><p>Ring0的权限可以直接操作硬件，一般只有操作系统和驱动会允许拥有此权限；Ring3的权限最低，所有的程序都可以拥有此权限，一些危险指令只能通过OS调用执行</p></blockquote><ul><li><strong>指令类别：</strong><ul><li>特权指令：操作与管理关键系统资源指令，在Ring0级别上运行</li><li>普通指令：CPU普通权限级别即可运行，即Ring3</li><li>敏感指令：修改虚拟机运行模式或宿主机状态的指令，即将Guest OS在Ring0运行的指令夺权，交由VMM执行</li></ul></li></ul><blockquote><p>可以说，Ring0就是我们常说的内核态，Ring3就是我们常说的用户态</p></blockquote><h2 id="计算虚拟化原理"><a href="#计算虚拟化原理" class="headerlink" title="计算虚拟化原理"></a>计算虚拟化原理</h2><h3 id="CPU虚拟化原理"><a href="#CPU虚拟化原理" class="headerlink" title="CPU虚拟化原理"></a>CPU虚拟化原理</h3><ul><li>对于原生操作系统与CPU的管理关系：<ul><li>CPU资源永远就绪</li><li>OS对CPU具有最高权限</li></ul></li></ul><blockquote><p>但引入虚拟化后，出现：<br>多个虚拟机之间共享CPU资源<br>部分指令只能通过hypervisor的权限使用</p></blockquote><h3 id="内存虚拟化原理"><a href="#内存虚拟化原理" class="headerlink" title="内存虚拟化原理"></a>内存虚拟化原理</h3><ul><li>对于原生操作系统与CPU的管理关系：<ul><li>内存都从物理地址0开始</li><li>内存都连续</li></ul></li></ul><blockquote><p>但引入虚拟化后，出现：<br>物理地址0只有一个，无法同时满足所有客户机从0开始的需求<br>分配连续物理地址会使内存使用率降低，灵活性降低</p></blockquote><p><img data-src="https://s4.ax1x.com/2022/01/19/7swxvF.png" alt="castvir"></p><ul><li>通过Hypervisor把操作系统的内存分为虚拟机侧和物理机侧，从虚拟机侧看，每个独立的虚拟机的内存物理地址都是从0开始的，但从物理机侧看，所有虚拟机的物理内存地址整合在一起却只有一个0物理地址，只是Hypervisor在其中把每个虚拟机所要的物理地址0虚拟化了，让各个虚拟机的内存物理地址逻辑上是从0开始的，但物理上却并非如此</li></ul><h3 id="I-O虚拟化原理"><a href="#I-O虚拟化原理" class="headerlink" title="I/O虚拟化原理"></a>I/O虚拟化原理</h3><blockquote><ul><li>现实中的外设资源是有限的，为满足客户机操作系统的需求，VMM必须通过I/O虚拟化的方式来复用有限的外设资源</li><li>解决方法：全虚拟化、半虚拟化、硬件虚拟化</li></ul></blockquote><h2 id="XEN-与-KVM"><a href="#XEN-与-KVM" class="headerlink" title="XEN 与 KVM"></a>XEN 与 KVM</h2><ul><li>XEN架构：本身去充当VMM，只能够区实现CPU虚拟化、内存的虚拟化</li><li>Domain0：基于XEN架构下最先启动的一台特权虚拟机，能够直接去管理和使用底层硬件的IO设备，并且去划分虚拟IO硬件设备给虚拟机来去使用，同时能够去管理普通的虚拟机，配合前后端驱动模型去实现IO半虚拟化</li><li>DomainU：普通的虚拟机</li><li>KVM：利用宿主机操作系统的内核去充当Hypervisor，能够实现CPU和内存虚拟化，需要配合QEMU模块实现IO虚拟化；在KVM中称之为QEMU-KVM，提高使用IOCTL（操作系统的函数调用），在/dev/kvm接口配置VM的IP，实现IO虚拟化</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">XEN</th><th style="text-align:center">KVM</th></tr></thead><tbody><tr><td style="text-align:center">虚拟化类型</td><td style="text-align:center">I型虚拟化</td><td style="text-align:center">II型虚拟化</td></tr><tr><td style="text-align:center">实现方式</td><td style="text-align:center">提高Domain0实现IO虚拟化</td><td style="text-align:center">借助QEMU实现IO虚拟化</td></tr><tr><td style="text-align:center">逻辑架构区别</td><td style="text-align:center">包括XEN VMM,&lt;/br&gt;Domain0&lt;/br&gt;DomainU</td><td style="text-align:center">包括KVM内核模块&lt;/br&gt;QEMU&lt;/br&gt;Libvrit,API管理工具</td></tr></tbody></table></div><blockquote><p>Libvirt是用于管理虚拟化平台的开源的API，后台程序和管理工具。它可以用于管理KVM、Xen、VMware ESX，QEMU和其他虚拟化技术。这些API在云计算的解决方案中广泛使用。</p></blockquote><p><img data-src="https://s4.ax1x.com/2022/01/19/7s09b9.png" alt="xenkvm"></p><h2 id="什么是KVM"><a href="#什么是KVM" class="headerlink" title="什么是KVM"></a>什么是KVM</h2><ul><li>基于内核的虚拟机 Kernel-based Virtual Machine（KVM）是一种内建于 Linux® 中的开源虚拟化技术。具体而言，KVM 可帮助您将 Linux 转变为虚拟机监控程序，使主机计算机能够运行多个隔离的虚拟环境，即虚拟客户机或虚拟机（VM）。</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/19/7s0PER.png" alt="kvmtixi"></p><h3 id="KVM运行模式"><a href="#KVM运行模式" class="headerlink" title="KVM运行模式"></a>KVM运行模式</h3><ol><li><strong>Guest Mode</strong> ：指虚拟机，包括CPU、内存磁盘等虚拟设备，置于一种受限的CPU模式下运行</li><li><strong>User Mode</strong> ：指用户空间。主要是QEMU，用来为虚拟机模拟执行I/O类的操作请求</li><li><strong>Kernel Mode</strong> ：指内核空间，可以真正的操作硬件</li></ol><h3 id="KVM-I-O默认状态"><a href="#KVM-I-O默认状态" class="headerlink" title="KVM I/O默认状态"></a>KVM I/O默认状态</h3><blockquote><p>默认状态下技术全虚拟化<br><img data-src="https://s4.ax1x.com/2022/01/19/7s0F4x.png" alt="kvmio"></p></blockquote><p>1、虚拟机中的磁盘设备发起一次I/O操作请求，<br>2、KVM模块中的I/O Trap Code（I/O捕获程序）将这个I/O操作请求捕获至刂进行相应的处理，然后将处理后的请求放到I/O共享页中；<br>3、KVM模块会涌知QEMU,告诉它有新的I/O操作请求放到了共享页中；<br>4、QEMU收到通知后，到共享页中获取该I/O操作请求的具体信息；<br>5、QEMU对该清求进行模拟，同时根据I/O操作请求的信息调用运行在内核态的设备驱动，去进行真正的I/O操作；<br>6、通过设备驱动去对硬件 ==执行真正的I/O操作== ；<br>7、QEMU将执行后的一返回到共享页中，同时通知KVM模块已完成了此次的I/O操作；<br>8、I/O捕获程序从共享页中将返回的结果读取出来；<br>9、I/O捕获程序将操作结果返回给虚拟机；<br>10、虚拟机的将结果返回给发起操作的应用程序。</p><h3 id="KVM-I-O操作——Virtio"><a href="#KVM-I-O操作——Virtio" class="headerlink" title="KVM I/O操作——Virtio"></a>KVM I/O操作——Virtio</h3><blockquote><p>引入Virtio，整个I/O操作流程就变成半虚拟化了<br><img data-src="https://s4.ax1x.com/2022/01/19/7s0E8K.png" alt="virtio"></p></blockquote><p>1、第一步也是由虚拟机发起I/O操作请求；<br>2、第二步的时候和使用默认模型不一样，这个I/O操作请求不会经过I/O捕获程序，而是直接以前后端的形式放到环形缓冲区，同时KVM模块涌知后端驱动；<br>3、QEMU到环形缓冲区获取到操作请求的具体信息；<br>4、后端驱动直接调用真实的物理设备驱动进行具体的I/O操作;<br>5、由真实的设备驱动完成此次操作;<br>6、QEMU将完成结果返回到环形缓冲区，并且由KVM模块通知前端驱动；<br>7、前端驱动从环形缓冲区获取到此次I/O操作的结果；<br>8、前端驱动将结果返回给具体发起该操作的应用程序。</p><blockquote><p>Virtio也存在着一些缺点，有些比较老的或者不常用的设备，无法使用，只能使用QEMU方式进行模拟。</p></blockquote><ul><li>整个Virtio包括前端驱动、vring和后端驱动组成。</li><li>引入Virtio，可以跳过KVM Module中介，直接把IO指令请求交由QEMU处理，并且通过vring获取到已处理的I/O指令，传回到操作系统中。</li><li>提升I/O访问的效率，降低I/O延迟。</li></ul><h2 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h2><h3 id="兼容行业特殊操作系统"><a href="#兼容行业特殊操作系统" class="headerlink" title="兼容行业特殊操作系统"></a>兼容行业特殊操作系统</h3><blockquote><p>Fusion Compute 兼容主流Windows和Linux操作系统</p></blockquote><h3 id="管理架构灵活"><a href="#管理架构灵活" class="headerlink" title="管理架构灵活"></a>管理架构灵活</h3><blockquote><p>各个逻辑集群支持128个物理机，最大支持3000个虚拟机，采用VRM主备结构，保证系统的可用性</p></blockquote><h3 id="支持GPU虚拟化、GPU直通"><a href="#支持GPU虚拟化、GPU直通" class="headerlink" title="支持GPU虚拟化、GPU直通"></a>支持GPU虚拟化、GPU直通</h3><blockquote><p>物理GPU在硬件支持虚拟机通过绑定GPU直接访问物理GPU的部分硬件资源</p></blockquote><h3 id="在线调整CPU和内存"><a href="#在线调整CPU和内存" class="headerlink" title="在线调整CPU和内存"></a>在线调整CPU和内存</h3><blockquote><p>vRAM ，vCPU 不仅支持离线添加/删除，支持在线添加<br>平台支持在虚拟机运行情况下调整CPU和内存规格，虚拟机不需要重启即可生效</p></blockquote><h3 id="主机内存超分配"><a href="#主机内存超分配" class="headerlink" title="主机内存超分配"></a>主机内存超分配</h3><blockquote><p>主机内存空间与VM内存空间不对应，可以超额把内存分给VM（内存复用技术）</p></blockquote><h3 id="内存复用"><a href="#内存复用" class="headerlink" title="内存复用"></a>内存复用</h3><p><img data-src="https://s4.ax1x.com/2022/01/25/7bywcR.png" alt="neicunfy"></p><h3 id="虚拟机HA（High-Availability）"><a href="#虚拟机HA（High-Availability）" class="headerlink" title="虚拟机HA（High Availability）"></a>虚拟机HA（High Availability）</h3><ul><li><p>虚拟机HA：</p><ul><li>当物理主机或者源VM故障时，会根据集群HA策略将宕掉的VM在正常工作的主机上开启，范围是集群内，HA有集群策略管控，HA是在VM宕机的时候进行VM恢复，要求使用共享存储，当VRM故障时，集群内所有CAN节点可以自治。（系统高可用性）</li></ul></li><li><p>虚拟机HA原理：</p><ul><li>VM故障或者物理节点故障</li><li>VRM查询VM状态，发现VM故障</li><li>VRM节点判断VM有HA特性，则根据保存的VM信息（规格，卷等信息）选择可用的CNA主机启动VM</li><li>CAN节点收到HA请求，根据VM规格，卷信息创建新的VM，启动过程中，将VM之前的卷重新挂载，包括用户卷</li></ul></li><li><p>HA自制：集群下主机通过选举一个主节点，来监控每个主机的状态并维护虚拟机列表；当主机发生故障时，主节点负责将故障节点上的虚拟机在其他主机上启动。</p></li></ul><h3 id="虚拟机热迁移"><a href="#虚拟机热迁移" class="headerlink" title="虚拟机热迁移"></a>虚拟机热迁移</h3><blockquote><p>基于内存压缩传输技术，虚拟机热迁移效率提升1倍。<br>虚拟机磁盘数据位置不变，只更改映射关系</p></blockquote><h3 id="动态资源调度"><a href="#动态资源调度" class="headerlink" title="动态资源调度"></a>动态资源调度</h3><blockquote><p>同一集群内，VM由系统根据策略自动负载均衡。<br>负载均衡算法优化，避免VM无效迁移。<br>DRS: Dynamic Resource Schedule，又称为计算资源调度自动化。FusionCompute的计算集群，配合基于VIMS文件系统的共享存储；DRS算法实时监控集群中每个计算节点的资源使用情况，引用VMOTION功能，智能迁移负荷高节点上虚拟机到资源充足的节点上；均衡各节点资源使用并保障业务有充足资源可用。因此，DRS是实现自动负载均衡的基础</p></blockquote><h3 id="DPM分布式电源管理"><a href="#DPM分布式电源管理" class="headerlink" title="DPM分布式电源管理"></a>DPM分布式电源管理</h3><blockquote><p>系统自动选择合适的物理机上下电，减小迁移VM数量。<br>保证小部分物理机处理休眠态，以快速满足新增业务所需资源。<br>电源管理自动化功能会周期性地检查集群中服务器的资源使用情况，如果集群中资源利用率不足，则会将多余的主机下电节能，下电前会将虚拟机迁移至其他主机；如果集群资源过度利用，则会将离线的主机上电，以增加集群资源，减轻主机的负荷。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fusion Compute简介</title>
      <link href="/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/Fusion%20Compute%E7%AE%80%E4%BB%8B/"/>
      <url>/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/Fusion%20Compute%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Fusion-Compute？"><a href="#什么是Fusion-Compute？" class="headerlink" title="什么是Fusion Compute？"></a>什么是Fusion Compute？</h2><ul><li>Fusion Compute是云操作系统软件，主要负责硬件资源的虚拟化，以及对虚拟资源、业务资源、用户资源的集中管理。它 ==采用虚拟计算、虚拟存储、虚拟网络等技术== ，完成计算资源、存储资源、网络资源的虚拟化。同时通过统一的接口， ==对这些虚拟资源进行集中调度和管理，从而降低业务的运行成本== ，保证系统的安全性和可靠性，协助运营商和企业构筑安全、绿色、节能的云数据中心能力。</li></ul><h2 id="组件之CNA与VRM"><a href="#组件之CNA与VRM" class="headerlink" title="组件之CNA与VRM"></a>组件之CNA与VRM</h2><ul><li>CNA：计算节点代理，能够实现硬件设备资源的池化。包括UVP和VNA<ul><li>UVP：统一的虚拟化平台，实现硬件资源的池化。</li><li>VNA：虚拟节点代理，能够实现CNA与VRM进行通信。（相当于一个中转站）</li></ul></li><li>VRM：虚拟集群管理模块。能够提供给管理员一个Web Portal界面，以及实现对整个系统资源管理、配置、日志、告警等等维护管理的功能。</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/22/7f40ZF.png" alt="fcjiagou"></p><p><img data-src="https://s4.ax1x.com/2022/01/22/7f4Ba4.png" alt="fczuoyong"></p><blockquote><p>CNA可以看做是一个主机（或是虚拟机），他负责调配本节点上的所有硬件资源，而VRM是一个统一管理所有主机的一个中间组件，当VRM宕机时，CNA不会受到影响，因为VRM起到的仅是管理主机的功能（VRM类似于一个虚拟化中心）</p></blockquote><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol><li><p>在计算虚拟化中，为虚拟机分配CPU和内存的是[]{.gap} 。 {.quiz}</p><ul><li>Guest OS  {.options}</li><li>VMM {.correct}</li><li>Hypervisor {.correct}</li><li>Host OS  {.options}<br>{.options}<blockquote><ul><li>VMM和HYpervisor其实是同一种组件的不同说法</li></ul></blockquote></li></ul></li><li><p>开源的虚拟化技术都为I型虚拟化，闭源的虚拟化技术都为II型虚拟化[]{.gap} 。 {.quiz}</p><ul><li>TRUE  {.options}</li><li>FALSE {.correct}<br>{.options}</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算简介</title>
      <link href="/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%AE%80%E4%BB%8B/"/>
      <url>/my-blog/%E4%BA%91%E8%AE%A1%E7%AE%97/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="云计算能做什么？"><a href="#云计算能做什么？" class="headerlink" title="云计算能做什么？"></a>云计算能做什么？</h2><ol><li>产生：通过云资源池，云服务器集群上获取云端资源</li><li>传输：通过网络链接，如DRS、ECS服务等</li><li>使用：网络前端页面、app控制</li></ol><ul><li>常见生活中的云计算：<ul><li>百度网盘</li><li>网易云音乐</li></ul></li></ul><h2 id="云计算优势"><a href="#云计算优势" class="headerlink" title="云计算优势"></a>云计算优势</h2><ol><li>按需自助服务</li><li>广泛网络接入</li><li>资源池化 （将同类的资源转化为资源池的形式，把所有资源分解到最小单位）</li><li>快速弹性伸缩 （快速指带宽网速；弹性指计算弹性，即CPU、内存资源的弹性分配；伸缩指初期服务与后期服务的伸缩，前期计算量少，后期逐步增大）</li><li>可计量服务（例如网盘内存扩容，除基础服务以外的服务额外收费）</li></ol><h2 id="云计算定义"><a href="#云计算定义" class="headerlink" title="云计算定义"></a>云计算定义</h2><blockquote><p>云计算是一种模型，它可以随时随地灵活地从可配置计算资源共享池中获取所需得到资源，资源能快速供应并释放，是管理资源的工作量与服务提供商的交互降低到最低限度<br>通俗来说，云计算是通过互联网可以使用足够强大的计算机为用户提供服务，这种服务的使用率可以使用统一的单位来描述</p></blockquote><h2 id="云计算的发展"><a href="#云计算的发展" class="headerlink" title="云计算的发展"></a>云计算的发展</h2><ul><li><p>step1:<strong>计算虚拟化</strong></p><ul><li>Hyper-v</li><li>XEN 、   KVM</li><li>VMware ESX<blockquote><p>虚拟化、更好的资源利用率</p></blockquote></li></ul></li><li><p>step2：<strong>软件定义与整合</strong></p><ul><li>OpenStack</li><li>VMware     AWS<blockquote><p>基础设施云化，资源服务标准化、自动化</p></blockquote></li></ul></li><li><p>step3：<strong>云原生与重构业务</strong></p><ul><li>Docker</li><li>CoreOS</li><li>Cloud Foundry<blockquote><p>应用云化，敏捷应用开发与生命周期管理</p></blockquote></li></ul></li></ul><h2 id="云计算部署模式"><a href="#云计算部署模式" class="headerlink" title="云计算部署模式"></a>云计算部署模式</h2><ul><li>大方向是 ==以企业防火墙为界限== ，在企业内部的称私有云，在企业外部的称公有云，两者兼具的称混合云</li><li>主要有建设者C和使用者U两个角色<ul><li>私有云：C等于U</li><li>公有云：C不等于U</li><li>行业云：C不完全等于U</li><li>混合云：私有+私有；私有+公有；公有+公有</li></ul></li></ul><p><img data-src="https://s4.ax1x.com/2022/01/15/7YafJ0.png" alt="deploymode"></p><h2 id="云计算的服务模式"><a href="#云计算的服务模式" class="headerlink" title="云计算的服务模式"></a>云计算的服务模式</h2><p><img data-src="https://s4.ax1x.com/2022/01/15/7YaXJx.png" alt="servicemode"></p><ul><li>IaaS：基础设施即服务，直接出租基础设施给用户来去使用，如ECS、EVS、OBS</li><li>PaaS：平台即服务，将IaaS打包出租给用户来去使用，比如数据库、中间件</li><li>SaaS：软件即服务，直接呈现给用户所去使用的一个应用程序，如OA办公系统</li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目录与文件管理</title>
      <link href="/my-blog/Linux/%E7%9B%AE%E5%BD%95%E4%B8%8E%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
      <url>/my-blog/Linux/%E7%9B%AE%E5%BD%95%E4%B8%8E%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="目录与路径"><a href="#目录与路径" class="headerlink" title="目录与路径"></a>目录与路径</h1><h2 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h2><ul><li>绝对路径：路径的写法“一定由根目录 / 写起”，例如： /usr/share/doc 这个目录。</li><li>相对路径：路径的写法“不是由 / 写起”，例如由 /usr/share/doc 要到 /usr/share/man 下面时，可以写成： <code>cd ../man</code>这就是相对路径的写法啦！相对路径意指“相对于目前工作目录的路径！”</li></ul><h2 id="目录相关操作"><a href="#目录相关操作" class="headerlink" title="目录相关操作"></a>目录相关操作</h2><ul><li><p><code>cd</code>：变换目录</p></li><li><p><code>pwd</code>：显示目前的目录</p></li><li><code>mkdir</code>：创建一个新的目录</li><li><code>rmdir</code>：删除一个空的目录</li></ul><h3 id="cd-变换目录"><a href="#cd-变换目录" class="headerlink" title="cd 变换目录"></a>cd 变换目录</h3><ul><li><code>cd ..</code>：回到上一层目录</li><li><code>cd ~</code>：回到主目录<br><img data-src="https://s4.ax1x.com/2022/01/09/7kcYin.png" alt="cd"></li></ul><h3 id="pwd-显示当前所在目录"><a href="#pwd-显示当前所在目录" class="headerlink" title="pwd 显示当前所在目录"></a>pwd 显示当前所在目录</h3><ul><li><code>pwd</code>是Print Working Directory的缩写，也就是显示目前所在目录的指令<br><img data-src="https://s4.ax1x.com/2022/01/09/7kgEOU.png" alt="pwd"></li></ul><h3 id="mkdir-创建新目录"><a href="#mkdir-创建新目录" class="headerlink" title="mkdir 创建新目录"></a>mkdir 创建新目录</h3><blockquote><p>注意使用该命令后带不带<code>-p</code>的区别</p></blockquote><p><img data-src="https://s4.ax1x.com/2022/01/09/7kcXy8.png" alt="mkdir"></p><h3 id="rmdir-删除空目录"><a href="#rmdir-删除空目录" class="headerlink" title="rmdir 删除空目录"></a>rmdir 删除空目录</h3><blockquote><p>注意使用该命令后带不带<code>-p</code>的区别</p></blockquote><p><img data-src="https://s4.ax1x.com/2022/01/09/7kgZmF.png" alt="rmdir"></p><h2 id="可执行文件路径的变量：-PATH"><a href="#可执行文件路径的变量：-PATH" class="headerlink" title="可执行文件路径的变量： $PATH"></a>可执行文件路径的变量： $PATH</h2><p><img data-src="https://s4.ax1x.com/2022/01/09/7kgMf1.png" alt="path"></p><ul><li>PATH（一定是大写）这个变量的内容是由一堆目录所组成的，每个目录中间用冒号（:）来隔<br>开， 每个目录是有“顺序”之分的。仔细看一下上面的输出，你可以发现到无论是root还是dmtsai都有 /bin 或 /usr/bin 这个目录在PATH变量内，所以当然就能够在任何地方执行ls来找到/bin/ls可执行文件啰！因为 /bin 在 CentOS 7 当中，就是链接到 /usr/bin 去的！ 所以这两个目录内容会一模一样</li></ul><h1 id="文件与目录管理"><a href="#文件与目录管理" class="headerlink" title="文件与目录管理"></a>文件与目录管理</h1><h2 id="ls-审查目录与文件"><a href="#ls-审查目录与文件" class="headerlink" title="ls 审查目录与文件"></a>ls 审查目录与文件</h2><p><img data-src="https://s4.ax1x.com/2022/01/09/7kglSx.png" alt="ls"></p><h2 id="cp、rm、mv-复制、删除与移动"><a href="#cp、rm、mv-复制、删除与移动" class="headerlink" title="cp、rm、mv 复制、删除与移动"></a>cp、rm、mv 复制、删除与移动</h2><ul><li>cp</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/09/7kgJmD.png" alt="cp"><br><img data-src="https://s4.ax1x.com/2022/01/09/7kgY0e.png" alt="cpa"></p><ul><li><p>rm<br><img data-src="https://s4.ax1x.com/2022/01/09/7kgv1x.png" alt="rm"></p></li><li><p>mv</p></li></ul><p><img data-src="https://s4.ax1x.com/2022/01/09/7k2pnO.png" alt="mv"></p><h2 id="取得路径的文件名称与目录名称"><a href="#取得路径的文件名称与目录名称" class="headerlink" title="取得路径的文件名称与目录名称"></a>取得路径的文件名称与目录名称</h2><ul><li><code>basename</code>与<code>dirname</code></li></ul><p><img data-src="https://s4.ax1x.com/2022/01/09/7k2ZgP.png" alt="basename"></p><h1 id="文件内容查阅"><a href="#文件内容查阅" class="headerlink" title="文件内容查阅"></a>文件内容查阅</h1><h2 id="直接查视"><a href="#直接查视" class="headerlink" title="直接查视"></a>直接查视</h2><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><ul><li><code>cat</code> 由第一行开始显示文件内容</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/10/7AjYee.png" alt="cat"></p><h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><ul><li><code>tac</code> 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/10/7AjwWt.png" alt="tac"></p><h3 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h3><ul><li><code>nl</code> 显示的时候，顺道输出行号！</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/10/7AjBSP.png" alt="nl"></p><h2 id="可翻页查视"><a href="#可翻页查视" class="headerlink" title="可翻页查视"></a>可翻页查视</h2><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><ul><li><code>more</code> 一页一页的显示文件内容</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/10/7AjsOS.png" alt="morea"><br><img data-src="https://s4.ax1x.com/2022/01/10/7AjWYn.png" alt="moreb"></p><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><ul><li><code>less</code> 与<code>more</code> 类似，但是比 more 更好的是，他可以往前翻页！</li></ul><h2 id="数据截取"><a href="#数据截取" class="headerlink" title="数据截取"></a>数据截取</h2><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><ul><li><code>head</code> 只看头几行</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/10/7AjfWq.png" alt="head"></p><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><ul><li><code>tail</code> 只看尾巴几行</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/10/7AjIyT.png" alt="tail"></p><h2 id="非纯文本文件-od"><a href="#非纯文本文件-od" class="headerlink" title="非纯文本文件: od"></a>非纯文本文件: od</h2><ul><li><code>od</code> 以二进制的方式读取文件内容！</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/10/7AjbTJ.png" alt="od"></p><h2 id="修改文件时间或创建新文件-touch"><a href="#修改文件时间或创建新文件-touch" class="headerlink" title="修改文件时间或创建新文件:touch"></a>修改文件时间或创建新文件:touch</h2><blockquote><p>[root@study ~]# touch [-acdmt] 文件<br>   选项与参数：<br>   -a ：仅修订 access time；<br>   -c ：仅修改文件的时间，若该文件不存在则不创建新文件；<br>   -d ：后面可以接欲修订的日期而不用目前的日期，也可以使用 —date=”日期或时间”<br>   -m ：仅修改 mtime ；<br>   -t ：后面可以接欲修订的时间而不用目前的时间，格式为[YYYYMMDDhhmm]</p></blockquote><h1 id="指令与文件的搜寻"><a href="#指令与文件的搜寻" class="headerlink" title="指令与文件的搜寻"></a>指令与文件的搜寻</h1><h2 id="指令文件名的搜寻"><a href="#指令文件名的搜寻" class="headerlink" title="指令文件名的搜寻"></a>指令文件名的搜寻</h2><ul><li><code>which</code>（寻找“可执行文件”）</li></ul><blockquote><p>[root@study ~]# which [-a] command<br>选项或参数：<br>-a ：将所有由 PATH 目录中可以找到的指令均列出，而不止第一个被找到的指令名称</p></blockquote><h2 id="文件文件名的搜寻"><a href="#文件文件名的搜寻" class="headerlink" title="文件文件名的搜寻"></a>文件文件名的搜寻</h2><ul><li><code>whereis</code> （由一些特定的目录中寻找文件文件名）</li></ul><blockquote><p>[root@study ~]# whereis [-bmsu] 文件或目录名<br>选项与参数：<br>-l :可以列出 whereis 会去查询的几个主要目录而已<br>-b :只找 binary 格式的文件<br>-m :只找在说明文档 manual 路径下的文件<br>-s :只找 source 来源文件<br>-u :搜寻不在上述三个项目当中的其他特殊文件</p></blockquote><ul><li><code>locate / updatedb</code></li></ul><blockquote><p>[root@study ~]# locate [-ir] keyword<br>选项与参数：<br>-i ：忽略大小写的差异；<br>-c ：不输出文件名，仅计算找到的文件数量<br>-l ：仅输出几行的意思，例如输出五行则是 -l 5<br>-S ：输出 locate 所使用的数据库文件的相关信息，包括该数据库纪录的文件/目录数量等<br>-r ：后面可接正则表达式的显示方式</p></blockquote><ul><li><code>find</code></li></ul><blockquote><p>[root@study ~]# find [PATH] [option] [action]<br>选项与参数：<br>1. 与时间有关的选项：共有 -atime, -ctime 与 -mtime ，以 -mtime 说明<br>-mtime n ：n 为数字，意义为在 n 天之前的“一天之内”被更动过内容的文件；<br>-mtime +n ：列出在 n 天之前（不含 n 天本身）被更动过内容的文件文件名；<br>-mtime -n ：列出在 n 天之内（含 n 天本身）被更动过内容的文件文件名。<br>-newer file ：file 为一个存在的文件，列出比 file 还要新的文件文件名<br>2. 与使用者或群组名称有关的参数：<br>-uid n ：n 为数字，这个数字是使用者的帐号 ID，亦即 UID ，这个 UID 是记录在<br>/etc/passwd 里面与帐号名称对应的数字。这方面我们会在第四篇介绍。<br>-gid n ：n 为数字，这个数字是群组名称的 ID，亦即 GID，这个 GID 记录在<br>/etc/group，相关的介绍我们会第四篇说明～<br>-user name ：name 为使用者帐号名称喔！例如 dmtsai<br>-group name：name 为群组名称喔，例如 users ；<br>-nouser ：寻找文件的拥有者不存在 /etc/passwd 的人！<br>-nogroup ：寻找文件的拥有群组不存在于 /etc/group 的文件！<br>当你自行安装软件时，很可能该软件的属性当中并没有文件拥有者，<br>这是可能的！在这个时候，就可以使用 -nouser 与 -nogroup 搜寻<br>3. 与文件权限及名称有关的参数：<br>-name filename：搜寻文件名称为 filename 的文件；<br>-size [+-]SIZE：搜寻比 SIZE 还要大（+）或小（-）的文件。这个 SIZE 的规格有：<br>c: 代表 Byte， k: 代表 1024Bytes。所以，要找比 50KB<br>还要大的文件，就是“ -size +50k ”<br>-type TYPE ：搜寻文件的类型为 TYPE 的，类型主要有：一般正规文件 （f）, 设备文件 （b, c）,<br>目录 （d）, 链接文件 （l）, socket （s）, 及 FIFO （p） 等属性。<br>-perm mode ：搜寻文件权限“刚好等于” mode 的文件，这个 mode 为类似 chmod<br>的属性值，举例来说， -rwsr-xr-x 的属性为 4755 ！<br>-perm -mode ：搜寻文件权限“必须要全部囊括 mode 的权限”的文件，举例来说，<br>我们要搜寻 -rwxr—r— ，亦即 0744 的文件，使用 -perm -0744，<br>当一个文件的权限为 -rwsr-xr-x ，亦即 4755 时，也会被列出来，<br>因为 -rwsr-xr-x 的属性已经囊括了 -rwxr—r— 的属性了。<br>-perm /mode ：搜寻文件权限“包含任一 mode 的权限”的文件，举例来说，我们搜寻<br>-rwxr-xr-x ，亦即 -perm /755 时，但一个文件属性为 -rw———-<br>也会被列出来，因为他有 -rw…. 的属性存在！<br>4. 额外可进行的动作：<br>-exec command ：command 为其他指令，-exec 后面可再接额外的指令来处理搜寻到的结果。<br>-print ：将结果打印到屏幕上，这个动作是默认动作！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件权限与目录管理</title>
      <link href="/my-blog/Linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/"/>
      <url>/my-blog/Linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="使用者和群组"><a href="#使用者和群组" class="headerlink" title="使用者和群组"></a>使用者和群组</h1><ul><li><strong>使用者</strong>。就是文件的拥有者，通过对文件权限的授予来划分使用者的类别，一些使用者对文件只有读或写的权限，而对于管理员则对文件既有只读和只写还有读写的权限，通过权限划分使用者，能让系统运行更为安全高效，对于某些用户起到隐私隔离的效果</li><li><strong>群组</strong>。即在同一个Group中的所有用户共享其文件，而每个组之间又相互独立，即各组的权限共享范围不一，所以当设置该用户在群组内的文件权限时，同一群组下的其他用户即可对该文件进行操作</li><li><strong>其他人</strong>。即others，是Linux系统中除了文件的拥有者、群组以外的用户称为others</li></ul><h1 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h1><h2 id="Linux-文件属性"><a href="#Linux-文件属性" class="headerlink" title="Linux 文件属性"></a>Linux 文件属性</h2><ul><li><p>通过在root用户下，终端执行<code>su -al</code>，显示以下文件信息：</p><p> <img data-src="https://s4.ax1x.com/2022/01/09/7FtNsP.png" alt="docfile"></p><ul><li>第一列为文件类型权限</li><li>第二列的数字为该文件的连接数，目录树就是通过该数字把文件链接起来的</li><li>第三列为文件的拥有者</li><li>第四列为文件所在群组</li><li>第五列为文件最后更改时间</li><li>第六列为文件名</li></ul></li><li><p><strong>文件类型与属性图</strong></p><p> <img data-src="https://s4.ax1x.com/2022/01/09/7FtdZ8.png" alt="quanxian"></p><ul><li><p>关于第一个字符含义：</p><p> ​    当为<code>[ d ]</code>则是目录，例如上表文件名为<code>.config</code>的那一行； </p><p> ​    当为<code>[ - ]</code>则是文件，例如上表文件名为<code>initial-setup-ks.cfg</code>那一行； </p><p> ​    若是<code>[ l ]</code>则表示为链接文件（link file）；</p><p> ​    若是<code>[ b ]</code>则表示为设备文件里面的可供储存的周边设备（可随机存取设备）； </p><p> ​    若是<code>[ c ]</code>则表示为设备文件里面的序列埠设备，例如键盘、鼠标（一次性读取设 备）</p></li><li><p>关于第2、3、4个字符含义（三个一组来解释）：</p><p> ​    以三个为一组，且均为<code>rwx</code>的三个参数的组合。其中，<code>[ r ]</code>代表可读 、<code>[ w ]</code>代表可写、<code>[ x ]</code>代表可执行。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号<code>[ - ]</code>而已。</p></li><li><p>后面5-7和8-10的含义与2、3、4一致，只是一个表示文件所在群的权限，一个是others的权限</p></li></ul></li></ul><h2 id="改变文件属性权限"><a href="#改变文件属性权限" class="headerlink" title="改变文件属性权限"></a>改变文件属性权限</h2><ul><li><code>chgrp</code> ：改变文件所属群组</li><li><code>chown</code> ：改变文件拥有者</li><li><code>chmod</code> ：改变文件的权限, SUID, SGID, SBIT等等的特性</li><li>改变所属群组, <code>chgrp</code></li></ul><h3 id="改变所属群组-chgrp"><a href="#改变所属群组-chgrp" class="headerlink" title="改变所属群组 chgrp"></a>改变所属群组 chgrp</h3><ul><li>例如： <code>chgrp users initial-setup-ks.cfg</code> 第二位为群组名 第三位为文件名</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/09/7FtsRs.png" alt="chgrpa"></p><p><img data-src="https://s4.ax1x.com/2022/01/09/7Ftyzn.png" alt="chgrpb"></p><h3 id="改变文件拥有者-chown"><a href="#改变文件拥有者-chown" class="headerlink" title="改变文件拥有者 chown"></a>改变文件拥有者 chown</h3><ul><li>例如： <code>chown bin initial-setup-ks.cfg</code> 第二位为文件拥有者名 第三位为文件名<br><img data-src="https://s4.ax1x.com/2022/01/09/7FtWZT.png" alt="chowna"></li></ul><h3 id="改变文件权限-chmod"><a href="#改变文件权限-chmod" class="headerlink" title="改变文件权限 chmod"></a>改变文件权限 chmod</h3><ul><li>例如： <code>chown 777 .bashrc</code> 第二位的三个数字分别代表(owner/group/others)的只读、只写、读写权限 第三位为文件名</li><li>关于权限位数：<ul><li>rwx，其中r=4（read），w=2（write），x=1（execute）</li><li><blockquote><p>owner = rwx = 4+2+1 = 7 &gt; group = rwx = 4+2+1 = 7 &gt; others= —- = 0+0+0 = 0</p></blockquote></li></ul></li></ul><p><img data-src="https://s4.ax1x.com/2022/01/09/7FtTzR.png" alt="chmoda"></p><ul><li>也可以用字符改变各种使用者<ul><li>u 代表user</li><li>g 代表group</li><li>o 代表others</li></ul></li><li>例如： <code>[root@study ~]# chmod u=rwx,go=rx .bashrc</code></li></ul><h3 id="目录文件权限意义"><a href="#目录文件权限意义" class="headerlink" title="目录文件权限意义"></a>目录文件权限意义</h3><h4 id="对文件而言"><a href="#对文件而言" class="headerlink" title="对文件而言"></a>对文件而言</h4><ul><li>r （read）：可读取此一文件的实际内容，如读取文本文件的文字内容等</li><li>w （write）：可以编辑、新增或者是修改该文件的内容（但不含删除该文件）</li><li>x （execute）：该文件具有可以被系统执行的权限</li></ul><h4 id="对目录而言"><a href="#对目录而言" class="headerlink" title="对目录而言"></a>对目录而言</h4><ul><li><p>r （read contents in directory）</p><ul><li>表示具有读取目录结构清单的权限，所以当你具有读取（r）一个目录的权限时，表示你可以查询该目录下的文件名数据。</li></ul></li><li><p>w （modify contents of directory）</p><ul><li>表示可以创建新的文件与目录；删除已经存在的文件与目录（不论该文件的权限为何！）将已存在的文件或目录进行更名；搬移该目录内的文件、目录位置。</li></ul></li><li><p>x （access directory）</p><ul><li>目录不可以被执行，目录的x代表的是使用者能否进入该目录成为工作目录的用途！所谓的工作目录（work directory）就是你目前所在的目录啦！举例来说，当你登陆Linux时，你所在的主文件夹就是你当下的工作目录。</li></ul></li></ul><h3 id="Linux文件种类"><a href="#Linux文件种类" class="headerlink" title="Linux文件种类"></a>Linux文件种类</h3><h4 id="正规文件"><a href="#正规文件" class="headerlink" title="正规文件"></a>正规文件</h4><blockquote><p>即是一般我们在进行存取的类型的文件，在由 <code>ls -al</code> 所显示出来的属性方面，第一个字符为[ - ]，例如 [-rwxrwxrwx ]</p></blockquote><ul><li>纯文本文件ASCII</li><li>二进制文件binary</li><li>数据格式文件data</li></ul><h4 id="目录directory"><a href="#目录directory" class="headerlink" title="目录directory"></a>目录directory</h4><h4 id="链接文件link-file"><a href="#链接文件link-file" class="headerlink" title="链接文件link file"></a>链接文件link file</h4><h4 id="设备与设备文件device"><a href="#设备与设备文件device" class="headerlink" title="设备与设备文件device"></a>设备与设备文件device</h4><ul><li>区块block</li><li>字符character<h4 id="数据接口文件socket"><a href="#数据接口文件socket" class="headerlink" title="数据接口文件socket"></a>数据接口文件socket</h4><h4 id="数据输送档"><a href="#数据输送档" class="headerlink" title="数据输送档"></a>数据输送档</h4></li></ul><h3 id="Linux扩展名"><a href="#Linux扩展名" class="headerlink" title="Linux扩展名"></a>Linux扩展名</h3><ul><li><code>*.sh</code> ： 脚本或批处理文件 （scripts），因为批处理文件为使用shell写成的，所以扩展名就编成 <code>.sh</code> ；</li><li><code>Z, .tar, .tar.gz, .zip, *.tgz</code>： 经过打包的压缩文件。这是因为压缩软件分别为 <code>gunzip, tar</code>等等的，由于不同的压缩软件，而取其相关的扩展名！</li><li><code>.html, .php</code>：网页相关文件，分别代表 HTML 语法与 PHP 语法的网页文件！ .html 的文件可使用网页浏览器来直接打开，至于 <code>.php</code> 的文件， 则可以通过 client 端的浏览器来server 端浏览，以得到运算后的网页结果！</li></ul><h1 id="Linux-目录配置"><a href="#Linux-目录配置" class="headerlink" title="Linux 目录配置"></a>Linux 目录配置</h1><ul><li>基本的三层目录<ul><li><code>/</code> （root, 根目录）：与开机系统有关；</li><li><code>/usr</code> （unix software resource）：与软件安装/执行有关；</li><li><code>/var</code>（variable）：与系统运行过程有关。</li></ul></li></ul><blockquote><p>所有的Linux目录配置都是基于FHS的，即文件系统继承标准Filesystem Hierarchy Standard</p></blockquote><h2 id="第一部分FHS（必须要存在的！！）"><a href="#第一部分FHS（必须要存在的！！）" class="headerlink" title="第一部分FHS（必须要存在的！！）"></a>第一部分FHS（必须要存在的！！）</h2><div class="table-container"><table><thead><tr><th style="text-align:center">目录</th><th style="text-align:center">放置内容</th></tr></thead><tbody><tr><td style="text-align:center"><strong>/bin</strong></td><td style="text-align:center">系统有很多 ==放置可执行文件的目录== ，但/bin比较特殊。因为/bin放置的是在单人维护模式下还能够被操作的指令。 在/bin下面的指令可以被root与一般帐号所使用，主要有：cat, chmod, chown, date, mv, mkdir, cp, bash等等常用的指令。</td></tr><tr><td style="text-align:center"><strong>/boot</strong></td><td style="text-align:center">这个目录主要在 ==放置开机会使用到的文件== ，包括Linux核心文件以及开机菜单与开机所需配置文件等等。 Linux kernel常用的文件名为：vmlinuz，如果使用的是grub2这个开机管理程序， 则还会存在/boot/grub2/这个目录喔！</td></tr><tr><td style="text-align:center"><strong>/dev</strong></td><td style="text-align:center">在Linux系统上，任何设备与周边设备都是以文件的型态存在于这个目录当中的。 比如重要的文件有/dev/null, /dev/zero, /dev/tty, /dev/loop, /dev/sd等等</td></tr><tr><td style="text-align:center"><strong>/etc</strong></td><td style="text-align:center">==系统主要的配置文件== 几乎都放置在这个目录内，例如人员的帐号密码档、各种服务的启始档等等。一般来说，这个目录下的各文件属性是可以让一般使用者查阅的， 但是只有root有权力修改。</td></tr><tr><td style="text-align:center"><strong>/lib</strong></td><td style="text-align:center">系统的函数库非常的多，而/lib放置的则是在 ==开机时会用到的函数库== ， 以及在/bin或/sbin下面的指令会调用的函数库而已。 什么是函数库呢？你可以将他想成是“外挂”，某些指令必须要有这些“外挂”才能够顺利完成程序的执行之意。</td></tr><tr><td style="text-align:center"><strong>/mnt</strong></td><td style="text-align:center">如果你想要 ==暂时挂载某些额外的设备== ，一般建议你可以放置到这个目录中。在古早时候，这个目录的用途与/media相同啦！只是有了/media之后，这个目录就用来暂时挂载用了</td></tr><tr><td style="text-align:center"><strong>/opt</strong></td><td style="text-align:center">这个是 ==给第三方协力软件放置的目录== 。什么是第三方协力软件啊？ 举例来说，KDE这个桌面管理系统是一个独立的计划，不过他可以安装到Linux系统中，因此KDE的软件就建议放置到此目录下了。 不过，以前的Linux系统中，我们还是习惯放置在/usr/local目录下呢！</td></tr><tr><td style="text-align:center">/srv</td><td style="text-align:center">srv可以视为“service”的缩写，是一些网络服务启动之后，这些服务所需要取用的数据目录。 常见的服务例如WWW, FTP等等。举例来说，WWW服务器需要的网页数据就可以放置在/srv/www/里面。 不过，系统的服务数据如果尚未要提供给网际网络任何人浏览的话，默认还是建议放置到 /var/lib下面即可。</td></tr><tr><td style="text-align:center">/tmp</td><td style="text-align:center">这是让一般使用者或者是 ==正在执行的程序暂时放置文件== 的地方。 这个目录是任何人都能够存取的，所以你需要定期的清理一下。当然，重要数据不可放置在此目录啊！ 因为FHS甚至建议在开机时，应该要将/tmp下的数据都删除唷！</td></tr><tr><td style="text-align:center">/home</td><td style="text-align:center">这是 ==系统默认的使用者主文件夹== （home directory）。在你新增一个一般使用者帐号时， 默认的使用者主文件夹都会规范到这里来。比较重要的是，主文件夹有两种代号喔：~：代表目前这个使用者的主文件夹 ~dmtsai ：则代表 dmtsai 的主文件夹！</td></tr><tr><td style="text-align:center">/root</td><td style="text-align:center">==系统管理员（root）的主文件夹== 。之所以放在这里，是因为如果进入单人维护模式而仅挂载根目录时， 该目录就能够拥有root的主文件夹，所以我们会希望root的主文件夹与根目录放置在同一个分区中。</td></tr></tbody></table></div><h2 id="usr-的意义与内容："><a href="#usr-的意义与内容：" class="headerlink" title="/usr 的意义与内容："></a>/usr 的意义与内容：</h2><ul><li>/usr里面放置的数据属于可分享的与不可变动的（shareable,static）， 如果你知道如何通过网络进行分区的挂载，那么/usr确实可以分享给区域网络内的其他主机来使用喔！其实usr是Unix Software Resource的缩写， 也就是“Unix操作系统软件资源”所放置的目录，而不是使用者的数据啦！这点要注意。 FHS建议所有软件开发者，应该将他们的数据合理的分别放置到这个目录下的次目录，而不要自行创建该软件自己独立的目录。因为是所有系统默认的软件（distribution发布者提供的软件）都会放置到/usr下面，因此这个目录有点类似Windows 系统的<code>C:\Windows\ （当中的一部份） + C:\Programfiles\</code>这两个目录的综合体，系统刚安装完毕时，这个目录会占用最多的硬盘容量</li></ul><h2 id="var-的意义与内容："><a href="#var-的意义与内容：" class="headerlink" title="/var 的意义与内容："></a>/var 的意义与内容：</h2><ul><li>如果/usr是安装时会占用较大硬盘容量的目录，那么/var就是在系统运行后才会渐渐占用硬盘容量的目录。 因为/var目录主要针对常态性变动的文件，包括高速缓存（cache）、登录文件（log file）以及某些软件运行所产生的文件， 包括程序文件（lock file, run file），或者例如MySQL数据库的文件等等</li></ul><h2 id="目录树"><a href="#目录树" class="headerlink" title="目录树"></a>目录树</h2><ul><li>目录树的启始点为根目录 （/, root）；</li><li>每一个目录不止能使用本地端的 partition 的文件系统，也可以使用网络上的 filesystem。举例来说， 可以利用 Network File System （NFS） 服务器挂载某特定目录等。</li><li>每一个文件在此目录树中的文件名（包含完整路径）都是独一无二的。</li></ul><p><img data-src="https://s4.ax1x.com/2022/01/09/7Ftbsx.png" alt="directorytree"></p><h2 id="绝对路径、相对路径"><a href="#绝对路径、相对路径" class="headerlink" title="绝对路径、相对路径"></a>绝对路径、相对路径</h2><ul><li>绝对路径：由根目录（/）开始写起的文件名或目录名称， 例如 <code>/home/dmtsai/.bashrc</code>；</li><li>相对路径：相对于目前路径的文件名写法。 例如 <code>./home/dmtsai</code> 或<code>../../home/dmtsai/</code>等等。反正开头不是 / 就属于相对路径的写法</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换清华源</title>
      <link href="/my-blog/Linux/%E6%9B%B4%E6%8D%A2%E6%B8%85%E5%8D%8E%E6%BA%90/"/>
      <url>/my-blog/Linux/%E6%9B%B4%E6%8D%A2%E6%B8%85%E5%8D%8E%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ul><li><code>rm -rf /etc/yum.repos.d/*</code>，删除 /etc/yum.repos.d/的所有文件</li><li>进入/etc/yum.repos.d：<code>cd /etc/yum.repos.d/</code>,使用<code>ls</code>查看该目录下所有文件，找到<code>CentOS-Base.repo</code>文件，没有则用<code>touch</code>创建文件</li><li>进入CentOS-Base.repo：<code>vi CentOS-Base.repo</code></li></ul><pre><code># CentOS-Base.repo## The mirror system uses the connecting IP address of the client and the# update status of each mirror to pick mirrors that are updated to and# geographically close to the client.  You should use this for CentOS updates# unless you are manually picking other mirrors.## If the mirrorlist= does not work for you, as a fall back you can try the# remarked out baseurl= line instead.##[base]name=CentOS-$releasever - Basebaseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/os/$basearch/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7#released updates[updates]name=CentOS-$releasever - Updatesbaseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/updates/$basearch/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7#additional packages that may be useful[extras]name=CentOS-$releasever - Extrasbaseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/extras/$basearch/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7#additional packages that extend functionality of existing packages[centosplus]name=CentOS-$releasever - Plusbaseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/centosplus/$basearch/gpgcheck=1enabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</code></pre><ul><li>改为以上的url路径</li><li>使用 <code>yum clean all</code>清理yum</li><li>使用<code>yum makecache</code></li><li>使用<code>yum update</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置及yum源问题</title>
      <link href="/my-blog/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%8F%8Ayum%E6%BA%90%E9%97%AE%E9%A2%98/"/>
      <url>/my-blog/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%8F%8Ayum%E6%BA%90%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="centOS7最小化安装后的网络配置"><a href="#centOS7最小化安装后的网络配置" class="headerlink" title="centOS7最小化安装后的网络配置"></a>centOS7最小化安装后的网络配置</h1><h2 id="配置基本的网络信息"><a href="#配置基本的网络信息" class="headerlink" title="配置基本的网络信息"></a>配置基本的网络信息</h2><ul><li>在安装程序的以太网配置中设置手动，添加如下信息<ul><li>ip地址</li><li>子网掩码</li><li>网关</li><li>DNS服务器</li></ul></li><li>设置本地localhost地址</li></ul><h2 id="安装net-tools"><a href="#安装net-tools" class="headerlink" title="安装net-tools"></a>安装net-tools</h2><blockquote><p>centOS 最小化安装默认没有yum 、ifconfig等常用命令，需要安装net-tools启用</p></blockquote><ol><li>首先输入id与pwd登录终端</li><li>终端输入以下命令：<ul><li><code>cd  /etc/sysconfig/network-scripts</code></li><li><code>vi ifcfg-ens33</code></li></ul></li><li>进入ifcfg配置文件后，将<code>ONBOOT=no</code>改为<code>ONBOOT=yes</code>，在把<code>BOOTPROTO</code>设为<code>static</code></li><li>重启网卡：<code>service network restart</code></li><li>使用<code>ip addr</code>，查看网络信息</li><li>然后在终端输入命令安装net-tools：<code>yum install net-tools</code></li></ol><h2 id="命令行安装VMware-tools"><a href="#命令行安装VMware-tools" class="headerlink" title="命令行安装VMware-tools"></a>命令行安装VMware-tools</h2><blockquote><p>若使用虚拟机学习linux，安装VMWare-tools来对虚拟机与主机之间的切换</p></blockquote><ol><li>在虚拟机软件的界面点击虚拟机，找到安装VMware Tools并点击</li><li>在终端输入<code>ls /dev</code></li><li>输入<code>mkdir /mnt/cdrom</code>在<code>/mnt</code>目录下创建一个名为<code>cdrom</code>的目录</li><li>输入<code>mount -t iso9660 /dev/cdrom /mnt/cdrom</code>将光盘挂载到<code>/mnt/cdrom</code>目录</li><li>输入“ls /mnt/cdrom/”查看内容，输入<code>cp /mnt/cdrom/VMwareTools-9.2.0-799703.tar.gz /root/vm.tar.gz</code>,将名为“VMwareTools-9.2.0-799703.tar.gz”复制到/root目录下，并重新命名为vm.tar.gz。==(此时的版本后缀以本机为准)==</li><li>在根目录下输入<code>ls</code>查看文件，输入<code>tar -xzf vm.tar.gz</code>将文件解压，输入“ls”查看文件，可发现新增目录“vmware-tools-distrib”</li><li>输入<code>cd vmware-tools-distrib/</code>进入名为“vmware-tools-distrib”的目录，输入<code>./vmware-install.pl</code>尝试安装，出现错误“-bash: ./vmware-install.pl: /usr/bin/per: bad interpreter: No such file or directory”，表明未安装编译环境。</li><li>输入<code>yum -y install perl gcc make kernel-headers kernel-devel</code>开始安装。</li><li>在“vmware-tools-distrib”目录下重新输入<code>./vmware-install.pl</code>开始安装，一路上按回车键即可。</li></ol><h1 id="遇到突然ping不通外网的问题"><a href="#遇到突然ping不通外网的问题" class="headerlink" title="遇到突然ping不通外网的问题"></a>遇到突然ping不通外网的问题</h1><ul><li>终端输入以下命令：<ul><li><code>systemctl restart NetworkManager</code></li><li><code>systemctl restart network</code></li><li><code>ip addr</code></li></ul></li><li>重新<code>ping</code>即可</li></ul><h1 id="出现yum源报错：File-contains-no-section-headers的解决方案"><a href="#出现yum源报错：File-contains-no-section-headers的解决方案" class="headerlink" title="出现yum源报错：File contains no section headers的解决方案"></a>出现yum源报错：File contains no section headers的解决方案</h1><ol><li>删除<code>yum.repos.d</code>目录内的所有文件：<code>rm -f /etc/yum.repos.d/*</code></li><li>下载阿里镜像：<code>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code></li><li>清理缓存：<code>yum clean all</code></li><li>验证：<code>sudo yum makecache</code>，出现下图即为换源成功！<br><img data-src="https://s4.ax1x.com/2022/01/09/7FYDjx.png" alt="linuxyum"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux开篇</title>
      <link href="/my-blog/Linux/Linux%E5%BC%80%E7%AF%87/"/>
      <url>/my-blog/Linux/Linux%E5%BC%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux是什么？"><a href="#Linux是什么？" class="headerlink" title="Linux是什么？"></a>Linux是什么？</h1><ul><li>一套操作系统OS</li><li>处于计算机的核心与系统调用接口层</li></ul><h1 id="谁发明的？"><a href="#谁发明的？" class="headerlink" title="谁发明的？"></a>谁发明的？</h1><ul><li>Linus Torvalds（托瓦兹, 1969年出生）</li></ul><h1 id="当前IT的角色定位"><a href="#当前IT的角色定位" class="headerlink" title="当前IT的角色定位"></a>当前IT的角色定位</h1><ol><li>企业环境<ul><li>充当网络服务器，得益于Linux的稳定性，并且Linux与各大硬件厂商的深度合作如，Dell、HP、IBM及VMware等</li><li>关键服务的应用，如一些安全性可靠性高的操作，如充当金融账户接口任务</li><li>高性能运算服务</li></ul></li><li><p>个人环境</p><ul><li>桌面电脑Desktop。日常收发邮件，处理办公任务等</li><li>移动端。如手机</li><li>嵌入式系统。一些微计算机控制器，如路由器、robot控制芯片，车机控制系统等</li></ul></li><li><p>云端</p><ul><li>云程序。硬件虚拟化，把实体主机变成逻辑上独立的虚拟硬件主机，实现一台实体机，多个OS同时运行</li><li>端设备。树莓派</li></ul></li></ol><h1 id="Linux学习方向"><a href="#Linux学习方向" class="headerlink" title="Linux学习方向"></a>Linux学习方向</h1><ol><li>基本的计算机软硬件原理，计组，计网操作系统原理</li><li>认识linux的结构，如何安装，使用<code>man page</code>等</li><li>了解Linux文件系统与磁盘管理</li><li>学习Shell与Shell脚本</li><li>熟悉Linux权限管理</li><li>学会如何充当一位Linux系统管理员的角色，分析登录文件，模块管理，备份策略等</li><li>学看源码</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LINUX课程笔记</title>
      <link href="/my-blog/Linux/LINUX%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/my-blog/Linux/LINUX%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux课程"><a href="#Linux课程" class="headerlink" title="Linux课程"></a>Linux课程</h1><blockquote><p>本篇文章基于《linux就该这么学》编写，仅包含学校课程学习内容，并未包括该书本的完整知识!</p></blockquote><h2 id="重置ROOT管理员密码"><a href="#重置ROOT管理员密码" class="headerlink" title="重置ROOT管理员密码"></a>重置ROOT管理员密码</h2><ol><li>重启 Linux 系统主机并出现引导界面时，按下键盘上的<code>e 键</code>进入内核编辑界面，如图所示</li></ol><p><img data-src="https://s4.ax1x.com/2022/01/09/7FJ3wD.png" alt="yindao"></p><ol><li>在 linux16 参数这行的最后面追加<code>rd.break</code>参数，然后按下 <code>Ctrl + X</code> 组合键来运行修改过的内核程序,如图所示</li></ol><p><img data-src="https://s4.ax1x.com/2022/01/09/7FJwOf.png" alt="neihe"></p><ol><li>大约 30 秒过后，进入到系统的紧急求援模式</li></ol><p><img data-src="https://s4.ax1x.com/2022/01/09/7FJ6Yj.png" alt="jjqy"></p><ol><li>依次输入以下命令，等待系统重启操作完毕，然后就可以使用新密码 linuxprobe 来登录Linux系统了</li></ol><pre><code class="lang-bash">mount -o remount,rw /sysroot chroot /sysroot passwd touch /.autorelabel exit reboot</code></pre><h2 id="查看帮助命令"><a href="#查看帮助命令" class="headerlink" title="查看帮助命令"></a>查看帮助命令</h2><ol><li>长格式<pre><code class="lang-s">man --help</code></pre></li><li>短格式<pre><code class="lang-s">man -h</code></pre></li></ol><h2 id="常用的系统工作命令"><a href="#常用的系统工作命令" class="headerlink" title="常用的系统工作命令"></a>常用的系统工作命令</h2><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><ul><li><code>echo</code> 命令用于在终端输出字符串或变量提取后的值，格式为<code>echo [字符串 | $变量]</code></li><li>例如我们使用$变量的方式提取变量 SHELL 的值，并将其输出到屏幕上：<pre><code class="lang-s">[root@linuxprobe ~]# echo $SHELL /bin/bash</code></pre></li><li>或者直接在 <code>echo</code> 后面加上要在命令行显示的字符信息:</li></ul><pre><code class="lang-s"># echo welcomewelcome</code></pre><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><ul><li><code>date</code> 命令用于显示及设置系统的时间或日期，格式为 <code>date [选项] [+指定的格式]</code></li></ul><ol><li>按照默认格式查看当前系统时间的 date 命令</li></ol><pre><code class="lang-s">[root@linuxprobe ~]# date Mon Aug 24 16:11:23 CST 2017</code></pre><ol><li>按照“年-月-日 小时:分钟:秒”的格式查看当前系统时间的 <code>date</code> 命令</li></ol><pre><code class="lang-s">[root@linuxprobe ~]# date &quot;+%Y-%m-%d %H:%M:%S&quot; 2017-08-24 16:29:12</code></pre><h3 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h3><ul><li><code>reboot</code> 命令用于重启系统,默认只能使用 root 管理员来重启<pre><code class="lang-s">[root@linuxprobe ~]# reboot</code></pre><h3 id="poweroff"><a href="#poweroff" class="headerlink" title="poweroff"></a>poweroff</h3></li><li><code>poweroff</code> 命令用于关闭系统,此默认只有 root 管理员才可以关闭电脑<pre><code class="lang-s">[root@linuxprobe ~]# poweroff</code></pre><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3></li><li><p><code>wget</code> 命令用于在终端中下载网络文件，格式为 <code>wget [参数] 下载地址</code> </p></li><li><p><strong>命令参数</strong></p><ul><li><code>wget -b</code> 后台下载模式</li><li><code>wget -P</code> 下载到指定目录</li><li><code>wget -t</code> 最大尝试次数</li><li><code>wget -c</code> 断点续传</li><li><code>wget -p</code> 下载页面内所有资源，包括图片、视频等</li><li><code>wget -r</code> 递归下载</li></ul></li></ul><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><ul><li><code>ps</code>命令用于查看系统中的进程状态，格式为<code>ps [参数]</code>(process status)</li><li><strong>命令参数</strong><ul><li><code>wget -a</code> 显示所有进程（包括其他用户的进程）</li><li><code>wget -u</code> 用户以及其他详细信息</li><li><code>wget -x</code> 显示没有控制终端的进程</li></ul></li></ul><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><ul><li><code>top</code> 命令用于动态地监视进程活动与系统负载等信息，其格式为 <code>top</code></li></ul><h3 id="pidof"><a href="#pidof" class="headerlink" title="pidof"></a>pidof</h3><ul><li><code>pidof</code> 命令用于查询某个指定服务进程的 PID 值，格式为 <code>pidof [参数] [服务名称]</code></li></ul><pre><code class="lang-s">[root@linuxprobe ~]# pidof sshd 2156</code></pre><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><ul><li><code>kill</code>命令用于终止某个指定 PID 的服务进程，格式为<code>kill [参数] [进程 PID]</code></li></ul><h3 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h3><ul><li><code>killall</code> 命令用于终止某个指定名称的服务所对应的全部进程，格式为：<code>killall [参数] [进程名称]</code></li></ul><hr><h2 id="系统状态检测命令"><a href="#系统状态检测命令" class="headerlink" title="系统状态检测命令"></a>系统状态检测命令</h2><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><ul><li><code>ifconfig</code> 命令用于获取网卡配置与网络状态等信息，格式为 <code>ifconfig [网络设备] [参数]</code></li><li>使用 <code>ifconfig</code> 命令来查看本机当前的网卡配置与网络状态等信息时，其实主要查看的就是网卡名称、inet 参数后面的 IP 地址、ether 参数后面的网卡物理地址（又称为 MAC 地址），以及 RX、TX 的接收数据包与发送数据包的个数及累计流量</li></ul><h3 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h3><ul><li><code>uname</code> 命令用于查看系统内核与系统版本等信息，格式为<code>uname [-a]</code></li><li>在使用 <code>uname</code> 命令时，一般会固定搭配上<code>-a</code> 参数来完整地查看当前系统的内核名称、主机名、内核发行版本、节点名、系统时间、硬件名称、硬件平台、处理器类型以及操作系统名称等信息<pre><code class="lang-s">[root@linuxprobe ~]# uname -a Linux linuxprobe.com 3.10.0-123.el7.x86_64 #1 SMP Mon May 5 11:16:57 EDT 2017 x86_64 x86_64 x86_64 GNU/Linux</code></pre></li></ul><h3 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h3><ul><li><code>uptime</code> 用于查看系统的负载信息，格式为 <code>uptime</code></li></ul><pre><code class="lang-s">[root@linuxprobe ~]# uptime 22:49:55 up 10 min, 2 users, load average: 0.01, 0.19, 0.18</code></pre><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><ul><li><code>free</code> 用于显示当前系统中内存的使用量信息，格式为<code>free [-h]</code><pre><code class="lang-s">[root@linuxprobe ~]# free -h</code></pre></li></ul><h3 id="who"><a href="#who" class="headerlink" title="who"></a>who</h3><ul><li><code>who</code> 用于查看当前登入主机的用户终端信息，格式为<code>who [参数]</code></li></ul><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><ul><li><code>last</code> 命令用于查看所有系统的登录记录，格式为<code>last [参数]</code></li></ul><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><ul><li><code>history</code> 命令用于显示历史执行过的命令，格式为<code>history [-c]</code></li></ul><h2 id="工作目录切换命令"><a href="#工作目录切换命令" class="headerlink" title="工作目录切换命令"></a>工作目录切换命令</h2><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><ul><li><code>pwd</code> 命令用于显示用户当前所处的目录。如果用户不知道自己当前所处的目录，就必须使用它。例如：</li></ul><pre><code class="lang-s">[webber@localhost ~]$ pwd/home/webber                  //webber用户当前所在的目录[webber@localhost ~]$ su -        //从Webber用户切换到root用户</code></pre><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><ul><li><code>cd</code> 命令用于切换工作路径，格式为<code>cd [目录名称]</code></li><li>除了常见的切换目录方式，还可以使用<code>cd -</code>命令返回到上一次所处的目录，使用<code>cd..</code>命令进入上级目录，以及使用<code>cd ~</code>命令切换到当前用户的家目录，亦或使用<code>cd ~username</code>切换到其他用户的家目录</li></ul><ol><li>返回到上一次的目录</li></ol><pre><code class="lang-s">[root@linuxprobe bin]# cd - /etc [root@linuxprobe etc]#</code></pre><ol><li>快速切换到用户的家目录</li></ol><pre><code class="lang-s">[root@linuxprobe etc]# cd ~ [root@linuxprobe ~]#</code></pre><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><ul><li><code>ls</code> 命令用于显示目录中的文件信息，格式为<code>ls [选项] [文件]</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为交换实验命令（4）</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E5%AE%9E%E9%AA%8C%E5%91%BD%E4%BB%A4%EF%BC%884%EF%BC%89/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E5%AE%9E%E9%AA%8C%E5%91%BD%E4%BB%A4%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="TELENT远程管理"><a href="#TELENT远程管理" class="headerlink" title="TELENT远程管理"></a>TELENT远程管理</h1><p><img data-src="https://z3.ax1x.com/2021/05/11/gdmHOK.png" alt="teltye"></p><ul><li><strong>R1</strong><ul><li>配置接口 IP 确保和 R2 处于同一网段<pre><code class="lang-powershell">&lt;Huawei&gt;system-viewEnter system view, return user view with Ctrl+Z.[Huawei]sysname R1[R1]interface GigabitEthernet 0/0/0 //进入 R1 GE0 接口[R1-GigabitEthernet0/0/0]ip address 12.1.1.1 24 //GE0 接口配置 IPApr 22 2018 14:46:49-08:00 R1 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP on the interface GigabitEthernet0/0/0 has entered the UP state.</code></pre></li></ul></li><li><strong>R2</strong><ol><li>配置接口 IP 确保和 R1 处于同一网段<pre><code class="lang-powershell">&lt;Huawei&gt;system-viewEnter system view, return user view with Ctrl+Z.[Huawei]sysname R2[R2]interface GigabitEthernet 0/0/0 //进入 R2 GE0 接口[R2-GigabitEthernet0/0/0]ip address 12.1.1.2 24 //GE0 接口配置 IPApr 22 2018 14:54:19-08:00 R2 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP on the interface GigabitEthernet0/0/0 has entered the UP state.</code></pre></li><li>配置 telnet 远程登陆<pre><code class="lang-powershell">[R2]user-interface vty 0 4 //进入远程线路 vty 0 4[R2-ui-vty0-4]authentication-mode aaa //使用 aaa 认证模式[R2-ui-vty0-4]quit [R2]aaa //进入 aaa 配置[R2-aaa]local-user user-r1 password cipher huawei123 //创建账号及对应密码[R2-aaa]local-user user-r1 privilege level 2 //给该账号分配 2 级权限[R2-aaa]local-user user-r1 service-type telnet //定义用户的服务类别（启动 telnet 服务）[R2-aaa]quit</code></pre></li><li>进入 R1 验证<pre><code class="lang-powershell">通过 telnet 登录 R2：&lt;R1&gt;telnet 12.1.1.2Username:user-r1Password:&lt;R2&gt;system-view [R2]sysname R22[R22]（进入 R2，对 R2 的主机名做修改，telnet 远程管理实现）</code></pre></li></ol></li></ul><hr><h1 id="SSH远程管理"><a href="#SSH远程管理" class="headerlink" title="SSH远程管理"></a>SSH远程管理</h1><p><img data-src="https://z3.ax1x.com/2021/05/11/gdmOTe.png" alt="sshtp"></p><ul><li><p><strong>R1</strong></p><pre><code class="lang-powershell">  配置接口 IP 确保和 R2 处于同一网段  &lt;Huawei&gt;system-view  Enter system view, return user view with Ctrl+Z.  [Huawei]sysname R1  [R1]interface GigabitEthernet 0/0/0 //进入 R1 GE0 接口  [R1-GigabitEthernet0/0/0]ip address 12.1.1.1 24 //GE0 接口配置 IP  Apr 22 2018 14:46:49-08:00 R1 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP   on the interface GigabitEthernet0/0/0 has entered the UP state.</code></pre></li><li><p><strong>R2</strong></p><ol><li>配置接口 IP 确保和 R1 处于同一网段<pre><code class="lang-powershell">&lt;Huawei&gt;system-viewEnter system view, return user view with Ctrl+Z.[Huawei]sysname R2[R2]interface GigabitEthernet 0/0/0 //进入 R2 GE0 接口[R2-GigabitEthernet0/0/0]ip address 12.1.1.2 24 //GE0 接口配置 IPApr 22 2018 14:54:19-08:00 R2 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP on the interface GigabitEthernet0/0/0 has entered the UP state.</code></pre></li><li><p>配置 ssh 远程登陆</p><pre><code class="lang-powershell">[R2]stelnet server enable //开启 SSH 协议[R2]rsa local-key-pair create //创建加密报文的密钥对Input the bits in the modulus[default = 512]:1024 //密钥长度[R2]aaa //使用 aaa 认证模式[R2-aaa]local-user user-ssh password cipher huawei123 //创建账号及对应密码[R2-aaa]local-user user-ssh privilege level 2 //给该账号分配 2 级权限[R2-aaa]local-user user-ssh service-type ssh 创建 ssh 用户[R2-aaa]quit [R2]user-interface vty 0 4 //进入 vty 线路[R2-ui-vty0-4]authentication-mode aaa [R2-ui-vty0-4]protocol inbound ssh //开启 vty 线路的 ssh 访问功能[R2-ui-vty0-4]quit [R2]ssh user user-ssh authentication-type all //定义 ssh 用户的认证模式</code></pre></li><li><p>进入 R1 验证</p><pre><code class="lang-powershell">通过 ssh 登录 R2：[R1]ssh client first-time enable[R1]stelnet 12.1.1.2Please input the username:user-sshContinue to access it? (y/n)[n]:ySave the server&#39;s public key? (y/n)[n]:yEnter password:&lt;R2&gt;（ssh 远程登录成功）</code></pre></li></ol></li></ul><hr><h1 id="接口隔离配置"><a href="#接口隔离配置" class="headerlink" title="接口隔离配置"></a>接口隔离配置</h1><blockquote><p>配置接口 <code>GE0/0/1</code> 和 <code>GE0/0/2</code> 的接口隔离功能，实现两个接口之间的二层数据隔离，三层数据互通</p></blockquote><p><img data-src="https://z3.ax1x.com/2021/05/11/gdmvYd.png" alt="jkgl"></p><pre><code class="lang-powershell">&lt;Switch1&gt;system-viewEnter system view, return user view with Ctrl+Z.[Switch1]port-isolate mode L2 //端口隔离模式选择 L2[Switch1]interface GigabitEthernet 0/0/1 //进入 GE0 接口[Switch1-GigabitEthernet0/0/1]port-isolate enable group 1 //接口隔离选择默认组 1[Switch1-GigabitEthernet0/0/1]quit[Switch1]interface GigabitEthernet 0/0/2 //进入 GE2 接口[Switch1-GigabitEthernet0/0/2]port-isolate enable group 1 //接口隔离选择默认组 1[Switch1-GigabitEthernet0/0/2]quit [Switch1]端口隔离实验成功</code></pre><hr><h1 id="接口速率设置"><a href="#接口速率设置" class="headerlink" title="接口速率设置"></a>接口速率设置</h1><blockquote><p>配置以太网接口 GE0/0/1 在自协商模式下协商速率为 100Mb/s</p></blockquote><pre><code class="lang-powershell">&lt;Switch1&gt;system-viewEnter system view, return user view with Ctrl+Z.[Switch1]interface GigabitEthernet 0/0/1 //进入 GE1 端口[Switch1-GigabitEthernet0/0/1]negotiation auto //自动协商[Switch1-GigabitEthernet0/0/1]auto speed 100 //协商速率</code></pre><hr><h1 id="接口模式设置"><a href="#接口模式设置" class="headerlink" title="接口模式设置"></a>接口模式设置</h1><blockquote><p>配置以太网接口 GE0/0/1 在自协商模式下双工模式为全双工模式</p></blockquote><pre><code class="lang-powershell">&lt;Switch1&gt;system-viewEnter system view, return user view with Ctrl+Z.[Switch1]interface GigabitEthernet 0/0/1 //进入 GE1 端口[Switch1-GigabitEthernet0/0/1]negotiation auto //自动协商[Switch1-GigabitEthernet0/0/1] auto duplex full //全双工模式</code></pre><hr><h1 id="基于接口划分VLAN"><a href="#基于接口划分VLAN" class="headerlink" title="基于接口划分VLAN"></a>基于接口划分VLAN</h1><p><img data-src="https://z3.ax1x.com/2021/05/11/gdmxfA.png" alt="hfvlan"></p><pre><code class="lang-powershell">[SW1]vlan 10[SW1-vlan10]quit[SW1]vlan 20[SW1-vlan20]quit //创建 vlan10、vlan20(快速创建多个 vlan 使用 vlan batch 10 20 命令)[SW1]display vlan summary //查看设备的 vlan 信息[SW1]int Ethernet0/0/1 [SW1-Ethernet0/0/1]port link-type access[SW1-Ethernet0/0/1]port default vlan 10 //将接口 e0/0/1 划入对应的 vlan10[SW1-Ethernet0/0/1]quit [SW1]int e0/0/2[SW1-Ethernet0/0/2]port default vlan 20 //将接口 e0/0/2 划入对应的 vlan20[SW1-Ethernet0/0/2]quit[SW1]int Ethernet0/0/3 [SW1-Ethernet0/0/3]port link-type trunk[SW1-Ethernet0/0/3]port trunk allow-pass vlan 30 //将接口 e0/0/3 划入对应的 vlan30[SW1-Ethernet0/0/3]quit[SW1]display port vlan active //查看接口对应的 vlan 信息[SW1]quit</code></pre><hr><h1 id="基于MAC地址划分VLAN"><a href="#基于MAC地址划分VLAN" class="headerlink" title="基于MAC地址划分VLAN"></a>基于MAC地址划分VLAN</h1><p><img data-src="https://z3.ax1x.com/2021/05/11/gdn96P.png" alt="macvlan"></p><pre><code class="lang-powershell">&lt;Huawei&gt;system-viewEnter system view, return user view with Ctrl+Z.[Huawei]sysname SwitchA[SwitchA]vlan batch 2Info: This operation may take a few seconds. Please wait for a moment...done.[SwitchA]interface gigabitethernet 0/0/1 //在接口视图配置上联接口[SwitchA-GigabitEthernet0/0/1]port link-type hybrid //配置上联接口类型[SwitchA-GigabitEthernet0/0/1]port hybrid tagged vlan 2 //通过 VLAN2[SwitchA-GigabitEthernet0/0/1]quit[SwitchA]interface gigabitethernet 0/0/2 //进入交换机接口视图[SwitchA-GigabitEthernet0/0/2]port link-type hybrid //配置接口类型[SwitchA-GigabitEthernet0/0/2]port hybrid untagged vlan 2 //将接口加入 VLAN2[SwitchA-GigabitEthernet0/0/2]quit[SwitchA]vlan 2 //进入 vlan2 配置[SwitchA-vlan2]mac-vlan mac-address 22-22-22-22 //PC 的 MAC 地址与 VLAN2 关联[SwitchA-vlan2]quit[SwitchA]interface gigabitethernet 0/0/2 [SwitchA-GigabitEthernet0/0/2]mac-vlan enable //基于 MAC 地址启用接口Info: This operation may take a few seconds. Please wait for a moment...done.[SwitchA-GigabitEthernet0/0/2]quit</code></pre><hr><h1 id="配置GVRP协议"><a href="#配置GVRP协议" class="headerlink" title="配置GVRP协议"></a>配置GVRP协议</h1><ul><li><strong>GARP</strong> (<code>Generic Attribute Registration Protocol</code>)是通用属性注册协议的应用，提供 802.1Q 兼容的VLAN 裁剪 VLAN pruning 功能和在 802.1Q 干线端口 trunk port 上建立动态 VLAN 的功能。</li><li>GARP 作为一个属性注册协议的载体，可以用来传播属性，将 GARP 协议报文的内容映射成不同的属性即可支持不同上层协议应用。</li><li>GVRP（<code>GARP VLAN Registration Protocol</code>）是 GARP 的一种应用，用于注册和注销 VLAN 属性。</li><li>GARP 协议通过目的 MAC 地址区分不同的应用。在 IEEE Std 802.1Q 中将 01-80-C2-00-00-21 分配给 VLAN 应用，即 GVRP。</li></ul><h2 id="配置-GVRP-示例"><a href="#配置-GVRP-示例" class="headerlink" title="配置 GVRP 示例"></a>配置 GVRP 示例</h2><ol><li><p>组网需求</p><ul><li>如图所示，公司 A、公司 A 的分公司以及公司 B 之间有较多的交换设备相连，需要通过 GVRP 功能，实现 VLAN 的动态注册。公司 A 的分公司与总部通过 SwitchA 和 SwitchB 互通；公司 B 通过 SwitchB和 SwitchC 与公司 A 互通，但只允许公司 B 配置的 VLAN 通过。</li></ul></li></ol><p><img data-src="https://z3.ax1x.com/2021/05/11/gdnVYj.png" alt="gvrptp"></p><ol><li>配置思路<ul><li>使能 GVRP 功能，实现 VLAN 的动态注册。</li><li>公司 A 的所有交换机配置 GVRP 功能并配置接口注册模式为 Normal，以简化配置。</li><li>公司 B 的所有交换机配置 GVRP 功能并将与公司 A 相连的接口的注册模式配置为 Fixed，以控制只允许公司 B 配置的 VLAN 通过。</li></ul></li></ol><blockquote><p>说明：<br>使能 GVRP 之前，必须先设置 VCMP 的角色为 Transparent 或 Silent。</p></blockquote><ol><li>配置步骤<ul><li><strong>配置交换机SwitchA</strong><pre><code class="lang-powershell">//全局使能 GVRP 功能&lt;Huawei&gt;&lt;Huawei&gt;system-viewEnter system view, return user view with Ctrl+Z.[Huawei]sysname SwitchA[SwitchA]vcmp role silent//配置接口为 Trunk 类型，并允许所有 VLAN 通过[SwitchA]interface gigabitethernet 0/0/1[SwitchA-GigabitEthernet0/0/1]port link-type trunk[SwitchA-GigabitEthernet0/0/1]port trunk allow-pass vlan all[SwitchA-GigabitEthernet0/0/1]quit[SwitchA]interface gigabitethernet 0/0/2[SwitchA-GigabitEthernet0/0/2]port link-type trunk[SwitchA-GigabitEthernet0/0/2]port trunk allow-pass vlan all[SwitchA-GigabitEthernet0/0/2]quit//使能接口的 GVRP 功能，并配置接口注册模式[SwitchA]interface gigabitethernet 0/0/1[SwitchA-GigabitEthernet0/0/1]gvrp[SwitchA-GigabitEthernet0/0/1]gvrp registration normal[SwitchA-GigabitEthernet0/0/1]quit[SwitchA]interface gigabitethernet 0/0/2[SwitchA-GigabitEthernet0/0/2]gvrp[SwitchA-GigabitEthernet0/0/2]gvrp registration normal[SwitchA-GigabitEthernet0/0/2]quit</code></pre></li><li><strong>配置交换机SwitchB</strong><pre><code class="lang-powershell">//全局使能 GVRP 功能&lt;Huawei&gt;&lt;Huawei&gt;system-viewEnter system view, return user view with Ctrl+Z.[Huawei]sysname SwitchB[SwitchB]vcmp role silent//配置接口为 Trunk 类型，并允许所有 VLAN 通过[SwitchB]interface gigabitethernet 0/0/1[SwitchB-GigabitEthernet0/0/1]port link-type trunk[SwitchB-GigabitEthernet0/0/1]port trunk allow-pass vlan all[SwitchB-GigabitEthernet0/0/1]quit[SwitchB]interface gigabitethernet 0/0/2[SwitchB-GigabitEthernet0/0/2]port link-type trunk[SwitchB-GigabitEthernet0/0/2]port trunk allow-pass vlan all[SwitchB-GigabitEthernet0/0/2]quit//使能接口的 GVRP 功能，并配置接口注册模式[SwitchB]interface gigabitethernet 0/0/1[SwitchB-GigabitEthernet0/0/1]gvrp[SwitchB-GigabitEthernet0/0/1]gvrp registration normal[SwitchB-GigabitEthernet0/0/1]quit[SwitchB]interface gigabitethernet 0/0/2[SwitchB-GigabitEthernet0/0/2]gvrp[SwitchB-GigabitEthernet0/0/2]gvrp registration normal[SwitchB-GigabitEthernet0/0/2]quit</code></pre></li><li><strong>配置交换机SwitchC</strong><pre><code class="lang-powershell">//创建 VLAN101～VLAN200&lt;HUAWEI&gt;system-view[HUAWEI]sysname SwitchC[SwitchC]vlan batch 101 to 200//全局使能 GVRP 功能[SwitchC]vcmp role silent[SwitchC]gvrp//配置接口为 Trunk 类型，并允许所有 VLAN 通过[SwitchC]interface gigabitethernet 0/0/1[SwitchC-GigabitEthernet0/0/1]port link-type trunk[SwitchC-GigabitEthernet0/0/1]port trunk allow-pass vlan all[SwitchC-GigabitEthernet0/0/1]quit[SwitchC]interface gigabitethernet 0/0/2[SwitchC-GigabitEthernet0/0/2]port link-type trunk[SwitchC-GigabitEthernet0/0/2]port trunk allow-pass vlan all[SwitchC-GigabitEthernet0/0/2]quit//使能接口的 GVRP 功能，并配置接口注册模式[SwitchC]interface gigabitethernet 0/0/1[SwitchC-GigabitEthernet0/0/1]gvrp[SwitchC-GigabitEthernet0/0/1]gvrp registration fixed[SwitchC-GigabitEthernet0/0/1]quit[SwitchC]interface gigabitethernet 0/0/2[SwitchC-GigabitEthernet0/0/2]gvrp[SwitchC-GigabitEthernet0/0/2]gvrp registration normal[SwitchC-GigabitEthernet0/0/2]quit</code></pre></li><li>验证配置结果<ul><li>配置完成后，公司 A 的分公司用户可以与总部互通，公司 A 属于 VLAN101～VLAN200 的用户可以与公司 B 用户互通。</li><li>在 SwitchA 上使用命令 display gvrp statistics，查看接口的 GVRP 统计信息，<blockquote><p>其中包括：<br>GVRP 状态、GVRP 注册失败次数、上一个 GVRP 数据单元源 MAC 地址和接口 GVRP 注册类型，<br>结果如下：</p></blockquote></li></ul></li></ul></li></ol><p><img data-src="https://z3.ax1x.com/2021/05/11/gdnZfs.png" alt="gvrpres"></p><blockquote><p>switch B、C和switch A类似</p></blockquote><h1 id="配置-STP-协议"><a href="#配置-STP-协议" class="headerlink" title="配置 STP 协议"></a>配置 STP 协议</h1><ul><li>以太网交换网络中为了进行链路备份，提高网络可靠性，通常会使用冗余链路。但是使用冗余链路会在交换网络上产生环路，引发广播风暴以及 MAC 地址表不稳定等故障现象，从而导致用户通信质量较差，甚至通信中断。</li><li>为解决交换网络中的环路问题，提出了生成树协议 STP（Spanning Tree Protocol）。运行 STP 协议的设备通过彼此交互信息发现网络中的环路，并有选择的对某个端口进行阻塞，最终将环形网络结构修剪成无环路的树形网络结构，从而防止报文在环形网络中不断循环，避免设备由于重复接收相同的报文造成处理能力下降。</li><li>生成树协议也是随着网络的发展而不断更新的，从最初的 IEEE 802.1D 中定义的 STP 到 IEEE 802.1W中定义的快速生成树协议 RSTP（Rapid Spanning Tree Protocol），再到最新的 IEEE 802.1S 中定义的多生成树协议 MSTP（Multiple Spanning Tree Protocol）。</li><li>生成树协议中，MSTP 兼容 RSTP、STP，RSTP 兼容 STP。三种生成树协议的比较如下图所示:</li></ul><p><img data-src="https://z3.ax1x.com/2021/05/11/gdnmpn.png" alt="stptb"></p><h2 id="配置-STP-示例"><a href="#配置-STP-示例" class="headerlink" title="配置 STP 示例"></a>配置 STP 示例</h2><blockquote><p>配之前注意事项<br>本举例适用于 S 系列交换机所有产品的所有版本。<br>与终端相连的端口不用参与 STP 计算，建议将其设置为边缘端口或去使能 STP。</p></blockquote><ol><li>组网需求</li></ol><p><img data-src="https://z3.ax1x.com/2021/05/11/gdnQmT.png" alt="stptp"></p><ul><li>当前网络中存在环路，SwitchA、SwitchB、SwitchC 和 SwitchD 都运行 STP，通过彼此交互信息发现网络中的环路，并有选择的对某个端口进行阻塞，最终将环形网络结构修剪成无环路的树形网络结构，从而防止报文在环形网络中不断循环，避免设备由于重复接收相同的报文造成处理能力下降。</li></ul><ol><li>配置思路<ul><li>在处于环形网络中的交换设备上配置 STP 基本功能，包括：<ul><li>配置环网中的设备生成树协议工作在 STP 模式。</li><li>配置根桥和备份根桥设备。</li><li>配置端口的路径开销值，实现将该端口阻塞。</li><li>使能 STP，实现破除环路。</li></ul></li></ul></li><li><p>配置步骤</p><ul><li><p>配置 STP 基本功能</p><ol><li>配置环网中的设备生成树协议工作在 STP 模式<pre><code class="lang-powershell">//配置交换设备 SwitchA 的 STP 工作模式。&lt;HUAWEI&gt;system-view[HUAWEI]sysname SwitchA[SwitchA]stp mode stp//配置交换设备 SwitchB 的 STP 工作模式。&lt;HUAWEI&gt;system-view[HUAWEI]sysname SwitchB[SwitchB]stp mode stp//配置交换设备 SwitchC 的 STP 工作模式。&lt;HUAWEI&gt;system-view[HUAWEI]sysname SwitchC[SwitchC]stp mode stp//配置交换设备 SwitchD 的 STP 工作模式。&lt;HUAWEI&gt;system-view[HUAWEI]sysname SwitchD[SwitchD]stp mode stp</code></pre></li><li>配置根桥和备份根桥设备<pre><code class="lang-powershell">//配置 SwitchA 为根桥。[SwitchA] stp root primary//配置 SwitchD 为备份根桥。[SwitchD] stp root secondary</code></pre></li><li>配置端口的路径开销值，实现将该端口阻塞</li></ol><blockquote><p>说明：<br>端口路径开销值取值范围由路径开销计算方法决定，这里选择使用华为计算方法为例，配置将被阻塞端口的路径开销值为 20000。<br>同一网络内所有交换设备的端口路径开销应使用相同的计算方法。</p></blockquote><pre><code class="lang-powershell">//配置 SwitchA 的端口路径开销计算方法为华为计算方法。[SwitchA]stp pathcost-standard legacy//配置 SwitchB 的端口路径开销计算方法为华为计算方法。[SwitchB]stp pathcost-standard legacy//配置 SwitchC 的端口路径开销计算方法为华为计算方法。[SwitchC]stp pathcost-standard legacy//配置 SwitchC 端口 GigabitEthernet0/0/1 端口路径开销值为 20000。[SwitchC]interface gigabitethernet 0/0/1[SwitchC-GigabitEthernet0/0/1]stp cost 20000[SwitchC-GigabitEthernet0/0/1]quit//配置 SwitchD 的端口路径开销计算方法为华为计算方法。[SwitchD]stp pathcost-standard legacy</code></pre></li><li><p>使能 STP，实现破除环路</p><ul><li>将与 PC 机相连的端口设置为边缘端口并使能端口的 BPDU 报文过滤功能<pre><code class="lang-powershell">//配置 SwitchB 端口 GigabitEthernet0/0/2 设置为边缘端口并使能端口的 BPDU 报文过滤功能。[SwitchB]interface gigabitethernet 0/0/2[SwitchB-GigabitEthernet0/0/2]stp edged-port enable[SwitchB-GigabitEthernet0/0/2]stp bpdu-filter enable[SwitchB-GigabitEthernet0/0/2]quit//配置 SwitchC 端口 GigabitEthernet0/0/2 设置为边缘端口并使能端口的 BPDU 报文过滤功能。[SwitchC]interface gigabitethernet 0/0/2[SwitchC-GigabitEthernet0/0/2]stp edged-port enable[SwitchC-GigabitEthernet0/0/2]stp bpdu-filter enable[SwitchC-GigabitEthernet0/0/2]quit</code></pre></li></ul><ul><li><strong>设备全局使能STP</strong><pre><code class="lang-powershell">//设备 SwitchA 全局使能 STP。[SwitchA]stp enable//设备 SwitchB 全局使能 STP。[SwitchB]stp enable//设备 SwitchC 全局使能 STP。[SwitchC]stp enable//设备 SwitchD 全局使能 STP。[SwitchD]stp enable</code></pre></li></ul></li></ul></li><li>验证配置<blockquote><p>经过以上配置，在网络计算稳定后，执行以下操作，验证配置结果。<br>//在 SwitchA 上执行 <code>display stp brief</code>命令，查看端口状态和端口的保护类型，结果如下：</p></blockquote></li></ol><p><img data-src="https://z3.ax1x.com/2021/05/11/gdnl0U.png" alt="stpres"></p><ul><li>将 <code>SwitchA</code> 配置为根桥后，与 <code>SwitchB</code>、<code>SwitchD</code> 相连的端口 <code>GigabitEthernet0/0/2</code> 和<code>GigabitEthernet0/0/1</code> 在生成树计算中被选举为指定端口。</li></ul><blockquote><p>//在 SwitchD 上执行 display stp brief 命令，查看端口状态和端口的保护类型，结果如下：</p></blockquote><p><img data-src="https://z3.ax1x.com/2021/05/11/gdn17F.png" alt="stpres2"></p><ul><li>将 <code>SwitchD</code> 配置为备根桥后，与 <code>SwitchA</code>、<code>SwitchC</code> 相连的端口 <code>GigabitEthernet0/0/1</code> 被选举为根端口、<code>GigabitEthernet0/0/2</code> 在生成树计算中被选举为指定端口。<blockquote><p>//在 SwitchB 上执行 <code>display stp interface gigabitethernet 0/0/1 brief</code> 命令，查看端口GigabitEthernet0/0/1 状态，结果如下：</p></blockquote></li></ul><p><img data-src="https://z3.ax1x.com/2021/05/11/gdnJh9.png" alt="stps"></p><ul><li>端口<code>GigabitEthernet0/0/1</code> 在生成树选举中成为指定端口，处于 <code>FORWARDING</code> 状态。<blockquote><p>//在 SwitchC 上执行 display stp brief 命令，查看端口状态，结果如下：</p></blockquote></li></ul><p><img data-src="https://z3.ax1x.com/2021/05/11/gdntpR.png" alt="stpsa"></p><p>端口 GigabitEthernet0/0/3 在生成树选举中成为根端口，处于 FORWARDING 状态。<br>端口 GigabitEthernet0/0/1 在生成树选举中成为 Alternate 端口，处于 DISCARDING 状态。</p>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为路由实验命令（3）</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%8D%8E%E4%B8%BA%E8%B7%AF%E7%94%B1%E5%AE%9E%E9%AA%8C%E5%91%BD%E4%BB%A4%EF%BC%883%EF%BC%89/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%8D%8E%E4%B8%BA%E8%B7%AF%E7%94%B1%E5%AE%9E%E9%AA%8C%E5%91%BD%E4%BB%A4%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="IS-IS-路由配置"><a href="#IS-IS-路由配置" class="headerlink" title="IS-IS 路由配置"></a>IS-IS 路由配置</h1><ul><li>中间系统到中间系统 (<code>Intermediate System to Intermediate System</code>, <code>IS-IS</code>)属于内部网关协议(<code>lnteriorGateway Protocol</code>,<code>IGP</code>)，用于自治系统内部。</li><li>为了支持大规模的路由网络，IS-IS 在自治系统内采用骨干区域与非骨干区域两级的分层结构。一般来说，将 Level-1 路由器部署在非骨干区域，Level-2 路由器和 Level-1-2 路由器部署在骨干区域。每一个非骨干区域都通过 Level-1-2 路由器与骨干区域相连。</li><li><p>链路状态路由协议（L-S）</p><ul><li><p>Net-Entity：网络实体，运行 IS-IS 的路由器必须配置一个网络实体，格式为：SEL 服务访问点<br>|区域 ID| 系统 ID| SEL|<br>|:—-:|:—-:|:—-:|<br>|1 字节| 16 字节| 1 字节|</p><blockquote><p>例如：4A.2000.00E0.008C.00 十六进制表示</p></blockquote><p><img data-src="https://z3.ax1x.com/2021/05/11/gdm3RI.png" alt="isistp"></p></li></ul></li></ul><ol><li>配置各路由器的接口 IP</li><li>配置各路由器的 <code>IS-IS</code> 功能</li></ol><ul><li><strong>配置R1</strong></li></ul><pre><code class="lang-powershell">[R1]isis //进入 isis 配置[R1-isis-1]network-entity 10.0000.0000.0001.00 //宣告本路由(R1)的网络实体[R1-isis-1]quit[R1]int gig 0/0/0 //进入出口链路端口[R1-GigabitEthernet0/0/0]isis enable //端口使能 isis[R1-GigabitEthernet0/0/0]quit</code></pre><ul><li><strong>配置R2</strong></li></ul><pre><code class="lang-powershell">[R2]isis //进入 isis 配置[R2-isis-1]network-entity 10.0000.0000.0002.00 //宣告本路由(R2)的网络实体[R2-isis-1]quit[R2]int gig 0/0/0 //进入出口链路端口[R2-GigabitEthernet0/0/0]isis enable //端口使能 isis[R2-GigabitEthernet0/0/0]int gig 0/0/1[R2-GigabitEthernet0/0/1]isis enable</code></pre><ul><li><strong>配置R3</strong></li></ul><pre><code class="lang-powershell">[R3]isis[R3-isis-1]network-entity 10.0000.0000.0003.00[R3-isis-1]quit[R3]int gig 0/0/0[R3-GigabitEthernet0/0/0]isis enable</code></pre><p>与 R1 类似</p><ol><li>查看各路由器的路由表(<code>dis ip routing</code>/<code>dis isis peer</code>/<code>dis isis route</code>/<code>dis isis lsdb</code>)</li></ol><hr><h1 id="BGP-路由配置"><a href="#BGP-路由配置" class="headerlink" title="BGP 路由配置"></a>BGP 路由配置</h1><ul><li>边界网关协议(<code>Border Gateway Protocol</code>,BGP)是一种实现自治系统(<code>Autonomous System</code>,AS)之间的路由可达并选择最佳路由的距离矢量路由协议(D-V)</li><li>支持多出口大型网络；路由采用增量更新；除了下一跳还有经过 AS 列表通过信息；允许 CIDR、VLSM、支持鉴别、验证等；分为 EBGP（外部）、IBGP（内部）<ul><li>实现自治系统间通信网络的信息可达</li><li>多个 BGP 路由器之间的协调</li><li>BGP 支持基千策略的路径选择，可以为域内和域间的网络可达性配置不同的策略</li><li>BGP 只需要在启动时交换一次完整信息，不需要在所有路由更新报文中传送完整的路由数据库信息，后续的路由更新报文只通告网络的变化信息，避免网络变化使得信息黛大幅增加</li><li>在 BGP 通告目的网络的可达性信息时，除了处理指定目的网络的下一跳信息之外，通告中还包括了通路向量，即去往该目的网络时需要经过的 AS 的列表，使接受者能够清楚了解去往目的网络的通路信息</li><li>BGP 在不同自治系统(AS)之间进行路由转发，分为 EBGP 和 IBGP 两种情况。EBGP 外部边界网关协议，用于在不同的自治系统间交换路由信息。IBGP 内部边界网关协议，用于向内部路由器提供更多信息</li></ul></li></ul><h2 id="配置-BGP-示例"><a href="#配置-BGP-示例" class="headerlink" title="配置 BGP 示例"></a>配置 BGP 示例</h2><ol><li><p><strong>组网需求</strong></p><p> <img data-src="https://z3.ax1x.com/2021/05/11/gdmtL8.png" alt="bgptp"></p></li></ol><blockquote><p>如图所示，需要在所有路由器间运行 BGP 协议，R1、R2 之间建立 EBGP 连接，R2、R3 和 R4 之间建立 IBGP 全连接。</p></blockquote><ol><li><strong>配置思路</strong></li></ol><ul><li>采用如下的思路配置 BGP 的基本功能：<ul><li>在 R2、R3 和 R4 间配置 IBGP 连接。</li><li>在 R1 和 R2 之间配置 EBGP 连接。</li></ul></li></ul><ol><li><p><strong>配置步骤</strong></p><ol><li>配置各路由器的接口 IP<pre><code class="lang-powershell">//配置 R2；R1、R3 和 R4 的配置与 R1 类似。&lt;Huawei&gt;sysEnter system view, return user view with Ctrl+Z.[Huawei]un in enInfo: Information center is disabled.[Huawei]sysn R1[R1]sysn R2[R2]int gig 0/0/1[R2-GigabitEthernet0/0/1]ip add 59.74.112.1 24[R2-GigabitEthernet0/0/1]quit[R2]int gig 0/0/2[R2-GigabitEthernet0/0/2]ip add 172.16.30.1 24[R2-GigabitEthernet0/0/2]quit[R2]int gig 0/0/3[R2-GigabitEthernet0/0/3]ip add 172.16.10.1 24[R2-GigabitEthernet0/0/3]quit</code></pre></li><li><p>配置 IBGP</p><ul><li><strong>配置R2</strong><pre><code class="lang-powershell">[R2]bgp 65009 //启动 BGP 及 AS 号[R2-bgp]router-id 2.2.2.2 //配置 BGP 的 router-id（自定义）[R2-bgp]peer 172.16.10.2 as-number 65009 //配置 BGP 的对等实体[R2-bgp]peer 172.16.30.2 as-number 65009[R2-bgp]quit</code></pre></li><li><strong>配置R3</strong><pre><code class="lang-powershell">[R3]bgp 65009[R3-bgp]router-id 3.3.3.3[R3-bgp]peer 172.16.30.1 as-number 65009[R3-bgp]peer 172.16.20.2 as-number 65009[R3-bgp]quit</code></pre></li><li><strong>配置R4</strong><pre><code class="lang-powershell">[R4]bgp 65009[R4-bgp]router-id 4.4.4.4[R4-bgp]peer 172.16.20.1 as-number 65009[R4-bgp]peer 172.16.10.1 as-number 65009[R4-bgp]quit</code></pre></li></ul></li><li><p>配置 EBGP</p></li></ol><ul><li><strong>配置R1</strong><pre><code class="lang-powershell">[R1]bgp 65008[R1-bgp]router-id 1.1.1.1[R1-bgp]peer 59.74.112.1 as-number 65009 //配置 BGP 的对等实体[R1-bgp]quit</code></pre></li><li><strong>配置R2</strong><pre><code class="lang-powershell">[R2]bgp 65009[R2-bgp]peer 59.74.112.2 as-number 65008 //配置 BGP 的对等实体[R2-bgp]quit</code></pre>//在 R2 查看 BGP 对等实体的连接状态<br><img data-src="https://z3.ax1x.com/2021/05/11/gdmdoQ.png" alt="bgpres"></li></ul><ol><li><p>配置 R1 的发布路由 10.1.0.0/16</p><pre><code class="lang-powershell">[R1]bgp 65008[R1-bgp]ipv4-family unicast [R1-bgp-af-ipv4]network 10.1.0.0 255.255.0.0[R1-bgp-af-ipv4]quit</code></pre><p>//查看 R1、R2、R3、R4 的路由表信息（display bgp routing-table）</p><p><img data-src="https://z3.ax1x.com/2021/05/11/gdm0ij.png" alt="bgpiptb"></p><p>从路由表可以看出，R3/R4 学到了 AS65008 中的 10.1.0.0 的路由，但因为下一跳 192.168.1.2 不可达，所以也不是有效路由。</p></li><li><p>配置 BGP 引入直连路由</p><pre><code class="lang-powershell">//配置 R2[R2]bgp 65009[R2-bgp]ipv4-family unicast[R2-bgp-af-ipv4]import-route direct //引入直连路由[R2-bgp-af-ipv4]quit</code></pre><p>//查看 R1 的 BGP 路由表</p><p><img data-src="https://z3.ax1x.com/2021/05/11/gdmyQ0.png" alt="bgprou"></p><p>//查看 R4 的 BGP 路由</p><p><img data-src="https://z3.ax1x.com/2021/05/11/gdm2eU.png" alt="bgprou2"></p><p>可以看出，到 10.1.0.0 的路由变为有效路由，下一跳为 R1 的地址。<br>//在 R4 使用 Ping 进行验证</p><p><img data-src="https://z3.ax1x.com/2021/05/11/gdmWo4.png" alt="bgpping"></p></li></ol></li></ol><hr><h1 id="ACL-综合应用"><a href="#ACL-综合应用" class="headerlink" title="ACL 综合应用"></a>ACL 综合应用</h1><ol><li>组网需要</li></ol><p><img data-src="https://z3.ax1x.com/2021/05/11/gdmhFJ.png" alt="acltp"></p><blockquote><p>如图所示，某公司通过 Switch 实现各部门之间的互连。<br>公司要求禁止研发部门和市场部门在上班时间（8:00 至 17:30）访问工资查询服务器（IP 地址为10.164.9.9），总裁办公室不受限制，可以随时访问。</p></blockquote><ol><li>配置思路</li></ol><ul><li><strong>采用如下的思路在 Switch 上进行配置：</strong><ul><li>配置时间段、高级 ACL 和基于 ACL 的流分类，使设备可以基于时间的 ACL，对用户访问服务器的报文进行过滤，从而限制不同用户在特定时间访问特定服务器的权限。</li><li>配置流行为，拒绝匹配上 ACL 的报文通过。</li><li>配置并应用流策略，使 ACL 和流行为生效。</li></ul></li></ul><ol><li><p>配置步骤</p><ul><li><p>配置接口加入 VLAN，并配置 VLANIF 接口的 IP 地址</p><blockquote><p>将 GE0/0/1～GE0/0/3 分别加入 VLAN10、20、30，GE0/0/4 加入 VLAN100，并配置各 VLANIF 接口的 IP 地址。</p></blockquote><pre><code class="lang-powershell">&lt;Huawei&gt;sysEnter system view, return user view with Ctrl+Z.[Huawei]un in enInfo: Information center is disabled.[Huawei]sysn Swtich[Swtich]vlan batch 10 20 30 100Info: This operation may take a few seconds. Please wait for a moment...done.[Swtich]int gig 0/0/1[Swtich-GigabitEthernet0/0/1]port link-type trunk[Swtich-GigabitEthernet0/0/1]port trunk allow-pass vlan 10[Swtich-GigabitEthernet0/0/1]quit[Swtich]int gig 0/0/2[Swtich-GigabitEthernet0/0/2]port link-type trunk[Swtich-GigabitEthernet0/0/2]port trunk allow-pass vlan 20[Swtich-GigabitEthernet0/0/2]quit[Swtich]int gig 0/0/3[Swtich-GigabitEthernet0/0/3]port link-type trunk[Swtich-GigabitEthernet0/0/3]port trunk allow-pass vlan 30[Swtich-GigabitEthernet0/0/3]quit[Swtich]int gig 0/0/4[Swtich-GigabitEthernet0/0/4]port link-type trunk[Swtich-GigabitEthernet0/0/4]port trunk allow-pass vlan 100[Swtich-GigabitEthernet0/0/4]quit[Swtich]int vlan 10[Swtich-Vlanif10]ip address 10.164.1.1 255.255.255.0[Swtich-Vlanif10]quit[Swtich]int vlan 20[Swtich-Vlanif20]ip address 10.164.2.1 255.255.255.0[Swtich-Vlanif20]quit[Swtich]int vlan 30[Swtich-Vlanif30]ip address 10.164.3.1 255.255.255.0[Swtich-Vlanif30]quit[Swtich]int vlan 100[Swtich-Vlanif100]ip address 10.164.9.1 255.255.255.0[Swtich-Vlanif100]quit</code></pre></li><li><p>配置时间段</p><blockquote><p>配置 8:00 至 17:30 的周期时间段。</p><pre><code class="lang-powershell">[Swtich]time-range satime 8:00 to 17:30 working-day //设置时间段</code></pre></blockquote></li><li><p>配置 ACL</p><pre><code class="lang-powershell">//配置市场部门到工资查询服务器的访问规则。[Swtich]acl 3002[Swtich-acl-adv-3002] rule deny ip source 10.164.2.0 0.0.0.255 destination 10.164.9.9 0.0.0.0 time-range satime[Swtich-acl-adv-3002]quit//配置研发部门到工资查询服务器的访问规则。[Swtich]acl 3003[Swtich-acl-adv-3003]rule deny ip source 10.164.3.0 0.0.0.255 destination 10.164.9.9 0.0.0.0 timerange satime[Swtich-acl-adv-3003]quit</code></pre></li><li><p>配置基于 ACL 的流分类</p><pre><code class="lang-powershell">//配置流分类 c_market，对匹配 ACL 3002 的报文进行分类。[Swtich]traffic classifier c_market[Swtich-classifier-c_market]if-match acl 3002[Swtich-classifier-c_market]quit//配置流分类 c_rd，对匹配 ACL 3003 的报文进行分类。[Swtich]traffic classifier c_rd[Swtich-classifier-c_rd]if-match acl 3003[Swtich-classifier-c_rd]quit</code></pre></li><li>配置流行为<pre><code class="lang-powershell">//配置流行为 b_market，动作为拒绝报文通过。[Swtich]traffic behavior b_market[Swtich-behavior-b_market]deny[Swtich-behavior-b_market]quit//配置流行为 b_rd，动作为拒绝报文通过。[Swtich]traffic behavior b_rd[Swtich-behavior-b_rd]deny[Swtich-behavior-b_rd]quit</code></pre></li><li>配置流策略<pre><code class="lang-powershell">//配置流策略 p_market，将流分类 c_market 与流行为 b_market 关联。[Swtich]traffic policy p_market[Swtich-trafficpolicy-p_market]classifier c_market behavior b_market[Swtich-trafficpolicy-p_market]quit//配置流策略 p_rd，将流分类 c_rd 与流行为 b_rd 关联。[Swtich]traffic policy p_rd[Swtich-trafficpolicy-p_rd]classifier c_rd behavior b_rd[Swtich-trafficpolicy-p_rd]quit</code></pre></li><li>应用流策略<pre><code class="lang-powershell">//由于市场部访问服务器的流量从接口 GE0/0/2 进入 Switch，所以可以在 GE0/0/2 接口的入方向应用流策略 p_market。[Swtich]int gig 0/0/2[Swtich-GigabitEthernet0/0/2] traffic-policy p_market inbound[Swtich-GigabitEthernet0/0/2]quit//由于研发部访问服务器的流量从接口 GE0/0/3 进入 Switch，所以可以在 GE0/0/3 接口的入方向应用流策略 p_rd。[Swtich]int gig 0/0/3[Swtich-GigabitEthernet0/0/3]traffic-policy p_rd inbound[Swtich-GigabitEthernet0/0/3]quit</code></pre></li><li>验证配置结果</li></ul></li></ol><hr><h1 id="IPv6-over-IPv4-GRE-隧道配置"><a href="#IPv6-over-IPv4-GRE-隧道配置" class="headerlink" title="IPv6-over-IPv4 GRE 隧道配置"></a>IPv6-over-IPv4 GRE 隧道配置</h1><ul><li>由于从 IPv4 向 IPv6 过渡是大势所趋，所以目前有许多从 IPv4 向 IPv6 过渡的技术。本节通过实例介绍采用隧道策略实现从 IPv4 向 IPv6 过渡的技术。</li></ul><ol><li><strong>双栈策略</strong><ul><li>双栈策略是指在网络节点中同时具有 IPv4 和 IPv6 两个协议栈，这样，它既可以接收、处理、收发IPv4 的分组，也可以接收、处理、收发 IPv6 的分组。</li><li>缺点：对网元设备的要求较高，涉及网络中的所有网元设备都支持双协议栈，投资大、建设周期比较长。</li></ul></li><li><strong>隧道策略</strong><ul><li>利用一种协议来传输另一种协议的数据的技术</li><li>主流隧道技术：构造隧道、6to4 隧道以及 MPLS 隧道</li><li>目前的隧道技术主要实现了在 IPv4 数据包中封装 IPv6 数据包。</li></ul></li></ol><p>本实验采用 IPv6-over-IPv4 隧道技术：</p><ul><li>是将 IPv6 报文封装在 IPv4 报文中，让 IPv6 数据包穿过 IPv4 网络进行通信，隧道技术只要求在隧道的入口和出口处进行修改，对其他部分没有要求，容易实现。但是，隧道技术不能实现 IPv4 主机与 1Pv6 主机的直接通信。</li><li><p>路由器 R1 和 R2 经 IPv4 网络连接，路由器以太口分别连接两个 IPv6 网段。通过 Tunnel 将 IPv6 的数据包封装到 IPv4 的数据包中，实现点到点的数据传输。网络拓扑图如图所示。</p><p><img data-src="https://z3.ax1x.com/2021/05/11/gdm5WR.png" alt="gretp"></p></li></ul><ul><li><strong>配置步骤</strong></li></ul><ol><li>配置 R1、R2 接口 IP</li></ol><ul><li>R1<pre><code class="lang-powershell">[R1]int gig 0/0/1[R1-GigabitEthernet0/0/1]ip add 10.1.1.1 24[R1-GigabitEthernet0/0/1]quit[R1]ipv6 //全局使能 IPv6[R1]int gig 0/0/2[R1-GigabitEthernet0/0/2]ipv6 enable //对应接口启动 IPv6 功能[R1-GigabitEthernet0/0/2]ipv6 add fc01::1 64 //接口配置 IPv6 地址[R1-GigabitEthernet0/0/2]quit</code></pre></li><li>R2<pre><code class="lang-powershell">[R2]int gig 0/0/1[R2-GigabitEthernet0/0/1]ip add 10.1.2.2 24[R2-GigabitEthernet0/0/1]quit[R2]ipv6[R2]int gig 0/0/2[R2-GigabitEthernet0/0/2]ipv6 enable[R2-GigabitEthernet0/0/2]ipv6 add fc03::1 64[R2-GigabitEthernet0/0/2]quit</code></pre></li></ul><ol><li><p>配置 R1 和 R2 的 IPV4 静态路由</p><pre><code class="lang-powershell">[R1]ip route-static 10.1.2.2 255.255.255.0 10.1.1.2[R2]ip route-static 10.1.1.1 255.255.255.0 10.1.2.1</code></pre></li><li><p>配置 R1 和 R2 的 Tunnel 接口</p></li></ol><ul><li>R1</li></ul><pre><code class="lang-powershell">[R1]int Tunnel 0/0/1 //进入隧道 Tunnel 0/0/1[R1-Tunnel0/0/1]tunnel-protocol gre //启用隧道协议 GRE[R1-Tunnel0/0/1]ipv6 enable //隧道端口使能 IPv6[R1-Tunnel0/0/1]ipv6 add fc02::1 64 //配置 IPv6 地址[R1-Tunnel0/0/1]source 10.1.1.1 //源端地址[R1-Tunnel0/0/1]destination 10.1.2.2 //目的地址[R1-Tunnel0/0/1]quit</code></pre><ul><li>R2</li></ul><pre><code class="lang-powershell">[R2]int tunnel 0/0/1[R2-Tunnel0/0/1]tunnel-protocol gre[R2-Tunnel0/0/1]ipv6 enable[R2-Tunnel0/0/1]ipv6 add fc02::2 64[R2-Tunnel0/0/1]source 10.1.2.2[R2-Tunnel0/0/1]destination 10.1.1.1[R2-Tunnel0/0/1]quit</code></pre><ol><li>配置 R1 和 R2 的 Tunnel 静态路由<pre><code class="lang-powershell">[R1]ipv6 route-static fc03::1 64 Tunnel 0/0/1[R2]ipv6 route-static fc01::1 64 Tunnel 0/0/1</code></pre></li><li>检查配置结果</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为路由交换实验命令（2）</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%8D%8E%E4%B8%BA%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2%E5%AE%9E%E9%AA%8C%E5%91%BD%E4%BB%A4%EF%BC%882%EF%BC%89/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%8D%8E%E4%B8%BA%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2%E5%AE%9E%E9%AA%8C%E5%91%BD%E4%BB%A4%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="路由器基础"><a href="#路由器基础" class="headerlink" title="路由器基础"></a>路由器基础</h1><ul><li>路由器(Router)是一种典型的==网络层设备== ，在 OSI 参考模型中被称为中介系统，用于完成网络层中继或第三层中继的任务。路由器==负责在两个局域网的网络层间接传输数据分组，并确定网络上数据传送的最佳路径==。</li><li>异种网络互联与多个子网互联都应采用路由器来完成。</li><li>路由器的==主要工作就是为经过的每个数据包寻找一条最佳的传输路径，并将该数据有效地传送到目的站点==。由此可见，选择最佳路径的策略（路由算法）是路由器的关键所在。为了完成这项工作，在路由器中保存着各种传输路径的相关数据一路由表(RoutingTable)供路由选择时使用。路由表中保存着子网的标志信息、下一跳地址和将数据转发出去的接口等信息。</li><li><strong>路由表分为静态路由表和动态路由表</strong><ul><li>静态路由：手工指定（默认路由、静态路由）</li><li>动态路由：</li><li>距离矢量（Distance-Vector）路由协议：RIP（Routing information Protocol）</li><li>链路状态（Link-State）路由协议：OSPF、IS-IS、IGP</li><li>平衡混合（Balanced-Hybrid）路由协议：BGP</li></ul></li></ul><h1 id="路由器简介和分类：路由器（Router）"><a href="#路由器简介和分类：路由器（Router）" class="headerlink" title="路由器简介和分类：路由器（Router）"></a>路由器简介和分类：路由器（Router）</h1><ul><li><p>用来连接不同的局域网，路由器可以学习和传播各种路由信息，并根据这些路由信息将网络中的分组转发到正确的网络中。路由器工作在第3层网络层，==具有局域网和广域网两种接口==。</p></li><li><p><strong>根据功能、性能、应用分为：</strong></p><ol><li>骨干路由器：主干网络互连，模块化、热备份、双电源等冗余技术。如国家级、省级骨干网互连。如NE40E以上系列。</li><li>企业级路由器：用于一个企业出入口，提供多种功能，完成企业组网。可实现数据、语音、视频等应用。如AR3600系列。</li><li>接入级路由器：边缘路由器，小型企业，或者部门组网。如AR2200系列。</li></ol></li></ul><h1 id="路由器上的一些常见端口"><a href="#路由器上的一些常见端口" class="headerlink" title="路由器上的一些常见端口"></a>路由器上的一些常见端口</h1><ol><li><code>Serial</code>端口：高速同步串口，与广域网连接，可连接DDN、帧中继、X.25、PSTN等网络。</li><li><code>Console</code>端口：初次配置控制台端口，利用终端仿真程序，如超级终端、<code>SecureCRT</code>对路由器进行本地配置。</li><li><code>RJ-45</code>端口：以太网口，通过双绞线连接局域网，有的标识ETH，有的标识为<code>10/100 b TX</code>。</li><li><code>AUX</code>端口：远程配置路由器，连接<code>Modem</code></li></ol><h1 id="交换路由的操作系统VRP："><a href="#交换路由的操作系统VRP：" class="headerlink" title="交换路由的操作系统VRP："></a>交换路由的操作系统VRP：</h1><ul><li>是华为公司为其网络设备开发的操作维护系统。用户通过运行命令行CLI，对网络设备进行功能设置</li></ul><h1 id="访问交换机和路由器的几种方法："><a href="#访问交换机和路由器的几种方法：" class="headerlink" title="访问交换机和路由器的几种方法："></a>访问交换机和路由器的几种方法：</h1><ol><li><code>Console</code>口，初次配置</li><li><code>AUX</code>口远程拨号</li><li><code>Telnet</code>带外远程</li><li>Web浏览器输入IP</li><li><p>网管软件</p><p><img data-src="https://z3.ax1x.com/2021/05/09/gYT8yj.png" alt="webjhj"></p></li></ol><h1 id="交换和路由中的广播域和冲突域："><a href="#交换和路由中的广播域和冲突域：" class="headerlink" title="交换和路由中的广播域和冲突域："></a>交换和路由中的广播域和冲突域：</h1><ol><li><strong>冲突域</strong> ： 在同一个冲突域中的每一个节点都能收到所有被发送的帧。简单的说就是同一时间内只能有一台设备发送信息的范围。 ==交换机能分隔冲突域 。一个端口一个冲突域==</li><li><strong>广播域</strong> ：网络中能接收任一设备发出的广播帧的所有设备的集合。简单的说如果站点发出一个广播信号，所有能接收收到这个信号的设备范围称为一个广播域。 ==路由器能分隔广播域。一个端口一个广播域==</li></ol><h1 id="路由器基本配置实验"><a href="#路由器基本配置实验" class="headerlink" title="路由器基本配置实验"></a>路由器基本配置实验</h1><h2 id="设置系统的日期、时间和时区"><a href="#设置系统的日期、时间和时区" class="headerlink" title="设置系统的日期、时间和时区"></a>设置系统的日期、时间和时区</h2><pre><code class="lang-powershell">&lt;Huawei&gt;clock time zone BJ add 08：00：00&lt;Huawei&gt;clock datetime 20：10：00 2015-03-26</code></pre><h2 id="设置设备名称和管理IP地址"><a href="#设置设备名称和管理IP地址" class="headerlink" title="设置设备名称和管理IP地址"></a>设置设备名称和管理IP地址</h2><pre><code class="lang-powershell">&lt;Huawe1&gt;system-view[Huawei]sysname Server[Server]interface gigabitethernet0/0/0[Server-GigabitEthernet0/0/0]ip address 10.137.217.177 24[Server-GigabitEthernet0/0/0]quit</code></pre><h1 id="路由相关实验"><a href="#路由相关实验" class="headerlink" title="路由相关实验"></a>路由相关实验</h1><h2 id="静态路由配置"><a href="#静态路由配置" class="headerlink" title="静态路由配置"></a>静态路由配置</h2><p><img data-src="https://z3.ax1x.com/2021/05/09/gYTBpF.png" alt="s"></p><ol><li>配置各路由的接口 IP</li></ol><ul><li><strong>R1</strong></li></ul><pre><code class="lang-powershell">&lt;Huawei&gt;sys&lt;Huawei&gt;system-viewEnter system view, return user view with Ctrl+Z.[Huawei]un in enInfo: Information center is disabled.[Huawei]sysname R1[R1]interface GigabitEthernet 0/0/1[R1-GigabitEthernet0/0/1]ip address 10.1.1.1 24 //配置接口 IP[R1-GigabitEthernet0/0/1]quit[R1]interface GigabitEthernet 0/0/2[R1-GigabitEthernet0/0/2]ip address 10.1.4.1 24 //配置接口 IP[R1-GigabitEthernet0/0/2]quit</code></pre><ul><li><strong>R2</strong></li></ul><pre><code class="lang-powershell">&lt;Huawei&gt;system-view Enter system view, return user view with Ctrl+Z.[Huawei]un in enInfo: Information center is disabled.[Huawei]sysname R2[R2]interface GigabitEthernet 0/0/1[R2-GigabitEthernet0/0/1]ip address 10.1.2.1 24 //配置接口 IP [R2-GigabitEthernet0/0/1]interface GigabitEthernet 0/0/2[R2-GigabitEthernet0/0/2]ip address 10.1.4.2 24 //配置接口 IP[R2]interface GigabitEthernet 0/0/0[R2-GigabitEthernet0/0/0]ip address 10.1.5.1 24 //配置接口 IP[R2-GigabitEthernet0/0/0]quit</code></pre><ul><li><strong>R3</strong></li></ul><pre><code class="lang-powershell">&lt;Huawei&gt;system-view Enter system view, return user view with Ctrl+Z.[Huawei]sysn[R3]UN IN ENInfo: Information center is disabled.[Huawei]sysname R3[R3]interface GigabitEthernet 0/0/2[R3-GigabitEthernet0/0/2]ip address 10.1.5.2 24 //配置接口 IP[R3-GigabitEthernet0/0/2]quit[R3]interface GigabitEthernet 0/0/1[R3-GigabitEthernet0/0/1]ip address 10.1.3.1 24 //配置接口 IP[R3-GigabitEthernet0/0/1]quit</code></pre><ol><li>配置各路由器的静态 IP</li></ol><ul><li><strong>R1</strong></li></ul><pre><code class="lang-powershell">[R1]ip route-static 10.1.2.0 255.255.255.0 10.1.4.2 //R1 到 PC2 的静态路由[R1]ip route-static 10.1.3.0 255.255.255.0 10.1.4.2 //R1 到 PC3 的静态路由[R1]ip route-static 10.1.5.0 255.255.255.0 10.1.4.2 //R1 到 R3 的静态路由</code></pre><ul><li><strong>R2</strong></li></ul><pre><code class="lang-powershell">[R2]ip route-static 10.1.1.0 255.255.255.0 10.1.4.1 //R2 到 PC1 的静态路由[R2]ip route-static 10.1.3.0 255.255.255.0 10.1.5.2 //R2 到 PC3 的静态路由</code></pre><ul><li><strong>R3</strong></li></ul><pre><code class="lang-powershell">[R3]ip route-static 10.1.1.0 255.255.255.0 10.1.5.1 //R3 到 PC1 的静态路由[R3]ip route-static 10.1.2.0 255.255.255.0 10.1.5.1 //R3 到 PC2 的静态路由[R3]ip route-static 10.1.4.0 255.255.255.0 10.1.5.1 //R3 到 R1 的静态路由</code></pre><ol><li>在各个路由器上执行 <code>display ip routing-table</code> 查看路由表</li></ol><p><img data-src="https://z3.ax1x.com/2021/05/09/gYTr6J.png" alt="iprou"></p><ol><li>在PC机上互相 <code>ping</code>，可以通信</li></ol><hr><h2 id="静态路由-IPv6-配置"><a href="#静态路由-IPv6-配置" class="headerlink" title="静态路由 IPv6 配置"></a>静态路由 IPv6 配置</h2><p><img data-src="https://z3.ax1x.com/2021/05/09/gYTc01.png" alt="jtlyv6"></p><ol><li>配置各路由的接口 IP（类似 IPv4 配置，IPv6 功能默认关闭，使用时需开启全局使能 IPv6）</li></ol><ul><li><strong>R1</strong></li></ul><pre><code class="lang-powershell">&lt;Huawei&gt;system-view Enter system view, return user view with Ctrl+Z.[Huawei]un info enInfo: Information center is disabled.[Huawei]sysname R1[R1]ipv6 //全局使能 IPV6（启用路由器 IPv6 报文转发能力）[R1]interface GigabitEthernet 0/0/0 //进入对应接口[R1-GigabitEthernet0/0/0]ipv6 enable //接口开启 IPv6 功能[R1-GigabitEthernet0/0/0]ipv6 address 1::1 64 //接口配置对应的 IPv6 地址[R1-GigabitEthernet0/0/0]quit[R1]interface GigabitEthernet 0/0/2 //进入对应接口[R1-GigabitEthernet0/0/2]ipv6 enable //接口开启 IPv6 功能[R1-GigabitEthernet0/0/2]ipv6 address 3::1 64 //接口配置对应的 IPv6 地址[R1-GigabitEthernet0/0/2]quit</code></pre><ul><li><strong>R2</strong></li></ul><pre><code class="lang-powershell">&lt;Huawei&gt;system-view Enter system view, return user view with Ctrl+Z.[Huawei]sysn R2[R2]ipv6[R2]interface GigabitEthernet 0/0/2[R2-GigabitEthernet0/0/2]ipv6 enable [R2-GigabitEthernet0/0/2]ipv6 address 3::2 64[R2-GigabitEthernet0/0/2]quit[R2]interface GigabitEthernet 0/0/0[R2-GigabitEthernet0/0/0]ipv6 enable [R2-GigabitEthernet0/0/0]ipv6 address 2::1 64[R2-GigabitEthernet0/0/0]quit</code></pre><blockquote><p>R2 接口设置步骤同 R1</p></blockquote><ol><li>配置到各路由器的静态路由</li></ol><ul><li><strong>R1</strong></li></ul><pre><code class="lang-powershell">[R1]ipv6 route-static 2:: 64 3::2 //R1 到 PC2 的静态 IPv6 路由</code></pre><ul><li><strong>R2</strong></li></ul><pre><code class="lang-powershell">[R2]ipv6 route-static 1:: 64 3::1 //R2 到 PC1 的静态 IPv6 路由</code></pre><ol><li>检查配置结果</li></ol><ul><li>使用 <code>display ipv6 routing-table</code> 命令查看路由器的 IP 路由表</li><li>使用 <code>Ping ipv6</code> 命令验证连通性，要求从 PC1 可以<code>ping</code> 通 PC2</li></ul><h2 id="RIP路由配置"><a href="#RIP路由配置" class="headerlink" title="RIP路由配置"></a>RIP路由配置</h2><ul><li>距离矢量路由协议（D-V）RIPv2 支持 CIDR/VLSM<ul><li>使用==组播地址（224.0.0.x）==发送路由信息</li><li>适用于==小型网络（最大跳 15）==</li><li>==30s 广播一次路由信息==</li><li>==工作于网络层==</li><li>优先级（AD）默认 100</li></ul></li></ul><p><img data-src="https://z3.ax1x.com/2021/05/09/gYTWtK.png" alt="rips"></p><ol><li>配置各路由器的接口 IP</li></ol><ul><li><strong>配置R1</strong></li></ul><pre><code class="lang-powershell">&lt;Huawei&gt;system-view Enter system view, return user view with Ctrl+Z.[Huawei]un in enInfo: Information center is disabled.[Huawei]sysn R1[R1]int gig 0/0/1[R1-GigabitEthernet0/0/1]ip address 192.168.1.1 24[R1-GigabitEthernet0/0/1]</code></pre><ul><li><strong>配置R2</strong></li></ul><pre><code class="lang-powershell">&lt;Huawei&gt;system-view Enter system view, return user view with Ctrl+Z.[Huawei]Un in enInfo: Information center is disabled.[Huawei]sysn R2[R2]int gig 0/0/2[R2-GigabitEthernet0/0/2]ip add 192.168.1.2 24[R2-GigabitEthernet0/0/2]int gig 0/0/1[R2-GigabitEthernet0/0/1]ip add 10.1.1.1 24[R2-GigabitEthernet0/0/1]quit</code></pre><ul><li><strong>配置R3</strong></li></ul><pre><code class="lang-powershell">&lt;Huawei&gt;system-view Enter system view, return user view with Ctrl+Z.[Huawei]Un in enInfo: Information center is disabled.[Huawei]sysn R3[R3]int gig 0/0/2[R3-GigabitEthernet0/0/2]ip add 10.1.1.2 24[R3-GigabitEthernet0/0/2]int gig 0/0/1[R3-GigabitEthernet0/0/1]ip add 172.16.1.1 24[R3-GigabitEthernet0/0/1]quit</code></pre><ul><li><strong>配置R4</strong></li></ul><pre><code class="lang-powershell">&lt;Huawei&gt;system-view Enter system view, return user view with Ctrl+Z.[Huawei]Un in enInfo: Information center is disabled.[Huawei]sysn R4[R4]int gig 0/0/2[R4-GigabitEthernet0/0/2]ip add 172.16.1.2 24[R4-GigabitEthernet0/0/2]quit</code></pre><ol><li>配置各个路由器的 RIP 功能</li></ol><ul><li><strong>配置R1</strong></li></ul><pre><code class="lang-powershell">[R1]rip //进入 RIP 配置[R1-rip-1]network 192.168.1.0 //宣告网络[R1-rip-1]quit</code></pre><ul><li><strong>配置R2</strong></li></ul><pre><code class="lang-powershell">[R2]rip[R2-rip-1]network 192.168.1.0[R2-rip-1]network 10.0.0.0[R2-rip-1]quit</code></pre><ul><li><strong>配置R3</strong></li></ul><pre><code class="lang-powershell">[R3]rip[R3-rip-1]network 10.0.0.0[R3-rip-1]network 172.16.0.0[R3-rip-1]quit</code></pre><ul><li><strong>配置R4</strong></li></ul><pre><code class="lang-powershell">[R4]rip[R4-rip-1]network 172.16.0.0[R4-rip-1]quit</code></pre><ol><li>查看各路由器上 RIP 信息</li></ol><ul><li>使用 <code>display rip 1 route</code></li></ul><p><img data-src="https://z3.ax1x.com/2021/05/09/gYT51e.png" alt="rips"></p><ol><li>将 RIP 路由协议升级为 RIPv2 版本<blockquote><p>分别在路由器 R1、R2、R3、R4 配置 RIP-2,在路由器 R1 上配置如下，其他路由器上配置方法相同。</p></blockquote></li></ol><pre><code class="lang-powershell">[R1/R2/R3/R4]rip //进入 rip 配置[R1/R2/R3/R4-rip-1]version 2 //设置 RIPv2 版本[R1/R2/R3/R4-rip-1]quit</code></pre><ul><li>使用 <code>display rip 1 route</code> 查看版本变更效果</li></ul><h2 id="OSPF路由配置"><a href="#OSPF路由配置" class="headerlink" title="OSPF路由配置"></a>OSPF路由配置</h2><ul><li>OSPF(<code>Open Shortest Path First</code> 开放式最短路径优先）<ul><li>自治系统（AS）：<ul><li>自治系统包括一个单独管理实体下所控制的一组路由器（OSPF 是内部网关路由协议，工作于自治系统内部）</li></ul></li><li>链路状态（LS）：<ul><li>指路由器接口的状态（如 Up 、Down 、IP 地址、网络类型、链路开销以及路由器和它邻接路由器间的关系）</li></ul></li></ul></li></ul><hr><ul><li>链路状态信息通过链路状态通告(Link State Advertisement, LSA) 扩散到网络上的每台路由器，每台路由器根据 LSA 信息建立一个于千网络的拓扑数据库（邻居表）<ul><li>最短路径优先算法(SPF)=迪克斯加算法(Dijkstra)<ul><li>利用从 LSA 通告得来的信息计算到达每一个目标网络的最短路径，以自身为根生成一棵树，包含了到达每个目的网络的完整路径</li></ul></li><li>路由器标识<ul><li>OSPF 的路由标识是一个 32 位的数字，它在自治系统中被用来唯一地识别路由器。默认使用最高回环地址（loopback），若回环地址没有被配置，则使用物理接口上最高的 IP 地址作为路由器标识</li></ul></li><li>邻居和邻接<ul><li>OSPF 在相邻路由器间建立邻接关系，使它们交换路由信息。</li><li>邻居是指共享同一网络的路由器，并使用 Hello 包来建立和维护邻居路由器间的邻接关系。</li></ul></li><li>区域<ul><li>在 OSPF 网络中使用区域(Area)为自治系统分段。</li><li>OSPF 是一种层次化的路由选择协议，区域 0 是一个 OSPF 网络中必须具有的区域，也称为主干区域，其他所有区域要求通过区域 0 互连到一起。</li></ul></li></ul></li></ul><hr><ul><li>简化原理：<ul><li>发送 Hello 报文建立邻间关系（邻居表）→形成链路状态数据库（拓扑表）→SPF（Dijkstra）算法形成路由表（路由表）</li></ul></li></ul><p><img data-src="https://z3.ax1x.com/2021/05/09/gYT7nA.png" alt="ospfs"></p><ol><li>配置各个路由器的接口 IP</li><li>配置各路由器的区域</li></ol><ul><li><p><strong>区域0</strong></p><ol><li><p>配置 R1</p><pre><code class="lang-powershell">[R1]ospf //进入 ospf 配置[R1-ospf-1]area 0 //进入区域 0[R1-ospf-1-area-0.0.0.0]network 192.168.1.0 0.0.0.255 //宣告网络（通配符掩码）</code></pre></li><li><p>配置 R2</p><pre><code class="lang-powershell">[R2]ospf[R2-ospf-1]area 0[R2-ospf-1-area-0.0.0.0]network 192.168.1.0 0.0.0.255</code></pre></li></ol></li><li><p><strong>区域1</strong></p><ol><li><p>配置 R1</p><pre><code class="lang-powershell">[R1]ospf //进入 ospf 配置[R1-ospf-1]area 1 //进入区域 1[R1-ospf-1-area-0.0.0.1]network 192.168.2.0 0.0.0.255 //宣告网络（通配符掩码）</code></pre></li><li><p>配置 R3</p><pre><code class="lang-powershell">[R3]ospf[R3-ospf-1]area 1[R3-ospf-1-area-0.0.0.1]network 192.168.2.0 0.0.0.255[R3-ospf-1-area-0.0.0.1]network 192.168.3.0 0.0.0.255</code></pre></li><li>配置 R5<pre><code class="lang-powershell">[R5]ospf[R5-ospf-1]area 1[R5-ospf-1-area-0.0.0.1]network 192.168.3.0 0.0.0.255</code></pre></li></ol></li><li><p><strong>区域2</strong></p><ol><li><p>配置 R2</p><pre><code class="lang-powershell">[R2-ospf-1]ospf //进入 ospf 配置[R2-ospf-1]area 2 //进入区域 2[R2-ospf-1-area-0.0.0.2]network 192.168.4.0 0.0.0.255 //宣告网络（通配符掩码）</code></pre></li><li><p>配置 R4</p><pre><code class="lang-powershell">[R4]ospf[R4-ospf-1]area 2[R4-ospf-1-area-0.0.0.2]network 192.168.4.0 0.0.0.255[R4-ospf-1-area-0.0.0.2]network 192.168.5.0 0.0.0.255</code></pre></li><li>配置 R6<pre><code class="lang-powershell">[R6]ospf[R6-ospf-1]area 2[R6-ospf-1-area-0.0.0.2]network 192.168.5.0 0.0.0.255</code></pre></li></ol></li></ul><hr><ol><li>查看各路由器的路由表(<code>dis ip routing-table/dis ospf peer</code>)</li></ol><p><img data-src="https://z3.ax1x.com/2021/05/09/gYTb7t.png" alt="ospfse"></p><ol><li>使用 <code>dis ospf routing</code> 查看<code>R1 R3 R5 R6</code></li></ol><p><img data-src="https://z3.ax1x.com/2021/05/09/gYTXh8.png" alt="ospfeqw"></p>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为路由交换实验命令（1）</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%8D%8E%E4%B8%BA%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2%E5%AE%9E%E9%AA%8C%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%8D%8E%E4%B8%BA%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2%E5%AE%9E%E9%AA%8C%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="交换机基本配置命令"><a href="#交换机基本配置命令" class="headerlink" title="交换机基本配置命令"></a>交换机基本配置命令</h1><h2 id="一、模式命令："><a href="#一、模式命令：" class="headerlink" title="一、模式命令："></a>一、模式命令：</h2><ol><li>用户模式：<code>Switch&gt;</code></li><li>特权模式：<code>Switch&gt;enable</code><br><code>Switch#</code></li><li>全局配置模式：<code>Switch# config terminal</code><br><code>Switch（config）#</code></li><li>接口配置模式：<code>Switch（config）#interface fastethernet0/1</code><br><code>Switch（config-if）#</code></li><li>Line模式：<code>Switch（config）#line console 0</code><br><code>Switch（config-line）#</code></li></ol><h2 id="二、特权模式下的命令："><a href="#二、特权模式下的命令：" class="headerlink" title="二、特权模式下的命令："></a>二、特权模式下的命令：</h2><ol><li>查看交换机MAC地址：<code>Switch#show mac-address-table</code></li><li>Cisco发现协议（CDP）：<pre><code class="lang-powershell"> Switch#show cdp Switch#show cdp interface fastethernet0/1 Switch#show cdp neighbors Switch#show cdp neighbors detail Switch#show cdp entry</code></pre></li><li>保存交换机配置：<br><code>Switch#copy running-config startup-config或者Switch#write</code></li><li>恢复交换机出厂值：<pre><code class="lang-powershell"> Switch#erase startup-config Switch#reload</code></pre><h2 id="三、全局配置模式下的命令："><a href="#三、全局配置模式下的命令：" class="headerlink" title="三、全局配置模式下的命令："></a>三、全局配置模式下的命令：</h2></li><li>配置主机名：<code>Switch（config）#hostname Sw1</code><br><code>Sw1（config）#</code></li><li>设置登陆台密码：<code>Switch（config）#line console 0</code></li></ol><pre><code class="lang-powershell">Switch（config-line）#password 密码Switch（config-line）#login</code></pre><ol><li>使能口令：<code>Switch（config）#enable Password 密码</code></li><li>加密保存的使能口令：<code>Switch（config）#enable secret 密码</code></li><li>配置IP地址：<pre><code class="lang-powershell">Switch（config）#interface vlan 1Switch（config-if）#ip address IP地址 网关Switch（config-if）#no shutdown</code></pre></li><li>配置交换机网关：<code>Switch（config）#ip default-gateway 网关</code></li></ol><h2 id="四、VLAN配置命令："><a href="#四、VLAN配置命令：" class="headerlink" title="四、VLAN配置命令："></a>四、VLAN配置命令：</h2><ol><li>创建vlan命令：<ul><li>全局配置模式下：<pre><code class="lang-powershell">Switch（config）#vlan 2Switch（config）#name v2Switch（config）#mtu 数值Switch（config）#end</code></pre></li><li>Vlan数据库下：<pre><code class="lang-powershell">Switch#vlan databaseSwitch#vlan 2 name v2Switch#vlan 2 mut 数值Switch#exit</code></pre></li></ul></li><li>删除vlan命令：<ul><li>全局配置模式下：<pre><code class="lang-powershell">Switch（config）#no vlan 2Switch（config）#end</code></pre></li><li>Vlan数据库下：<pre><code class="lang-powershell">Switch#no vlan 2 name v2Switch#exit</code></pre></li></ul></li><li>在vlan中添加端口：<pre><code class="lang-powershell">Switch#config terminalSwitch（config）#interface f0/1（端口）Switch（config-if）#Switchport mode accessSwitch（config-if）#switchport access vlan 2Switch（config-if）#end# 一次将多个端口添加到vlan中：Switch#config terminalSwitch（config）#interface range f0/1 - 5（端口）Switch（config-if）#switchport access vlan 2Switch（config-if）#end注：switch#show vlan biref(查看vlan信息)</code></pre></li><li><p>配置vlan trunk：</p><ol><li>配置接口为trunk命令：<pre><code class="lang-powershell">Switch（config）# interface f0/1（端口）Switch（config-if）#Switchport mode trunk</code></pre></li><li>配置接口为动态协商模式的命令：<pre><code class="lang-powershell">Switch（config）# interface f0/1（端口）Switch（config-if）#switchport mode dynamic desirable/auto</code></pre></li><li>从trunk中删除vlan：<pre><code class="lang-powershell">Switch（config）# interface f0/1（端口）Switch（config-if）#Switchport trunk allowed vlan remove 2</code></pre></li><li>在trunk中添加vlan：<pre><code class="lang-powershell">Switch（config）# interface f0/1（端口）Switch（config-if）#Switchport trunk allowed vlan add 2</code></pre></li></ol></li></ol><hr><h1 id="配置系统基本信息命令"><a href="#配置系统基本信息命令" class="headerlink" title="配置系统基本信息命令"></a>配置系统基本信息命令</h1><h2 id="执行命令sysname-host-name，设置设备名称"><a href="#执行命令sysname-host-name，设置设备名称" class="headerlink" title="执行命令sysname host-name，设置设备名称"></a>执行命令sysname host-name，设置设备名称</h2><pre><code class="lang-powershell">&lt;HUAWEI&gt; system-view [HUAWEI] sysname Switch [Switch] undo sysname    //恢复主机名到缺省情况 [HUAWEI] quit</code></pre><h2 id="执行命令clock-datetime设置当前时间和日期"><a href="#执行命令clock-datetime设置当前时间和日期" class="headerlink" title="执行命令clock datetime设置当前时间和日期"></a>执行命令clock datetime设置当前时间和日期</h2><pre><code class="lang-powershell">&lt;HUAWEI&gt; clock datetime 08:00:00 2018-12-01</code></pre><h2 id="执行命令clock-timezone，配置设备所在地区及其对应的时区"><a href="#执行命令clock-timezone，配置设备所在地区及其对应的时区" class="headerlink" title="执行命令clock timezone，配置设备所在地区及其对应的时区"></a>执行命令clock timezone，配置设备所在地区及其对应的时区</h2><pre><code class="lang-powershell">&lt;HUAWEI&gt; system-view [HUAWEI] clock timezone Beijing add 08:00:00</code></pre><h2 id="执行命令display-clock，查看系统当前日期和时钟"><a href="#执行命令display-clock，查看系统当前日期和时钟" class="headerlink" title="执行命令display clock，查看系统当前日期和时钟"></a>执行命令display clock，查看系统当前日期和时钟</h2><pre><code class="lang-powershell">[HUAWEI] display clock 2018-12-01 08:02:30+08:00                                                        Saturday                                                        Time Zone(Beijing) : UTC+08:00</code></pre><h2 id="执行命令ip-address，配置设备管理IP地址，执行命令ip-route-static，配置设备缺省网关"><a href="#执行命令ip-address，配置设备管理IP地址，执行命令ip-route-static，配置设备缺省网关" class="headerlink" title="执行命令ip address，配置设备管理IP地址，执行命令ip route-static，配置设备缺省网关"></a>执行命令ip address，配置设备管理IP地址，执行命令ip route-static，配置设备缺省网关</h2><ul><li>对于有管理网口的设备，在管理网口下配置管理IP地址<pre><code class="lang-powershell">[HUAWEI] interface MEth 0/0/1[HUAWEI-MEth0/0/1] ip address 10.10.10.2 255.255.255.0    //设备管理IP[HUAWEI-MEth0/0/1] quit[HUAWEI] ip route-static 0.0.0.0 0 10.10.10.1    //设备缺省网关</code></pre></li><li>对于没有管理网口的设备，在Vlanif接口下配置管理IP地址</li></ul><pre><code class="lang-powershell">[HUAWEI] vlan 10 [HUAWEI-vlan10] quit[HUAWEI] interface Vlanif 10[HUAWEI-Vlanif10] ip address 10.10.10.2 255.255.255.0    //设备管理IP[HUAWEI-Vlanif10] quit[HUAWEI] ip route-static 0.0.0.0 0 10.10.10.1    //设备缺省网关</code></pre><h2 id="执行命令display-ip-interface-brief，查看接口上IP地址的简要信息。执行命令display-ip-routing-table，查看IP路由信息"><a href="#执行命令display-ip-interface-brief，查看接口上IP地址的简要信息。执行命令display-ip-routing-table，查看IP路由信息" class="headerlink" title="执行命令display ip interface brief，查看接口上IP地址的简要信息。执行命令display ip routing-table，查看IP路由信息"></a>执行命令display ip interface brief，查看接口上IP地址的简要信息。执行命令display ip routing-table，查看IP路由信息</h2><pre><code class="lang-powershell">[HUAWEI] display ip interface brief *down: administratively down                                                     ^down: standby                                                                   (l): loopback                                                                    (s): spoofing                                                                    (E): E-Trunk down                                                                The number of interface that is UP in Physical is 2                              The number of interface that is DOWN in Physical is 1                            The number of interface that is UP in Protocol is 2                              The number of interface that is DOWN in Protocol is 1                            Interface                         IP Address/Mask      Physical   Protocol       NULL0                             unassigned           up         up(s)          Vlanif10                          10.10.10.2/24        up         up             [HUAWEI] display ip routing-table Route Flags: R - relay, D - download to fib                                      ------------------------------------------------------------------------------   Routing Tables: Public                                                                    Destinations : 5        Routes : 5                                      Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface               0.0.0.0/0   Static  60   0          RD   10.10.10.1      Vlanif10             10.0.0.0/8   Direct  0    0           D   10.0.0.1        InLoopBack0            10.0.0.1/32  Direct  0    0           D   10.0.0.1        InLoopBack0          10.10.10.0/24  Direct  0    0           D   10.10.10.2      Vlanif10           10.10.10.2/32  Direct  0    0           D   10.0.0.1        Vlanif10</code></pre><h2 id="执行命令ssh-user，配置SSH用户相关参数；执行命令local-user，配置本地用户相关参数，实现通过SSH协议登录设备。"><a href="#执行命令ssh-user，配置SSH用户相关参数；执行命令local-user，配置本地用户相关参数，实现通过SSH协议登录设备。" class="headerlink" title="执行命令ssh user，配置SSH用户相关参数；执行命令local-user，配置本地用户相关参数，实现通过SSH协议登录设备。"></a>执行命令ssh user，配置SSH用户相关参数；执行命令local-user，配置本地用户相关参数，实现通过SSH协议登录设备。</h2><pre><code class="lang-powershell">&lt;HUAWEI&gt; system-view [HUAWEI] user-interface vty 0 4 [HUAWEI-ui-vty0-4] authentication-mode aaa    //配置VTY用户认证方式为AAA认证 [HUAWEI-ui-vty0-4] protocol inbound ssh    //VTY用户界面所支持的协议缺省为SSH协议。 [HUAWEI-ui-vty0-4] quit [HUAWEI] aaa [HUAWEI-aaa] local-user admin password irreversible-cipher admin@123    //创建与SSH用户同名的本地用户和对应的登录密码 [HUAWEI-aaa] local-user admin service-type ssh terminal    //配置本地用户的服务方式 [HUAWEI-aaa] local-user admin privilege level 15    //配置本地用户级别 [HUAWEI-aaa] quit [HUAWEI] ssh user admin    //创建SSH用户 [HUAWEI] ssh user admin authentication-type password    //配置SSH用户的认证方式为password [HUAWEI] ssh user admin service-type stelnet    //配置SSH用户的服务方式 [HUAWEI] stelnet server enable    //使能设备的STelnet服务器功能</code></pre><blockquote><p>注意：确保SSH用户名称与本地用户名称相同。<br>本页面只介绍了使用Password认证方式实现通过STelnet协议登录设备。更多配置Telnet或STelnet协议实现远程登录的详细操作参见配置通过Telnet登录设备或配置通过STelnet登录设备。</p></blockquote><h2 id="执行命令display-current-configuration，查看设备当前配置。"><a href="#执行命令display-current-configuration，查看设备当前配置。" class="headerlink" title="执行命令display current-configuration，查看设备当前配置。"></a>执行命令display current-configuration，查看设备当前配置。</h2><pre><code class="lang-powershell">&lt;HUAWEI&gt; system-view [HUAWEI] display current-configuration | include ip  ip address 10.10.10.2 255.255.255.0                                            ip route-static 0.0.0.0 0.0.0.0 10.10.10.1</code></pre><h2 id="查询系统信息的命令（常用！）"><a href="#查询系统信息的命令（常用！）" class="headerlink" title="查询系统信息的命令（常用！）"></a>查询系统信息的命令（常用！）</h2><ul><li><code>display current-configuration</code>，查看系统配置。</li><li><code>display interface brief</code>，查看接口摘要信息。</li><li><code>display clock</code>，查看系统当前日期和时钟。</li><li><code>display ip interface brief</code>，查看接口上IP地址的简要信息。</li><li><code>display ip routing-table</code>，查看系统路由信息。</li><li><code>display user-interface</code>，查看用户界面的物理属性和配置。</li><li><code>display local-user</code>，查看本地用户列表。</li><li><code>display ssh user-information</code>，在SSH服务器端查看SSH用户信息。</li><li><code>display ssh server status</code>，查看SSH服务器的全局配置信息。</li><li><code>display ssh server session</code>，查看与SSH客户端连接的会话信息。</li><li><code>display mac-address</code>，查看交换机MAC、VLAN下的MAC绑定</li><li><code>display interface vlanif1</code>，显示VLANIF1的MAC地址</li></ul><blockquote><p>参考文档：华为交换机命令总结<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaGZ0aWFuL3AvODg1ODM0My5odG1s">https://www.cnblogs.com/hftian/p/8858343.html</span></p></blockquote><h1 id="交换机分类"><a href="#交换机分类" class="headerlink" title="交换机分类"></a>交换机分类</h1><table>    <tr>        <th>划分方式</th>        <th>交换分类</th>        <th>特点</th>    </tr>    <tr>        <td rowspan=3>交换方式</td>        <td>存储转发</td>        <td>存储、校验、延时大</td>    </tr>    <tr>        <td>直通式</td>        <td>直接、不校验、速度快</td>    </tr>        <td>碎片过滤</td>        <td>64字节、小的丢弃</td>    </tr>        <td rowspan=3>协议层次</td>        <td>二层交换</td>        <td>MAC地址交换</td>    </tr>        <td>三层交换</td>        <td>IP地址交换</td>    </tr>        <td>多层交换</td>        <td>端口号、协议交换</td>    </tr>        <td rowspan=2>交换结构</td>        <td>固定式</td>        <td>固定数量端口，如24口</td>    </tr>        <td>模块式</td>        <td>预留插槽、插入模块扩展</td>    </tr>        <td rowspan=2>配置方式</td>        <td>堆叠式</td>        <td>堆叠口、4到9层、统一</td>    </tr>        <td>非堆叠</td>        <td>级联、不超4层</td>    </tr>        <td rowspan=3>管理类型</td>        <td>网管型</td>        <td>支持SNMP和MIB网管协议</td>    </tr>        <td>非网管</td>        <td>傻瓜交换机、不需配置</td>    </tr>        <td>智能型</td>        <td>支持WEB配置和SNMP、MIB</td>    </tr>        <td rowspan=3>适用范围</td>        <td>接入层</td>        <td>用户接入、多接口</td>    </tr>        <td>汇聚层</td>        <td>策略控制ACL、VLAN、QoS</td>    </tr>        <td>核心层</td>        <td>高速转发、冗余、均衡</td>    </tr></table><h1 id="典型的三层交换机、"><a href="#典型的三层交换机、" class="headerlink" title="典型的三层交换机、"></a>典型的三层交换机、</h1><ol><li>接入层交换机，如S2700。</li><li>汇聚层交换机，如S3700。</li><li>核心层交换机，如S5700</li></ol><p><img data-src="https://z3.ax1x.com/2021/05/08/gJMPW6.png" alt="jhj"></p><h1 id="交换机相关计算公式"><a href="#交换机相关计算公式" class="headerlink" title="交换机相关计算公式"></a>交换机相关计算公式</h1><ul><li>包转发率：端口吞吐率，64字节数据包转发能力，单位 pps（包/秒）。计算公式如下：</li></ul><script type="math/tex; mode=display">包转发率=千兆端口数×1.488Mpps+百兆端口数×0.1488Mpps+其余端口×相应包转发pps</script><ul><li>背板带宽：端口处理器和数据总线之间单位时间内传输的最大数据量。单位Gbps（吉比特/秒）。计算公式如下：</li></ul><script type="math/tex; mode=display">总带宽=端口数×端口速率×2（全双工）</script><h1 id="配置交换机的远程登录管理Telnet"><a href="#配置交换机的远程登录管理Telnet" class="headerlink" title="配置交换机的远程登录管理Telnet"></a>配置交换机的远程登录管理Telnet</h1><pre><code class="lang-powershell">[Swltchl]telnet server enable ## Telnet默认是关闭的，需要打开[Switch1]user-interface vty 0 4 ## 开启VTY线路模式[Switch1-ui-vtyO-4]protocol inbound telnet ## 配置telnet协议[Switch1-ui-vtyO-4]authentication-mode aaa ## 配置认证方式[Switch1-ui-vtyO-4]quit[Switch1]aaa  ## simple明文密码[Switch1-aaa]local-user admin password cipher Hello@123 ##配置用户名和密码，用户名不区分大小写，密码区分大小写[Switchi-aaa]local-useradmin privilege level 15 ## 将管理员的账号权限设置为巧[Swltchl-aaa]quit[Switchl]quit&lt;Switch1&gt;save ## 在用户视图下保存配置</code></pre><h1 id="配置交换机端口隔离、速率、双工"><a href="#配置交换机端口隔离、速率、双工" class="headerlink" title="配置交换机端口隔离、速率、双工"></a>配置交换机端口隔离、速率、双工</h1><pre><code class="lang-powershell">## 配置接口GEI/0/1和GEI/0/2的端口隔离功能，实现两个接囗之间的二层数据隔离，三层数据互通&lt;Switchl&gt;system-view[Switch1]port-isolate mode[Switch1]Interface gigabitethernet 1/0/1[Switch1-GigabitEthemet1/0/1]port-isolate enable group 1[Switch1-GigabitEthernet1/0/1]quit[Switch1]Interface gigabitethernet1/0/2[Switch1-GigabitEthemet1/0/2]port-isolate enable group 1[SwitchI-GigabitEthernet1/0/2]quit## 配置以太网接口GEO/0/1在自协商模式下协商速率为100Mb/s&lt;Switchl&gt;system-view[Switch1]interface gigabitethernet 0/0/1[Switchl-GigabitEthernet0/0/1]negotiation auto[Switch1-GigabitEthemet0/0/1]auto speed 100#配置以太网电接口GEO/0／1在自协商模式下双工模式为全双工模式&lt;Switchl&gt;system-view[Switchl]interfaceygabitethernet0/0／1[Switch1-GigabitEthemet0/0/1]negotiation auto</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux配置</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/Linux%E9%85%8D%E7%BD%AE/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/Linux%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="LINUX网络配置"><a href="#LINUX网络配置" class="headerlink" title="LINUX网络配置"></a>LINUX网络配置</h1><h2 id="网络配置文件"><a href="#网络配置文件" class="headerlink" title="网络配置文件"></a>网络配置文件</h2><blockquote><p>在Linux中，TCP\IP网络是通过若干个文本文件进行配置的，系统在启动时通过读取一组有关网络配置的文件和脚本参数文件实现网络接口的初始化和控制；这些文件可以在系统运行时直接修改，更改后会立即生效。</p></blockquote><hr><ol><li><code>/etc/sysconfig/network-script/ifcfg-enoxxx</code> 文件。这是 个用来指定服务器上的网络配置信息的文件。其中常见的主要参数的含义说明如下:<pre><code class="lang-Bash"> TYPE=Ethemet #网络接口类型 BOOTPROTO=static #静态地址 DEFROUTE=yes  IPV4_FAILURE_FATAL=no IPV6INIT=yes  #是否支待 IPV6 IPV6_AUTOCONF=yes  IPV6_DEFROUTE=yes  IPV6_FA _FATAL=no   NAME=enol6780032  #网卡名称 UUID=l6c93842-a039-4da3-b88a-977ebl20lb3f  ONBOOT=yes  IPADDR0=10.0.252.198 #IP地址 PREFIX0=24            #子网掩码 GATEWAY0=10.0.252.254 #网关 DNS1=61.134.1.4       # DNS地址 HWADDR=00:50:56:95:23:CE  #物理地址 IPV6_PEERDNS=yes  IPV6_PEERROUTES=yes</code></pre><ul><li>配置完成后，需要使用 <code>systemctl restart network</code>命令重启网络服务</li></ul></li></ol><hr><ol><li><code>/etc/hostname</code> 文件，该文件包含了Linux系统的主机名</li></ol><pre><code class="lang-bash">[root@redhat ~]       # vi /etc/hostname 修改配置文件的Redhat为Redhat-64，保存文件，然后重新登录，此时，主机名已经改变[root@redhet-64 ~]# hostnamectl status    Status hostname:redhat-64</code></pre><ul><li>此时表明静态主机名修改成功</li><li>这个文件是在启动时从 <code>/etc/sysconfig/network</code> 的HOSTNAME行得到，用于在启动时设置系统的主机名</li></ul><hr><ol><li><code>/etc/resolv.conf</code> 文件。<code>/etc/resolv.conf</code> 文件配 DNS 客户，它包含了主机的域名搜索顺序和 DNS 服务器的地址，每一行应包含一个关键字和一个或多个由空格隔开的 下面是<br>个例子：<pre><code class="lang-bash"> search mydomain.edu.cn  nameserver 210.34.0.14  nameserver 210.34.0.13</code></pre></li></ol><ul><li><strong>常用参数及其意义说明如下。</strong><ul><li><code>nameserver</code>: 表明 DNS 服务器的 IP 地址。 ==可以有很多行的nameserver== , 每一个带一个IP 地址。在查询时就按 nameserver 在本文件中的顺序进行，且只有当第一个nameserver 没有反应时才查询下面的 nameserver</li><li><code>domain</code>: ==声明主机的域名== 。很多程序用到它，如邮件系统，当为没有域名的主机进行DNS 查询时也要用到 如果没有域名，主机名将被使用，删除所有在第一个点（.）前面的内容</li><li><code>search</code>: 它的多个参数指明域名的查询顺序。当要查询没有域名的主机时，主机将在search 声明的域中分别查找。 ==domain和search 不能共存==</li><li><code>sortlist</code>: 允许将得到的域名结果进行特定的排序。它的参数为网络／掩码对， 允许任意的排列顺序。在 Red Hat Linux 中没有提供默认的<code>/etc/resolv.conf</code>文件，它的内容是根据在安装时给出的选项 ==动态创建的==</li></ul></li></ul><h2 id="安装网卡"><a href="#安装网卡" class="headerlink" title="安装网卡"></a>安装网卡</h2><blockquote><p>网卡的驱动程序是作为模块加载到内核中去的。所有Linux 支待的网卡驱动程序都是存放在目录<code>/lib/modules/ (Linux版本号）net/</code>下，可以通过修改模块配置文件来更换网卡或者增加网卡。</p></blockquote><h2 id="网络配置命令"><a href="#网络配置命令" class="headerlink" title="网络配置命令"></a>网络配置命令</h2><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><ul><li>Linux 系统中通过 <code>ifconfig</code> 命令进行指定网络接口的<br>TCP/IP 网络参数设置。执行 <code>ifconfig</code> 配置命令后，系统将在内核表中设置必要的网络参数，这样Linux 系统就知道如何与网络上的网卡通信了。基本命令格式如下：<pre><code class="lang-bash">ifconfig Interface-name ip-address up/down</code></pre></li></ul><h3 id="route"><a href="#route" class="headerlink" title="route"></a>route</h3><ul><li>配置路由命令 <code>route</code> 。通常在系统使用 <code>ifconfig</code> 命令配置网络接口后，需用<code>route</code> 命令<br>设定主机或局域网的出口 IP 地址。 <code>route</code> 命令的调用参数复杂，它的主要功能是 ==管理 Linux<br>统内核中的路由表== 。 <code>route</code> 命令的基本格式如下。</li></ul><pre><code class="lang-bash">    route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway] [metric Metric]] [if Interface]]</code></pre><h4 id="常用参数及其说明："><a href="#常用参数及其说明：" class="headerlink" title="常用参数及其说明："></a>常用参数及其说明：</h4><ul><li><code>-c</code> 显示更多信息</li><li><code>-n</code> 不解析名字</li><li><code>-v</code> 显示详细的处理信息</li><li><code>-F</code> 显示发送信息</li><li><code>-C</code> 显示路由缓存</li><li><code>-f</code> 清除所有网关入口的路由表。 </li><li><code>-p</code> 与 add 命令一起使用时使路由具有永久性。</li></ul><hr><ul><li><p><code>add</code> :添加一条新路由。</p></li><li><p><code>del</code>:删除一条路由。</p></li><li><p><code>-net</code>:目标地址是一个网络。</p></li><li><p><code>-host</code>:目标地址是一个主机。</p></li><li><p><code>netmask</code>:当添加一个网络路由时，需要使用网络掩码。</p></li><li><p><code>gw</code>:路由数据包通过网关。注意，你指定的网关必须能够达到。</p></li><li><p><code>metric</code>：设置路由跳数。</p></li><li><p><code>Command</code>: 指定您想运行的命令 (Add/Change/Delete/Print)。 </p></li><li><p><code>Destination</code>: 指定该路由的网络目标。 </p></li><li><p><code>mask Netmask:</code> 指定与网络目标相关的网络掩码（也被称作子网掩码）。 </p></li><li><p><code>Gateway</code> 指定网络目标定义的地址集和子网掩码可以到达的前进或下一跃点 IP 地址。 </p></li><li><p><code>metric Metric</code> :为路由指定一个整数成本值标（从 1 至 9999），当在路由表(与转发的数据包目标地址最匹配)的多个路由中进行选择时可以使用。 </p></li><li><p><code>if Interface:</code> 为可以访问目标的接口指定接口索引。若要获得一个接口列表和它们相应的接口索引，使用 route print 命令的显示功能。可以使用十进制或十六进制值进行接口索引。</p></li></ul><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><ul><li><code>ping</code> 命令是常用的网络命令，它通常 ==用来测试与目标主机的连通性== ，我们经常会说“ping一下某机器，看是不是开着”、不能打开网页时会说“你先ping网关地址192.168.1.1试试”。它通过发送ICMP ECHO_REQUEST数据包到网络主机（<code>send ICMP ECHO_REQUEST to network hosts</code>），并显示响应情况，这样我们就可以根据它输出的信息来确定目标主机是否可访问（但这不是绝对的）。</li><li>标准的命令格式：</li></ul><pre><code class="lang-bash">    ping [参数] [主机名或IP地址]</code></pre><h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><ul><li><code>ping</code> 命令用于： ==确定网络和各外部主机的状态；跟踪和隔离硬件和软件问题；测试、评估和管理网络== 。如果主机正在运行并连在网上，它就对回送信号进行响应。</li><li><code>ping</code> 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和(信息)包丢失情况的统计信息，并且在完成之后显示一个简要总结。ping 命令在程序超时或当接收到 SIGINT 信号时结束。Host 参数或者是一个有效的主机名或者是因特网地址。</li></ul><h4 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h4><ul><li><code>-d</code> 使用Socket的SO_DEBUG功能。</li><li><code>-f</code>  极限检测。大量且快速地送网络封包给一台机器，看它的回应。</li><li><code>-n</code> 只输出数值。</li><li><code>-q</code> 不显示任何传送封包的信息，只显示最后的结果。</li><li><code>-r</code> 忽略普通的Routing Table，直接将数据包送到远端主机上。通常是查看本机的网络接口是否有问题。</li><li><code>-R</code> 记录路由过程。</li><li><code>-v</code> 详细显示指令的执行过程。</li><li><code>&lt;p&gt;-c</code> 数目：在发送指定数目的包后停止。</li><li><code>-i</code> 秒数：设定间隔几秒送一个网络封包给一台机器，预设值是一秒送一次。</li><li><code>-I</code> 网络界面：使用指定的网络界面送出数据包。</li><li><code>-l</code> 前置载入：设置在送出要求信息之前，先行发出的数据包。</li><li><code>-p</code> 范本样式：设置填满数据包的范本样式。</li><li><code>-s</code> 字节数：指定发送的数据字节数，预设值是56，加上8字节的ICMP头，一共是64ICMP数据字节。</li><li><code>-t</code> 存活数值：设置存活数值TTL的大小。</li></ul><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><ul><li><code>netstat</code>命令 ==用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况== 。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</li><li>标准的命令格式：</li></ul><pre><code class="lang-bash">    netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip]</code></pre><h4 id="相关参数-1"><a href="#相关参数-1" class="headerlink" title="相关参数"></a>相关参数</h4><ul><li><code>-a</code>或<code>–all</code> 显示所有连线中的Socket。</li><li><code>-A&lt;网络类型&gt;</code>或<code>–&lt;网络类型&gt;</code> 列出该网络类型连线中的相关地址。</li><li><code>-c</code>或<code>–continuous</code> 持续列出网络状态。</li><li><code>-C</code>或<code>–cache</code> 显示路由器配置的快取信息。</li><li><code>-e</code>或<code>–extend</code> 显示网络其他相关信息。</li><li><code>-F</code>或<code>–fib</code> 显示FIB。</li><li><code>-g</code>或<code>–groups</code> 显示多重广播功能群组组员名单。</li><li><code>-h</code>或<code>–help</code> 在线帮助。</li><li><code>-i</code>或<code>–interfaces</code> 显示网络界面信息表单。</li><li><code>-l</code>或<code>–listening</code> 显示监控中的服务器的Socket。</li><li><code>-M</code>或<code>–masquerade</code> 显示伪装的网络连线。</li><li><code>-n</code>或<code>–numeric</code> 直接使用IP地址，而不通过域名服务器。</li><li><code>-N</code>或<code>–netlink</code>或<code>–symbolic</code> 显示网络硬件外围设备的符号连接名称。</li><li><code>-o</code>或<code>–timers</code> 显示计时器。</li><li><code>-p</code>或<code>–programs</code> 显示正在使用Socket的程序识别码和程序名称。</li><li><code>-r</code>或<code>–route</code> 显示Routing Table。</li><li><code>-s</code>或<code>–statistice</code> 显示网络工作信息统计表。</li><li><code>-t</code>或<code>–tcp</code> 显示TCP传输协议的连线状况。</li><li><code>-u</code>或<code>–udp</code> 显示UDP传输协议的连线状况。</li><li><code>-v</code>或<code>–verbose</code> 显示指令执行过程。</li><li><code>-V</code>或<code>–version</code> 显示版本信息。</li><li><code>-w</code>或<code>–raw</code> 显示RAW传输协议的连线状况。</li><li><code>-x</code>或<code>–unix</code> 此参数的效果和指定”-A unix”参数相同。</li><li><code>–ip</code>或<code>–inet</code> 此参数的效果和指定”-A inet”参数相同。</li></ul><h1 id="LINUX文件与目录管理"><a href="#LINUX文件与目录管理" class="headerlink" title="LINUX文件与目录管理"></a>LINUX文件与目录管理</h1><h2 id="Linux文件组织和结构"><a href="#Linux文件组织和结构" class="headerlink" title="Linux文件组织和结构"></a>Linux文件组织和结构</h2><h3 id="LINUX文件组织"><a href="#LINUX文件组织" class="headerlink" title="LINUX文件组织"></a>LINUX文件组织</h3><ul><li><strong>文件系统组织</strong> 是指 ==文件存在的物理空间== ，Linux 系统中的每个分区都是一个文件系统，都有自己的目录层次结构，Linux 将这些分属不同分区的、单独的文件系统按一定的方式形成个系统的总目录层次结构。</li><li>LINUX 文件系统 ==使用索引节点来记录文件信息== ，作用与 Windows 的文件分配表类似。索引节点是数据结构，它包一个文件的文件名、位置、大小、建立或修改时间、访问权限、所属关系等文件控制信息。</li><li>对于每个文件都有一个唯一的索引节点号与之对应，而对于一个索引节点号，却可以有多个文件名与之对应 。因此， 在磁盘上的同一个文件可以通过不同的路径去访问它。 Linux 操作系统可以用 1n 命令对一个已经存在的文件再建立一个新的连接，而不复制文件的内容 。连接有软连接和硬连接之分，软连接又叫符号连接。</li></ul><h3 id="LINUX文件结构"><a href="#LINUX文件结构" class="headerlink" title="LINUX文件结构"></a>LINUX文件结构</h3><ul><li>Linux 文件系统 ==采用多级目录的树型层次结构== 管理文件。树型结构的 ==最上层是根目录== ，用”/“表示，其他的所有目录都是从根目录出发生成的。 Linux 将所有的软件、硬件都作为文件来管理，每个文件被保存在目录中</li><li>微软的 DOS Windows 也是采用树型结构，但是在 DOS Windows 中这样的树型结构的根是磁盘分区的盘符， 有几个分区就有几个树型结构，它们之间的关系是并列的。而在LINUX中， ==不管操作系统管理多少个磁盘分区，这样的目录树都只有一个== </li></ul><h3 id="LINUX文件挂载"><a href="#LINUX文件挂载" class="headerlink" title="LINUX文件挂载"></a>LINUX文件挂载</h3><ul><li><strong>所谓挂载</strong> ：就是将一个文件系统的顶层目录挂到另一个文件系统的子目录上，使它们成为一个整体，上一层文件系统的子目录就称为挂载点。这里要注意以下两个间题<ol><li>挂载点必须是一个目录，而不能是一个文件。</li><li>一个分区挂载在一个已存在的目录上，这个目录可以不为空，但挂载后这个目录下以前的内容将不可用。</li></ol></li></ul><h2 id="Linux文件类型和访问权限"><a href="#Linux文件类型和访问权限" class="headerlink" title="Linux文件类型和访问权限"></a>Linux文件类型和访问权限</h2><h3 id="文件名与文件类型"><a href="#文件名与文件类型" class="headerlink" title="文件名与文件类型"></a>文件名与文件类型</h3><ul><li>是由字母、数字、下划线、圆点组成， 最大的长度是 255 个字符</li><li>Linux包括五种基本文件类型：<ul><li><strong>普通文件</strong> ：计算机用户和操作系统 ==用于存放数据、程序等信息的文件== ，一般又分为文本文件和二进制文件，例如C语言源代码、 Shell 脚本、二进制的可执行文件等。</li><li><strong>目录文件</strong> ： 目录文件是文件系统中一个目录所包含的目录项组成的文件，包括文件名、子目录名及其指针。用户进程可以读取目录文件，但不能对它们进行修改。</li><li><strong>链接文件</strong> ：链接文件又称符号链接文件， ==通过在不同的文件系统之间建立链接关系来实现对文件的访间== ，它提供了共享文件的一种方法。</li><li><strong>设备文件</strong> ：在Linux 系统中， ==把每一种I/O设备都映射成为一个设备文件，可以像普通文件一样处理== ，这就使得文件与设备的操作尽可能统一.</li><li><strong>管道文件</strong> ： ==主要用于在进程间传递数据== 。 Linux对管道的操作与文件操作相同，它把管道作为文件进行处理 。管道文件又称先进先出 (FIFO) 文件。<blockquote><p>从对文件内容处理的角度而言 ，无论是哪种类型的文件， Linux <strong>都把它们看作是无结构的流式文件</strong> ，即把文件的内容看作是一系列有序的字符</p></blockquote></li></ul></li></ul><h3 id="文件和目录访问权限"><a href="#文件和目录访问权限" class="headerlink" title="文件和目录访问权限"></a>文件和目录访问权限</h3><ul><li><strong>Linux对文件访问的三级权限</strong><ul><li>文件所有者</li><li>与文件所有者同组的用户</li><li>其他用户</li></ul></li><li><strong>Linux对文件的访问设定了三级权限</strong><ul><li>读取</li><li>写入</li><li>执行</li></ul></li></ul><hr><blockquote><p>当用 <code>ls -l</code>命令显示文件后目录的详细信息时，每一个文件或目录的列表信息分为4个部分，其中最左边的一位是第一部分，标识Linux操作系统的文件类型，其余三部分是三组访问权限，每组用三位表示，如下图：</p></blockquote><p> <img data-src="https://z3.ax1x.com/2021/04/19/cTgL7T.png" alt="wjlx"></p><ul><li>在默认状态下，系统将创建的普通文件的权限设置为 <code>-rw-r-r--</code>，即文件所有者对该文件可读可写（rw），而同组用户和其他用户都只可读；同样，在默认配置中，将每一个用户所有者目录的权限都设置为 <code>drwx------</code>，即只有文件所有者对该目录可读、可写和可查询（rwx），即用户不能读取其他用户目录中的内容</li></ul><h2 id="Linux文件和目录操作命令"><a href="#Linux文件和目录操作命令" class="headerlink" title="Linux文件和目录操作命令"></a>Linux文件和目录操作命令</h2><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><ul><li>cat命令的用途是连接文件或标准输入并打印。这个命令常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。</li></ul><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><pre><code class="lang-bash">cat [选项] [文件]...</code></pre><h4 id="cat三大功能"><a href="#cat三大功能" class="headerlink" title="cat三大功能"></a>cat三大功能</h4><ol><li><p>一次显示整个文件:<code>cat filename</code></p></li><li><p>从键盘创建一个文件:<code>cat &gt; filename</code> 只能创建新文件,不能编辑已有文件.</p></li><li><p>将几个文件合并为一个文件:<code>cat file1 file2 &gt; file</code></p></li></ol><h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><ul><li><code>-A</code>, <code>--show-all</code>           等价于 -vET</li><li><code>-b</code>, <code>--number-nonblank</code>    对非空输出行编号</li><li><code>-e</code>                       等价于 -vE</li><li><code>-E</code>, <code>--show-ends</code>          在每行结束处显示 $</li><li><code>-n</code>, <code>--number</code>     对输出的所有行编号,由1开始对所有输出的行数编号</li><li><code>-s</code>, <code>--squeeze-blank</code>  有连续两行以上的空白行，就代换为一行的空白行 </li><li><code>-t</code>                       与 -vT 等价</li><li><code>-T</code>, <code>--show-tabs</code>         将跳格字符显示为 ^I</li><li><code>-u</code>                       (被忽略)</li><li><code>-v</code>, <code>--show-nonprinting</code>   使用 ^ 和 M- 引用，除了 LFD 和 TAB 之外</li></ul><hr><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><ul><li><code>more</code>命令，功能类似 <code>cat</code> ，<code>cat</code>命令是整个文件的内容从上到下显示在屏幕上。 <code>more</code>会 ==以一页一页的显示方便使用者逐页阅读== ，而最基本的指令就是按空白键（space）就往下一页显示，按 <code>b</code> 键就会往回（back）一页显示，而且还有搜寻字串的功能 。<code>more</code>命令从前向后读取文件，因此在启动时就加载整个文件。</li></ul><h4 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h4><pre><code class="lang-bash">  more [-dlfpcsu ] [-num ] [+/ pattern] [+ linenum] [file ... ]</code></pre><h4 id="命令功能-1"><a href="#命令功能-1" class="headerlink" title="命令功能"></a>命令功能</h4><ul><li><code>more</code>命令和<code>cat</code>的功能一样都是查看文件里的内容，但有所不同的是<code>more</code>  ==可以按页来查看文件的内容，还支持直接跳转行等功能==</li></ul><h4 id="命令参数-1"><a href="#命令参数-1" class="headerlink" title="命令参数"></a>命令参数</h4><ul><li><code>+n</code>       从笫n行开始显示</li><li><code>-n</code>        定义屏幕大小为n行</li><li><code>+/pattern</code> 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示  </li><li><code>-c</code>       从顶部清屏，然后显示</li><li><code>-d</code>       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能</li><li><code>-l</code>        忽略Ctrl+l（换页）字符</li><li><code>-p</code>       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似</li><li><code>-s</code>       把连续的多个空行显示为一行</li><li><code>-u</code>       把文件内容中的下画线去掉</li></ul><hr><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><ul><li><code>less</code> 工具也是 ==对文件或其它输出进行分页显示的工具== ，应该说是linux正统查看文件内容的工具，功能极其强大。<code>less</code> 的用法比起 <code>more</code> 更加的有弹性。在使用<code>more</code> 的时候，我们并没有办法向前面翻， 只能往后面看，但若使用了<code>less</code> 时，就可以使用<code>[pageup] [pagedown]</code>等按键的功能来往前往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 <code>less</code> 里头可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。<h4 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h4><pre><code class="lang-bash">less [参数]  文件</code></pre><h4 id="命令功能-2"><a href="#命令功能-2" class="headerlink" title="命令功能"></a>命令功能</h4></li><li><code>less</code> 与 <code>more</code> 类似，但使用 <code>less</code> 可以随意浏览文件，而 <code>more</code> 仅能向前移动，却不能向后移动，而且 <code>less</code> 在查看之前不会加载整个文件。</li></ul><h4 id="命令参数-2"><a href="#命令参数-2" class="headerlink" title="命令参数"></a>命令参数</h4><ul><li><code>-b</code> &lt;缓冲区大小&gt; 设置缓冲区的大小</li><li><code>-e</code>  当文件显示结束后，自动离开</li><li><code>-f</code>  强迫打开特殊文件，例如外围设备代号、目录和二进制文件</li><li><code>-g</code>  只标志最后搜索的关键词</li><li><code>-i</code>  忽略搜索时的大小写</li><li><code>-m</code>  显示类似more命令的百分比</li><li><code>-N</code>  显示每行的行号</li><li><code>-o</code> &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</li><li><code>-Q</code>  不使用警告音</li><li><code>-s</code>  显示连续空行为一行</li><li><code>-S</code>  行过长时间将超出部分舍弃</li><li><code>-x</code> &lt;数字&gt; 将“tab”键显示为规定的数字空格</li><li><code>/字符串</code>：向下搜索“字符串”的功能</li><li><code>?字符串</code>：向上搜索“字符串”的功能</li><li><code>n</code>  重复前一个搜索（与 / 或 ? 有关）</li><li><code>N</code>  反向重复前一个搜索（与 / 或 ? 有关）</li><li><code>b</code>  向后翻一页</li><li><code>d</code>  向后翻半页</li><li><code>h</code>  显示帮助界面</li><li><code>Q</code>  退出less 命令</li><li><code>u</code>  向前滚动半页</li><li><code>y</code>  向前滚动一行</li><li><code>空格键</code> 滚动一行</li><li><code>回车键</code> 滚动一页</li><li><code>[pagedown]</code> ： 向下翻动一页</li><li><code>[pageup]</code>：   向上翻动一页</li></ul><hr><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><ul><li><code>cp</code>命令 ==用来复制文件或者目录== ，是Linux系统中最常用的命令之一。一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用<code>-i</code>参数。但是如果是在shell脚本中执行<code>cp</code>时，没有<code>-i</code>参数时不会询问是否覆盖。这说明命令行和shell脚本的执行方式有些不同。</li></ul><h4 id="命令格式-3"><a href="#命令格式-3" class="headerlink" title="命令格式"></a>命令格式</h4><pre><code class="lang-bash">       cp [选项]... [-T] 源文件 目的文件       或：cp [选项]... 源... 目录       或：cp [选项]... -t 目录 源...</code></pre><h4 id="命令功能-3"><a href="#命令功能-3" class="headerlink" title="命令功能"></a>命令功能</h4><ul><li>将源文件复制至目标文件，或将多个源文件复制至目标目录。</li><li>目标文件是普通文件，会询问是否要覆盖它</li><li>目标文件如果不存在，则会执行正常的复制操作</li></ul><h4 id="命令参数："><a href="#命令参数：" class="headerlink" title="命令参数："></a>命令参数：</h4><ul><li><code>-a</code>, <code>--archive</code>   等于<code>-dR --preserve=all</code><pre><code>--backup[=CONTROL    为每个已存在的目标文件创建备份</code></pre></li><li><code>-d</code>,若目标文件为“链接文件”，则保留该“链接文件的属性”</li><li><code>-f</code>, <code>--force</code>        如果目标文件无法打开则将其移除并重试(当 -n 选项存在时则不需再选此项)</li><li><p><code>-i</code>, <code>--interactive</code>        覆盖前询问(使前面的 -n 选项失效)</p></li><li><p><code>-P</code>, <code>--no-dereference</code>   不跟随源文件中的符号链接</p></li><li><p><code>-p</code>                等于<code>--preserve=模式</code>,所有权,时间戳<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>--preserve</code>[=属性列表   保持指定的属性(默认：模式,所有权,时间戳)，如果可能保持附加属性：环境、链接、xattr 等</p></li><li><p><code>-R</code>, <code>-r</code>, <code>--recursive</code> 复制目录及目录内的所有项目</p></li></ul><hr><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><ul><li>mv命令是move的缩写，可以 ==用来移动文件或者将文件改名== （move (rename) files），是Linux系统下常用的命令，经常 ==用来备份文件或者目录== </li></ul><h4 id="命令格式-4"><a href="#命令格式-4" class="headerlink" title="命令格式"></a>命令格式</h4><pre><code class="lang-bash">    mv [选项] 源文件或目录[目标路径|目标文件名]</code></pre><h4 id="命令功能-4"><a href="#命令功能-4" class="headerlink" title="命令功能"></a>命令功能</h4><ul><li>视mv命令中第二个参数类型的不同（是目标文件还是目标目录），mv命令 ==将文件重命名或将其移至一个新的目录中== 。当第二个参数类型是文件时，mv命令完成文件重命名，此时，源文件只能有一个（也可以是源目录名），它将所给的源文件或目录重命名为给定的目标文件名。当第二个参数是已存在的目录名称时，源文件或目录参数可以有多个，mv命令将各参数指定的源文件均移至目标目录中。在跨文件系统移动文件时，mv先拷贝，再将原有文件删除，而链至该文件的链接也将丢失。</li></ul><h4 id="命令参数-3"><a href="#命令参数-3" class="headerlink" title="命令参数"></a>命令参数</h4><ul><li><code>-b</code> ：若需覆盖文件，则覆盖前先行备份。 </li><li><code>-f</code> ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li><code>-i</code> ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li><code>-u</code> ：若目标文件已经存在，且 source 比较新，才会更新(update)</li><li><code>-t</code> ： <code>--target-directory</code>=<code>DIRECTORY move all SOURCE arguments into DIRECTORY</code>，即指定mv的目标目录，该选项适用于移多个源文件到一个目录的情况，此时目标目录在前，源文件在后。</li></ul><blockquote><p>注意：<code>mv</code> <code>cp</code> 的结果不同。 <code>mv</code> 好像文件＂搬家”，文件个数并未增加；而 <code>cp</code> 对文件进行复制，文件个数增加了</p></blockquote><hr><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><ul><li><p><code>rm</code> 是常用的命令，该命令的功能为==删除一个目录中的一个或多个文件或目录==，它也可以将某个目录及其下的所有文件及子目录均删除。 ==对于链接文件，只是删除了链接，原有文件均保持不变== 。</p></li><li><p><code>rm</code> 是一个危险的命令，使用的时候要特别当心，尤其对于新手，否则整个系统就会毁在这个命令（比如在/（根目录）下执行<code>rm * -rf</code>）。所以，我们在执行<code>rm</code>之前最好先确认一下在哪个目录，到底要删除什么东西，操作时保持高度清醒的头脑。</p></li></ul><h4 id="命令格式-5"><a href="#命令格式-5" class="headerlink" title="命令格式"></a>命令格式</h4><pre><code class="lang-bash">  rm [选项] 文件…</code></pre><h4 id="命令功能-5"><a href="#命令功能-5" class="headerlink" title="命令功能"></a>命令功能</h4><ul><li>删除一个目录中的一个或多个文件或目录，如果没有使用<code>-r</code>选项，则<code>rm</code>不会删除目录。如果使用<code>rm</code> 来删除文件，通常仍可以将该文件恢复原状。</li></ul><h4 id="命令参数-4"><a href="#命令参数-4" class="headerlink" title="命令参数"></a>命令参数</h4><ul><li><code>-f</code>, <code>--force</code>    忽略不存在的文件，从不给出提示。</li><li><code>-i</code>, <code>--interactive</code> 进行交互式删除</li><li><code>-r</code>, <code>-R, --recursive</code>   指示rm将参数中列出的全部目录和子目录均递归地删除。</li><li><code>-v</code>, <code>--verbose</code>    详细显示进行的步骤-<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    <code>--help</code>     显示此帮助信息并退出-<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    <code>--version</code> 输出版本信息并退出</li></ul><hr><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><ul><li>linux <code>mkdir</code> 命令用来创建指定的名称的目录，要求创建目录的用户在当前目录中具有写权限，并且指定的目录名不能是当前目录中已有的目录。</li></ul><h4 id="命令格式-6"><a href="#命令格式-6" class="headerlink" title="命令格式"></a>命令格式</h4><pre><code class="lang-bash">  mkdir [选项] 目录...</code></pre><h4 id="命令功能-6"><a href="#命令功能-6" class="headerlink" title="命令功能"></a>命令功能</h4><ul><li>通过 <code>mkdir</code> 命令可以实现在指定位置创建以 DirName(指定的文件名)命名的文件夹或目录。要创建文件夹或目录的用户必须对所创建的文件夹的父文件夹具有写权限。并且，所创建的文件夹(目录)不能与其父目录(即父文件夹)中的文件名重名，即 ==同一个目录下不能有同名的(区分大小写)== 。 </li></ul><h4 id="命令参数-5"><a href="#命令参数-5" class="headerlink" title="命令参数"></a>命令参数</h4><ul><li><code>-m</code>, <code>--mode</code>=模式，设定权限&lt;模式&gt; (类似 chmod)，而不是 rwxrwxrwx 减 umask</li><li><code>-p</code>, <code>--parents</code>  可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后,系统将自动建立好那些尚不存在的目录,一次-以建立多个目录; </li><li><p><code>-v</code>, <code>--verbose</code>  每次创建新目录都显示信息</p><p>  &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;    <code>--help</code>  显示此帮助信息并退出</p><p>  &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;    <code>--version</code>  输出版本信息并退出</p></li></ul><hr><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><ul><li>Linux <code>cd</code> 命令可以说是Linux中最基本的命令语句，其他的命令语句要进行操作，都是建立在使用 <code>cd</code> 命令上的。</li></ul><h4 id="命令格式-7"><a href="#命令格式-7" class="headerlink" title="命令格式"></a>命令格式</h4><pre><code class="lang-bash">  cd [目录名]</code></pre><h4 id="命令功能-7"><a href="#命令功能-7" class="headerlink" title="命令功能"></a>命令功能</h4><ul><li>切换当前目录至dirNames</li></ul><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><ul><li><code>pwd</code>命令 ==用于显示用户当前所处的工作目录== ，当不太确定当前位置时，就会使用<code>pwd</code>来判定当前目录在文件系统内的确切位置。<h4 id="命令格式-8"><a href="#命令格式-8" class="headerlink" title="命令格式"></a>命令格式</h4><pre><code class="lang-bash"> pwd [选项]</code></pre></li></ul><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><ul><li><code>ls</code>命令是linux下最常用的命令。<code>ls</code>命令就是list的缩写, ==缺省下<code>ls</code>用来打印出当前目录的清单== ;如果<code>ls</code>指定其他目录,那么就会显示指定目录里的文件及文件夹清单。 通过<code>ls</code> 命令不仅可以查看linux文件夹包含的文件,而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。</li></ul><h4 id="命令格式-9"><a href="#命令格式-9" class="headerlink" title="命令格式"></a>命令格式</h4><pre><code class="lang-bash">  ls [选项] [目录名|文件]</code></pre><h4 id="命令功能-8"><a href="#命令功能-8" class="headerlink" title="命令功能"></a>命令功能</h4><ul><li>列出目标目录中所有的子目录和文件。</li></ul><h4 id="命令参数-6"><a href="#命令参数-6" class="headerlink" title="命令参数"></a>命令参数</h4><ul><li><code>-a</code>, <code>–all</code>列出目录下的所有文件，包括以 . 开头的隐含文件</li><li><code>-A</code>, 同<code>-a</code>，但不列出“.”(表示当前目录)和“..”(表示当前目录的父目录)。</li><li><code>-c</code>,  配合 <code>-lt</code>：根据 ctime 排序及显示 ctime (文件状态最后更改的时间)配合 -l：显示 ctime 但根据名称排序否则：根据 ctime 排序</li><li><code>-C</code>, 每栏由上至下列出项目</li><li><code>-d</code>, <code>–directory</code> 将目录象文件一样显示，而不是显示其下的文件。</li><li><code>-D</code>, <code>–dired</code> 产生适合 Emacs 的 dired 模式使用的结果</li><li><code>-f</code>, 对输出的文件不进行排序，-aU 选项生效，-lst 选项失效</li><li><code>-g</code>, 类似 <code>-l</code>,但不列出所有者</li><li><code>-G</code>, <code>–no-group</code> 不列出任何有关组的信息</li><li><code>-i</code>, <code>–inode</code> 印出每个文件的 inode 号</li><li><code>-I</code>, <code>–ignore</code>=样式 不印出任何符合 shell 万用字符&lt;样式&gt;的项目</li><li><code>-l</code>, 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来。</li></ul><hr><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><ul><li><code>chmod</code>命令用于 ==改变linux系统文件或目录的访问权限== 。用它 ==控制文件或目录的访问权限== 。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</li><li>Linux系统中的每个文件和目录都有访问许可权限，用它来确定谁可以通过何种方式对文件和目录进行访问和操作。</li></ul><h4 id="命令格式-10"><a href="#命令格式-10" class="headerlink" title="命令格式"></a>命令格式</h4><pre><code class="lang-bash">  chmod [-cfvR] [--help] [--version] mode file</code></pre><h4 id="命令功能-9"><a href="#命令功能-9" class="headerlink" title="命令功能"></a>命令功能</h4><ul><li>用于改变文件或目录的访问权限，用它控制文件或目录的访问权限。</li></ul><h4 id="命令参数-7"><a href="#命令参数-7" class="headerlink" title="命令参数"></a>命令参数</h4><ul><li><code>-c</code> ,若该档案权限确实已经更改，才显示其更改动作</li><li><code>-V</code> ,显示权限变更的详细资料</li><li><code>-R</code> ,对当前目录下的所有文件与子目录进行相同的权限变更</li><li><code>-mode</code>,权限设定字符串</li></ul><hr><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><ul><li><code>ln</code>是linux中又一个非常重要命令，它的功能是 ==为某一个文件在另外一个位置建立一个同步的链接== .当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在其它的目录下用<code>ln</code>命令链接（link）它就可以，不必重复的占用磁盘空间。</li></ul><h4 id="命令格式-11"><a href="#命令格式-11" class="headerlink" title="命令格式"></a>命令格式</h4><pre><code class="lang-bash"> ln [参数][源文件或目录][目标文件或目录]</code></pre><h4 id="命令功能-10"><a href="#命令功能-10" class="headerlink" title="命令功能"></a>命令功能</h4><ul><li>Linux文件系统中，有所谓的链接(link)，我们可以将其视为档案的别名，而链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。</li></ul><h4 id="命令参数-8"><a href="#命令参数-8" class="headerlink" title="命令参数"></a>命令参数</h4><ul><li><strong>必要参数</strong> :<ul><li><code>-b</code> 删除，覆盖以前建立的链接</li><li><code>-d</code> 允许超级用户制作目录的硬链接</li><li><code>-f</code> 强制执行</li><li><code>-i</code> 交互模式，文件存在则提示用户是否覆盖</li><li><code>-n</code> 把符号链接视为一般目录</li><li><code>-s</code> 软链接(符号链接)</li><li><code>-v</code> 显示详细的处理过程</li></ul></li><li><strong>选择参数</strong> :<ul><li><code>-S</code> “-S&lt;字尾备份字符串&gt; ”或 “<code>--suffix</code>=&lt;字尾备份字符串&gt;”</li><li><code>-V</code> “-V&lt;备份方式&gt;”或“<code>--version-control</code>=&lt;备份方式&gt;”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>--help</code> 显示帮助信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>--version</code> 显示版本信息</li></ul></li></ul><hr><h2 id="Linux用户和组管理"><a href="#Linux用户和组管理" class="headerlink" title="Linux用户和组管理"></a>Linux用户和组管理</h2><h3 id="用户管理概述"><a href="#用户管理概述" class="headerlink" title="用户管理概述"></a>用户管理概述</h3><ul><li>在Linux中，每个文件和程序都必须属于某个用户，每个用户对应一个账号，其中， <strong>最重要的就是超级用户root</strong></li><li><strong>超级用户root管理系统的一切任务，可控制所有的程序，访问所有的文件。Linux系统中的其他一些组群和用户都是由root来创建的</strong></li></ul><h4 id="用户和组群管理概念"><a href="#用户和组群管理概念" class="headerlink" title="用户和组群管理概念"></a>用户和组群管理概念</h4><ul><li><strong>用户标识</strong> （UID）：系统中用来表示用户的数字</li><li><strong>用户主目录</strong> ：也就是用户的起始工作目录，它是用户在登录系统后所在的目录，用户的文件都放在此处</li><li><strong>登录Shell</strong> ：用户登录后启动以接收用户得到输入并执行输入相应命令的脚本程序，Shell是用户与Linux系统之间的接口</li><li><strong>用户组/组群</strong> ：具有相似属性的多个用户被分配到一个组中</li><li><strong>组标识</strong> （GID）：用来表示用户组的数字标识</li></ul><blockquote><p>超级用户在系统中的用户ID和组ID都是0，普通用户的用户ID（UID）从500开始编号，并且默认属于与用户名同名的组，组ID也是从500开始编号</p></blockquote><h3 id="用户管理配置文件"><a href="#用户管理配置文件" class="headerlink" title="用户管理配置文件"></a>用户管理配置文件</h3><h4 id="etc-passwd文件"><a href="#etc-passwd文件" class="headerlink" title="/etc/passwd文件"></a>/etc/passwd文件</h4><ul><li>/etc/passwd文件是Linux中 ==用于用户管理得到最重要文件，该文件对所有用户均可读== 。每个用户在该文件中都有一行对应的记录，每条记录都用冒号（:）分成7个域，记录了这个用户的基本属性，形式如下：</li></ul><pre><code class="lang-bash">  用户名:加密的命令:用户ID(UID):组ID(GID):用户的全名或描述:登录目录:登录shell</code></pre><ul><li>用户ID（UID）对于的每个用户必须是 <strong>唯一的</strong>， 一般情况下，它与用户名是一一对应的</li><li>==编号0是root用户的UID，编号1-99是系统保留的UID，100以上给用户做标识== 。</li><li>Linux把每个用户看成一个数字，每个用户只有唯一的UID来识别，配置文件/etc/passwd给出了系统用户ID与用户名之间及其他信息的对应关系。</li><li>由于/etc/passwd文件 <strong>对所有用户都可读</strong> ，所有现在的Linux系统都使用shadow技术，把真正加密后的用户口令字存放在/etc/shadow文件中，而在/etc/passwd文件的口令字段只存放一个特殊的字符，如x或“*”，并且该文件只有根用户可读，大大提高系统安全性</li></ul><h4 id="etc-shadow文件"><a href="#etc-shadow文件" class="headerlink" title="/etc/shadow文件"></a>/etc/shadow文件</h4><ul><li>/etc/shadow文件是为了保证系统用户的安全性， ==建立的只有一个超级用户root才能读取的文件/etc/shadow== ，该文件包含了系统中所有用户及其口令等相关信息，用冒号(:)分层9个域，下面是其格式：<ol><li>用户登录名</li><li>用户加密后的口令（若为空，表示该用户不需口令即可登录；若为*好，表示该账号被禁止）</li><li>从1970/1/1至口令最近一次被修改的天数</li><li>口令在多少天内不能被用户修改</li><li>口令在多少天后必须被修改</li><li>口令过期多少天后用户账户被禁止</li><li>口令在到期多少天内给用户发出警告</li><li>口令自1970/1/1其被禁止的天数</li><li>保留域</li></ol></li></ul><h4 id="etc-group文件"><a href="#etc-group文件" class="headerlink" title="/etc/group文件"></a>/etc/group文件</h4><ul><li>/etc/group文件。在Linux中，使用组来赋予同组的多个用户相同的文件访问权限。 <strong>一个用户也可以同时属于多个组</strong>，管理用户组的基本文件是/etc/group,与用户账户基本文件相似，每行记录用冒号（:）分成4个域，格式如下：</li></ul><pre><code class="lang-bash">  用户组名:加密后的组口令:组ID:组成员列表</code></pre><ul><li>用户组sys在/etc/group中对应的记录行<pre><code class="lang-bash">sys:x:3:root,bin,adm</code></pre><ul><li>其代表额信息包括系统中有一个称为sys的用户组，设有口令，组ID为3，组中成员有root,bin,adm</li></ul></li></ul><h3 id="用户和组管理命令"><a href="#用户和组管理命令" class="headerlink" title="用户和组管理命令"></a>用户和组管理命令</h3><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><ul><li>作用是 ==通过建立一个合法的用户账户、设置后管理用户密码、修改用户的账户属性以及必要式删除已经废弃的用户账号==</li><li>在Linux中增加一个用户就是在系统中创建一个新账号，然后给新账号分配用户号、用户组、主目录和登录shell等资源， ==在Linux中，只有具有超级用户root权限的用户才能创建新的用户== ， <strong>增加用户</strong> 的格式如下：</li></ul><pre><code class="lang-bash">  adduser [-选项] username</code></pre><ul><li><strong>常用选项参数</strong><ul><li><code>-d</code>,指定用于取代默认/home/username的用户主目录</li><li><code>-g</code>,用户所属用户组的组名或组ID（用户组在指定前应该存在）</li><li><code>-m</code>,若指定用户主目录不存在则创建</li><li><code>-p</code>,使用crypt加密的口令</li><li><code>-s</code>,指定用户登录shell，默认为/bin/bash</li><li><code>-u uid</code>,指定用户的UID，它必须是唯一的且大于499</li></ul></li></ul><hr><ul><li>Linux出于安全考虑，每个用户除了用户名，还设置了登录系统的用户口令。当用户账号刚刚创建时没有口令，但是被系统锁定，不可用，必须为其指定口令后才可使用。</li><li>超级用户可以为自己和其他用户指定口令，但普通用户只能修改自己的口令，passwd的格式如下</li></ul><pre><code class="lang-bash">  passwd [-选项][username]</code></pre><ul><li><strong>常用参数说明</strong><ul><li><code>-l</code>,锁定口令</li><li><code>-u</code>,口令解锁</li><li><code>-d</code>,使账号无口令</li><li><code>-f</code>,强迫用户下次登录时修改口令</li></ul></li></ul><hr><ul><li>删除用户命令 <code>userdel</code> 的功能是系统中如果一个用户的账号不再使用，可以将其从系统中删除。删除一个用户的命令格式如下：<pre><code class="lang-bash">userdel [-选项] username</code></pre></li><li>常用的参数选项是 <code>-r</code>, 它的作用是把用户的主目录一起删除。</li><li>删除用户账号就是要将 /etc/passwd 等系统文件中的该用户记录删除，必要时还删除用户的目录，可以使用 “<code>userdel -r 用户名</code>”来实现这一目的;因此，完全删除一个用户包括:<ol><li>删除 /etc/passwd 文件中此用户的记录；</li><li>删除/etc/group 文件中该用户的信息；</li><li>删除用户的主目录；</li><li>删除用户所创建的或属于此用户的文件</li></ol></li></ul><hr><ul><li>用户在系统使用过程中可以随时使用 <code>SU</code> 命令来改变身份。例如，系统管理员在平时工作时可以用普通账号登录，在 要进行系统维护时用 <code>SU</code>命令获得 root 权限，之后为了安全再用<code>SU</code> 回到原账号。 <code>SU</code> 命令的一般格式如下：<pre><code class="lang-bash">su [usermame]</code></pre></li><li><code>username</code> 是要切换到的用户名，如果不指定用户名，则默认将用户身份切换为 root, 系统会要求给出正确的口令。</li></ul><hr><h4 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h4><ul><li><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。默认 Linux下的用户属千与它同名的用户组，这个用户组在创建用户时同时创建。与用户管理相类似，用户组的管理包括组的增加、删除和修改，实际上就是通过修改 /etc/group 文件实现这些操作</p></li><li><p>Linux 系统中将一个新用户组加入系统的命令是 <code>groupadd</code> 。该命令的一般格式如下。</p></li></ul><pre><code class="lang-bash">  groupadd [-选项] groupname</code></pre><ul><li><strong>常用选项参数说明如下</strong><ul><li><code>-g GID</code>: 指定用户组的 GID, 它必须是唯 的，且大于 499</li><li><code>-r</code>: 创建小千 500 的系统用户组</li><li><code>-f</code>: 若用户组已存在，退出并显示错误（原用户组不会被改变）。</li></ul></li></ul><hr><ul><li><strong>删除一个用户组时要注意以下几点</strong><ol><li>组中的文件不能自行删除，也不能自行改变文件所属的组；</li><li>如果组是用户的基本组（即 etc passwd 文件中显示为该用户的组），则这个组无法删除；</li><li>如果组中有用户在系统中处千登录状态则不能删除该组， 最好删除用户后再删除组。</li></ol></li><li>修改用户组的属性使用 <code>groupmod</code> 命令，其格式如下。</li></ul><pre><code class="lang-bash">  groupmod [-选项] groupname</code></pre><ul><li><strong>常用选项参数说明如下</strong><ul><li><code>-g</code>: 为用户组指定新的组标识号</li><li><code>-n</code>: 将用户组的名字改为新名字</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之绪论</title>
      <link href="/my-blog/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BB%AA%E8%AE%BA/"/>
      <url>/my-blog/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BB%AA%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构之绪论"><a href="#数据结构之绪论" class="headerlink" title="数据结构之绪论"></a>数据结构之绪论</h1><hr><h2 id="数据结构——知识架构"><a href="#数据结构——知识架构" class="headerlink" title="数据结构——知识架构"></a>数据结构——知识架构</h2><p> <img data-src="https://z3.ax1x.com/2021/04/12/cD0qSO.png" alt=""></p><h3 id="什么是数据？"><a href="#什么是数据？" class="headerlink" title="什么是数据？"></a>什么是数据？</h3><ul><li>是信息的载体，是可以让计算机识别的并处理的符号集合，从底层来说就是一些二进制的0和1。</li></ul><h3 id="数据元素与数据项"><a href="#数据元素与数据项" class="headerlink" title="数据元素与数据项"></a>数据元素与数据项</h3><ul><li>数据的基本单位就是数据元素，多个数据项构成一个数据元素，数据项是数据元素的最小表示单位</li><li><p>但对于现实世界中，评判什么是数据元素与数据项，需要根据具体需求来定义。例如，对于一个学生管理系统，每一个学生的账号就是一个数据元素，而每个学生的性别、年龄、爱好等个人信息就是一个个的数据项，这些数据项构成了学生这个数据元素。</p><p><img data-src="https://z3.ax1x.com/2021/04/12/cD0XOH.png" alt=""></p></li></ul><h3 id="数据结构与数据对象"><a href="#数据结构与数据对象" class="headerlink" title="数据结构与数据对象"></a>数据结构与数据对象</h3><ul><li><p>数据结构是相互具有一种或多种特定关系的数据元素的集合</p></li><li><p>数据对象时具有==相同性质==的数据元素的集合，是数据的子集</p><p> <img data-src="https://z3.ax1x.com/2021/04/12/cD0zTI.png" alt=""></p></li></ul><h3 id="数据的逻辑结构"><a href="#数据的逻辑结构" class="headerlink" title="数据的逻辑结构"></a>数据的逻辑结构</h3><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><ul><li>每个元素同属于一个集合</li></ul><h4 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h4><ul><li>每个线性结构中只有一个前驱结点，线性结构中的每个数据元素（除了最后一个元素外）都只有唯一的后继结点，相互之间是一对一的关系</li></ul><h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h4><ul><li>每个树形结构都有一个根结点，每个子节点都只有唯一的父节点，而每个父节点不止一个子节点，相互之间是一对多的关系</li></ul><h4 id="图（网）结构"><a href="#图（网）结构" class="headerlink" title="图（网）结构"></a>图（网）结构</h4><ul><li><p>各个数据元素间都有一定的关系，相互之间是多对多的关系</p><p><img data-src="https://z3.ax1x.com/2021/04/12/cDB9tP.png" alt=""></p></li></ul><h3 id="数据的物理结构"><a href="#数据的物理结构" class="headerlink" title="数据的物理结构"></a>数据的物理结构</h3><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><ul><li><p>即逻辑上连续的数据元素在物理内存空间内也必须是连续的内存地址空间来进行存储，元素之间的关系由存储结构的邻接关系所体现</p><p><img data-src="https://z3.ax1x.com/2021/04/12/cDBF1S.png" alt=""></p></li></ul><h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><ul><li><p>在逻辑上相邻的元素可以在物理的存储空间中不相邻，只要用指针来表示各个元素间的逻辑关系即可</p><p><img data-src="https://z3.ax1x.com/2021/04/12/cDBk6g.png" alt=""></p></li></ul><h4 id="索引存储"><a href="#索引存储" class="headerlink" title="索引存储"></a>索引存储</h4><ul><li><p>在内存存储数据元素的同时，再创建索引表通过索引表内的索引项指向内存中的数据元素，形成某种相互关系</p><p><img data-src="https://z3.ax1x.com/2021/04/12/cDBnkq.png" alt=""></p></li></ul><h4 id="散列存储"><a href="#散列存储" class="headerlink" title="散列存储"></a>散列存储</h4><ul><li>根据元素关键字直接计算出该元素所在内存的地址值，又称哈希（hash）存储</li></ul><h3 id="数据的运算"><a href="#数据的运算" class="headerlink" title="数据的运算"></a>数据的运算</h3><ul><li>数据的运算包括数据的定义与实现，定义偏向于逻辑层面，即针对运算的功能；而实现偏向于物理层面，即针对运算的具体步骤</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>一个值的集合和定义此集合的一组操作的总称</li><li>分为原子类型和结构类型：<ul><li>原子类型：即不可再分的数据类型，例如<code>int</code></li><li>结构类型：其值可以分成若干部分，如一个方法中的各成员变量</li></ul></li></ul><h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><ul><li>用数学化的语言定义的数据逻辑结构</li></ul><h2 id="算法——知识架构"><a href="#算法——知识架构" class="headerlink" title="算法——知识架构"></a>算法——知识架构</h2><p>  <img data-src="https://z3.ax1x.com/2021/04/12/cDBQpT.png" alt=""></p><h3 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h3><ul><li>程序$=$数据结构$+$算法</li><li>数据结构：即把需求写入计算机中，用计算机可以理解的语言来把需求的信息存进计算机中，并对其结构进行操作</li><li>算法：解决需求的一种方案或方法，处理信息</li></ul><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><ul><li><strong>有穷性</strong><ul><li>算法是有穷的，但程序时无穷的</li><li>算法不可以是无限循环，这样的算法是死的，并且在有穷的时间内完成</li></ul></li><li><strong>确定性</strong><ul><li>算法中的每条指令都是有意义的，输入同样的信息必须输出相同的结果</li></ul></li><li><strong>可行性</strong><ul><li>可通过已经实现的有限次运算步骤中实现</li></ul></li><li><strong>有输入</strong><ul><li>一个算法必要要有0或多个输入，数量取决于需求</li></ul></li><li><strong>有输出</strong><ul><li>一个算法必须要有一个或多个输出，不然会死循环！</li></ul></li></ul><h3 id="好的算法的特点"><a href="#好的算法的特点" class="headerlink" title="好的算法的特点"></a>好的算法的特点</h3><ul><li><p><strong>正确性</strong></p><ul><li>必须得出正确的结果</li></ul></li><li><p><strong>可读性</strong></p><ul><li>可以让人们很好的理解算法的实现</li></ul></li><li><p><strong>健壮性</strong></p><ul><li>输入错误数据时，不会输出莫名其妙的数据，而是通过判断来检测出输入数据的正误</li></ul></li><li><p><strong>高效率与低内存</strong></p><ul><li>即执行速度快，时间复杂度低</li></ul></li></ul><h3 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a>算法效率的度量</h3><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>事前预估算法时间开销$T(n)$与问题规模$n$的关系</li><li>它是一个函数，它定性描述该算法的运行时间。这是一个代表算法输入值的字符串的长度的函数。时间复杂度常用大O符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。例如，如果一个算法对于任何大小为 <em>n</em> （必须比 $n_0$ 大）的输入，它至多需要 $5n^3 + 3n$ 的时间运行完毕，那么它的渐近时间复杂度是 O($n^3$)。(摘自Wikipedia)</li></ul><h4 id="时间复杂度公式-nbsp-算法的渐进时间复杂度"><a href="#时间复杂度公式-nbsp-算法的渐进时间复杂度" class="headerlink" title="时间复杂度公式&nbsp;(算法的渐进时间复杂度)"></a>时间复杂度公式&nbsp;(算法的渐进时间复杂度)</h4><script type="math/tex; mode=display">T(n)=O(f(n))</script><ul><li><p>其中$f(n)$ 表示每行代码执行次数之和，而 O 表示正比例关系，这个公式的全称是：==算法的渐进时间复杂度==。</p></li><li><p>例如：</p><pre><code class="lang-java"> for(int i = 0;i &lt;= n;i++){     int j = i;     j++; }</code></pre><ul><li>假设每行代码的执行时间都是一样的，我们用$1$颗粒时间 来表示，那么这个例子的第一行耗时是1个颗粒时间，第三行的执行时间是 n个颗粒时间，第四行的执行时间也是 n个颗粒时间（第二行和第五行是符号，暂时忽略），那么总时间就是 1颗粒时间 + n颗粒时间 + n颗粒时间 ，即 (1+2n)个颗粒时间，即： $T(n) = (1+2n)颗粒时间$，从这个结果可以看出，这个算法的耗时是随着n的变化而变化，因此，我们可以简化的将这个算法的时间复杂度表示为：T(n) = O(n)</li></ul></li></ul><ul><li><p>常见的时间复杂度量级有：</p><ul><li>常数阶 $O(1)$</li><li>对数阶 $O(logN)$</li><li>线性阶 $O(n)$</li><li>线性对数阶 $O(nlogN)$</li><li>平方阶 $O(n^2)$</li><li>立方阶 $O(n^3)$</li><li>K次方阶 $O(n^k)$</li><li>指数阶 $(2^n)$</li></ul></li></ul><h4 id="时间复杂度运算"><a href="#时间复杂度运算" class="headerlink" title="时间复杂度运算"></a>时间复杂度运算</h4><ul><li><p><strong>加法规则</strong></p><script type="math/tex; mode=display">T(n) = T_1(n) + T_2(n) = O(f(n)) + O(g(n)) = O(max(f(n), g(n)))</script><ul><li>多项相加，只保留最高阶的项，且系数变为1</li></ul></li><li><p><strong>乘法规则</strong></p><script type="math/tex; mode=display">T(n) = T_1(n)×T_2(n) = O(f(n))×O(g(n)) = O(f(n)×g(n))</script><ul><li>多项相乘，全部保留</li></ul></li><li><p><strong>各常见时间复杂度关系</strong></p><script type="math/tex; mode=display">O(1)<O(log_2 n)<O(n)<O(n log_2 n)<O(n^2)<O(2^n)<O(n!)<O(n^n)</script></li><li><p><strong>最坏时间复杂度</strong>:</p><ul><li>最坏情况下算法的时间复杂度</li></ul></li><li><p><strong>平均时间复杂度</strong>:</p><ul><li>所有输入示例等概率出现的情况下,算法的期望运行时间</li></ul></li><li><p><strong>最好时间复杂度</strong>:</p><ul><li>最好情况下算法的时间复杂度</li></ul></li></ul><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><ul><li><p>无论问题规模怎么变,算法运行所需的内存空间，都是固定的常量,算法空间复杂度为</p><script type="math/tex; mode=display">S(n) = O(1)</script><blockquote><p>注:S表示 “Space”<br>算法原地工作——算法所需内存空间为常量</p></blockquote></li><li><p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，同样反映的是一个趋势，因此我们用 S(n) 来定义。</p></li><li><p>$S(n)=O(n)$</p><pre><code class="lang-java"> void arr(int n){     int arr1[n];     int i; }</code></pre><ul><li><p>假设一个<code>int</code>类型占<code>4B</code>，则上面的代码占用的内存为：</p><script type="math/tex; mode=display">S(n)=4+4n+4</script></li><li><p><code>i</code>变量占<code>4B</code>，<code>n</code>变量占<code>4B</code>，数组 <code>arr[n]</code>,占<code>4n</code></p></li></ul></li><li><p>$S(n)=O(n^2)$</p><pre><code class="lang-java"> void one_arr(int n){     int arr2[n][n];     int i; }</code></pre><ul><li><p>此时上面的代码占用的内存为：</p><pre><code>$$S(n)=n^2+4$$</code></pre></li><li><p>简记为：$S(n)=O(n^2)$</p></li></ul></li><li><p>$S(n)=O(n^2)+O(n)+O(1)$</p><pre><code class="lang-java"> void one_arr1(int n){     int arr2[n][n];     int arr[n]     int i; }</code></pre><ul><li><p>此时上面的代码占用的内存为：</p><script type="math/tex; mode=display">S(n)=O(n^2)+O(n)+O(1)=O(n^2)</script><ul><li>只保留最高指数项</li></ul></li></ul></li></ul><blockquote><p>参考资料：<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MDQ3OTU1NQ==">https://zhuanlan.zhihu.com/p/50479555</span></p><p>简书：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mNGNjYTVjZTA1NWE=">https://www.jianshu.com/p/f4cca5ce055a</span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法入门教程</title>
      <link href="/my-blog/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/my-blog/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="算法入门"><a href="#算法入门" class="headerlink" title="算法入门"></a>算法入门</h1><h2 id="初识算法"><a href="#初识算法" class="headerlink" title="初识算法"></a>初识算法</h2><ul><li>算法是最初为了解决数学上的问题，由于计算机编程与数学密切相关，因此算法也被广泛应用于计算机领域中。</li><li>通过学习算法，可以更好地了解计算机底层的实现原理，对各程序有更加深刻的认识。</li><li>算法可以帮助我们设计出更好的程序，优化程序的性能，对就职面试也有很大的帮助</li></ul><h2 id="算法的意义"><a href="#算法的意义" class="headerlink" title="算法的意义"></a>算法的意义</h2><ul><li>算法是把人所想的点子（Idea）以编程语言的形式应用到机器或程序设计中</li><li>人通过写算法表现自己的程序逻辑与设计方式，而通过编程语言作为载体，让计算机理解人们所要表达的设计逻辑</li></ul><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><hr><ul><li>冒泡排序（bubble Sort），是一种较简单的排序算法</li><li>给定一组随机乱序的数组序列，通过比较相邻两个数的大小，按照从小到大的顺序 ，若前者比后者大，则交换位置，否则不需要；当经过一次循环迭代时，出现最大的数在该数组序列的末尾，此时已筛选出最大的数，即“浮出水面”，通过这种比较循环迭代的方式，类似于气泡浮出水面的形式，称为“冒泡”，这种方法也称“冒泡法”。</li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><ul><li><strong>详细步骤</strong><ol><li>对于给定的一个乱序的随机数组序列，比较相邻两个数，若前者比后者大，则交换。</li><li>一轮循环后，出现最大的数，该数则跳出比较循环（根据此规律，每执行完一次循环，就会出现一个排好的数）</li><li>重复执行步骤一，直到所有数字从小到大排列完成</li></ol></li></ul><h4 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h4><pre><code class="lang-java">import java.util.Arrays;public class BubbleSort {    public static void main(String[] args) {        //初始化需要排序的数组        int array[] = {9,2,11,7,12,5};        //对需要排序的数组进行排序        for (int i=1; i&lt;array.length; i++){            //针对待排序序列中除了已经排序好的元素之外，重复排序工作            for(int j=0;j&lt;array.length-i;j++){                //当相邻两个元素需要交换时，交换相邻的两个元素                if(array[j]&gt;array[j+1]){                    int temp = array[j];                    array[j] = array[j+1];                    array[j+1] = temp;                }            }        }        //打印出排序好的序列        System.out.println(Arrays.toString(array));    }}</code></pre><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><hr><ul><li>插入排序（Insert Sort），是一种较为简单的排序算法</li><li>通过构建有序序列，对未排序的序列进行排序，有点类似于打扑克捋顺牌</li></ul><h4 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h4><ul><li><strong>详细步骤</strong><ol><li>对于一个未排序的数组序列，选取第一个元素，该元素即被认定为已排序的，将该元素放入一个新的序列中，此序列存放排好数的序列</li><li>把未排序的数组序列的第二个元素选取出来，对新数列的元素进行大小对比，从大到小排列</li><li>后面的数重复进行步骤二</li><li>直到旧数列的数全部被选到新序列中，此时的新序列则为排序好的序列</li></ol></li></ul><h4 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h4><pre><code class="lang-java">import java.util.Arrays;public class InsertSort {    public static void main(String[] args) {        //初始化需要排序的数组        int array[] = {9, 2, 11, 7, 12, 5};        //初始化一个与待排序数组大小相同的数组，用来存放排序好的序列        int sortArray[] = new int[array.length];        //步骤1：待排序数组中选择第一个元素作为已经排序好的元素（数组的下标0表示第一个元素）        sortArray[0] = array[0];        //步骤2：依次遍历未排序的元素，将其插入已排序序列中        for (int i = 1; i &lt; array.length; i++) {            //待排序元素            int temp = array[i];            //记录待排序元素需要插入已排序数组中的位置            int index = i;            //从已排序好的数组右边依次遍历数组，直到找到待排序元素需要插入的位置            while(  index &gt; 0  &amp;&amp; temp &lt; sortArray[index-1] ){                sortArray[index] = sortArray[index-1];                index--;            }            //插入待排序元素            sortArray[index] = temp;        }        //打印出排序好的序列        System.out.println(Arrays.toString(sortArray));    }}</code></pre><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><hr><ul><li>选择排序（Select Sort），一种较为直观的排序算法，具有存储空间小的特点</li><li>通过对一个未排序的序列进行筛选，每次对整个序列进行筛选，筛选出最小的数，直到把所有的数都筛选完，即可得出最终的正确顺序</li><li>选择排序的==主要优点与数据移动有关==。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的表进行排序总共进行至多$(n-1)$次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</li></ul><h4 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h4><ul><li><p><strong>详细步骤</strong></p><ol><li>一个未排序的序列，对整个序列进行数与数之间的比较，筛选出该序列中最小的数</li><li>把筛选出的最小数与该序列的第一个元素的位置进行互换，此时序列的最小数就被选择到了序列的最前面</li><li>每次循环迭代都会选出一个未排序序列中的最小数</li><li>重复步骤1和2，得出最终的序列即为正确排序的序列（不需要开辟新的地址空间来存储新序列！！！）</li></ol></li><li><p><strong>选出最小数的关键伪代码</strong></p><pre><code class="lang-java"> //待排序的序列记为A，寻找最小元素的伪代码如下： min = A[0] for(int i=1;i&lt;A.length;i++){    if(A[i] &lt; min){      min = A[i]    } }</code></pre></li></ul><h4 id="Java实现-1"><a href="#Java实现-1" class="headerlink" title="Java实现"></a>Java实现</h4><pre><code class="lang-java">import java.util.Arrays;public class SelectSort {    public static void main(String[] args) {        //初始化需要排序的数组        int array[] = {9, 2, 11, 7, 12, 5};        //依次进行选择排序，每次找出最小的元素，放入待排序的序列中        for(int i=0;i&lt;array.length;i++){            //记录最小元素min和最小元素的数组下标索引minIndex            int min = array[i];            int minIndex = i;            //在未排序的序列中找出最小的元素和对应数组中的位置            for(int j=i+1;j&lt;array.length;j++){                if(array[j] &lt; min){                    min = array[j];                    minIndex = j;                }            }            //交换位置            int temp = array[i];            array[i] = array[minIndex];            array[minIndex] = temp;        }        //打印出排序好的序列        System.out.println(Arrays.toString(array));    }}</code></pre><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><hr><ul><li>希尔排序（Shell Sort），也称为“缩小增量排序”，是插入排序的增强版，优先比较较远距离的元素</li><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><blockquote><p>参考资料：<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC84Nzc4MTczMQ==">https://zhuanlan.zhihu.com/p/87781731</span></p></blockquote><h4 id="算法基本思想"><a href="#算法基本思想" class="headerlink" title="算法基本思想"></a>算法基本思想</h4><ul><li>设待排序列有n个元素，取一整数gap（$gap&lt;n$）作为间隔，将全部元素分为gap个子序列，所有距离为gap的元素放在同一个子序列中</li><li>在每一个子序列中分别采用直接插入排序</li><li>然后缩小间隔gap，例如取$gap=\frac{gap}{2}$ ,重复上述的子序列划分和排序工作</li></ul><h4 id="算法实现-3"><a href="#算法实现-3" class="headerlink" title="算法实现"></a>算法实现</h4><ul><li><strong>详细步骤</strong><ol><li>对于一个未排序的序列，首先对该序列进行“粗略排序”，例如取该序列元素个数的一半作为两个数的跨度（gap），即若元素个数为12，则$gap=6$，每跨越6个数进行两数比较（一号元素与六号元素，二号对七号……），然后两两成组即成了一个个小的子序列，每个子序列进行大小比较，换位后再回到原序列中，此时得到的就是“粗略排序”后的排序序列</li><li>接着缩小gap的数值，对“粗略排序”好的序列再进行分组，由于已经进行了“粗略排序”，因此即使子序列的数量因gap值的缩小而增加，也不会花费太长的时间；每个子序列排好序后作为一个整体，进行直接插入排序</li><li>重复步骤2，直到出现正确的序列</li></ol></li><li><strong>算法关键点</strong><ul><li>该算法对gap值的取值尤为关键</li></ul></li></ul><h4 id="Java实现-2"><a href="#Java实现-2" class="headerlink" title="Java实现"></a>Java实现</h4><pre><code class="lang-java">import java.util.Arrays;public class ShellSort {    public static void main(String[] args) {        //初始化需要排序的数组        int array[] = {9, 2, 11, 7, 12, 5};        //初始化希尔排序的增量为数组长度        int gap = array.length;        //不断地进行插入排序，直至增量为1        while (true) {            //增量每次减半            gap = gap/2;            for (int i = 0; i &lt; gap; i++) {                //内部循环是一个插入排序                for (int j = i + gap; j &lt; array.length; j += gap) {                    int temp = array[j];                    int k = j - gap;                    while (k &gt;= 0 &amp;&amp; array[k] &gt; temp) {                        array[k + gap] = array[k];                        k -= gap;                    }                    array[k + gap] = temp;                }            }            //增量为1之后，希尔排序结束，退出循环            if (gap == 1)                break;        }        //打印出排序好的序列        System.out.println(Arrays.toString(array));    }}</code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><hr><ul><li>快速排序（Quick Sort），是一种效率比大多数排序算法都要高的排序算法</li><li>快速排序实现的核心思想就是在待排序序列中选择一个基准值，然后将小于基准值的数字放在基准值左边，大于基准值的数字放在基准值右边，然后左右两边递归排序，整个排序过程中最关键部分就是寻找基准值在待排序序列中的索引位置。</li></ul><h4 id="算法实现-4"><a href="#算法实现-4" class="headerlink" title="算法实现"></a>算法实现</h4><ul><li><strong>详细步骤</strong><ol><li>给定一个未排序的序列，选取第一个元素作为基准值$key$，使用双指针$i$、$j$的方式，对第二个元素用$i$指向，对最后一个元素用$j$指向，然后$i++$ 直到指向的数比$key$基准值大，此时$i$停止；$j—$直到指向的数比$key$基准值小，此时$j$停止；$i$指向的数与$j$指向的数位置互换，这样，比$key$小的数就会在序列的左边，比$key$大的数就会在序列的右边</li><li>在步骤一的$i$与$j$的位置继续进行循环，即$i++$与$j—$，直到出现步骤一的情况，交换两数位置</li><li>当$i$与$j$两指针指向同一个数时，该数与基准值$key$交换位置，该数的位置即为基准值的位置，此时 以基准值为界限，分离出两个子序列，左边的子序列的数都比基准值$key$要小，右边的子序列的数都比基准值$key$要大。</li><li>接着两个子序列再按照步骤一和步骤二的方法再每个子序列中在分离出两个子序列，此时整个序列有四个小的子序列，当所有序列都按照从小到大的顺序排列时，排序完成</li></ol></li></ul><h4 id="Java实现-3"><a href="#Java实现-3" class="headerlink" title="Java实现"></a>Java实现</h4><pre><code class="lang-java">import java.util.Arrays;public class QuickSort {    public static void main(String[] args) {        //初始化需要排序的数组        int array[] = {9, 2, 11, 7, 12, 5};        //快速排序        quickSort(array,0,array.length-1);        //打印出排序好的序列        System.out.println(Arrays.toString(array));    }    //快速排序   private static void quickSort(int[] array,int low, int high){        if(low &lt; high){            //找到分区的位置，左边右边分别进行快速排序            int index = partition(array,low,high);            quickSort(array,0,index-1);            quickSort(array,index+1,high);        }   }   //快速排序分区操作   private static int partition(int[] array, int low, int high){        //选择基准        int pivot = array[low];        //当左指针小于右指针时，重复操作        while (low &lt; high){            while(low &lt; high &amp;&amp; array[high] &gt;= pivot){                high = high - 1;            }            array[low] = array[high];            while (low &lt; high &amp;&amp; array[low] &lt;= pivot){                low = low + 1;            }            array[high] = array[low];        }        //最后赋值基准        array[low] = pivot;        //返回基准所在位置，基准位置已经排序好        return low;   }}</code></pre><h2 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h2><hr><h3 id="什么是递归？"><a href="#什么是递归？" class="headerlink" title="什么是递归？"></a>什么是递归？</h3><ul><li>在数学和计算机领域中，递归主要是指在函数的定义中使用函数自身的方法。顾名思义，递归主要包含两个意思，==递和归==，这个是递归思想的精华所在。递归就是有去（递去）有回（归来）。“有去” 是指递归问题可以分解成若干个规模较小、与原问题形式相同的子问题，这些子问题可以和原问题用相同的方法来求解。“有回” 是指这些问题的演化过程是一个从大到小，并且最终会有一个明确的终点，一旦达到终点，就可以从终点原路返回，解决原问题。</li></ul><blockquote><p>更为直接的说法就是：递归的基本思想就是把大问题转化为相似的小问题解决。特别是在程序中的函数实现时，大问题的解决方案和小问题是一模一样的，所以就产生==解决一个问题会调用函数本身的情况，这个也是递归的定义。==</p></blockquote><h3 id="递归三要素"><a href="#递归三要素" class="headerlink" title="递归三要素"></a>递归三要素</h3><ol><li>递归终止条件———防止出现无限递归</li><li>递归终止条件时的处理方法</li><li>递归中重复的逻辑提取</li></ol><pre><code class="lang-java">recursion(big_problem){   if (end_condition){  //满足递归的终止条件       solve_end_condition;  //处理终止条件下的逻辑       end;  //递归结束   }else {       recursion(small_problem);  //递归中重复的逻辑提取，缩小问题规模，调用自身方法，即为递归的最明显的特点   }}</code></pre><blockquote><p>参考文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY3h5eGlhb3d1LmNvbS8xMTM1Lmh0bWw=">https://www.cxyxiaowu.com/1135.html</span></p></blockquote><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><ul><li>斐波那契数列（Fibonacci sequence），也称之为黄金分割数列，由意大利数学家列昂纳多・斐波那契（Leonardo Fibonacci）提出。斐波那契数列指的是这样的一个数列：1、1、2、3、5、8、13、21、34、……，这个数列从第 3 项开始，每一项都等于前面两项之和。在数学上，斐波那契数列可以被递推的方法定义如下：</li></ul><script type="math/tex; mode=display">F(1)=1,F(2)=1,F(n)=F(n-1)+F(n-2) (n\geq3,n\in N^*)</script><h4 id="用Java实现斐波那契数列"><a href="#用Java实现斐波那契数列" class="headerlink" title="用Java实现斐波那契数列"></a>用Java实现斐波那契数列</h4><pre><code class="lang-java">public class Fibonacci {    public static void main(String[] args){        System.out.println(fibonacci(1));        System.out.println(fibonacci(2));        System.out.println(fibonacci(3));        System.out.println(fibonacci(4));        System.out.println(fibonacci(5));    }    //斐波那契数列数列的计算    private static int fibonacci(int n){        //如果是终止条件，按照要求返回终止条件对应结果        if( n==1 || n==2 ){            return 1;        }else {            //非终止条件，按照要求把大的问题拆分成小问题，调用自身函数递归处理            return fibonacci(n-1)+fibonacci(n-2);        }    }}</code></pre><h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><hr><ul><li><strong>分治法</strong>是建基于多项分支递归的一种很重要的算法范型。字面上的解释是“分而治之”，分（divide）是将一个大的问题分解成一些小的问题分别求解，治 （conquer）则是将分解的问题答案合并在一起；即把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。</li></ul><h3 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h3><ul><li>对于一个规模较大的问题，将其拆分成一个个小的子问题，再对各个小的问题进行求解，最后将所有小问题的结果合并成大问题的解。</li></ul><h3 id="分治算法的可行性"><a href="#分治算法的可行性" class="headerlink" title="分治算法的可行性"></a>分治算法的可行性</h3><ul><li>该问题是否可以拆分成小的问题</li><li>每个小的问题能否很容易的解决</li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>对待求解的问题进行拆分，拆分成一个个小的，相互独立的子问题，形式与待求解问题形式一致</li><li>若每个子问题容易求解则直接求解，否则采用递归的方式进行</li><li>将各个子问题的解合并成该待求解问题的解</li></ol><ul><li><strong>核心伪代码</strong></li></ul><pre><code class="lang-java">divideAndConquer(big_problem){   if (canSolve(big_problem)){ //问题可以直接求解则直接求解返回       solve(big_problem); //求解       return;    }else {       small_problem_A = divide(big_problem); //不能直接求解的问题拆分       small_problem_B = divide(big_problem); //不能直接求解的问题拆分       divideAndConquer(small_problem_A); //递归求解子问题       divideAndConquer(small_problem_B); //递归求解子问题       return merge(); //合并子问题的解   }}</code></pre><h3 id="分治法应用场景"><a href="#分治法应用场景" class="headerlink" title="分治法应用场景"></a>分治法应用场景</h3><ul><li><strong>二分查找</strong></li><li><strong>全排列问题</strong></li></ul><h3 id="分治算法之最大子数组问题"><a href="#分治算法之最大子数组问题" class="headerlink" title="分治算法之最大子数组问题"></a>分治算法之最大子数组问题</h3><ul><li>最大子数组问题描述如下：假如我们有一个数组，数组中的元素有正数和负数，如何在数组中找到一段连续的子数组，使得子数组各个元素之和最大。</li></ul><blockquote><p>最大子数组问题在生活中有很多实际情况可以与其对应，比如说我们观察某一股票在一段时间内的走势，请问如何找出在哪一天买入，哪一天卖出可以赚到最大差价（这里假设你已经知道股票的价格走势）？为了实现最大化的股票收益，我们需要考虑的是买进和卖出时候的价格变化幅度，因此从该股票的每日变化幅度来考虑这个问题更加合适。所以，我们可以将这个问题稍作变形：将股票价格走势对应为每日股票价格涨跌，涨记为正值，跌记为负值，然后一段时间就对应一个正负数数组，并试图找到该数组的最大子数组，就可以获得最大收益。</p></blockquote><h4 id="分治算法的实现步骤"><a href="#分治算法的实现步骤" class="headerlink" title="分治算法的实现步骤"></a>分治算法的实现步骤</h4><ol><li>先找出数组中的中间元素$mid$ ,根据分治策略，把数组分成两个子数组，左边为$[low,mid]$,右边为$[mid+1,high]$</li><li>判断最大子数组$[i,j]$的位置，即以下三种情况：<ol><li>最大子数组$[i,j]$完全在$[low,mid]$中：即$low\leq i &lt; j \leq mid$</li><li>最大子数组$[i,j]$完全在$[mid+1,high]$中：即$mid+1\leq i &lt; j \leq high$</li><li>最大子数组$[i,j]$完全在$[low,high]$中：即$low\leq i \leq mid \leq j \leq high$</li></ol></li><li>对三个子问题进行求解</li></ol><h4 id="Java实现-4"><a href="#Java实现-4" class="headerlink" title="Java实现"></a>Java实现</h4><pre><code class="lang-java">package divide_and_conquer;public class MaxSubarray {    //内部类，用来存储最大子数组的返回结果，    private static class Result {        int low;        int high;        int sum;        public Result(int low, int high, int sum) {            this.low = low;            this.high = high;            this.sum = sum;        }        @Override        public String toString() {            return &quot;Result{&quot; +                    &quot;low=&quot; + low +                    &quot;, high=&quot; + high +                    &quot;, sum=&quot; + sum +                    &#39;}&#39;;        }    }    private static Result FindMaxCrossSubarray(int[]A,int low, int mid, int high){        //寻找左边的连续最大值及记录位置        int leftSum = Integer.MIN_VALUE;        int sum = 0;        int maxLeft = mid;        for (int i=mid; i&gt;=low; i--){            sum = sum + A[i];            if(sum &gt; leftSum){                leftSum = sum;                maxLeft = i;            }        }        //寻找右边的连续最大值及记录位置        int rightSum = Integer.MIN_VALUE;        int maxRight = mid+1;        sum = 0;        for ( int j=mid+1; j&lt;=high;j++){            sum = sum + A[j];            if(sum &gt; rightSum){                rightSum = sum;                maxRight = j;            }        }        //返回跨越中间值的最大子数组结果        return new Result(maxLeft,maxRight,leftSum + rightSum);    }    public static  Result FindMaxSubarray(int[] A, int low, int high){        //数组只有一个元素时的处理情况        if (high == low){            return new Result(low,high,A[low]);        }else {            //对应思路中步骤1，找到中间元素            int mid = (low + high)/2;            //对应思路中步骤2，分别对应a,b,c三种情况求解最大子数组结果            Result leftResult = FindMaxSubarray(A,low,mid);            Result rightResult = FindMaxSubarray(A,mid+1,high);            Result crossResult = FindMaxCrossSubarray(A,low,mid,high);            //对应步骤3，比较            if(leftResult.sum &gt;= rightResult.sum &amp;&amp; leftResult.sum &gt;= crossResult.sum){                return leftResult;            }else if (rightResult.sum &gt;= leftResult.sum &amp;&amp; rightResult.sum &gt;= crossResult.sum){                return rightResult;            }else {                return crossResult;            }        }    }    public static void main(String[] args){        int[] A = {12, -3, -16, 20, -19, -3, 18, 20, -7, 12, -9, 7, -10};        System.out.println(FindMaxSubarray(A,0,A.length-1).toString());    }}</code></pre><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><hr><blockquote><p>动态规划通常用于解决最优化问题，在这类问题中，通过做出一组选择来达到最优解。在做出每个选择的同时，通常会生成与原问题形式相同的子问题。当多于一个选择子集都生成相同的子问题时，动态规划技术通常就会很有效，其关键技术就是对每个这样的子问题都保存其解，当其重复出现时即可避免重复求解。</p></blockquote><ul><li>动态规划<code>（Dynamic Programming）</code>在数学上属于运筹学的一个分支，是求解决策过程 <code>（decision process）</code>最优化的数学方法，同时也是计算机科学与技术领域中一种常见的算法思想。</li><li>动态规划算法与我们前面提及的分治算法相似，都是==通过组合子问题的解来求解原问题的解==。但是两者之间也有很大区别：<ul><li>分治法将问题划分为互不相交的子问题，递归的求解子问题，再将他们的解组合起来求解原问题的解；与之相反，动态规划应用于子问题相互重叠的情况，在这种情况下，分治法还是会做很多重复的不必要的工作，他会反复求解那些公共的子问题，而动态规划算法则对相同的每个子问题只会求解一次，将其结果保存起来，避免一些不必要的计算工作。</li></ul></li></ul><h3 id="钢条切割问题"><a href="#钢条切割问题" class="headerlink" title="钢条切割问题"></a>钢条切割问题</h3><ul><li><p>某个钢材公司购买长钢条，将其切割为短钢条出售，其中切割过程本身不考虑成本，公司管理层想知道最赚钱的钢材切割方案。假设我们知道该钢材公司出售一段长度为 i 米的钢条的价格为 $p(i)$ ，对应的价目表如下：</p><p>|i        |1    |2    |3    |4    |5    |6    |7    |8    |9    |10|<br>|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|<br>|p(i)    |1    |5    |8    |9    |10    |17    |17    |20    |24    |30|</p></li><li><p>所以，钢材切割问题的定义如下：当我们给定一段长度为 $n$ 米的钢条和对应的一个价格表（ $p(i)$, i = 1,2,3,…n)，求一个钢条切割方案，使得最终的销售收益 $r(n)$ 最大。注意：如果长度为 $n$ 英尺的钢条的价格 $p_n$  足够大，那么最优解就是不需要切割。（在这里，我们要求切割的钢条必须为整米长度）</p></li><li><p><strong>问题分析</strong> ：考虑  = 4 的情况，那么有以下几种切割方式：</p><ol><li><p>切割为四段，长度为：1，1，1，1；总共卖$4×1=4$元。</p></li><li><p>切割为三段，长度为：1，1，2；总共卖$2×1+1×5=7$元。</p></li><li><p>切割为两段，长度为：1，3；总共卖$1×1+1×8=9$元。</p></li><li><p>切割为两段，长度为：2，2；总共卖$2×5=10$元。</p></li><li><p>不切割，长度为：4；总共卖$1×9=9$元。</p><p><img data-src="https://z3.ax1x.com/2021/04/12/cDHnsJ.jpg" alt=""></p></li></ol></li></ul><hr><ul><li>长度为 $n$ 的钢条，总共有 $2^{n-1}$ 种不同的切割方案，因为长度为 $n$ 的钢条，总共有 $n-1$ 个缝隙，每个缝隙都可以选择切或不切，==所以有 $2^{n-1}$  种不同切割方案。所以随着 $n$ 增大，切割方案总数呈指数级上升，遍历是不现实的==。在这里，很容易想到，当要分析长度为 $n$ 的钢条的最优解时，可以先将钢条切成两段。==将长度为 $n$ 的钢条随意切割的方案是 $2^{n-1}$ 种，但是只切两段的方案只有 $n-1$ 种，这样规避了指数级计算量==。将切成的两段，分别再当作子问题去求解，这就是如下分治策略解法：</li></ul><h4 id="自顶向下递归实现"><a href="#自顶向下递归实现" class="headerlink" title="自顶向下递归实现"></a>自顶向下递归实现</h4><pre><code class="lang-java">  int CutRod(const int *p, int n){    if (n == 0)    {        return 0;    }    int q = -1;    for (int i = 1; i &lt;= n; ++i)    {        int tmp = p[i] + CutRod(p, n - i);        if (q &lt; tmp)        {            q = tmp;        }    }    return q;}</code></pre><ul><li>自顶向下递归实现的<code>CutRod</code>效率很差，原因在于<code>CutRod</code>反复地用相同的参数值对自身进行递归调用，即它反复求解相同的子问题。它的运行时间为$T(n)=2^n$。对于长度为n的钢条<code>CutRod</code>考察了所有$2^{n-1}$种可能的切割方案。递归调用树共有$2^{n-1}$个叶结点，每个叶结点对应一种可能的切割方案。</li></ul><h4 id="动态规划算法一：带备忘录的自顶向下法"><a href="#动态规划算法一：带备忘录的自顶向下法" class="headerlink" title="动态规划算法一：带备忘录的自顶向下法"></a>动态规划算法一：带备忘录的自顶向下法</h4><pre><code class="lang-java">    int MemoizedCutRodAux(const int *p, int n, int *r)    {        if (r[n] &gt;= 0)        {            return r[n];            //首先检查所需的值是否存在        }        int q = -1;        if (n == 0)        {            q = 0;        }        else        {            for (int i = 1; i &lt;= n; ++i)            {                int tmp = p[i] + MemoizedCutRodAux(p, n - i, r);                if (q &lt; tmp)                {                    q = tmp;                }            }        }        r[n] = q;        return q;    }    int MemoizedCutRod(const int *p, int n)    {        int *r = new int[n + 1];        for (int i = 0; i &lt;= n; ++i)        {            r[i] = -1;        }        return MemoizedCutRodAux(p, n, r);    }</code></pre><ul><li><p>上述代码与分治不同的地方在于初始化了数组<code>r[n]</code>，将不同长度的最优解数值，储存在了该数组中，所以当不同的 $n$ 传进来时，如果在数组 $r$ 中有当前钢条长度的记录（<code>if r[n] &gt;= 0 : return r[n]</code>)，则直接返回结果，不再进行之后的计算，其余的递归思路与分治策略完全一样。此方法的时间复杂度为 $O(n^2)$  ，变为了多项式时间复杂度。可见，==动态规划算法用少量的空间，显著提升了算法效率。==</p></li><li><p>自顶向下的动态规划算法，仍然不是最理想的。例如在计算 $n =4 $时， $n = 0 $的情况被计算了8次，采用了备忘录的形式之后，虽然 $n = 0$  的情况只需要计算1次，查表有7次操作，但是这7次查表操作，都是在进入了一个相同的函数中，会有频繁的递归函数调用的开销。采用自底向上的动态规划算法，就可以规避这个问题。</p></li></ul><h4 id="动态规划算法二：自底而上法"><a href="#动态规划算法二：自底而上法" class="headerlink" title="动态规划算法二：自底而上法"></a>动态规划算法二：自底而上法</h4><pre><code class="lang-java">int BottomUpCutRod(const int *p, int n){    int *r = new int[n + 1];    r[0] = 0;    for (int i = 1; i &lt;= n; ++i)    {        int q = -1;        for (int j = 1; j &lt;= i; ++j)        {            int tmp = p[j] + r[i - j];            q = q &gt; tmp ? q : tmp;        }        r[i] = q;    }    return r[n];}</code></pre><ul><li><p>自底向上法不再使用函数递归调用，而采用子问题的自然顺序。在切割时，先由最小的1开始切割，若 $i&lt;j$ ，则规模为 $j$ 的解中一定包含了规模为 $i$ 的全部解（此时子问题的规模，可以理解为之前递归函数的输入 $n$ ）。</p></li><li><p>上述代码中，仍然先初始化一个数组 $r$  ，用于记录不同规模子问题的最优解，并且将 <code>r[0]</code>  初始化为 0 ；之后对 $j = 1，2，… ，n$进行升序求解。不同于之前算法的是，此时直接访问 <code>r[j-i]</code> 来获得规模为 $j-i$ 的子问题的解。因为自底向上求解时，若 $i&lt;j$，当在求解规模为 $j$ 的子问题时， <code>r[i]</code> 一定有数值，因为之前一定已经计算过。</p></li><li><p>自底向上算法的时间复杂度也为，但是避免了大量的递归函数调用的开销，算法更加稳定。</p></li></ul><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><ul><li>贪心算法（<code>greedy algorithm</code>）是在对问题求解时，总是做出在当前看来是最好的选择。也就是说，==不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解==。</li><li>贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是局部最优解能决定全局最优解。简单地说，问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。————摘自Wikipedia</li></ul><blockquote><p>贪心算法与动态规划算法的最大区别在于：贪心算法每次选择的时候都是按照贪心策略来选择的，满足当前情况的最优解，但是并不一定会是整体最优解；动态规划算法在选择考虑时会考虑所有的子情况，选择最优解，这会是整体的最优解。</p></blockquote><h3 id="关键与实现过程"><a href="#关键与实现过程" class="headerlink" title="关键与实现过程"></a>关键与实现过程</h3><ul><li><strong>关键</strong><ol><li>创建数学模型来描述问题。</li><li>把求解的问题分成若干个子问题。</li><li>对每一子问题求解，得到子问题的局部最优解。</li><li>把子问题的解局部最优解合成原来解问题的一个解。</li></ol></li><li><strong>实现该算法的过程</strong><ul><li>从问题的某一初始解出发；<code>while</code> 能朝给定总目标前进一步 <code>do</code>，求出可行解的一个解元素；最后，由所有解元素组合成问题的一个可行解。</li></ul></li></ul><h3 id="贪心算法的可行条件"><a href="#贪心算法的可行条件" class="headerlink" title="贪心算法的可行条件"></a>贪心算法的可行条件</h3><ol><li><p><strong>贪心选择</strong> ： 当某一个问题的整体最优解可通过一系列局部的最优解的选择达到，并且每次做出的选择可以依赖以前做出的选择，但不需要依赖后面需要做出的选择。这就是贪心选择性质。对于一个具体问题，要确定它是否具有贪心选择性质，必须==证明每一步所作的贪心选择最终导致问题的整体最优解==。</p></li><li><p><strong>最优子结构</strong> ： 如果一个问题的最优解包含其子问题的最优解，则此问题具备最优子结构的性质。问题的最优子结构性质是该问题是否可以用贪心算法求解的关键所在。<br>贪心算法与动态规划算法求解的问题类似，都需要满足最优子结构的性质。</p></li></ol><h3 id="贪心算法之分饼干"><a href="#贪心算法之分饼干" class="headerlink" title="贪心算法之分饼干"></a>贪心算法之分饼干</h3><ul><li><strong>题目概述</strong><ul><li>有一群孩子和一堆饼干，每个孩子有一个饥饿度，每个饼干都有一个大小。每个孩子只能吃最多一个饼干，且只有饼干的大小大于孩子的饥饿度时，这个孩子才能吃饱。求解最多有多少孩子可以吃饱。</li></ul></li><li><p><strong>输入输出样例</strong></p><ul><li>输入两个数组，分别代表孩子的饥饿度和饼干的大小。输出最多有多少孩子可以吃饱的数量。</li></ul><pre><code class="lang-yml">Input: [1,2],[1,2,3]Output: 2</code></pre><ul><li>在这个样例中，我们可以给两个孩子喂 <code>[1,2]、[1,3]、[2,3]</code> 这三种组合的任意一种。</li></ul></li><li><strong>题解</strong><ul><li>因为饥饿度最小的孩子最容易吃饱，所以我们先考虑这个孩子。为了尽量使得剩下的饼干可以满足饥饿度更大的孩子，所以我们应该把大于等于这个孩子饥饿度的、且大小最小的饼干给这个孩子。满足了这个孩子之后，我们采取同样的策略，考虑剩下孩子里饥饿度最小的孩子，直到没有满足条件的饼干存在。</li><li>简而言之，这里的贪心策略是，给剩余孩子里最小饥饿度的孩子分配最小的能饱腹的饼干。至于具体实现，因为我们需要获得大小关系，一个便捷的方法就是把孩子和饼干分别排序。这样我们就可以从饥饿度最小的孩子和大小最小的饼干出发，计算有多少个对子可以满足条件。</li></ul></li></ul><hr><ul><li><strong>排列组合遍历</strong><pre><code class="lang-java">class Solution {  public int findContentChildren(int[] g, int[] s) {      Arrays.sort(g); //孩子饥饿度数组      Arrays.sort(s); //饼干大小数组      int numOfChildren = g.length, numOfCookies = s.length;      int count = 0;      for (int i = 0, j = 0; i &lt; numOfChildren &amp;&amp; j &lt; numOfCookies; i++, j++) {          while (j &lt; numOfCookies &amp;&amp; g[i] &gt; s[j]) {              j++;          }          if (j &lt; numOfCookies) {              count++;          }      }      return count;  }}</code></pre></li></ul><hr><ul><li><strong>贪心策略</strong><pre><code class="lang-java">public int findContentChildren(int[] grid, int[] size) {  if (grid == null || size == null) return 0;  Arrays.sort(grid);  Arrays.sort(size);  int gi = 0, si = 0;  while (gi &lt; grid.length &amp;&amp; si &lt; size.length) {      if (grid[gi] &lt;= size[si]) {          gi++;      }      si++;  }  return gi;}</code></pre></li></ul><h3 id="贪心算法之分糖果"><a href="#贪心算法之分糖果" class="headerlink" title="贪心算法之分糖果"></a>贪心算法之分糖果</h3><ul><li><strong>题目概述</strong><ul><li>一群孩子站成一排，每一个孩子有自己的评分。现在需要给这些孩子发糖果，规则是如果一个孩子的评分比自己身旁的一个孩子要高，那么这个孩子就必须得到比身旁孩子更多的糖果；所有孩子至少要有一个糖果。求解最少需要多少个糖果。</li></ul></li><li><p><strong>输入输出样例</strong></p><ul><li>输入是一个数组，表示孩子的评分。输出是最少糖果的数量。</li></ul><pre><code class="lang-yml">Input: [1,0,2]Output: 5</code></pre><ul><li>在这个样例中，最少的糖果分法是 <code>[2,1,2]</code>。</li></ul></li><li><p><strong>题解</strong></p><ul><li>我们只需要简单的两次遍历即可：把所有孩子的糖果数初始化为 1；先从左往右遍历一遍，如果右边孩子的评分比左边的高，则右边孩子的糖果数更新为左边孩子的糖果数加 1；再从右往左遍历一遍，如果左边孩子的评分比右边的高，且左边孩子当前的糖果数不大于右边孩子的糖果数，则左边孩子的糖果数更新为右边孩子的糖果数加 1。通过这两次遍历，分配的糖果就可以满足题目要求了。这里的贪心策略即为，在每次遍历中，只考虑并更新相邻一侧的大小关系。</li><li>在样例中，我们初始化糖果分配为<code>[1,1,1]</code>，第一次遍历更新后的结果为 <code>[1,1,2]</code>，第二次遍历更新后的结果为<code>[2,1,2]</code>。</li></ul></li></ul><hr><ul><li><strong>二次遍历代码</strong><pre><code class="lang-java">class Solution {  public int candy(int[] ratings) {      int n = ratings.length;      int[] left = new int[n];      for (int i = 0; i &lt; n; i++) {          if (i &gt; 0 &amp;&amp; ratings[i] &gt; ratings[i - 1]) {              left[i] = left[i - 1] + 1;          } else {              left[i] = 1;          }      }      int right = 0, ret = 0;      for (int i = n - 1; i &gt;= 0; i--) {          if (i &lt; n - 1 &amp;&amp; ratings[i] &gt; ratings[i + 1]) {              right++;          } else {              right = 1;          }          ret += Math.max(left[i], right);      }      return ret;  }}</code></pre></li></ul><hr><ul><li><strong>贪心策略代码</strong><pre><code class="lang-java">class Solution {  public int candy(int[] ratings) {      int[] left = new int[ratings.length];      int[] right = new int[ratings.length];      Arrays.fill(left, 1);      Arrays.fill(right, 1);      for(int i = 1; i &lt; ratings.length; i++)          if(ratings[i] &gt; ratings[i - 1]) left[i] = left[i - 1] + 1;      int count = left[ratings.length - 1];      for(int i = ratings.length - 2; i &gt;= 0; i--) {          if(ratings[i] &gt; ratings[i + 1]) right[i] = right[i + 1] + 1;          count += Math.max(left[i], right[i]);      }      return count;  }}</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络规划与设计</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E8%A7%84%E5%88%92%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E8%A7%84%E5%88%92%E4%B8%8E%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="综合布线技术"><a href="#综合布线技术" class="headerlink" title="综合布线技术"></a>综合布线技术</h1><blockquote><p>结构化综合布线系统(<code>Structured Cabling System</code>，SCS)：是基于现代计算机技术的通信物理平台，集成了语音、数据、图像、多媒体的传输功能，消除了原有通信线路在传输介质上的差别。</p></blockquote><ul><li><strong>结构化综合布线系统包括</strong> ：<ul><li>建筑物综合布线系统（PDS）</li><li>智能大厦布线系统（IBS）</li><li>工业布线系统（IDS）</li></ul></li><li>结构化综合布线系统应满足<ul><li>==标准化、实用性、先进性、开放性以及结构化、层次化==。</li></ul></li></ul><h2 id="六大子系统"><a href="#六大子系统" class="headerlink" title="六大子系统"></a>六大子系统</h2><ul><li><strong>工作区子系统</strong> ：<ul><li>有终端到信息插座的整个区域。包括信息插座、跳线、适配器。</li><li>要求：<ul><li>==信息插座与电源插座保持在30．150cm的距离==。</li><li>==信息插座据地面一般在30cm，面积为9平方米==。</li><li>==UTP/STP布线距离为10m==。</li></ul></li></ul></li></ul><ul><li><strong>水平子系统</strong> ：<ul><li>各个楼层的接线间配线架到工作区信息插座之间的电缆构成。在结构化布线中，水平子系统==起支线作用==，它将用户端通过线缆连接至配线架上。</li><li>==UTP/STP布线距离为90m==。</li></ul></li></ul><ul><li><p><strong>管理子系统</strong> ：</p><ul><li>对布线电缆进行端接和配线管理的子系统，通常设置在楼层的配线间内。由交联设备（双绞线配线架、光纤配线架）、集线器和交换机等交换设备组成</li></ul></li><li><p><strong>干线子系统（垂直子系统）</strong> ：</p><ul><li>连接管理间和设备间的子系统。一般由多对数的光缆和双绞线组成。</li><li>语音系统采用三类大对数双绞线，数据通信采用高品质五类双绞线也可以采用光缆。==布线距离光纤一般2000米，STP为800米，UTP为700米。建议每1．5米设置一个线缆支撑点==。</li></ul></li><li><p><strong>设备间子系统</strong> ：</p><ul><li>用于安放网络关键设备。</li><li>要求：<ul><li>==湿度要求在20％．80％，温度20-30℃==。</li><li>综合考虑配电、安全接地和消防等因素。</li></ul></li></ul></li><li><p><strong>建筑群子系统</strong> ：</p><ul><li>由连接楼群之间的通信传输介质和各种支持设备组成。==布线距离光纤一般2000米，STP为800米，UTP为700米==。</li></ul></li></ul><blockquote><p>综合布线测试参数:<br>双绞线: 最大衰减值、回波耗损限值、近端串扰衰减值、开路/短路、是否错对;<br>光纤: 最大衰减值、回波耗损限值、波长窗口参数、时延、长度;</p></blockquote><h1 id="网络分析与设计过程"><a href="#网络分析与设计过程" class="headerlink" title="网络分析与设计过程"></a>网络分析与设计过程</h1><ul><li><p>网络生命周期至少包括==系统构思与计划运行和维护的过程==。常见的迭代周期分<br>为==四阶段周期、五阶段周期、六阶段周期。==</p></li><li><p><strong>四阶段周期</strong></p><ul><li>构思与计划阶段、构思与计划阶段、实施与构建阶段、运行和维护阶段。</li></ul></li><li><strong>五阶段周期</strong><ul><li>需求规范、通信规范、逻辑网络设计、物理网络设计、安装与维护。</li></ul></li><li><strong>六阶段周期</strong><ul><li>逻辑设计、物理设计、设计优化、实施及测试、监测及性能优化。</li></ul></li></ul><h1 id="网络系统建设"><a href="#网络系统建设" class="headerlink" title="网络系统建设"></a>网络系统建设</h1><ul><li>根据五阶段迭代周期模型，网络系统建设可以被划分为以下五个阶段。<ul><li>需求分析。</li><li>现有网络体系分析，即通信规范分析。</li><li>确定网络逻辑结构，即逻辑网络设计。</li><li>确定网络物理结构，即物理网络设计。</li><li>安装与维护</li></ul></li></ul><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><blockquote><p>收集不同用户的网络需求，主要包括： <strong>业务需求、用户需求、应用需求、计算机平台需求、网络通信需求和未来需求</strong> 。需求分析产生一份==需求规范，需要管理者与设计者签字，这是规避网络建设风险的关键==。</p></blockquote><h2 id="现有网络体系分析"><a href="#现有网络体系分析" class="headerlink" title="现有网络体系分析"></a>现有网络体系分析</h2><blockquote><p>主要目的是描述资源分布，以便在升级时保护已有的投资，该阶段给出一份通信规范说明文档作为下一阶段的输入。</p><ul><li><strong>主要包括</strong><ol><li>现有网络拓扑结构。</li><li>现有网络容量，新网络所需通信量和通信模式。</li><li>详细统计数据，直接反映现有网络新能的测量值。</li><li>Internet接囗以及广域网提供的服务质量报告</li><li>限制因素列表，如电缆和设备清单。</li></ol></li></ul></blockquote><h1 id="确定网络逻辑结构"><a href="#确定网络逻辑结构" class="headerlink" title="确定网络逻辑结构"></a>确定网络逻辑结构</h1><blockquote><p>根据需求规范和通信规范确定比较适宜的网络逻辑结构，并实施后续的资源分配规划、安全规划等内容，该阶段给出一份逻辑设计文档。</p><ul><li><strong>内容主要包括</strong><ol><li>网络逻辑设计图。</li><li>IP地址分配方案。</li><li>安全管理方案。</li><li>具体软硬件、广域网连接设备和基本网络服务</li><li>照片和培训网络员工的具体说明</li><li>如硬件费用、服务提供费用和培训费用的估算</li></ol></li></ul></blockquote><h1 id="确定网络物理结构"><a href="#确定网络物理结构" class="headerlink" title="确定网络物理结构"></a>确定网络物理结构</h1><blockquote><p>对设备的具体物理分布、运行环境等的确定来使网络的物理连接符合逻辑设计要求，该阶段得到一份网络物理结构设计文档。</p><ul><li><strong>主要包括</strong><ol><li>网络物理结构图和布线方案。</li><li>设备和部件的详细列表清单。</li><li>软硬件和安装费用估算。</li><li>安装日程表、说明服务的时间和期限。</li><li>安装后的测试计划。</li><li>用户的培训计划。</li></ol></li></ul></blockquote><h1 id="安装与维护"><a href="#安装与维护" class="headerlink" title="安装与维护"></a>安装与维护</h1><blockquote><p>第五个阶段又可分为两个小阶段：安装与维护。</p><ul><li><strong>安装</strong><br>根据前面的工程结果实施环境准备、设备安装调试的过程。<ul><li>本阶段应输出如下<ol><li>逻辑网络结构图和物理网络部署图。</li><li>符合规范的设备连接图和布线图。</li><li>运营维护记录和文档。</li></ol></li></ul></li><li><strong>维护</strong><ul><li>网络安装完成后，接受用户的反馈意见和监控网络的运行，需要做大量的故障检测和故障恢复以及网络升级和性能优化等工作</li></ul></li></ul><p>在这五个阶段中，每个阶段都必须依据上一阶段成果，完成本阶段的规则</p></blockquote><h1 id="网络结构设计"><a href="#网络结构设计" class="headerlink" title="网络结构设计"></a>网络结构设计</h1><blockquote><p>层次化网络设计经典的三层模型，是将网络分为核心、汇聚和接入层。</p><h2 id="核心层"><a href="#核心层" class="headerlink" title="核心层"></a>核心层</h2><p>提供不同区域或者下层的高速连接和最优传输路径，主要设备是高端路由器或者交换机。</p><ul><li><strong>设计原则</strong><ul><li>核心层是英特网的高速骨干，由于其重要性应采用==冗余组件==设计，使其具备高可靠性，能快涑适应变化。核心层拥有==高可靠性、高带宽和高吞吐率。尽量避免数据包过滤和策略路由等降低数据包转发处理的机制，已实现数据包的高速转发==。<h2 id="汇聚层"><a href="#汇聚层" class="headerlink" title="汇聚层"></a>汇聚层</h2>将网络业务连接到接入层，并且实施安全、流量负载和路由相关策略。主要设备是实现策略的路由器或者交换机。</li></ul></li><li><strong>设计原则</strong><ul><li>汇聚层时核心层与接入层的分界点，尽量将出于安全原因对资源的访问控制及出于性能原因对核心层的流量控制都在汇聚层实施。</li><li><strong>汇聚层主要完成协议转换、策略路由、流量控制等</strong> 。<h2 id="接入层"><a href="#接入层" class="headerlink" title="接入层"></a>接入层</h2>为终端用户访问网络提供接入。主要设备是低端交换机</li></ul></li><li><strong>设计原则</strong><ul><li>接入层主要解决相邻用户之间的互访，为这些互访提供丰富的接囗类型及足够的带宽。同时还负责一些==用户管理功能==（如地址认证、用户认证、计费理）和==用户信息收集==（IP与MAC绑定、访问日志）工作。</li><li>除此之外辑网络设计还应包括以下内容：物理层技术设计、局域网技术选择及应用、广域网技术选择及应用、地址设计和命名模型、路由协议选择、网络管理、网络安全、逻辑网络设计文档。</li></ul></li></ul></blockquote><h1 id="物理网络设计"><a href="#物理网络设计" class="headerlink" title="物理网络设计"></a>物理网络设计</h1><ul><li>物理网络设计主要包含以下几方面：<ul><li>PDS综合布线系统</li><li>布线系统设备清单</li><li>机房设计</li><li>物理设计（工程概述、物理设计图标、资产说明、最终费用估算）</li></ul></li></ul><h2 id="网络安全设计原则："><a href="#网络安全设计原则：" class="headerlink" title="网络安全设计原则："></a>网络安全设计原则：</h2><ul><li><strong>从工程技术角度，网络安全应设计遵循以下原则</strong><ol><li>信息安全与保密的“木桶原则“。==强调对信息均衡、全面地进行安全保护==。充分、全面、完整的对系统的安全漏洞和安全威胁进行分析、评估和检测使设计网络安全系统的必要前提条件。</li><li>安全系统的整体性原则。强调安全防护、检测和应急恢复。要求在网络发生被攻击情况下，尽快的恢复信息中心的服务，减少损失。</li><li>安全系统的有效性和实用性原则。网络安全以不影响正常运行和合法用户的操作活动为前提。</li><li>安全系统的”等级性“原则。良好的安全系统必须划分不同的等级。</li><li>自主和可控性原则。网络安全产不能依赖国外进口产。</li><li>安全有价原则。考虑网络安全问题解决方案时之须考虑性能和价格的平衡。不同的网络安全侧重点不同。</li></ol></li></ul><h2 id="网络设备选型原则："><a href="#网络设备选型原则：" class="headerlink" title="网络设备选型原则："></a>网络设备选型原则：</h2><ol><li>尽可能选择同一厂家产品。这样的设备在互连性、协议的互操作性、技术支持和亻介格等方面有优势。</li><li>主干设备应考虑预留一定的扩展能力，低端设备够用即可。</li><li>根据方案实际选型。根据网络实际带宽性能需求、端囗类型和端囗密度选型。如果旧网改造，应尽可能保留用户原有网络投资，减少在资全投入的浪费。</li><li>选择性价比高、质量过硬的产品。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接续前端H5+CSS3</title>
      <link href="/my-blog/%E5%89%8D%E7%AB%AF/%E6%8E%A5%E7%BB%AD%E5%89%8D%E7%AB%AFH5+CSS3/"/>
      <url>/my-blog/%E5%89%8D%E7%AB%AF/%E6%8E%A5%E7%BB%AD%E5%89%8D%E7%AB%AFH5+CSS3/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS定位（position）"><a href="#CSS定位（position）" class="headerlink" title="CSS定位（position）"></a>CSS定位（position）</h2><h3 id="定位概述"><a href="#定位概述" class="headerlink" title="定位概述"></a>定位概述</h3><ul><li><font color=purple>定位(position)是一种更加高级的布局手段</li><li>通过定位可以将元素摆放到页面的<strong>任意位置</strong></li><li>使用position属性来设置定位<ul><li><strong>可选值</strong><ul><li><strong>static</strong>&nbsp;默认值，元素是静止的则没有开启定位</li><li><strong>relative</strong>&nbsp;开启元素的相对定位</li><li><strong>absolute</strong>&nbsp;开启元素的绝对定位</li><li><strong>fixed</strong>&nbsp;开启元素的固定定位</li><li><strong>sticky</strong>&nbsp;开启元素的粘滞定位&lt;/font&gt;</li></ul></li></ul></li></ul><h3 id="相对定位-relative-position"><a href="#相对定位-relative-position" class="headerlink" title="相对定位(relative position)"></a>相对定位(relative position)</h3><ul><li><font color=brown>当元素的position属性设置值为relative则开启相对定位</li><li><strong>相对定位的特点:</strong><ol><li>元素开启相对定位以后，如果不设置<strong>偏移量元素</strong>，则不会发生任何变化</li><li>相对定位是参照于元素在文档流中的位置进行定位的</li><li>相对定位<strong>会提升元素的层级</strong></li><li>相对定位<strong>不会使元素脱离文档流（即不会改变元素性质）</strong></li></ol></li><li><strong>偏移量(offset)</strong><ul><li>当元素开启了定位以后，可以通过偏移量来设置元素的位置</li><li><strong>可选值：</strong><ul><li><strong>top</strong><ul><li>定位元素和定位位置上边的距离</li><li><strong>top值越大，定位元素越向下移动</strong></li></ul></li><li><strong>bottom</strong><ul><li>定位元素和定位位置下边的距离</li><li>定位元素垂直方向的位置由top和bottom两个属性来控制<ul><li>通常情况下我们只会使用其一</li></ul></li><li><strong>bottom值越大，定位元素越向上移动</strong></li></ul></li><li><strong>left</strong><ul><li>定位元素和定位位置的左侧距离</li><li><strong>left值越大，定位元素越向右移动</strong></li></ul></li><li><strong>right</strong><ul><li>定位元素和定位位置的右侧距离</li><li><strong>right值越大，定位元素越向左移动</strong></li><li>定位元素水平方向的位置由left和right两个属性来控制<ul><li>通常情况下我们只会选择其一</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="绝对定位-absolute-position"><a href="#绝对定位-absolute-position" class="headerlink" title="绝对定位(absolute position)"></a>绝对定位(absolute position)</h3><ul><li>当元素的position属性的值设置为absolute时，则开启了元素的绝对定位</li><li><strong>绝对定位的特点</strong><ol><li>开启绝对定位后，如果不设置偏移量，元素不会发生任何变化</li><li>开启绝对定位后，元素<strong>会从文档流中脱离</strong></li><li><strong>绝对定位会改变元素的性质</strong>，行内变成块，块的宽度被内容撑开</li><li>绝对定位会<strong>使元素提升一个层级</strong></li><li>绝对定位元素是相当于其包含块进行定位的</li></ol></li><li><strong>包含块(containing block)</strong><ul><li>正常情况下：<ul><li>包含块就是高于当前元素最近的祖先块元素</li></ul></li><li>绝对定位的包含块：<ul><li>包含块就是离它最近的开启了定位的祖先元素<ul><li>如果所有祖先元素都没有开启定位则根元素就是它的包含块（根元素—html，也称初始包含块）  </li></ul></li></ul></li></ul></li></ul><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><ul><li>当元素的position属性设置为fixed时，则开启了元素的固定定位</li><li>固定定位<strong>也是一种特殊的绝对定位</strong>，因此固定定位的大部分特点和绝对定位一样<ul><li>唯一不同的是固定定位<strong>永远参照于浏览器的视口进行定位</strong></li></ul></li></ul><h3 id="粘滞定位"><a href="#粘滞定位" class="headerlink" title="粘滞定位"></a>粘滞定位</h3><ul><li>当元素的position属性设置为sticky是，则开启了元素的粘滞定位</li><li>粘滞定位与相对定位类似&lt;/font&gt;</li></ul><h2 id="元素的层级"><a href="#元素的层级" class="headerlink" title="元素的层级"></a>元素的层级</h2><ul><li><p>对于开启了定位元素，可以通过position属性来指定元素的层级</p><ul><li>Z-index需要一个整数作为参数，值越大元素层级越高</li><li>元素的层级越高越优先显示</li></ul></li><li><p>如果元素的层级一样，则优先显示靠下的元素</p></li><li>祖先的元素的层级再高也不会盖住后代元素</li></ul><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ul><li><p><strong>字体样式</strong></p><ul><li><strong>color</strong>&nbsp;用来设置字体颜色</li><li><strong>font-size</strong>&nbsp;字体的大小<ul><li>em&nbsp;相当于当前元素的一个font-size</li><li>rem&nbsp;相当于根元素的一个font-size</li></ul></li><li><strong>font-family</strong>字体格式<ul><li>可选值：<ul><li><strong>serif</strong> 衬线字体</li><li><strong>sans-serif</strong> 非衬线字体</li><li><strong>monospace</strong> 等宽字体</li></ul></li><li>定义：<code>font-family</code>可以同时指定多个字体，多个字体键使用<code>,</code>隔开</li><li>字体生效时优先使用第一个，第一个无法使用则使用第二个 以此类推<pre><code class="lang-html">&lt;style&gt;  p{      color: red;      font-size: medium;      font-family: &#39;Courier New&#39;, Courier, monospace;  }&lt;/style&gt;</code></pre></li></ul></li></ul></li><li><p>当客户的电脑上没有指定的字体时，我们选择的字体无法在客户机上使用，此时可以通过<code>@font-face</code>让客户在服务器上把字体下载下来</p><ul><li>关于<code>@font-face</code>的使用<ul><li><strong>代码示例</strong><pre><code class="lang-html">&lt;style&gt;            @font-face {      /* 自定义字体名称 */      font-family: &#39;my-font-face&#39;;      /* 资源的网站 */      src: url(&#39;my-font-face&#39;);  }&lt;/style&gt;</code></pre></li><li><font color=red>注意：使用```@font-face```可能会出现的版权的问题，或者服务器资源堵塞的问题，导致字体无法使用，因此该方法请谨慎使用</font></li></ul></li></ul></li></ul><hr><h2 id="图标字体"><a href="#图标字体" class="headerlink" title="图标字体"></a>图标字体</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><p><strong>我们在制作网页的时候，可能会用到大量的图片，他们可能很小，例如：</strong><br><img data-src="image/iconface.png" alt="face1"></p><p><img data-src="image/fontfaces1.png" alt="face2"></p></li><li><strong>此时我们可以使用图标字体来把图片做成字体，</strong></li><li><strong>只需要导入字体即可使用这些小的图片</strong> </li><li><strong>然后通过font-face来对字体进行引用</strong><ul><li><font color=purple>推荐一个字体网站：<span class="exturl" data-url="aHR0cDovL3d3dy5mb250YXdlc29tZS5jb20uY24v">http://www.fontawesome.com.cn/</span></li><li>使用该网站下载的字体文件需要进行解压，然后把文件移入项目中</li><li><strong>注意：该文件必须和css文件放在同一个文件夹中，否则会出现路径问题，无法引入</strong></li></ul></li><li><strong>最后在引入<code>all.css</code></strong><pre><code class="lang-html">&lt;link rel=&quot;stylesheet&quot; href=&quot;./fa/css/all.css&quot;&gt;</code></pre><ul><li>此时引用成功<h3 id="使用图标字体"><a href="#使用图标字体" class="headerlink" title="使用图标字体"></a>使用图标字体</h3></li><li><strong>方法一：</strong></li></ul></li><li>直接通过类名使用图标字体<pre><code class="lang-html">&lt;i class=&quot;fa fa-car&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-car&quot; style=&quot;font-size:48px;&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-car&quot; style=&quot;font-size:60px;color:red;&quot;&gt;&lt;/i&gt;</code></pre></li><li><strong>详细的font awesome教程尽在</strong><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9mb250LWF3ZXNvbWUvZm9udGF3ZXNvbWUtdHV0b3JpYWwuaHRtbA==">https://www.runoob.com/font-awesome/fontawesome-tutorial.html</span></li></ul><ul><li><p><strong>方法二：</strong></p><ul><li>可以通过伪元素对图标字体进行插入<ul><li>首先使用<code>before</code>或<code>after</code>伪元素标签来选中需要的图标字体</li><li>然后在<code>content</code>中输入对应图标字体的编码</li><li>设置字体样式<code>font-family</code>和<code>font-weight</code>即可</li></ul></li></ul></li><li><p><strong>方法三：</strong></p><ul><li>通过实体来使用图标字体<ul><li>在实体中加入<code>&amp;#</code>+图标字体编码</li></ul></li></ul></li><li><p><strong>关于图标字体库——-iconfont</strong></p><ul><li>可以使用阿里的字体库：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWNvbmZvbnQuY24v">https://www.iconfont.cn/</span><ul><li>不过可能存在版权问题，商用的项目不建议使用</li><li>在使用该网站的图标字体时<ul><li>如果使用彩色的图标字体，就直接使用图片的格式进行下载</li><li>如果是黑白的图标字体，则直接添加到项目中打包下载</li></ul></li></ul></li><li>也可以使用font awesome ：<span class="exturl" data-url="aHR0cDovL3d3dy5mb250YXdlc29tZS5jb20uY24v">http://www.fontawesome.com.cn/</span><ul><li>不过该网站有的需要付费使用，免费的太过拉胯</li></ul></li></ul></li><li><p><strong>具体使用的代码展示</strong></p><pre><code class="lang-html">   &lt;style&gt;      i.iconfont {          font-size: 100px;      }      p::before {          content: &#39;\e686&#39;;          font-family: &quot;iconfont&quot;;          font-size: 150px;      }  &lt;/style&gt;   &lt;body&gt;  &lt;p&gt;      住在山里真不错  &lt;/p&gt;  &lt;i class=&quot;fa fa-car&quot;&gt;&lt;/i&gt;  &lt;i class=&quot;fa fa-car&quot; style=&quot;font-size:48px;&quot;&gt;&lt;/i&gt;  &lt;i class=&quot;fa fa-car&quot; style=&quot;font-size:60px;color:red;&quot;&gt;&lt;/i&gt;  &lt;!-- 使用阿里图标字体库方法一：通过实体使用编码 --&gt;  &lt;i class=&quot;iconfont&quot;&gt;&amp;#xe7d0;&lt;/i&gt;  &lt;i class=&quot;iconfont&quot;&gt;&amp;#xe61d;&lt;/i&gt;  &lt;i class=&quot;iconfont&quot;&gt;&amp;#xe655;&lt;/i&gt;  &lt;i class=&quot;iconfont&quot;&gt;&amp;#xe662;&lt;/i&gt;  &lt;i class=&quot;iconfont&quot;&gt;&amp;#xe61b;&lt;/i&gt;  &lt;!-- 也可以使用类名来使用 --&gt;  &lt;i class=&quot;iconfont icon-biaozhi1&quot;&gt;&lt;/i&gt;  &lt;!-- 也可以使用伪元素对图标字体进行插入 --&gt;  &lt;p&gt;      传奇永不谢幕  &lt;/p&gt;  &lt;/body&gt;</code></pre></li></ul><h2 id="行高（line-height）"><a href="#行高（line-height）" class="headerlink" title="行高（line height）"></a>行高（line height）</h2><ul><li>定义：<ul><li>行高指文字占用页面的实际高度</li></ul></li><li>属性值：<code>line-height</code><ul><li>可以直接设置一个大小（单位为px或em）</li><li>也可以设置一个整数（1===100px，即单倍行高，与word中的行距相类似）</li></ul></li></ul><h2 id="字体距"><a href="#字体距" class="headerlink" title="字体距"></a>字体距</h2><ul><li><p><strong>字体框就是字体存在的格子，可以设置大小和边框的宽度</strong></p><ul><li><p>通过<code>font-size</code>设置大小<br>```html<br><style></p><pre><code>div{    font-size: 50px;    line-height: 200px;</code></pre></li></ul></li></ul><pre><code>         /* 边框设置 */        border: 1px red solid;    }&lt;/style&gt;```</code></pre><hr><h2 id="字体的简写属性"><a href="#字体的简写属性" class="headerlink" title="字体的简写属性"></a>字体的简写属性</h2><pre><code class="lang-html">  &lt;style&gt;        div {            line-height: 2;            /*                 font 可以设置字体相关的所有属性（字体的简写属性）                    标准语法：                        font:  字体大小 /行高  字体族                        该简写中的行高可以省略不写，但不代表没有设置                        而是会以默认值使用（并且覆盖上面设置的行高line-height）            */            border: 1px red solid;            /* font-family: Verdana, Geneva, Tahoma, sans-serif; */            font: 50px/3 Verdana, Geneva, Tahoma, sans-serif;        }    &lt;/style&gt;    &lt;body&gt;    &lt;div&gt;        三年前在南京我亻主的地方有一道后门，每晚我打开后门，便看见一个静寂的夜。下面是一片菜        园，上面是星群密布的蓝天。星光在我们的肉眼里虽然微小，然而它亻吏我们觉得光明无处不在。那        时候我正在读一些关于天文学的书，也认得一些星星，好像它们是我的朋友，它们常常在和我谈话    &lt;/div&gt;    &lt;/body&gt;</code></pre><hr><h2 id="字体的水平对齐和垂直对齐"><a href="#字体的水平对齐和垂直对齐" class="headerlink" title="字体的水平对齐和垂直对齐"></a>字体的水平对齐和垂直对齐</h2><ul><li><code>Text-align</code> 文本的水平对齐<ul><li>可选值：<ul><li>left:左端对齐</li><li>right：右端对齐</li><li>center：居中对齐</li><li>justify：两端对齐</li></ul></li></ul></li><li><p><code>vertical-align</code> 文本的垂直对齐</p><ul><li>可选值：<ul><li>baseline 默认值 基线对齐</li><li>top 顶部对齐</li><li>bottom 底部对齐</li><li>middle 居中对齐</li></ul></li></ul></li><li><p>代码演示：<br>```html<br><style></p><pre><code>  div{      border: 1px red solid;      width: 800px;      line-height: 5;      text-align: center;  }  span{      border: 1px red solid;      font-size: 20px;      vertical-align: baseline;</code></pre></li></ul><pre><code>    }&lt;/style&gt;&lt;body&gt;&lt;div&gt;    三年前在南京我亻主的地方有一道后门，每晚我打开后门，便看见一个静寂的夜。下面是一片菜    园，上面是星群密布的蓝天。星光在我们的肉眼里虽然微小，然而它亻吏我们觉得光明无处不在。那    时候我正在读一些关于天文学的书，也认得一些星星，好像它们是我的朋友，它们常常在和我谈话&lt;/div&gt;&lt;span&gt;住在山里真不错&lt;/span&gt;&lt;/body&gt; ```- 效果：![duiqi](./H5文件/字体对齐.png)</code></pre><h2 id="其他的文本样式"><a href="#其他的文本样式" class="headerlink" title="其他的文本样式"></a>其他的文本样式</h2><h3 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h3><ul><li><p><code>text-decoration</code> 设置文本修饰</p><ul><li>可选值：<ul><li>none 什么都没有</li><li>underline 下划线</li><li>line- through 删除线</li><li>overline 上划线<br>```html<br><style><br>  .box{<pre><code>  font-size: 50px;  font-family: 微软雅黑;  text-decoration: underline red;</code></pre>  }<br>&lt;/style&gt;<br><body><div class="box">      Lorem, ipsum dolor sit amet consectetur adipisicing elit. Autem quam soluta maiores sit?       Ipsum cum beatae impedit repellat at! Magnam consequuntur maiores dolor obcaecati nemo       ab vero qui quidem vel.</div></li></ul></li></ul><p>&lt;/body&gt;<br>```</p></li><li>效果展示：<br><img data-src="./H5文件/其他文本样式.png" alt="文本其他样式"> </li></ul><hr><h3 id="处理留白"><a href="#处理留白" class="headerlink" title="处理留白"></a>处理留白</h3><ul><li><code>white-space</code> 设置网页如何处理空白<ul><li>可选值：<ul><li>normal 正常</li><li>nowrap 不换行</li><li>pre 保留空白</li></ul></li></ul></li><li><strong>代码展示：</strong><pre><code class="lang-html">&lt;style&gt;        .box2{            border: 2px orange solid;            white-space: pre;            overflow: hidden;            text-overflow: ellipsis;        }&lt;/style&gt;&lt;body&gt;    &lt;div class=&quot;box2&quot;&gt;        三年前在南京我主的地方有一道后门，每晚我打开后门，便看见一个静寂的夜。下面是一片菜        园，上面是星群密布的蓝天。星光在我们的肉眼里虽然微小，然而它亻吏我们觉得光明无处不在。那        时候我正在读一些关于天文学的书，也认得一些星星，好像它们是我的朋友，它们常常在和我谈话    &lt;/div&gt;&lt;/body&gt;</code></pre></li><li>效果：<br><img data-src="./H5文件/处理空白.png" alt="留白"></li></ul><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p><strong>在CSS中，我们可以通过设置属性来对页面的背景进行设置</strong></p></blockquote><ul><li><strong>background-color:</strong><ul><li><strong>定义：</strong>该属性用来设置背景图片的颜色 </li><li><strong>一些特性：</strong><ul><li>可以<font color=red>同时设置</font>背景图片和背景颜色，这样背景颜色将会成为图片的背景色</li><li>大小问题：<ul><li>如果背景的图片小于元素，则背景图片会自动在元素中填满</li><li>如果背景的图片大于元素，一部分的图片背景将无法显示在该元素中</li><li>如果背景的图片等于元素，则会正常显示</li></ul></li></ul></li></ul></li></ul><hr><ul><li><p><strong>background-image:</strong></p><ul><li><strong>定义：</strong>该属性用来引入背景图片（通过图片的路径实现）</li></ul></li><li><p><strong>background-repeat:</strong></p><ul><li><strong>定义：</strong>该属性用于设置背景的重复方式（也可以说是图片的重复）</li><li><strong>可选属性值</strong><ul><li><code>repeat</code>默认值，背景会同时向x轴、y轴方向重复</li><li><code>repeat-x</code>此时只沿x轴方向重复</li><li><code>repeat-y</code> 此时只沿y轴方向重复</li><li><code>no-repeat</code>背景不会重复</li></ul></li></ul></li></ul><hr><ul><li><p><strong>background-position：</strong></p><ul><li><strong>定义：</strong>该属性用户设置图片的位置</li><li><strong>使用方位属性值的设置方式：</strong><ul><li>使用<code>top</code>、<code>left</code>、<code>right</code>、<code>bottom</code>、<code>center</code>表示要设置图片背景的位置</li><li>**设置方位是必须要同时设定两个值，如果只写一个第二个值会默认为<code>center</code></li></ul></li><li><p><strong>使用像素值代表偏移量的设置方式：</strong></p><pre><code class="lang-html">&lt;style&gt;    .box1{        width: 512px;        height: 512px;        background-color: orchid;        background-image: url(&quot;./img/timg.gif&quot;);        background-position: -52px 25px;    }&lt;/style&gt;</code></pre></li></ul></li><li><p><strong>background-clip:</strong></p><ul><li><strong>定义：</strong>设置背景的范围</li><li><strong>可选值：</strong><ul><li><code>border-box</code>默认值 ，背景会出现在边框的下边<br><img data-src="./H5文件/img/背景设置01.png" alt="bj01"> </li><li><code>padding-box</code> 背景不会出现在边框，<strong>只出现在内容区和内边距</strong><br><img data-src="./H5文件/img/背景设置03.png" alt="bj02"> </li><li><code>content-box</code> 背景<strong>只会出现在内容区</strong><br><img data-src="./H5文件/img/背景设置02.png" alt="bj03"></li></ul></li></ul></li></ul><hr><ul><li><strong>background-origin:</strong>（图片需要正常显示则使用该属性）<ul><li><strong>定义：</strong>背景图片的偏移量计算的原点</li><li><strong>可选值：</strong><ul><li><code>padding-box</code>默认值，background-position从内边距处开始计算</li><li><code>content-box</code>背景图片的偏移量从内容区处开始计算 </li></ul></li></ul></li></ul><hr><ul><li><strong>background-size:</strong><ul><li><strong>定义：</strong>设置背景图片的大小<pre><code class="lang-html">&lt;style&gt;  .box{    background-size:属性值1 属性值2;  }&lt;/style&gt;</code></pre><ul><li><strong>属性值1表示图片的宽度，属性值2表示图片的高度</strong><ul><li>只写一个，另一个则为auto</li></ul></li><li><strong>其他可选值</strong><ul><li><code>cover</code>图片比例不变，将元素铺满</li><li><code>contain</code>图片比例不变，将图片在元素中完整显示</li></ul></li></ul></li></ul></li></ul><hr><ul><li><strong>background-attachment：</strong><ul><li>设置背景图片是否跟随元素移动</li><li><strong>属性值：</strong><ul><li><code>scoll</code>默认值，背景图片会随元素移动</li><li><code>fixed</code>背景会固定在页面</li></ul></li></ul></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端HTML5+CSS3</title>
      <link href="/my-blog/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AFHTML5+CSS3/"/>
      <url>/my-blog/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AFHTML5+CSS3/</url>
      
        <content type="html"><![CDATA[<h2 id="网页简史"><a href="#网页简史" class="headerlink" title="网页简史"></a>网页简史</h2><h3 id="诞生"><a href="#诞生" class="headerlink" title="诞生"></a>诞生</h3><ul><li>万维网发明人——蒂姆.伯纳斯-李</li><li>1991.08.06，世界上第一个服务器和第一个网站在欧洲核子研究中心上线</li></ul><h3 id="W3C标准的建立"><a href="#W3C标准的建立" class="headerlink" title="W3C标准的建立"></a>W3C标准的建立</h3><ul><li>伯纳斯李于<font color=red>1994年建立万维网联盟（W3C）</font>，W3C为了制订网页开发的标准，以使用不同的浏览器达到相同的效果</li></ul><h3 id="网页的组成"><a href="#网页的组成" class="headerlink" title="网页的组成"></a>网页的组成</h3><ul><li><strong>结构</strong><ul><li>HTML用于描述网页的结构</li></ul></li><li><strong>表现</strong><ul><li>CSS用于控制页面中元素的样式</li></ul></li><li><strong>行为</strong><ul><li>JavaScript用于响应用户的操作</li></ul></li></ul><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ul><li><strong>HTML (HYpertext Markup Language)<font color=red>超文本标记语言</font></strong></li><li>主要负责网页的结构</li><li>通过使用标签的方式标识网页的不同组成部分</li><li><p>超文本即超链接，即一个网页跳转到另一个网页的连接</p></li><li><p>简单的HTML代码</p></li></ul><pre><code class="lang-html">&lt;html&gt;    &lt;head&gt;        &lt;title&gt;网页文本标题&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;h1&gt;一级标题&lt;/h1&gt;        &lt;h2&gt;二级标题&lt;/h2&gt;        &lt;p&gt;段落&lt;/p&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="自结束标签与注释"><a href="#自结束标签与注释" class="headerlink" title="自结束标签与注释"></a>自结束标签与注释</h3><ul><li><p>类似于</p><pre><code class="lang-html">&lt;img &gt;&lt;img /&gt;&lt;img &gt;&lt;input /&gt;</code></pre><p>就叫做<strong>自结束标签</strong></p></li><li><p><strong>注释</strong></p><ul><li>格式：<pre><code class="lang-html">&lt;!-- 你要注释的内容 --&gt;</code></pre></li><li>HTML的注释中的内容会被浏览器给忽略掉，不会在网页中直接显示</li><li>但可以在HTML编辑器中查看源码获取到注释的内容，或者网页中点击右键显示网页源代码也可以</li><li><strong>注释</strong>的作用主要是在多人协同开发的场景中，对其他成员阐述和解释自己的代码，<font color=red>开发过程中要养成写注释的习惯，可以使代码更加简单明了！</font></li><li><strong><font color=red>注释不能嵌套</font></strong></li></ul></li></ul><h3 id="标签中的属性"><a href="#标签中的属性" class="headerlink" title="标签中的属性"></a>标签中的属性</h3><ul><li><strong>属性</strong>用来设置标签的内容如何显示，在开始标签或自结束标签中设置</li><li>属性是一个<font color=blue>名值对（X=Y）</font></li><li>有些属性有属性值，有些没有，如果有属性值，需要用双引号引出</li><li>多个属性需要空格隔开</li><li>例如：<pre><code class="lang-html">&lt;h1&gt;&lt;font color=&quot;red&quot; size=&quot;3&quot;&gt;这是一个大标题&lt;/font&gt;&lt;/h1&gt;</code></pre></li></ul><h3 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h3><ul><li><strong>网页版本的演变</strong><ul><li>HTML4</li><li>XHTML2.0</li><li>HTML5（现在使用的版本）</li></ul></li><li><strong>文档声明（doctype）</strong><ul><li><strong>文档声明</strong>是用来告诉浏览器当前网页的版本的</li><li>必须写在HTML文件的第一行</li><li>格式：<pre><code class="lang-html">&lt;!doctype html&gt;&lt;!Doctype HTML&gt;</code></pre></li></ul></li></ul><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><ul><li>所有的数据在计算机中存储是都是以<font color=red>二进制形式</font>存储，包括文字</li><li><strong>编码</strong><ul><li>将字符转换为二进制码的过程称为编码</li></ul></li><li><strong>解码</strong><ul><li>将二进制码转换为字符的过程称为解码</li></ul></li><li><strong>乱码问题</strong><ul><li>如果编码和解码所采用的的字符集不同就会出现乱码问题</li></ul></li><li><strong>常见的字符集</strong><ul><li>ASCII（美国编码）</li><li>ISO088591（欧洲编码）</li><li>GB2313（中国）</li><li>GBK（中国，在GB2313基础下扩充）</li><li>UTF-8（万国码，编辑器的默认编码格式，微软记事本除外）</li></ul></li><li><strong>在HTML5里面设置网页字符集的格式</strong><ul><li>格式：<pre><code class="lang-html">&lt;meta charset=&quot;utf-8&quot;&gt;</code></pre><h3 id="文档的使用"><a href="#文档的使用" class="headerlink" title="文档的使用"></a>文档的使用</h3></li></ul></li><li><p>一个标准的HTML文档的代码</p><pre><code class="lang-html">&lt;!doctype html&gt;&lt;html&gt;      &lt;!-- head是网页的头部，head的内容不会在网页中直接出现，而是帮助浏览器或搜索引擎解析网页 --&gt;      &lt;head&gt;      &lt;!-- meta标签用来设置网页的元数据 --&gt;      &lt;meta charset=&quot;utf-8&quot;&gt;      &lt;!--titlw中的内容会显示在浏览器的标题栏中，搜索引擎会根据title中的内容来判断网页的主要内容 --&gt;      &lt;title&gt;          网页解析标题      &lt;/title&gt;      &lt;/head&gt;      &lt;!--网页的内容主体 --&gt;      &lt;body&gt;      &lt;h1&gt;一级标题&lt;/h1&gt;      &lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="vscode编写HTML文档的一些常用快捷键"><a href="#vscode编写HTML文档的一些常用快捷键" class="headerlink" title="vscode编写HTML文档的一些常用快捷键"></a>vscode编写HTML文档的一些常用快捷键</h3></li><li>打开一个文档的基本结构： ！ +  TAB键</li><li>段落： p + TAB键</li><li>光标下移： Ctrl  + 回车</li></ul><h3 id="HTML实体"><a href="#HTML实体" class="headerlink" title="HTML实体"></a>HTML实体</h3><ul><li>在网页中编写多个空格时，默认情况下会被浏览器自动解析为一个空格</li><li>当我们需要写一下<strong>特殊符号</strong>如大于号小于号等就需要用到HTML的实体</li><li>实体的语法：<ul><li>&amp;实体名;(全英文下)<pre><code class="lang-html">&amp;nbsp;  空格 &quot; &quot;&amp;gt;  大于号  &quot; &lt; &quot;&amp;lt;  小于号  &quot; &gt; &quot;&amp;copy;   版权符号&amp;amp;   和号   &quot; &amp; &quot;&amp;quot;  引号   &quot; &quot; &quot;</code></pre>(更多的实体语法参照W3school的HTML教程)</li></ul></li></ul><h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><ul><li><strong>关于meta</strong><ul><li>通常所说的META标签，是在HTML网页源代码中一个重要的html标签。META标签<strong>用来描述一个HTML网页文档的属性</strong>，例如作者、日期和时间、网页描述、关键词、页面刷新等。</li><li>META标签是HTML标记HEAD区的一个关键标签，它位于HTML文档的&lt; head &gt;和&lt; title &gt;之间<font color=brown>（有些也不是在&lt; head &gt;和&lt; title &gt;之间）。</font>它提供的信息虽然用户不可见，但却是文档的最基本的元信息。</li></ul></li></ul><ul><li><p><strong>META标签的组成</strong></p><ul><li><strong>两大部分</strong><ul><li>HTTP-EQUIV和NAME变量</li></ul></li></ul></li><li><p><strong>属性</strong><br>|属性|值|描述|<br>|:——-:|:——-:|:—:|<br>|charset|character_set| 定义文档的字符编码|<br>|content|text|定义与http-equiv或name属性相关的元数据|<br>|http-equiv|content-typedefault-style&nbsp;&nbsp;refresh|把 content 属性关联到 HTTP 头部|<br>|name| application-name &nbsp;&nbsp;author&nbsp;&nbsp;   description&nbsp;&nbsp; generator &nbsp;&nbsp;keywords| 把content属性关联到一个名称|<br>(摘自百度百科)</p></li><li><strong>各个功能</strong><ul><li><strong>charset</strong>  指定网页的字符集</li><li><strong>name</strong> 指定数据的名称</li><li><strong>content</strong>  指定数据的内容</li><li><strong>keywords</strong>  表示网站的关键字，可以同时设置多个关键字，使用逗号隔开</li><li><strong>description</strong>   用于指定网站的描述（即搜索引擎的超链接）</li><li><strong>title标签的内容会作为搜索结果的超链接上的文本表示</strong><pre><code class="lang-html">&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot; /&gt;&lt;title&gt;淘宝网 - 淘！我喜欢&lt;/title&gt;&lt;meta name=&quot;spm-id&quot; content=&quot;a21bo&quot; /&gt;&lt;meta name=&quot;description&quot; content=&quot;淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/&quot; /&gt;&lt;meta name=&quot;keyword&quot; content=&quot;淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖&quot; /&gt;</code></pre></li></ul></li></ul><h3 id="语义化标签01"><a href="#语义化标签01" class="headerlink" title="语义化标签01"></a>语义化标签01</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li><strong>语义化标签</strong>指具有其含义的标签，使开发者更直观、优雅的编写代码<h4 id="标题标签-块元素"><a href="#标题标签-块元素" class="headerlink" title="标题标签(块元素)"></a>标题标签(块元素)</h4></li><li>一共有六级标题，从h1到h6</li><li>六级标题的重要性从h1到h6<font color=red>逐级递减</font></li><li>h1的标签在网页中的重要性<strong>仅次于title标签</strong>，在一般情况下一个网页<font color=red>只有一个h1标签</font></li><li>在网页中独占一行的元素称为<strong>块元素（block element）</strong></li></ul><h4 id="hgroup标签"><a href="#hgroup标签" class="headerlink" title="hgroup标签"></a>hgroup标签</h4><ul><li>hgroup标签<strong>用来给标题分组，多个标题可以放进一个hgroup标签里</strong><pre><code class="lang-html">&lt;hgroup&gt;&lt;h1&gt;你好，服务器&lt;/h1&gt;&lt;h2&gt;章节01&lt;/h2&gt;&lt;/hgroup&gt;</code></pre></li></ul><h4 id="p标签（段落标签，块元素）"><a href="#p标签（段落标签，块元素）" class="headerlink" title="p标签（段落标签，块元素）"></a>p标签（段落标签，块元素）</h4><ul><li><strong>p标签</strong>在网页中表示一个段落<h4 id="em标签"><a href="#em标签" class="headerlink" title="em标签"></a>em标签</h4></li><li><strong>em标签</strong>用于加重语句语调</li><li><font color=red>在网页中不会独占一行的元素称为</font><strong>行内元素（Inline element）</strong><pre><code class="lang-html">&lt;p&gt;今天天气&lt;em&gt;真&lt;/em&gt;不错&lt;/p&gt;&lt;p&gt;&lt;em&gt;真牛掰&lt;/em&gt;&lt;/p&gt;</code></pre>  <font size=2><p>今天天气<em>真</em>不错</p><br>  <p><em>真牛掰</em></p></font><h4 id="strong标签"><a href="#strong标签" class="headerlink" title="strong标签"></a>strong标签</h4></li><li>表示强调重要的内容<pre><code class="lang-html">  &lt;p&gt;你今天&lt;strong&gt;必须完成任务&lt;/strong&gt;&lt;/p&gt;</code></pre>  <font size=2><p>你今天<strong>必须完成任务</strong></p></font><h4 id="blockquote长引用标签"><a href="#blockquote长引用标签" class="headerlink" title="blockquote长引用标签"></a>blockquote长引用标签</h4></li><li>表示长引用<pre><code class="lang-html">顾炎武说：&lt;blockquote&gt;  天下兴亡，匹夫有责&lt;/blockquote&gt;</code></pre>  <font size=2>顾炎武说：<br>  <blockquote>  天下兴亡，匹夫有责</blockquote>  </font><h4 id="q标签"><a href="#q标签" class="headerlink" title="q标签"></a>q标签</h4></li><li><strong>表示一个短引用</strong><pre><code class="lang-html">  子曰：&lt;q&gt;温故而知新，可以为师矣&lt;/q&gt;</code></pre><font size=2>&nbsp;&nbsp;&nbsp;&nbsp;子曰：<q>温故而知新，可以为师矣</q></font></li></ul><h4 id="块和行内"><a href="#块和行内" class="headerlink" title="块和行内"></a>块和行内</h4><h5 id="块元素（block-element）"><a href="#块元素（block-element）" class="headerlink" title="块元素（block element）"></a>块元素（block element）</h5><ul><li>在网页中一般通过元素对页面进行布局<h5 id="行内元素（inline-element）"><a href="#行内元素（inline-element）" class="headerlink" title="行内元素（inline element）"></a>行内元素（inline element）</h5></li><li>行内元素主要用来包裹文字<ul><li>例如标题标签h1、段落标签p</li></ul></li><li>一般情况下会在块元素中放入行内元素，但不会在行内元素中放入块元素</li><li><strong><font color=red>p段落标签里不能放入任何块元素</font></strong></li><li>在浏览器解析网页时，会<font color=blue>自动对网页中不符合规范的内容进行修改</font></li></ul><h3 id="语义化标签02"><a href="#语义化标签02" class="headerlink" title="语义化标签02"></a>语义化标签02</h3><h4 id="布局标签（HTML5新增！）"><a href="#布局标签（HTML5新增！）" class="headerlink" title="布局标签（HTML5新增！）"></a>布局标签（HTML5新增！）</h4><ul><li><strong>header</strong> 表示网页的头部</li><li><strong>main</strong> 表示网页的主体部分，一个网页只有一个main</li><li><strong>footer</strong> 表示网页的底部</li><li><strong>nav</strong> 表示网页中的导航</li><li><strong>aside</strong> 表示网页侧边栏(对主体部分的某个内容进行详细的解释，或作其他功能使用)</li><li><strong>article</strong> 表示一个独立的文章</li><li><strong>section</strong> 表示一个独立的区块，上面所有标签不能表示时使用</li><li><strong><font color=red>div</font></strong> 可以代替以上所有布局标签，<strong>无任何语义</strong></li><li><strong><font color=blue>span</font></strong> 行内元素，<strong>无语义</strong><pre><code class="lang-html">&lt;header&gt;&lt;/header&gt;&lt;main&gt;&lt;/main&gt;&lt;footer&gt;&lt;/footer&gt;&lt;nav&gt;&lt;/nav&gt;&lt;aside&gt;&lt;/aside&gt;&lt;article&gt;&lt;/article&gt;&lt;section&gt;&lt;/section&gt;&lt;div&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3></li><li><font color=brown>列表分类- **有序列表**  - 使用&nbsp;**ol**&nbsp;来创建有序列表  - 使用&nbsp;**li**&nbsp;作为列表项    ```html    <ol>      <li>文字</li>      <li>图片</li>      <li>动画</li>    </ol>    ```    <ol>      <li>文字</li>      <li>图片</li>      <li>动画</li>    </ol>- **无序列表**（主要用于导航的使用）  - 使用&nbsp;**ul**&nbsp;来创建无序列表  - 使用&nbsp;**li**&nbsp;作为列表项    ```html    <ul>      <li>首页</li>      <li>产品</li>      <li>售后支持</li>    </ul>    ```      <ul>      <li>首页</li>      <li>产品</li>      <li>售后支持</li>    </ul>- **定义列表**  - 使用&nbsp;**dl**&nbsp;来创建一个定义列表  - 使用&nbsp;**dt**&nbsp;来表示定义的内容  - 使用&nbsp;**dd**&nbsp;来对内容进行解释  ```html  <dl>    <dt>结构</dt>    <dd>结构表示网页的结构，用来规范网页中哪里是标题，哪里是段落</dd>  </dl>  ```   <dl>    <dt>结构</dt>    <dd>结构表示网页的结构，用来规范网页中哪里是标题，哪里是段落</dd>  </dl></font></li><li><strong><font color=red>列表之间可以互相嵌套</font></strong></li></ul><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><ul><li><strong>超链接</strong>可以让我们从一个网页跳转到其他页面</li><li>使用<strong>a标签</strong>定义超链接<ul><li>它跳转的可以是外部的一个网址（绝对路径）</li><li>也可以是该网页同一目录下的文档（相对路径）</li></ul></li><li>超链接也是一个<strong>行内元素</strong>，在<strong>a标签</strong>里可以嵌套除它本身以外的任何元素（Ctrl+shift+向下  == 向下复制）<pre><code class="lang-html">&lt;a href=&quot;https://baidu.com&quot;&gt;百度&lt;/a&gt;&lt;a href=&quot;./同一目录的文档名&quot;&gt;跳转到统一目录下的文档&lt;/a&gt;</code></pre></li><li><strong>target</strong>属性  用来指定超链接打开的位置<ul><li>可选值：<ul><li><strong>_self</strong> 表示默认值，在当前页面打开超链接</li><li><strong>_blank</strong> 在新的窗口/标签栏中打开超链接<pre><code class="lang-html">&lt;a href=&quot;index.html&quot; target =&quot;_blank&quot;&gt;页面01&lt;/a&gt; &lt;a href=&quot;index.html&quot; target =&quot;_self&quot;&gt;页面02&lt;/a&gt;</code></pre></li></ul></li></ul></li><li><strong>#</strong>&nbsp;在href后面设置#号超链接，点击此超链接<strong>回到页面顶部</strong>(页面不会发生跳转)</li><li><strong>id</strong>&nbsp;属性；是元素的唯一标识，同一页面不可有重复的id属性<font color=blue>（可以作为网页位置的别名）</font></li><li><strong>通过<font color=purple>用#号加id名</font>可以形成一个超链接到达使用这个id名的标题/段落中</strong></li><li>可以使用<code>Javascript:;</code>,来作为href的属性，此时点击这个超链接<strong>没有任何作用</strong><pre><code class="lang-html">&lt;a href=&quot;javascript:;&quot;&gt;这是一个无效果的超链接&lt;/a&gt;&lt;a id=&quot;bottom&quot; href=&quot;#&quot;&gt;回到顶部&lt;/a&gt;&lt;p  id =p1&gt;这是第一个段落&lt;/p&gt;&lt;br&gt;&lt;/br&gt;&lt;a href=&quot;p1&quot;&gt;去第一个段落&lt;/a&gt;</code></pre></li></ul><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><ul><li>当我们需要跳转到一个服务器内部的页面时，要用到<strong>相对路径</strong>，用.或..开头</li><li>&nbsp;<strong><font color=blue>./</font></strong>&nbsp;表示当前文件所在的目录</li><li>&nbsp;<strong><font color=blue>../</font></strong>&nbsp;表示当前文件所在目录的上一级目录</li></ul><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><ul><li>图片标签用于在当前页面中引入一个外部照片</li><li>图片标签img是一个<strong>自结束标签</strong>，属于替换元素（介乎于块和行内元素）</li><li>属性：<ul><li><strong>src</strong>&nbsp;属性指定的是外部图片的路径描述</li><li><strong>alt</strong>&nbsp;属性指图片的描述，这个描述<strong>默认情况下不会显示</strong>，<strong><font color=purple>只有当图片无法被浏览器加载出来时，才会显示alt中的内容，如果不写alt则不会被搜索引擎所收录（有点类似于meta的description）</font></strong></li><li><strong>width</strong>&nbsp;表示设置图片的宽度</li><li><strong>height</strong>&nbsp;表示设置图片的高度<ul><li>一般情况下，只更改width和height中的一个，这样图片就会被等比例的缩放</li><li>在pc端不建议更改图片大小，会导致内存增大或图片失真的情况</li><li>但在移动端就要经常使用到缩放</li></ul></li></ul></li></ul><h3 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h3><ul><li>格式分类<ul><li><strong>JPEG(jpg)</strong><ul><li>支持的颜色比较丰富，不支持透明效果，不支持动图，一般用于显示照片</li></ul></li><li><strong>GIF</strong><ul><li>支持的颜色比较少，支持简单透明，支持动图，一般用于动图</li></ul></li><li><strong>PNG</strong><ul><li>支持的颜色丰富，支持复杂透明，不支持动图，网页专用格式</li></ul></li><li>webp<ul><li>谷歌专属格式，具备其他格式所有优点，但兼容性不好</li></ul></li></ul></li><li><strong>base64编码</strong><ul><li>将图片使用base64编码，这样可以让图片变成字符，通过字符的形式引入图片</li><li><strong>可以使图片更快的加载出网页中</strong></li></ul></li></ul><h3 id="音视频播放"><a href="#音视频播放" class="headerlink" title="音视频播放"></a>音视频播放</h3><ul><li><strong>audio</strong>标签用来向页面导入一个外部的音频文件，当音频文件引入时，默认情况下不允许用户控制<pre><code class="lang-html">&lt;audio src=&quot;音频文件路径&quot;&gt;&lt;/audio&gt;</code></pre></li><li><p>属性：</p><ul><li><strong>controls</strong> 设置允许用户对音频进行控制（播放/暂停）</li><li><strong>autoplay</strong> 设置音频自动播放<ul><li>大部分浏览器不会自动对音频播放</li></ul></li><li><strong>loop</strong> 设置音频循环播放<pre><code class="lang-html">&lt;audio src=&quot;音频文件路径&quot; controls loop&gt;&lt;/audio&gt;</code></pre><ul><li>不是所有浏览器都支持audio标签</li><li>可以使用如下写法：<pre><code class="lang-html">&lt;audio controls&gt;对不起，您的浏览器不支持播放此音频&lt;source src=&quot;音频文件路径&gt;&lt;/audio&gt;</code></pre></li><li><font color=red>这样写的好处是如果浏览器不支持audio标签，就会显示文字，反之则会显示音频，不会显示文字</font></li></ul></li></ul></li><li><p><strong>video</strong>标签用来向网页引入一个视频文件</p><pre><code class="lang-html">&lt;video controls&gt;&lt;source src=&quot;音频文件路径&quot;&gt;&lt;/video&gt;</code></pre></li><li><strong>对于网页引入音频视频，一般不会再本地播放，会通过代理进行音视频托管，减轻服务器内存，对带宽的要求也相应降低，成本也就减少</strong></li></ul><hr><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li>CSS<ul><li><strong>层叠样式表</strong>(英文全称：Cascading Style Sheets)是<font color=brown>一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言</font>。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。[摘自百度百科]</li><li>CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力。</li></ul></li></ul><hr><ul><li><strong><font size=5 color=orange>三种方式修改元素样式</font></strong><ul><li><font size=4 color=brown>第一种:(内联样式/行内样式)- 在标签内部通过style属性来设置元素样式- 但该样式只对当前标签内部有效，对在实际的开发应用过程中非常不友好，对后期的维护相当麻烦，需要一个个的去修改```html<p style="color:red; font-size=60px">牵一发而动全身</p>```- **注意：千万不能在开发中使用，非常低效，不推荐，仅供学习使用** </font></li><li><font size=4 color= brown>第二种：(内部样式表)<ul><li>把style写在head标签中</li><li>然后通过CSS的选择器选择元素并为其设置样式</li><li>该方法的好处是：可以<strong>同时为多个标签设置样式，只需要修改一次即可对所有标签进行样式修改，方便样式进行复用</strong>&lt;/font&gt;<pre><code class="lang-html">&lt;head&gt;&lt;style&gt;  p{    color=red     font-size=50px    }&lt;/style&gt;&lt;/head&gt;</code></pre></li></ul></li><li><font size=4 color= brown>第三种：(外部样式表)<ul><li>可以将CSS样式编写到一个外部的CSS文件中，然后通过<strong>link标签</strong>来引入外部的CSS文件</li><li>外部样式表需要通过<strong>link标签</strong>进行引入<ul><li>只要网页对其进行引用就可以使用这些样式</li><li><strong>可以使样式在不同的页面中进行复用(推荐使用，尤其开发中必备)</strong>&lt;/font&gt;<pre><code class="lang-html">&lt;link rel=&quot;stylesheet&quot; href=&quot;需要引用的CSS文件路径&quot;&gt;</code></pre></li></ul></li></ul></li></ul></li></ul><hr><h3 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h3><ul><li><font size=4><strong>注释</strong>：注释里得到东西会自动被浏览器忽略<ul><li>格式(快捷键Ctrl+/)<pre><code class="lang-css">/*  注释内容 */</code></pre></li></ul></li><li><strong>基本语法：</strong><ul><li><strong>选择器（selector）</strong><ul><li>通过选择器可以选中页面的指定元素，例如p的作用就是选中页面所有的p标签元素</li></ul></li><li><strong>声明块</strong><ul><li>通过声明块来指定要给元素设置的样式</li><li>声明块由一个个声明组成，格式是<font color=purple>名值对</font>，以<code>;</code>结尾<pre><code class="lang-css">p{color:red;font-size:60px;}h1{color:blue;font-size:80px;}</code></pre></li></ul></li></ul></li></ul><hr><h3 id="class属性"><a href="#class属性" class="headerlink" title="class属性"></a>class属性</h3><ul><li><strong>class</strong>是一个标签的属性，它与id相似，但是<font color=purple>可以重复使用，对元素进行分组</font></li><li>语法：<ul><li><font color=red>.class{属性：属性值}</font><pre><code class="lang-html">&lt;p class=&quot;red&quot;&gt;天苍苍，野茫茫&lt;/p&gt;&lt;p class=&quot;red&quot;&gt;风吹草低见牛羊&lt;/p&gt;</code></pre><pre><code class="lang-css">.red{color:red;font-size:15px;}</code></pre></li></ul></li></ul><hr><h3 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h3><ul><li><strong>元素选择器</strong><ul><li>作用：<font color=brown>根据标签名设置指定元素</font></li><li>语法：<font color=red> 标签名{ }</font></li><li>例如： p{ } &nbsp;  h1{ }</li></ul></li><li><strong>id选择器</strong><ul><li>作用：<font color=brown>根据元素的id属性值选择一个元素</font></li><li>语法： <font color=red>#id属性值{ }</font></li><li>例如： #green{ } #bottom{ }</li></ul></li><li><strong>类选择器</strong><ul><li>作用：<font color=brown>根据元素的class属性值选中一组元素</font></li><li>语法: &nbsp;<font color=red>.class属性值</font><pre><code class="lang-html">&lt;h1 class=&quot;good&quot;&gt;美好的一天&lt;/h1&gt;</code></pre><pre><code class="lang-css">.good{color:orange;}</code></pre></li></ul></li><li><strong>通配选择器</strong><ul><li>作用: &nbsp;<font color=brown>选中页面的所有元素</font></li><li>语法：<font color=red>*</font><pre><code class="lang-css">*{color:black;}</code></pre></li></ul></li></ul><hr><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><ul><li><strong>交集选择器</strong><ul><li>作用：选中同时复合多个条件的元素</li><li>语法：<strong>选择器1选择器2选择器n{ }</strong></li><li>交集选择器如果有元素选择器，<strong><font color=red>必须用元素选择器开头</font></strong><pre><code class="lang-html">&lt;body&gt;&lt;div class=&quot;red&quot;&gt;我是div&lt;/div&gt;&lt;p class=&quot;red&quot;&gt;我是段落&lt;/p&gt;&lt;div class=&quot;red2 a b &quot;&gt;我是div2&lt;/div&gt;&lt;/body&gt;</code></pre><pre><code class="lang-css">&lt;style&gt;div.red{  font-size:25px;}.a.b{  color:blue;}&lt;/style&gt;</code></pre></li></ul></li><li><strong>并集选择器</strong>(选择器分组)<ul><li>作用：同时选中多个选择器对应的元素</li><li>语法：<strong>选择器1，选择器2，选择器n{ }</strong><pre><code class="lang-css">h1,span{color:orange;}</code></pre></li></ul></li></ul><hr><h3 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h3><ul><li><p><strong><font size=5 color=orange>各种元素类别</font></strong></p><ul><li><strong>父元素</strong><ul><li>直接包含子元素的元素</li></ul></li><li><strong>子元素</strong><ul><li>直接被父元素包含的元素</li></ul></li><li><strong>祖先元素</strong><ul><li><font color=red>直接或间接</font>包含后代元素的元素</li><li>一个元素的父元素也是其祖先元素</li></ul></li><li><strong>后代元素</strong><ul><li>直接或间接被祖先元素包含的元素</li><li>子元素也是后代元素</li></ul></li><li><p><strong>兄弟元素</strong></p><ul><li>拥有相同父元素的元素<br>```html<br><div><br>我是一个div<br><p><br>我是div的p元素<br><span>我是p元素中的span</span></li></ul><p>&lt;/p&gt;<br><span>我是div的span元素</span></p></li></ul><p>&lt;/div&gt;<br>```</p></li><li><strong>子元素选择器</strong><ul><li>作用：选中指定父元素的指定子元素</li><li>语法：<strong>父元素 &gt; 子元素</strong><pre><code class="lang-html">&lt;style&gt;  div &gt; span{    color:yellow;  }&lt;/style&gt;</code></pre></li></ul></li><li><strong>后代元素选择器</strong><ul><li>作用：选中指定元素内的指定后代元素</li><li>语法：<strong>祖先 后代</strong><pre><code class="lang-html">&lt;style&gt;div span{  color:red;}&lt;/style&gt;</code></pre></li></ul></li><li><strong>选择下一个兄弟元素</strong><ul><li>语法： <strong>前一个 + 后一个</strong><pre><code class="lang-html">&lt;style&gt;p + span{  font-size:30px;}&lt;/style&gt;</code></pre></li></ul></li><li><strong>选择所有的兄弟元素</strong><ul><li>语法： <strong>兄 ~ 弟</strong></li></ul></li></ul><hr><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><ul><li><strong>选择含有指定属性的元素</strong><ul><li>[属性名]</li></ul></li><li><strong>选择含有指定属性和属性值的元素</strong><ul><li>[属性名 = 属性值]</li></ul></li><li><strong>选择属性值一指定值开头的元素</strong><ul><li>[属性名 ^= 属性值]</li></ul></li><li><strong>选择属性值以指定值结尾的元素</strong><ul><li>[属性名 $= 属性值]</li></ul></li><li><strong>选择属性值中含有某值的元素的元素</strong><ul><li>[属性名 *= 属性值]<pre><code class="lang-html">&lt;head&gt;&lt;style&gt;  p[title=abc]{    color:orange;  }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p title=&quot;abc&quot;&gt;黄沙百战穿金甲&lt;/p&gt;&lt;p titie=&quot;abcdef&quot;&gt;不破楼兰终不还&lt;/p&gt;&lt;p titl=&quot;hello&quot;&gt;一曲新词酒一杯&lt;/p&gt;&lt;/body&gt;</code></pre><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3></li></ul></li><li><strong>伪类</strong>：不存在的类，特殊的类<ul><li>伪类用来描述一个元素的特殊状态<ul><li>比如：第一个子元素，被点击的元素，鼠标移入的元素等</li></ul></li><li>伪类一般情况下都是&nbsp;:&nbsp;开头<ul><li><code>:first-child</code> 第一个子元素</li><li><code>:last-child</code> 最后一个子元素</li><li><code>:nth-child</code>选中第n个子元素<ul><li><font color=brown>特殊值：</font><ul><li><strong>n</strong> 第n个 范围从0到正无穷</li><li><strong>2n</strong> 或 even 表示选中偶数位子元素</li><li><strong>2n+1</strong> 或 odd 表示选中奇数位的子元素  </li></ul></li></ul></li><li><code>:first-of-type</code></li><li><code>:last-of-type</code></li><li><code>nth-of-type</code></li><li><font color=purple>这些伪类和前面的基本一致，不同点在于它们是同类型元素排序</font></li><li><code>:not()</code> 否定伪类<ul><li><strong>将符合条件的元素从选择器中除去</strong> </li></ul></li></ul></li></ul></li></ul><h3 id="超链接的伪类"><a href="#超链接的伪类" class="headerlink" title="超链接的伪类"></a>超链接的伪类</h3><ul><li><strong>:link</strong> &nbsp;用来表示没访问过的链接</li><li><strong>:visited</strong>&nbsp;用来表示已经访问过的链接,由于隐私的原因，因此visited这个伪类<font color=blue>只能修改链接的颜色</font><ul><li><strong>这两个表示的是超链接的状态，可在同一个超链接中进行引用</strong><pre><code class="lang-html">&lt;style&gt;a:link{  color:red;  font-size:60px;}a:visited{  color:purple;}a:hover{  color:orange;}a:active{  color:green;}&lt;/style&gt;&lt;body&gt;&lt;a href=&quot;www.baidu.com&quot;&gt;百度&lt;/a&gt;&lt;a href=&quot;www.sina.com&quot;&gt;新浪&lt;/a&gt;  &lt;/body&gt;</code></pre></li></ul></li><li><strong>:hover</strong>&nbsp;用来<font color=greed>表示鼠标移入的状态</font></li><li><strong>:active</strong>&nbsp;用来<font color=greed>表示鼠标点击的动作</font></li></ul><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><ul><li><strong>伪元素</strong>表示页面中的一些特殊的并不真实存在的元素</li><li><p>伪元素用&nbsp;<strong>::</strong>&nbsp;开头</p><ul><li><strong>::first-letter</strong>表示第一个字母</li><li><strong>::first-line</strong>表示第一行</li><li><strong>::selection</strong>表示选中的内容</li><li><strong>::before</strong>元素的开始</li><li><strong>::after</strong>元素的结束<ul><li><strong>before和after必须配合content属性来使用</strong><br>```html<br><style><br>p::first-letter{<br>font-size:50px;<br>}<br>p::first-line{<br>background-color:yellow;<br>}<br>p::selection{<br>background-color:orange;<br>}<br>div::after{<br>content:’#’<br>}<br>div::before{<br>content:’#’<br>}</li></ul></li></ul><p>&lt;/style&gt;<br><body><br>  <div>what a beautiful world</div><br>  <p></p><pre><code> I had traveled here to Henson&#39;s last home -- now a historic site that Carter formerly directed -- to learn more about a man who was， in many ways， an African-American Moses。 After winning his own freedom from slavery， Henson secretly helped hundreds of other slaves to escape north to Canada -- and liberty。</code></pre><p>  &lt;/p&gt;<br>&lt;/body&gt;<br>```</p></li></ul><hr><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li><strong>继承</strong>，指的是<strong>样式的继承</strong>，我们为一个元素设置的样式也会相应的应用到他的后代元素中</li><li><strong>继承</strong>是发生在<font color=red>祖先后后代</font>之间的</li><li>继承的意义是为了方便我们开发，使用继承的方式可以将一些通用的样式统一设置到共同的祖先元素中</li><li><strong>并不是所有的样式都可以被继承</strong><ul><li>例如，背景相关的<br>```html<br><style><br>p{<br>color:red;<br>}<br>div{<br>background-color:yellow;<br>}</li></ul></li></ul><p>&lt;/style&gt;</p><p><body><br>  <p>    这是一个段落    <span>我是p元素中的span</span>  </p><br>  <span>我是p元素外的span</span></p>  <div>    我是一个div    <span>我是div中的span</span>  </div>  <span>我是div外的span</span></body> ```---### 选择器的权重(优先级)- **样式的冲突**  - <table><tr><td bgcolor=#FFFF00>当我们通过不同的选择器，选中相同的样式设置不同的值时，此时就发生样式的冲突</td></tr></table>  - 例如：  ```html   <style>    div{      color:blue;    }    .red{      color:green;    }  </style>  <body>    <div id="box" class="red">这是一个div</div>  </body>  ```- **选择器的优先级**<font color=brown>(从高到低)</font>  - **内联样式**  1,0,0,0  - **id选择器**   0,1,0,0  - **类和伪类选择器**  0,0,1,0  - **元素选择器**   0,0,0,1  - **通配选择器** 0,0,0,0  - **继承的样式** 没有优先级- 比较优先级时，需要对所有的选择器的优先级进行**相加**计算，**最后的样式优先级越高，则使用越高的样式**- 选择器的累加不会超过其最大的数量级- 如果优先级计算后相同，此时则**优先使用靠下的样式(即最新的样式覆盖旧的样式)**- **可以通过在某一个样式后面加上&nbsp;&nbsp;!important&nbsp;&nbsp;，这样使样式达到<font color=blue>最高优先级</font>**<font color=brown>（但是在开发中慎用）</font>--- ### 像素、百分比、HSL值- **<font color=orange>长度单位</font>**  - **像素：**    - <font color=brown>屏幕，实际上是由一个个的小像素点组成      - 例如，某屏幕参数1920*1080表示宽度有1920个像素，高度有1080个像素    - <font color=blue>不同屏幕的像素是不同的，像素越小其屏幕的清晰度越高</font>    - 同样的200px在不同的屏幕下的显示效果也不同  - **百分比：**    - 也可以将属性设置为相应的其子元素的百分比    - **设置百分比可以使子元素跟随父元素的改变而改变**  - **em**    - em是相当于元素的字体大小来计算    - ** 1em=100%font-size**  - **rem**    - rem相对于根元素的字体大小计算  - **HSL值**    - **H 色相**&nbsp; 一个彩虹环，范围0-360（即0-360度）    - **S 饱和度**&nbsp; 颜色的浓度,范围：0%-100%（必须加百分号）     - **L 亮度**&nbsp; 屏幕亮度，范围：0%-100%（必须加百分号）  ```html  <style>    .box1{      width:300px;      height:300px;      background-color:green;    }    .box2{      width:600px;      height:600px;      background-color:red;    }    .box3{      font-size:30px;      width:10em;      height:30em;      background-color:orange;    }  </style>  </body>    <div class="box1">      <div class="box2"></div>    </div>    <div class="box3"></div>  </body>  ```- **<font color=orange>颜色单位</font>**  - 在css中可以直接使用颜色的英文来设置，但是非常不方便</font>  - **RGB值**（自然光）    - <font color=#FF00FF>RGB通过三种颜色的不同浓度来调配出不同的颜色    - R=Red G=Green B=Blue    - **每一种颜色的范围是0-255之间**    - 语法：**RGB(红，绿，蓝)**  - **RGBA**    - 在RGB基础上增加透明度设置    - 四个参数：R，G，B，透明度    - 1表示完全不透明，0表示完全透明,.5表示半透明  - **十六进制的RGB值**    - **语法：#红色绿色蓝色**    - 颜色浓度通00-ff    - 如果两位两位重复可以简写    - ##aabbcc——>#abc </font>  ```html  <style>    .box{      width:100px;      height:100px;      background-color:rgb(255,0,0);      background-color:rgb(0,255,0);      background-color:rgb(0,0,255);      background-color:rgb(0,0,0);      background-color:rgb(255,255,255);      background-color:rgba(255,153,210,.5);      background-color:#FFFF00;      background-color:#abc;      background-color:hsla(95,40%,50%);    }  </style>  <body>  <div class="box"></div>  </body>   ```--- </font>## Layout布局### 01文档流- **文档流（normal flow）**  - <font color=purple>网页是一个多层的结构，层层叠着  - 通过css可以分别为每一层来设置样式</font>  - **<font color=brown>最底层就称为文档流，文档流是网页的基础</font>**  - <font color=purple>我们所创建的元素默认都是在文档流中进行排列的  - 元素的主要状态    - 在文档流    - 不在文档流  - 元素在文档流的特点    - **块元素**    - 在页面中独占一行      - 默认宽度是父元素的全部      - 默认高度是子元素高度    - **行内元素**      - 行内元素只占用自身大小      - 从左向右排列，如果一行无法完全显示，则会换行继续排列      - 行内元素的默认宽度和高度都是被内容撑开</font>      ```html      <style>      .box1{        background-color:#FFFF00;      }      .box2{        background-color:#FFEE00;      }      .span{        width:200px;        height:200px;      }      </style>      <body>        <div class="box1">我是div1</div>        <div class="box2">我是div2</div><pre><code>    &lt;span&gt;我是span&lt;/span&gt;    &lt;span&gt;我是span&lt;/span&gt;    &lt;span&gt;我是span&lt;/span&gt;    &lt;span&gt;我是span&lt;/span&gt;    &lt;span&gt;我是span&lt;/span&gt;    &lt;span&gt;我是span&lt;/span&gt;    &lt;span&gt;我是span&lt;/span&gt;  &lt;/body&gt;   ```</code></pre><h3 id="02盒子模型（Box-Model）"><a href="#02盒子模型（Box-Model）" class="headerlink" title="02盒子模型（Box Model）"></a>02盒子模型（Box Model）</h3><ul><li><font color=brown>CSS把页面中的所有元素都设置为一个矩形的盒子</li><li>将元素设置为矩形的盒子后，对页面的布局就变成将不同的盒子摆放到不同的位置</li><li><strong>每个盒子都由几个部分组成</strong><ul><li><strong>内容区（content）</strong><ul><li>内容区的大小通过width和height两个属性确定</li></ul></li><li><strong>内边距（padding）</strong></li><li><strong>边框（border）</strong><ul><li>边框属于盒子的边缘，边框里面属于盒子内部，出了边框都是盒子的外部，<strong>边框的大小会影响整个盒子的大小</strong></li><li>要设置边框至少需要设置三个属性<ul><li><strong>边框的宽度&nbsp;border-width</strong></li><li><strong>边框的颜色&nbsp;border-color</strong></li><li><strong>边框的样式&nbsp;border-style</strong></li></ul></li></ul></li><li><strong>外边距（margin）</strong><br><img data-src="./image/boxmodel.png" alt="boxmodel"><pre><code class="lang-html">&lt;style&gt;.box{  /*内容区设置*/  width:200px;  height:200px;  background-color:#bfa;  /*边框的设置*/  border-width:10px;  border-color:orange;  border-style:solid;}&lt;/style&gt;&lt;body&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><h3 id="盒子模型之边框"><a href="#盒子模型之边框" class="headerlink" title="盒子模型之边框"></a>盒子模型之边框</h3></li></ul></li><li>边框包括：<ul><li>边框宽度</li><li>边框颜色</li><li>边框样式</li></ul></li><li><strong>对于border-width</strong><ul><li>存在默认值3px，即不设置边框宽度也会有3像素的边框</li><li>属性值的情况：<ul><li>四个值： 上 右 下 左</li><li>三个值： 上 左右 下</li><li>两个值： 上下 左右</li><li>一个值：上下左右</li></ul></li><li>不仅可以对边框的四个方向进行设置，还可以单独设置各个方向的边框宽度（其格式为：border-xxx-width）<ul><li><strong>单独设置上边宽</strong> border-top-width</li><li><strong>单独设置右边宽</strong> border-right-width</li><li><strong>单独设置下边宽</strong> border-bottom-width</li><li><strong>单独设置左边宽</strong> border-left-width</li></ul></li></ul></li><li><strong>对于border-color</strong><ul><li>存在默认值black</li><li>其设置规则和border-width相同</li></ul></li><li><strong>对于border-style</strong><ul><li>默认值为none无边框</li><li>指定边框样式<ul><li><strong>solid</strong> 表示实线</li><li><strong>dotted</strong> 点状虚线</li><li><strong>dashed</strong> 虚线</li><li><strong>double</strong> 双线</li></ul></li></ul></li><li><strong>border的简写： 同时设置边框的所有属性，各个属性用空格隔开</strong><pre><code class="lang-html">&lt;style&gt;  .box{    border:10px red solid;    border-right:none;  }&lt;/style&gt;&lt;body&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><h3 id="盒子模型之内边距"><a href="#盒子模型之内边距" class="headerlink" title="盒子模型之内边距"></a>盒子模型之内边距</h3></li><li><p><strong>内边距</strong></p><ul><li>内容区和边框之间的距离<ul><li>四个方向的内边距<ul><li>padding-top</li><li>padding-right</li><li>padding-bottom</li><li>padding-left</li></ul></li></ul></li><li><p><strong>所以一个盒子的可见区包括内容区、边框、内边距</strong></p><pre><code class="lang-html">&lt;style&gt;.box{  width:200px;  height:200px;  background-color:#bfa;  border:10px orange solid;  padding:100px;}.inner{  width:100%;  height:100%;  background-color:yellow;}&lt;/style&gt;&lt;body&gt;&lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;div&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><h3 id="盒子模型之外边距"><a href="#盒子模型之外边距" class="headerlink" title="盒子模型之外边距"></a>盒子模型之外边距</h3></li><li>外边距（margin）<ul><li>外边距不会影响盒子的可见区大小</li><li>但是会影响盒子的位置</li></ul></li><li>四个方向设置外边距<ul><li>margin-top<ul><li>上外边距，设置一个正值，元素会向下移动</li></ul></li><li>margin-right</li><li>margin-bottom<ul><li>下外边距，设置一个正值，其他元素会向下移动（没有其他像素则不会有效果产生）</li></ul></li><li>margin-left<ul><li>左外边距，设置一个正值，元素会向右移动</li></ul></li></ul></li><li><strong>元素在页面中是按自左向右顺序排列的</strong><ul><li><strong>因此默认情况下如果我们设置外边距的上边和左边，自身会进行移动</strong></li><li><strong>而设置外边距的右边和下边则会移动其他元素</strong></li></ul></li><li><p>margin的简写—-和padding一样<br>```html<br><style><br>.box{<br>  width:200px;<br>  height:200px;<br>  background-color:#bfa;<br>  border:10px orange solid;</p><p>  padding:100px;<br>  margin-top:100px;<br>  margin-left:100px;<br>  margin-right:150px;<br>  margin-bottom:150px;<br>}</p><p>.box2{<br>  width:220px;<br>  height:220px;<br>  background-color:yellow;<br>}<br>&lt;/style&gt;<br><body></p><div class="box"></li></ul><p>&lt;/div&gt;<br><div class="box2"></div><br>&lt;/body&gt;<br>```</p><h3 id="盒子模型之水平方向布局"><a href="#盒子模型之水平方向布局" class="headerlink" title="盒子模型之水平方向布局"></a>盒子模型之水平方向布局</h3></li><li>水平方向布局<ul><li>元素在其父元素中水平方向的位置由以下几个属性<strong>共同决定</strong><ul><li>margin-left</li><li>border-left</li><li>padding-left</li><li>width</li><li>padding-right</li><li>border-right</li><li>margin-right</li></ul></li><li>一个元素在其父元素中，水平布局必须满足以下等式<ul><li><strong>margin-left + border-left + padding-left + width + padding-right + border-right + margin-right = 其父元素内容区的width值（必须满足）</strong></li><li>以上的情况<strong>必须满足</strong>，如果等式不成立，则称为过渡约束，等式自动进行调整<ul><li>调整方式：<ul><li>如果这七个值中没有<strong>auto</strong>的情况，则浏览器会自动调整<strong>margin-right</strong>的值以使等式成立</li><li>可设置auto的值有：<ul><li><strong>width</strong></li><li><strong>margin-right</strong></li><li><strong>margin-left</strong><ul><li><strong>如果某个值为auto，则会自动调整设置auto的那个值以令等式成立</strong></li><li><strong>如果将一个宽度和一个外边距设置为auto，则宽度会调整到最大，外边距会自动设置为0</strong></li><li><strong>如果三个值都设置auto，则外边距两个都是0，宽度最大化</strong></li><li><strong>如果两个外边距设置为auto，则宽度固定，两个外边距的值相同</strong>(使一个子元素在其父元素中水平居中的方法)</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="盒子模型之垂直方向布局"><a href="#盒子模型之垂直方向布局" class="headerlink" title="盒子模型之垂直方向布局"></a>盒子模型之垂直方向布局</h3><ul><li>默认情况下父元素的高度别内容撑开</li><li><p>子元素是在父元素的内容区中排列的</p><ul><li>如果子元素的大小超过了父元素，则子元素会从父元素中溢出</li><li>使用&nbsp;overflow&nbsp;属性来设置父元素如何处理溢出的子元素<ul><li>取值：<ul><li><strong>visible</strong> 默认值，子元素会从父元素中溢出，在父元素外部的位置显示</li><li><strong>hidden</strong> 溢出内容将会被剪裁不会显示</li><li><strong>scroll</strong> 生成两个滚动条，通过滚动条来查看完整的内容</li><li><strong>auto</strong> 根据需求生成滚动条<br>```html<br><style><br>.outer{<br>background-color:#bfa;<br>height:600px;<br>}<br>.inner{<br>width:100px;<br>background-color:yellow;<br>height:100px;<br>margin-bottom:100px;</li></ul></li></ul></li></ul><p>}<br>.box1{<br>  width:200px;<br>  height:200px;<br>  background-color:#bfa;</p><p>  overflow:auto;</p><p>}<br>.box2{<br>  width:100px;<br>  height:400px;<br>  background-color:orange;<br>}</p></li></ul><p>&lt;/style&gt;</p><p><body>  <div class="outer">    <div class="inner1"></div>    <div class="inner2"></div>  </div>  <div class="box1"></div>  <div class="box2"></div></body></p><pre><code>### 垂直外边距的重叠  - 相邻的垂直方向的外边距会发生重叠现象  - **对于兄弟元素**    - 兄弟元素间的相邻垂直外边距会取**两者之间的较大值**（两者都是正值的前提下）    - 如果相邻外边距**一正一负**，则取**两者之和**    - 如果相邻外边距**都是负数**，则取**两者中绝对值较大的**  - **对于父子元素**    - 父子元素间相邻的**上外边距**，子元素的属性值会传递给父元素    - 父子元素会影响页面的布局  ```html  &lt;style&gt;    .box1{      width:200px;      height:200px;      background-color:#bfa;      margin-bottom:100px;    }    .box2{      width:100px;      height:100px;      background-color:red;      margin-top:100px;    }    .box3{      width:200px;      height:200px;      background-color:#bfa;    }    .box4{      width:100px;      height:100px;      background-color:red;    }  &lt;/style&gt;  &lt;body&gt;    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;box3&quot;&gt;      &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/body&gt;</code></pre><h3 id="行内元素的盒模型"><a href="#行内元素的盒模型" class="headerlink" title="行内元素的盒模型"></a>行内元素的盒模型</h3><ul><li>行内元素的盒模型<ul><li><strong>行内元素不支持设置宽度和高度</strong></li><li>可以设置padding、border、margin，但这三个属性<strong>均对垂直方向的布局没有影响</strong></li></ul></li><li><strong>display</strong> 设置元素显示的类型<ul><li>可选值：<ul><li><strong>inline</strong> 将元素设置为<strong>行内元素</strong></li><li><strong>block</strong> 将元素设置为<strong>块元素</strong></li><li><strong>inline-block</strong> 将元素设置为<strong>行内块元素</strong><ul><li>行内块：既可以设置宽度和高度又不会独占一行（开发尽量避免使用）</li></ul></li><li><strong>table</strong> 将元素设置成<strong>表格</strong></li><li><strong>none</strong> 元素不会在页面显示</li></ul></li></ul></li><li><p><strong>visibility</strong> 用来设置元素的显示状态</p><ul><li><p>可选值：</p><ul><li><strong>visible</strong> 默认值，元素在页面中<strong>正常显示</strong></li><li><strong>hidden</strong> 元素在页面中隐藏，但依然占用页面位置&lt;/font&gt;<br>```html<br><style><br>.s1{<br>background-color:yellow;<br>margin:100px;<br>}</li></ul><p>.box1{<br>  width:200px;<br>  height:200px;<br>  background-color:#bfa;<br>}</p><p>a{<br>  display:none;<br>  visibility:visible;<br>  width:100px;<br>  height:100px;<br>  background-color:orange<br>}</p></li></ul><p>&lt;/style&gt;<br><body><br><span class="exturl" data-url="amF2YXNjcmlwdDo7">超链接</span><br><span class="exturl" data-url="amF2YXNjcmlwdDo7">超链接</span></p><p><span class="s1">我是span&lt;/sapn&gt;<br><span class="s1">我是span&lt;/sapn&gt;</p><p><div class="box"></div><br>&lt;/body&gt;<br>```</p><h3 id="浏览器的默认样式"><a href="#浏览器的默认样式" class="headerlink" title="浏览器的默认样式"></a>浏览器的默认样式</h3><ul><li><strong>默认样式</strong></li></ul></li><li>默认样式的存在会影响页面的布局，通常情况下编写网页时必须要去除浏览器的默认样式</li><li>方法1 ：<ul><li>快速去除<pre><code class="lang-html">&lt;style&gt;*{margin:0;padding:0;}&lt;/style&gt;</code></pre></li><li>方法2、3：</li><li><strong>重置样式表</strong></li></ul></li><li>reset.css 直接去除了浏览器的默认样式</li><li>normalize.css 对默认样式进行统一</li></ul><h3 id="盒子的尺寸"><a href="#盒子的尺寸" class="headerlink" title="盒子的尺寸"></a>盒子的尺寸</h3><ul><li>默认情况下，盒子可见区的大小由内容区、内边距和边框共同决定</li><li><strong>box-sizing</strong><ul><li>用来设置盒子尺寸的计算方式（设置width和height的作用）<ul><li>可选值：<ul><li><strong>content-box</strong> 默认值，宽度和高度用来设置内容区的大小</li><li><strong>border-box</strong> 宽度和高度整个盒子可见框的大小</li><li>width=内容区宽度+内边距宽度+边框宽度</li></ul></li></ul></li></ul></li></ul><h3 id="轮廓与圆角"><a href="#轮廓与圆角" class="headerlink" title="轮廓与圆角"></a>轮廓与圆角</h3><h4 id="轮廓"><a href="#轮廓" class="headerlink" title="轮廓"></a>轮廓</h4><ul><li><strong>outline</strong> 用来设置元素的轮廓线，用法与border相同<ul><li>轮廓不会影响可见区的大小</li></ul></li><li><strong>box-shadow</strong> 用来设置元素的阴影效果，阴影不会影响页面布局<ul><li>box-shadow属性<ul><li>第一个值：水平偏移量，设置阴影的水平位置，正值向右，负值向左</li><li>第二个值：垂直偏移量，设置阴影的垂直位置，正值向下，负值向上</li><li>第三个值：阴影的模糊半径（越大越模糊）</li><li>第四个值：阴影颜色<pre><code class="lang-html">&lt;style&gt;.div{  width:100px;  height:100px;  background-color:orange;  box-shadow:10px 10px 10px red;}&lt;/style&gt; &lt;body&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><h4 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h4></li></ul></li></ul></li><li><strong>border-radius</strong> 用来设置圆角<ul><li><strong>四个方向</strong><ul><li>border-top-left-radius 左上角</li><li>border-top-right-radius 右上角</li><li>border-bottom-left-radius 左下角</li><li>border-bottom-right-radius  右下角</li></ul></li><li><strong>属性值</strong><ul><li>一个值的情况：水平垂直方向的半径均相同</li><li>两个值的情况：第一个为水平半径，第二个为垂直半径</li></ul></li></ul></li></ul><h2 id="浮动概述"><a href="#浮动概述" class="headerlink" title="浮动概述"></a>浮动概述</h2><ul><li>CSS的浮动（float），会使元素向左或向右移动，其周围的元素也会重新排列</li><li>Float常用于图像，在布局中也一样有用</li><li>通过浮动可以使一个元素向其父元素的左侧或右侧移动<ul><li>使用float属性来设置元素的浮动<ul><li><strong>可选值</strong>：<ul><li><strong>none</strong> 默认值，元素不浮动</li><li><strong>left</strong> 元素向左浮动</li><li><strong>right</strong> 元素向右浮动</li></ul></li></ul></li><li><strong>注意</strong>：<ul><li>元素设置浮动后，水平布局的等式就<strong>不需要强制成立</strong>（即width=内容区宽度+内边距宽度+边框宽度不需要成立）</li><li>元素下面的还在文档流的元素会自动向上移动</li></ul></li></ul></li></ul><h3 id="浮动的特点"><a href="#浮动的特点" class="headerlink" title="浮动的特点"></a>浮动的特点</h3><ol><li>浮动元素会完全脱离文档流，不再占据文档流中的位置</li><li>设置浮动以后元素会向父元素的左侧或右侧移动</li><li>浮动元素默认不会从父元素中移出</li><li>浮动元素向左或向右移动时，不会超过它前边的其他浮动元素</li><li>如果浮动元素的上边是一个没有设置浮动的圆水泥，则浮动元素无法上移</li><li>浮动元素不会超过它上边的浮动兄弟元素，最多就是和它一样的高度<ul><li><strong><font color=red>总结</font></strong><ul><li>通过浮动可以制作一些水平方向的布局</li></ul></li></ul></li></ol><h3 id="浮动元素的其他特点"><a href="#浮动元素的其他特点" class="headerlink" title="浮动元素的其他特点"></a>浮动元素的其他特点</h3><ul><li>浮动不会盖住文字，文字会自动环绕在浮动元素的周围，所以我们可以利用浮动来<strong>设置文字环绕图片的效果</strong></li><li>元素设置浮动之后，脱离文档流，并且其元素特性会发生变化<ul><li><strong>脱离文档流的元素特点</strong><ul><li>块元素<ol><li>块元素不再独占页面的一行</li><li>脱离文档流后，块元素的宽度和高度默认被内容撑开</li></ol></li><li>行内元素<ul><li>脱离文档流会变成块元素，特点与块元素一致</li></ul></li><li><strong><font color=greed>因此，脱离文档流的元素不再区分块元素和行内元素，统一变成块元素</font></strong></li></ul></li><li></li></ul></li></ul><h3 id="高度塌陷问题"><a href="#高度塌陷问题" class="headerlink" title="高度塌陷问题"></a>高度塌陷问题</h3><ul><li><p>图片例子</p><ul><li>原本效果：<br><img data-src="image/高度塌陷01.png" alt="高度塌陷01"></li><li>高度塌陷效果：<br><img data-src="./image/高度塌陷02.png" alt="高度塌陷02"> </li></ul></li><li><font color=purple>高度塌陷的问题- 在浮动布局中，父元素的高度默认是被子元素撑开的  - 当子元素浮动后，<font color=red>其余完全脱离文档流</font>，子元素从文档流中脱离  - 将会无法撑起父元素的高度，导致父元素的高度丢失  - 父元素高度丢失后，其下边的元素会自动上移，导致页面的布局混乱  - 所以高度塌陷问题是浮动布局中较为常见的问题，必须要处理！</font></li><li>解决方法：<ul><li>BFC</li></ul></li></ul><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><ul><li>何为BFC？<ul><li><strong>BFC（Block Formating Context）块级格式化环境</strong><ul><li>BFC是CSS中一个隐含的属性，可以为一个元素开启BFC，开启BFC后该元素<strong>变成一个独立的布局区域</strong></li></ul></li></ul></li><li><strong>元素开启BFC的特点：</strong><ol><li>开启BFC的元素不会被浮动元素所覆盖</li><li>开启BFC的元素子元素和父元素的外边距（margin）不会重叠</li><li>开启BFC的元素可以包含浮动的子元素</li></ol></li><li>开启方法<ul><li>设置元素的浮动（不推荐）</li><li>将元素设置为行内块元素（block-inline）（不推荐）</li><li>将元素的overflow设置为一个非visible的值 <ul><li>overflow设置auto或hidden最佳<h3 id="clear属性与clearfix类"><a href="#clear属性与clearfix类" class="headerlink" title="clear属性与clearfix类"></a>clear属性与clearfix类</h3></li></ul></li></ul></li><li>情景：<ul><li>如果我们不希望某个元素因为其他元素浮动的影响而改变位置，可以通过clear属性来<strong>清除浮动元素</strong>对当前元素产生的影响</li></ul></li><li><strong>clear</strong><ul><li><font color=blue>作用：<ul><li>清除浮动元素对当前元素所产生的影响</li></ul></li><li>可选值：<ul><li><strong>left</strong>&nbsp;清除左侧浮动元素对当前元素的影响  </li><li><strong>right</strong>&nbsp;清除右侧浮动元素对当前元素的影响</li></ul></li><li>原理<ul><li>设置清除浮动以后，浏览器会自动为元素添加一个上外边距，以使其位置不受其他元素的影响</li></ul></li></ul></li><li><strong>clearfix</strong><ul><li>这个样式可以同时解决高度塌陷和外边距重叠的问题<pre><code class="lang-html">&lt;style&gt;.clearfix::before,.clearfix::after{  content:&#39;&#39;;  display:table;  clear:both;}&lt;/style&gt;</code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络编程OV</title>
      <link href="/my-blog/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BOV/"/>
      <url>/my-blog/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BOV/</url>
      
        <content type="html"><![CDATA[<h1 id="Java网络编程OV"><a href="#Java网络编程OV" class="headerlink" title="Java网络编程OV"></a>Java网络编程OV</h1><h2 id="一、入门"><a href="#一、入门" class="headerlink" title="一、入门"></a>一、入门</h2><h3 id="1-1-软件结构"><a href="#1-1-软件结构" class="headerlink" title="1.1 软件结构"></a>1.1 软件结构</h3><ul><li><strong>C/S结构</strong>： Client/Server,客户端访问数据库服务器</li><li><strong>B/S结构</strong>： Browser/Server,浏览器访问数据库服务器</li><li><font color=greed>两种架构都离不开网络的支持</font></li></ul><h3 id="1-2-网络通信协议"><a href="#1-2-网络通信协议" class="headerlink" title="1.2 网络通信协议"></a>1.2 网络通信协议</h3><ul><li><strong>TCP/IP协议</strong>：传输控制协议/因特网互联协议，是Internet最基本、最广泛的协议，它定义了计算机如何连入因特网，以及数据如何在他们之间进行传输的标准。<br>| 分层模型 | 相应的协议 |<br>|————-:|————:|<br>|应用层| HTTP、FTP、SMTP、SNMP、DNS|<br>|传输层|TCP、UDP|<br>|网络层|ICMP、IGMP、IP、ARP、RARP|<br>|数据链路层||<br>|物理层||</li></ul><h3 id="1-3-主要协议分类"><a href="#1-3-主要协议分类" class="headerlink" title="1.3 主要协议分类"></a>1.3 主要协议分类</h3><ul><li><p><strong>UDP</strong>：用户数据报协议(User Datagram Protocol),UDP是无连接的通信协议，不考虑数据是否发送成功，即为不可靠连接，典型的例子有<strong>发短信</strong>（发送端发送数据，不会确认接收端是否存在，并且接收端也不会反馈到发送端是否接收到数据）</p><ul><li>但UDP的优点也很明显，消耗资源少，通讯效率高，所以对于音频、视频的传输时，偶尔出现丢包的现象也不会对最终的数据结果产生太大的影响</li><li>在传输重要数据的时候，不建议使用UDP协议</li><li>数据被限定在64KB以内</li></ul></li><li><p><strong>TCP</strong>：传输控制协议(Transmission Control Protocol),TCP是面向连接的通信协议，在通信之前，发送端和接收端必须建立逻辑连接，即确保发送端和接收端存在，再进行数据的传输，由客户端(发送端)对服务器(接收端)发送连接请求，即三次握手！</p><ul><li>三次握手：TCP协议中，发送数据的准备阶段，由客户端和服务端进行三次交互，确保连接的可靠<ul><li>第一次握手：客户端向服务端发送连接请求，等待客户端收到连接请求</li><li>第二次握手：服务端向客户端应答，通知客户端已收到连接请求</li><li>第三次握手：客户端再次向服务端发送确认信息，确认连接<br><img data-src="./image/三次握手.png" alt="三次握手"></li></ul></li></ul></li></ul><h3 id="1-4网络编程三要素"><a href="#1-4网络编程三要素" class="headerlink" title="1.4网络编程三要素"></a>1.4网络编程三要素</h3><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><ul><li>计算机网络通信的规则<h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4></li><li>互联网协议地址</li><li>IP地址分类<ul><li>IPv4 ：一个32位的二进制数，被分成四个字节，都是0-255之间的整数，最多有42亿个，现在已经枯竭</li><li>IPv6：一个128位的地址，每16个字节为一组，分成8组的十六进制数</li></ul></li><li>常用命令<ul><li>查看本机ip地址<pre><code class="lang-bash">ipconfig</code></pre></li><li>检查网络是否连通<pre><code class="lang-bash">ping 空格 ip地址ping 192.168.1.2</code></pre><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4></li></ul></li><li><strong>端口号</strong>是一个<font color=red>逻辑端口</font>，我们无法直接看到，只能借助一些软件进行查看，当我们使用网络软件时，操作系统会自动为网络软件分配一个随机的端口号或者由系统指定端口号</li><li>端口号的长度<ul><li>是由2个字节组成，取值范围在0-65535之间</li></ul></li><li><font color=red>注意：- 1024之前的端口不能使用，因为已经被系统分配给一些已知的网络软件- 网络软件的端口号不能重复</font></li><li>常见的端口号<ol><li>80端口： 网络端口， www.baidu.com：80</li><li>数据库  MySQL ：3306  Oracle：1521</li><li>Tomcat服务器 ：8080 <h2 id="二、TCP通信程序"><a href="#二、TCP通信程序" class="headerlink" title="二、TCP通信程序"></a>二、TCP通信程序</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3></li></ol><ul><li>TCP通信时两台计算机实现数据交互，<strong>必须区分客户端和服务端</strong></li><li>通信的步骤：</li></ul></li></ul><ol><li>服务端程序要提前启动，等待客户端的连接（就像你玩LOL一样，必须下载客户端应用程序，才能对LOL服务端（区服）进行访问）</li><li>客户端主动连接服务端，连接成功才能进行通信，但<font color=blue>服务端不能主动连接客户端</font>，只能被动连接<ul><li><strong><font color=purple>Java中用于实现TCP通信的两个类</font></strong></li></ul></li></ol><ul><li><strong><font color=purple>客户端</font></strong>：<code>java java.net.Socket</code>类表示，创建<code>Socket</code>对象，向服务端发送连接请求，服务端响应请求，两端建立连接开始通信</li><li><strong><font color=purple>服务端</font></strong>：<code>java.net.ServerSocket</code>类表示，创建<code>ServerSocket</code>对象，相当于开启了一个服务，并等待客户端连接</li></ul><ul><li>服务端必须明确的两件事<ol><li>多个客户端和服务器进行交互，服务器必须明确和哪个客户端进行交互——<strong>在服务端有一个accept方法获取请求客户端对象</strong></li><li>多个客户端和服务端进行交互，就需要多个IO流对象<ol><li><font color=greed>服务端没有IO流，服务器可以请求客户端对象Socket</li><li>使用每个客户端Socket中提供的IO流和客户端进行交互&lt;/font&gt; </li><li><font color=purple>服务器使用客户端的字节输入流读取客户端发送的数据</li><li>服务器使用客户端的字节输出流给客户端回写数据&lt;/font&gt;<ul><li><strong><font color=red>即服务器端使用客户端的流与客户端进行交互</font></strong><br><img data-src="./image/服务端与客户端通信.png" alt="服务端与客户端通信"></li></ul></li></ol></li></ol></li></ul><h3 id="2-2-Socket-类"><a href="#2-2-Socket-类" class="headerlink" title="2.2 Socket 类"></a>2.2 Socket 类</h3><ul><li><code>Socket</code>类：该类实现客户端套接字，套接字指的是两台设备之间通信的端点<h4 id="TCP客户端"><a href="#TCP客户端" class="headerlink" title="TCP客户端"></a>TCP客户端</h4><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h5><ul><li><code>public Socket(String host ,int port)</code> :创建套接字对象并将其连接到指定主机上的指定端口号，如果指定的host是null，则相当于指定地址为回环地址127.x.x.x</li><li>参数：<ul><li><code>String host</code> ：服务器主机名/服务器IP地址</li><li><code>int port</code> ：服务器端口号<h5 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a><strong>成员方法</strong></h5></li></ul></li><li><code>OutputStream getOutputStream();</code> 返回此套接字的输出流</li><li><code>InputStream getInputStream():</code> 返回该套接字的输入流</li><li><code>void close();</code> 关闭此套接字<h5 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a><strong>实现方法</strong></h5></li></ul><ol><li>创建一个客户端对象Socket，构造方法绑定服务器的ip地址和端口号</li><li>使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象</li><li>使用网络字节输出流OutputStream对象中的方法write，给服务器发送数据</li><li>使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象</li><li>使用网络字节输入流InputStream对象中的方法read，读取服务器回写的数据</li><li>释放资源（Socket）</li></ol></li><li><p><strong>注意</strong>：</p><ul><li>客户端和服务端进行交互，必须使用Socket中提供的网络流，不能使用自己创建的流对象</li><li>当我们创建客户端对象Socket时，就会去请求服务器和客户端3次握手建立连接通信<ul><li>服务端没有启动，则抛出异常</li><li>服务端已经启动，可以进行交互</li></ul></li></ul></li><li><p>代码：</p><pre><code class="lang-java">public class TCPClient{    public static void main(String[] args) throws IOException{        Socket socket = new Socket(&quot;127.0.0.1&quot;,8888);//ip地址和端口号        OutputStream os = socket.getOutputStream();        os.write(&quot;你好服务器&quot;.getBytes());        InputStream is = socket.getInputStream();        byte[] bytes = new byte[1024];        int len = is.read(bytes);        System.out.println(new String(bytes,0,len));        socket.close();    }}</code></pre><h4 id="TCP服务端"><a href="#TCP服务端" class="headerlink" title="TCP服务端"></a>TCP服务端</h4><h5 id="表示服务端的类"><a href="#表示服务端的类" class="headerlink" title="表示服务端的类"></a><strong>表示服务端的类</strong></h5><ul><li><code>java.net.SreverSocket</code> 此类实现服务器套接字<h5 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h5></li><li><code>ServerSocket(int port)</code> 创建绑定特定端口的服务器套接字</li><li><strong><font color=red>服务器端必须知道是哪个客户端请求的服务器，使用accept方法获取请求的客户端对象Socket</font></strong><h5 id="服务器实现步骤"><a href="#服务器实现步骤" class="headerlink" title="服务器实现步骤"></a><strong>服务器实现步骤</strong></h5></li></ul><ol><li>创建一个服务端对象ServerSocket对象和系统指定的端口号</li><li>使用ServerSocket对象中的方法accept，获取到请求的客户端对象Socket</li><li>使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象</li><li>使用网络字节输入流InputStream对象中的方法read，读取客户端发送的数据</li><li>使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象</li><li>使用网络字节输出流OutputStream对象中的方法write，给客户端回写数据</li><li>释放资源（Socket，ServerSocket）</li></ol></li><li><p>代码:</p><pre><code class="lang-java">public class TCPServer{    Public static void main(String[] args) throws IOException{        ServerSocket server = new ServerSocket(8888);        Socket socket = server.accept();        InputStream is = socket.getInputStream();        byte[] bytes = new byte[1024];        int len = is.read(bytes);        System.out.println(new String(bytes,0,len));        OutputStream os = socket.getOutputStream();        os.write(&quot;收到谢谢&quot;.getbytes());        socket.close();        server.close();    }}</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础混合</title>
      <link href="/my-blog/Java/Java%E5%9F%BA%E7%A1%80%E6%B7%B7%E5%90%88/"/>
      <url>/my-blog/Java/Java%E5%9F%BA%E7%A1%80%E6%B7%B7%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="java基础混合"><a href="#java基础混合" class="headerlink" title="java基础混合"></a>java基础混合</h1><h2 id="01-成员变量与局部变量的区别"><a href="#01-成员变量与局部变量的区别" class="headerlink" title="01 成员变量与局部变量的区别"></a>01 成员变量与局部变量的区别</h2><div class="table-container"><table><thead><tr><th style="text-align:right">成员变量</th><th style="text-align:right">局部变量</th></tr></thead><tbody><tr><td style="text-align:right">在方法的外部，直接写在类中</td><td style="text-align:right">在方法的内部</td></tr><tr><td style="text-align:right">作用在整个类中</td><td style="text-align:right">只有方法当中可以使用，出了方法就不能使用</td></tr><tr><td style="text-align:right">若没有赋值，会存在默认值，与数组规则一致</td><td style="text-align:right">没有默认值，必须必须手动设置默认值</td></tr><tr><td style="text-align:right">位于堆内存中</td><td style="text-align:right">位于栈内存中</td></tr><tr><td style="text-align:right">随着对象创建而产生，随着对象被垃圾回收而消失</td><td style="text-align:right">随着方法进栈而产生，随着方法出栈而消失</td></tr></tbody></table></div><ul><li><p>代码案例：</p><pre><code class="lang-java">public class demo01{    String name ; //成员变量    public void partA(){        int num =15; //局部变量        System.out.println(num);        System.out.println(name);    }    public void partB(int c){//方法的参数就是局部变量    //参数在方法调用时，必然会被赋值    System.out.println(c);    int age;//局部变量，没赋值不可用    System.out.println(name);//可在partB中调用成员变量，但不能调用partA的局部变量num    }}</code></pre><h2 id="02-关于java修饰符的作用范围"><a href="#02-关于java修饰符的作用范围" class="headerlink" title="02 关于java修饰符的作用范围"></a>02 关于java修饰符的作用范围</h2></li></ul><div class="table-container"><table><thead><tr><th style="text-align:right">访问修饰符</th><th style="text-align:right">本类</th><th style="text-align:right">同包</th><th style="text-align:right">子类</th><th style="text-align:right">其他</th></tr></thead><tbody><tr><td style="text-align:right">private</td><td style="text-align:right">√</td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td style="text-align:right">default</td><td style="text-align:right">√</td><td style="text-align:right">√</td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td style="text-align:right">protected</td><td style="text-align:right">√</td><td style="text-align:right">√</td><td style="text-align:right">√</td><td style="text-align:right"></td></tr><tr><td style="text-align:right">public</td><td style="text-align:right">√</td><td style="text-align:right">√</td><td style="text-align:right">√</td><td style="text-align:right">√</td></tr></tbody></table></div><h2 id="03-this关键字"><a href="#03-this关键字" class="headerlink" title="03 this关键字"></a>03 this关键字</h2><ul><li><p>this<br>当方法的局部变量和类的成员变量重名的时候，采用“就近原则”，优先使用局部变量；<br>如果需要访问本类的成员变量，使用格式： this.成员变量名</p></li><li><p>关于this的知识</p><ul><li>通过谁调用的方法谁就是this</li><li>使用this可以区分成员变量和局部变量</li><li>this不能用于静态方法中（静态方法的对象已经实例化！）</li><li>在构造方法中使用时，必须置于构造方法的第一行</li></ul></li></ul><h2 id="04-构造方法"><a href="#04-构造方法" class="headerlink" title="04 构造方法"></a>04 构造方法</h2><ul><li>什么是构造方法？<br>构造方法是专门用来创建对象的方法，当我们通过关键字new来创建对象时，其实就是在调用构造方法</li><li>构造方法的格式<pre><code class="lang-java"> public 类名称(参数类型 参数名称){     方法体 }</code></pre></li><li><p><font color=red>注意：</font></p><ol><li>构造方法的名称必须和所在的类名称完全一样，大小写也必须一样</li><li>构造方法不要写返回值类型（void也不行）</li><li>构造方法不能return一个具体的返回值</li><li>如果没有编写任何构造方法，那么编译器会默认创建一个无参构造方法，方法体什么都不做</li><li>构造方法也可以进行重载（重载：方法名称相同，参数个数\顺序\类型不同）</li></ol><ul><li><p>代码展示：</p><pre><code class="lang-java">public class teacher{    private String name;    private int age;    //无其他任何构造方法创建时，会默认创建一个构造方法    public teacher(){    }    public teacher(){        //无参的构造方法        System.out.println(&quot;这是一个构造方法！&quot;);    }    public teacher(String name, int age ){        //有参的构造方法        this.name=name;        this.age= age;    }    //get/set构造器    public void setName(String name){        this.name= name;    }    public String getName(String name){        return name;    }    public void setAge(int age){        this.age= age;    }    public int getAge(int age){        return age;    }}</code></pre></li><li>一个标准的类所需的部分</li></ul><ol><li>所有的成员变量都需用private关键字修饰</li><li>为每一个成员变量编写getting\setting构造器</li><li>编写一个无参的构造方法</li><li>编写一个有参的构造方法</li></ol></li></ul><h2 id="05-Scanner类的使用"><a href="#05-Scanner类的使用" class="headerlink" title="05 Scanner类的使用"></a>05 Scanner类的使用</h2><ul><li><p>通过使用Scanner类，实现键盘输入功能</p></li><li><p>使用步骤：</p><ol><li>导包 <pre><code class="lang-java">import java.util.Scanner;</code></pre></li><li>创建对象<pre><code class="lang-java">Scanner s = new Scanner(System.in);//s为对象名</code></pre></li><li>使用对象<br>对象名.成员方法名<pre><code class="lang-java">int num = s.nextInt();//键盘输入一个整型，并赋值给num变量</code></pre></li></ol></li></ul><h2 id="06-匿名对象"><a href="#06-匿名对象" class="headerlink" title="06 匿名对象"></a>06 匿名对象</h2><ul><li><p>匿名对象的基本了解</p><ul><li>匿名对象就是只有右边的对象，没有左边的名字和赋值运输符</li></ul><p>new 类名();</p><pre><code class="lang-java">new person().name =&quot;大司马&quot;;new person().showName();//此时的匿名对象为全新的，不可引用上次的对象变量</code></pre><ul><li>匿名对象只能使用唯一的一次，下次在使用<font color=red>必须创建</font>一个新的对象</li><li>如果确定有一个对象只需使用唯一一次，则可以使用匿名对象</li></ul></li><li><p>键盘输入与传参</p><ul><li>使用匿名对象进行键盘输入<pre><code class="lang-java">int num = new Scanner(System.in).nextInt();System.out.println(num);</code></pre><ul><li>对比一般键盘输入<pre><code class="lang-java">Scanner sc = new Scanner(System.in);int num2= sc.nextInt();System.out.println(num2);</code></pre></li></ul></li><li>使用匿名对象传参<pre><code class="lang-java">public class demo01{  public static void main (String[] args){      methoddemo(new Scanner(System.in));  }  public static void methoddemo(Scanner sc){    int i = sc.nextInt();    System.out.println(i);  }}</code></pre></li><li>使用匿名对象用返回值键盘输入<pre><code class="lang-java"> public class demo01{  public static void main (String[] args){    Scanner sc = methodreturn();    int num = sc.nextInt();    System.out.println(&quot;输入的值为：&quot;+num);  }  public static void methodreturn){    return new Scanner(System.in);  }}</code></pre></li></ul></li></ul><h2 id="07-Random类"><a href="#07-Random类" class="headerlink" title="07 Random类"></a>07 Random类</h2><ul><li>Random类用来生产随机数字</li><li>使用步骤<ol><li>导包<pre><code class="lang-java">import java.util.Random;</code></pre>2.创建对象<pre><code class="lang-java">Random r = new Random();</code></pre>3.使用<pre><code class="lang-java">int num = r.nextInt();</code></pre></li></ol></li><li><p>有范围的生成随机数</p><pre><code class="lang-java">int n=5;Random r= new Random();int result = r.nextInt(n);//范围为[0,n)int result2 = r.nextInt(n)+1;//范围为[1,n+1)</code></pre><h2 id="08-字符串String类"><a href="#08-字符串String类" class="headerlink" title="08 字符串String类"></a>08 字符串String类</h2></li><li><p>String类概述</p><ul><li>java.lang.String类表示字符串</li><li>String类为<font color=red>final类型是不可修改</font>的，也<font color=red>不能被继承</font>，一旦创建了String对象，他的值就无法改变，如果需要对字符串进行修改，则需要使用StringBuffer或StringBuilder类</li></ul></li><li><p>字符串的特点</p><ul><li>字符串的内容永不改变</li><li>字符串可以共享使用</li><li>底层原理是byte[]字节数组</li></ul></li><li>三种创建方式<ol><li>使用无参构造，创建一个空字符串，无任何内容<pre><code class="lang-java">String str1 = new String();</code></pre></li><li>根据字符数组创建字符串<pre><code class="lang-java">Char[] chars = {&#39;A&#39;,&#39;B&#39;,&#39;C&#39;};String str2 = new String(charsnum);</code></pre></li><li>根据字节数组创建字符串<pre><code class="lang-java">byte[] bytesnum ={97,98,99};String str3 = new String(bytesnum);System.out.println(str3);//打印的是其字节码对应的字符</code></pre></li><li>直接创建（本质上也是创建了对象，只不过jvm帮你了！）<pre><code class="lang-java">String str4 = &quot;lesuit&quot;;</code></pre></li></ol></li><li><p>字符串比较</p><ul><li>‘==’ 是对对象的地址值进行比较，若比较其内容，可以使用public boolean equals(Object obj)进行比较</li><li>任何对象都能用object进行接收</li><li>equals方法具有对称性，a.equals(b)和b.equals(a)效果一样</li><li>比较的一个是常量一个是字符串时，字符串应该放在前面(“abc”.equals(Str))，否则会报错，出现空指针异常<br>例如：<br>```java<br>String str1 = “Hello”;<br>String str2 = “Hello”;<br>char[] arr = {‘H’,’e’,’l’,’l’,’o’};<br>String str3 = new String(arr);<br>String str4 = “hello”;</li></ul><p>System.out.println(str1.equals(Str2));//显然为true<br>System.out.println(str2.equals(Str1));//true<br>System.out.println(str1.equals(Str3));//true<br>System.out.println(str1.equals(Str4));//false</p><p>String str5 = “black”;<br>System.out.println(“black”.equals(str5));//true,推荐使用<br>System.out.println(str5.equals(“black”));//虽然也为true但会出现空指针异常<br>```</p></li><li><p>字符串的获取</p><ul><li><p>常用方法：</p><ol><li>public int length(),获取字符串当中含有字符的个数，获取字符串长度</li><li>public String concat(String str),将当前字符串和参数字符串拼接成为新的字符串</li><li>public char charAt(int index),获取指定索引位置的单个字符（从0开始）</li><li>public int indexOf(String str),查找参数字符串在本字符串中首次出现的位置，如果没有返回-1<br>```java<br>//获取字符串长度<br>int stringlen = “abcderfhijkouys”.length();<br>System.out.println(“字符串的长度：”+stringlen);<br>//拼接字符串<br>String str1 = “hello”; //hello<br>String str2 = “world”; //world<br>String str3 = str1.concat(str2); //helloworld </li></ol><p>//查找单个字符<br>String str4 = “hello”;<br>char ch = str4.charAt(1);<br>System.out.println(str4+”的第一个字符是”+ch);<br>//查找参数字符串在原字符串出现的第一次的索引位置<br>String str6 = “nothingisimpossiblenothing”;<br>int index = str6.indexOf(“ing”);<br>System.out.println(index);//4<br>```</p></li></ul></li><li>字符串的截取方法<ul><li>public String substring(int index)，截取从参数位置一直到字符串结尾，返回新的字符串</li><li>public String substring(int begin,int end),截取从begin开始end结束的字符串 [begin,end)<pre><code class="lang-java">String str1 = &quot;helloworld&quot;;String str2 = str1.substring(5);//worldstring str3 = str1.substring(3,6);//low</code></pre></li></ul></li><li>字符串的常用转换方法<ul><li>public char[] toCharArray(),将当前字符串拆分成字符数组作为返回值</li><li>public byte[] getBytes(),获取当前字符串底层的字节数组</li><li>public String replace(CharSequence oldString,CharSequence newString),将所有出现的原字符串替换为新字符串，返回替换之后的新字符串<pre><code class="lang-java">//转换为字符数组char[] chars = &quot;Hello&quot;.toCharArray();System.out.println(chars[0]); //HSystem.out.println(chars.length); //5//转换为字节数组byte[] bytes = &quot;abc&quot;.getBytes();for(int i = 0;i&lt;bytes.length,i++){System.out.println(byte[i]);}//内容替换String str1= &quot;what the fuck&quot;;Sting str2= str1.replace(&quot;fuck&quot;,&quot;****&quot;);System.out.println(str1);//what the fuckSystem.out.println(Str2);//what the ****</code></pre></li></ul></li><li>字符串分割方法<ul><li>public String[] split(String regex),按照参数的规则，将字符串切分成若干部分</li><li>split方法的参数其实是一个正则表达式，要按照“ . ”进行切分，必须写成”\.“<pre><code class="lang-java">String str1 =&quot;what a beautiful world&quot;;String[] arr1 = str1.split(&quot; &quot;);//逢遇到空格就切割形成新的字符串for(int i = 0; i&lt;arr1.length;i++){System.out.println(arr1[i]);}</code></pre></li></ul></li></ul><h2 id="09-Arrays工具类"><a href="#09-Arrays工具类" class="headerlink" title="09 Arrays工具类"></a>09 Arrays工具类</h2><ul><li>java.util.Arrays是一个与数组相关的工具类，里面提供了大量的静态方法，用来实现数组场景的操作</li><li>public static String toString(数组名),将参数数组变成字符串[元素1，元素二….]</li><li><p>public static void sort(数组名)，按照默认升序对数组的元素进行排序（若元素为数值，则sort默认升序；若元素为字符串，则sort默认按照字母升序，若为自定义类型，需要通过Comparable接口支持）</p><pre><code class="lang-java">int[] intArray = {10,20,45};String intStr = Arrays.toString(inArray);System.out.println(intstr);int[] arr1 = {1,5,89,63,12};Arrays.sort(arr1);System.out.println(Array.toString(arr1));String[] arr2 = {&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;};Arrays.sort(arr2);System.out.println(Arrays.toString(arr2));//倒序遍历String str = &quot;ahsdhancaciosihd&quot;;char[] chars = str.toCharArray();Arrays.sort(chars);for(int i =chars.length-1;i&gt;=0;i--){//IDEA快捷键：数组名.forr   System.out.println(chars[i]);}</code></pre></li></ul><h2 id="10-Math工具类"><a href="#10-Math工具类" class="headerlink" title="10 Math工具类"></a>10 Math工具类</h2><ul><li>java.util.Math类是数学相关的工具类，提供大量静态方法，完成与数学相关的操作<ul><li>public static double ads(double num)，获取绝对值</li><li>public static double ceil(double num),向上取整</li><li>public static double floor(double num),向下取整</li><li>public static long round(double num),四舍五入</li></ul></li></ul><h2 id="11-抽象类与抽象方法"><a href="#11-抽象类与抽象方法" class="headerlink" title="11 抽象类与抽象方法"></a>11 抽象类与抽象方法</h2><ul><li>抽象方法<br>就是加上abstract关键字，然后去掉大括号，直接分号结束</li><li>抽象类<br>抽象方法的所在类，必须是抽象类，在class前加abstract关键字</li><li><p>注意：</p><ul><li>不能直接创建new抽象类对象</li><li>必须用一个子类来继承抽象父类</li><li>创建子类对象时进行使用</li><li>抽象类不能创建对象，如果创建，编译无法通过而报错，只能创建其非抽象子类的对象（假设创建了抽象类的对象，调用了抽象类的方法，而抽象方法没有具体的方法体没有意义）</li><li>抽象类中，可以有构造方法，是供子类创建对象时初始化父类使用的（子类的构造方法中，有默认的super()，需要方法父类的构造方法）</li><li>抽象类中，不一定包含抽象方法，但是有抽象方法必定有抽象类（未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计）</li><li>抽象类的子类，必须重写抽象父类中所有的抽象方法<br>```java<br>public abstract class Person{<br>//抽象方法，无方法体<br>public abstract void eat();<br>//普通方法<br>public void eating(){</li></ul><p>}<br>}<br>```</p></li></ul><h2 id="12-接口（interface）"><a href="#12-接口（interface）" class="headerlink" title="12 接口（interface）"></a>12 接口（interface）</h2><ul><li><p>接口概述</p><ul><li>接口就是多个类的公共规范</li><li>接口是一种引用数据类型</li><li>接口都可以定义抽象方法</li><li>接口不能直接使用，必须有一个实现类来实现接口</li></ul></li><li><p>格式：<br>public abstract 返回值类型 方法名（参数列表）; </p></li><li><p>使用步骤</p><ul><li>public class 实现类名 implements 接口名{ }</li><li>接口的实现类必须重写接口的所有抽象方法（去掉abstract，加上方法体）</li><li>创建实现类对象，使用</li></ul></li><li>接口默认方法<ul><li>格式：<ul><li>public default 返回值类型 方法名（参数列表）{  }</li></ul></li><li>使用方法<ol><li>接口的默认方法，可以通过接口实现类对象直接调用</li><li>也可以被接口实现类进行覆盖重写</li></ol></li></ul></li><li>接口静态方法<ul><li>格式：<ul><li>public static返回值类型 方法名（参数列表）{  }</li></ul></li><li>使用方法<ul><li>通过接口名，直接调用其中的静态方法<ul><li>接口名.静态方法名（参数）;</li></ul></li></ul></li></ul></li><li>接口私有方法<ul><li>使用场景<ul><li>需要抽取一个公有方法，来解决两个默认方法之间代码重复的问题（公有方法不能让实现类使用）</li></ul></li><li>普通私有方法：解决多个默认方法之间重复代码问题<ul><li>private 返回值类型 方法名（参数）{  }</li></ul></li><li>静态私有方法：解决多个静态方法之间重复代码问题<ul><li>private static 返回值类型 方法名（参数）{  }  </li></ul></li></ul></li><li>接口的常量<ul><li>格式<ul><li>public static final 数据类型 常量名 = 数值；<pre><code class="lang-java">public static final int OUT_OF_BUSS = 12;</code></pre></li></ul></li></ul></li><li>关于常量<ul><li>可以省略 public static final</li><li>必须赋值</li><li>常量名必须大写，多个单词用下划线分隔开 </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各重点协议及帧格式详解</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%90%84%E9%87%8D%E7%82%B9%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%B8%A7%E6%A0%BC%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%90%84%E9%87%8D%E7%82%B9%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%B8%A7%E6%A0%BC%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="常见重点协议及帧格式"><a href="#常见重点协议及帧格式" class="headerlink" title="常见重点协议及帧格式"></a>常见重点协议及帧格式</h1><h2 id="01-nbsp-HDLC协议"><a href="#01-nbsp-HDLC协议" class="headerlink" title="01&nbsp;HDLC协议"></a>01&nbsp;HDLC协议</h2><h3 id="HDLC定义"><a href="#HDLC定义" class="headerlink" title="HDLC定义"></a>HDLC定义</h3><ul><li>HDLC 协议的全称是==高级链路控制协议（High Level Data Link Control）==，是一种在网上同步传输数据，<font color=blue>面向比特的数据链路层协议</font>，广泛用于公用数据网， <strong>支持全双工或半双工传输</strong> ，使用后退 N 帧 ARQ 流控方案。</li><li>HDLC 定义了 3 种类型的站（主站、从站、复合站），两种链路配置（不平衡配置、平衡配置），3种数据传输方式（NRM(正常响应模式)、ABM(异步平衡模式)、ARM(异步响应模式)）。<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3></li><li><font color=red>流量控制</font><h3 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h3></li></ul><ol><li>只支持点对点连接</li><li>只可工作与同步方式</li><li>不支持验证</li><li><p>不支持IP地址协商</p><h3 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h3><p><img data-src="https://s3.ax1x.com/2021/03/18/6g7Rfg.png" alt="hdlcxy"></p></li></ol><ul><li><strong>帧标志F</strong> ：<ul><li>HDLC 用一种特殊的位模式 <code>01111110</code> 作为标志以确定帧的边界，采用位填充技术来区分是标志字段还是数据字段，发送站的数据比特序列一旦发现 0 后有 5 个 1，则在第 7 位插入 0。</li></ul></li><li><strong>地址字段A</strong> :<ul><li>地址字段用于标识从站的地址，用在点对多点的链路中，地址通常是 8 位长。</li></ul></li><li><p><strong>控制字段C</strong> ：</p><ul><li>帧编号 N(S),捎带的肯定应答序号 N(R),PF 位，P 询问、F 终止</li></ul><p><img data-src="https://s3.ax1x.com/2021/03/18/6g7hlj.png" alt="czzd"></p></li><li><p><strong>帧校验序列FCS</strong> ：</p><ul><li>含有除标志字段之外的所有其他字段的校验和。通常使用 16 比特的 CRC-CCITT<br><br><script type="math/tex">G(x)=X^{16}+X^{12}+X^5+1</script>标准产生校验序列，有时也采用 CRC-32 产生 32 位的校序列。</li></ul></li></ul><h2 id="02-nbsp-X-25的帧格式及协议"><a href="#02-nbsp-X-25的帧格式及协议" class="headerlink" title="02&nbsp;X.25的帧格式及协议"></a>02&nbsp;X.25的帧格式及协议</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>X.25 是 CCITT 公布的<font color=blue>用于连接数据终端至分组交换数据网络</font>的推荐标准，==X.25是一个面向连接的接口==，采用虚电路传递数据分组至网络上的适当终点处。</li><li>在 X.25 的网络中，用户的计算机终端设备将与分组/拆装设备（PAD）连接，负责完成分割分组、寻址、重组装分组的工作，而不同的 X.25 网络之间则要使用 X.75 协议互联。</li><li>X.25 是一个基于分组交换技术构建的网络，分组交换本身是适于无连接业务的，要为用户提供面向连接的接口服务，则必须借助虚拟电路技术（VC），虚电路服务具有两种形式，一种是交换虚电路SVC一种是永久虚电路 PVC。</li><li>==最常见的 X.25 协议支持的最大传输速率为 64Kb/s。==<h3 id="服务的层级"><a href="#服务的层级" class="headerlink" title="服务的层级"></a>服务的层级</h3></li><li>OSI底3层：<font color=red>物理层、数据链路层、网络层（分层体系结构）</font></li></ul><h3 id="x-25三层结构"><a href="#x-25三层结构" class="headerlink" title="x.25三层结构"></a>x.25三层结构</h3><div class="table-container"><table><thead><tr><th style="text-align:center">X.25层次结构</th><th style="text-align:center">对应OSI层</th><th style="text-align:center">相应标准</th></tr></thead><tbody><tr><td style="text-align:center">分组层</td><td style="text-align:center">网络层</td><td style="text-align:center">X.25 PLP 通过建立虚拟连接，提供 <strong>点对点、面向连接服务</strong> 。X.25 PLP 层采用后退 N帧 ARQ 流控协议。<br>PLP 协议把用户数据分成一定大小的块 ，一般为 128 字节，再加上24位或32位的分组头组成数据分组</td></tr><tr><td style="text-align:center">链路访问层</td><td style="text-align:center">数据链路层</td><td style="text-align:center">使用平衡式链路访问规程 LAPB，LAPB 是源于 HDLC 的一种面向位的协议，实际上是平衡的异步方式类别下的 HDLC。LAPB 是 HDLC 的一个子集</td></tr><tr><td style="text-align:center">物理层</td><td style="text-align:center">物理层</td><td style="text-align:center">X.21，但可以使用 RS-232C 和 V.35 代替</td></tr></tbody></table></div><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li><strong>选择重发ARQ协议（有噪声环境双工）</strong> ：<ul><li>滑动窗口协议与自动请求重发技术的结合，当收到否定应答（NAK）时，只重发出错的帧。 <ul><li>$W_发=W_收\leq2^K-1$</li></ul></li></ul></li><li><strong>后退N帧ARQ协议（有噪声环境双工）</strong> ：<ul><li>滑动窗口协议与自动请求重发技术的结合，当收到否定应答（NAK）时，将从出错处重发已发出过的 N 个帧。==接收窗口 $W_收$$=1$ 同时, $W_收\leq2^K-1$（K为帧编号的位数）==</li></ul></li></ul><h2 id="03-nbsp-帧中继的帧格式"><a href="#03-nbsp-帧中继的帧格式" class="headerlink" title="03&nbsp;帧中继的帧格式"></a>03&nbsp;帧中继的帧格式</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li>帧中继是综合业务数字网络（ISDN）的一个产物，没有专门定义物理层接口（可以使用 X.21，V.35等接口协议）， </li><li><strong>帧中继在第二层建立虚电路</strong> ，因而第三层被简化掉了，FR 的帧层也比 HDLC 操作简单， ==只做检错，不再重传，没有滑动窗口式的流控，只有拥塞控制== ，把复杂的检错丢给高层去处理。</li><li>帧中继使用的核心协议是 LAPD，它比 LAPB 简单，省去了控制字段。帧中继是基于分组（帧）交换的透明传输，可以承载 IP 数据报；可提供面向连接的服务，支持交换虚电路（SVC）和永久虚电路（PVC）；帧长可变，长度可达 1600～4096 字节，可以承载各种局域网的数据帧；可以应付突发的数据传输，可以提供 2～45Mb/s 的数据率；<font color=red>帧中继不适于延迟较敏感的应用（音频和视频），无法保证可靠提交</font>。</li></ul><h3 id="帧中继格式"><a href="#帧中继格式" class="headerlink" title="帧中继格式"></a>帧中继格式</h3><p> <img data-src="https://s3.ax1x.com/2021/03/18/6g746s.png" alt="zzj"></p><ul><li><strong>标志字段</strong> ：LAPD 的帧头和帧尾都是一个字节的帧标志字段，编码为 01111110，与 HDLC 一样。</li><li><strong>地址字段</strong> ：<ul><li>==EA== ：地址扩展比特。该比特为 0 时表示地址向后扩展一个字节，为 1 时表示最后一个字节。</li><li>==C/R==：命令/响应比特。协议本身不使用这个比特，用户可以用这个比特区分不同的帧。</li><li>==FECN==：向前拥塞比特。若网络置该位为 1，则表示在帧的传送方向上出现了拥塞，该帧到达接收端后，接收方可根据此调整发送方的数据率。</li><li>==BECN==：向后拥塞比特。若网络置该位为 1，则表示在帧传送相反的方向上出现了拥塞，该帧到达发送端后，发送方可据此调整发送数据速率。</li><li>==DE==：优先丢弃比特。当网络发生拥塞时，DE 位置 1 的帧会优先丢弃。</li><li>==DLCI==：数据链路连接标识符。帧中继使用虚拟电路的方式提供面向连接的服务，在帧头中包括 DLCI字段，每个 DLCI 都标识一个虚电路，其中 DLCI0 用于信令传输。信息字段：信息字段长度可变，1600 是默认最大长度。帧校验序列：与 HDLC 相同。</li></ul></li></ul><h3 id="帧中继的拥塞控制"><a href="#帧中继的拥塞控制" class="headerlink" title="帧中继的拥塞控制"></a>帧中继的拥塞控制</h3><ul><li>在帧中继承载业务中，使用显式信令和隐式信令来避免拥塞的发生。显示信令利用 FECN 和 BECN 比特位置 1 来向端用户发出拥塞警告，以避免拥塞的发生。隐式信令是指上层协议对网络拥塞的监控，当网络开始丢帧时，上层协议就自动降低发送速率，以便网络从拥塞中恢复正常运行。帧中继还可以利用 CLLM（强化链路层管理）的方法，缓解拥塞。</li></ul><h2 id="04-nbsp-ATM问题"><a href="#04-nbsp-ATM问题" class="headerlink" title="04&nbsp;ATM问题"></a>04&nbsp;ATM问题</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><ul><li>ATM 是一种可以将局域网功能、广域网功能、语音、视频和数据，集成进一个统一的协议设计。</li><li>在 ATM 传输中，ATM 把用户数据组成 53B 的信元作为分组交换的信息单位，采用统计时分复用模式，提供面向连接的虚电路服务。ATM连接可以是点到点的连接，也可以是点到多点的连接，分为 PVC 和 SVC 两种虚电路。</li><li>ATM 通常是<font color=red>在光纤的基础上建立的</font>，==典型的数据速率为 155.5Mb/s==，因此它是不提供应答的，将少量的错误交给高层处理。</li><li>ATM的==目的是实现实时通信，对于偶然的信元错误是不重传的，对于要重传的信息由高层处理==</li></ul><h3 id="ATM分层结构"><a href="#ATM分层结构" class="headerlink" title="ATM分层结构"></a>ATM分层结构</h3><p>  <img data-src="https://s3.ax1x.com/2021/03/18/6g7vc9.png" alt="atmfc"></p><p>  <img data-src="https://s3.ax1x.com/2021/03/18/6gHp0x.png" alt="atmbg"></p><h3 id="ATM信元头结构"><a href="#ATM信元头结构" class="headerlink" title="ATM信元头结构"></a>ATM信元头结构</h3><p> <img data-src="https://s3.ax1x.com/2021/03/18/6gHPAK.png" alt="atmxyt"></p><ul><li><strong>流控标志（GFC）</strong> ：用于主机和网络之间的流控或优先级控制。 </li><li><strong>虚通路标识符（VPI）</strong> ：8 位（UNI）或 12 位（NNI），常用是 8 位，因此一个主机上的虚通路数 256个。</li><li><strong>虚信道标识符（VCI）</strong> ：16 位，理论上每个主机上的虚通路可以包含 65536 个虚信道，不过部分信道是用于控制的，并不传送用户数据。 </li></ul><blockquote><p>在 ATM 中，虚电路有两级：虚通路（VP）和虚信道（VC），虚通路是由多条虚信道捆绑在一起形成的。在 ATM 逻辑通道中，是使用 VPI+VCI 的组合来标识连接的，在做 VP 交换或交叉连接时，只需交换 VP，无需改变 VCI 的值。</p></blockquote><ul><li><strong>负载类型（PTI）</strong> ：区分不同的拥塞信息。</li><li><strong>信元丢失优先级（CLP）</strong> ：这一位用于区分信息的优先级，如果出现拥塞，交换机优先丢弃 CLP 被置1的信元。</li><li><strong>头校验和（HEC）</strong> ：它支队信元头进行校验，采用的是<script type="math/tex">X^8+X^2+X+1</script>的 8 位 CRC 校验。</li></ul><h2 id="05-nbsp-PPP帧格式"><a href="#05-nbsp-PPP帧格式" class="headerlink" title="05&nbsp;PPP帧格式"></a>05&nbsp;PPP帧格式</h2><p>  <img data-src="https://s3.ax1x.com/2021/03/18/6gHE1H.png" alt="ppp"></p><h2 id="06-nbsp-局域网帧格式"><a href="#06-nbsp-局域网帧格式" class="headerlink" title="06&nbsp;局域网帧格式"></a>06&nbsp;局域网帧格式</h2><p>  <img data-src="https://s3.ax1x.com/2021/03/18/6gHZjA.png" alt="jywzgs"></p><h2 id="07-nbsp-IPv4协议"><a href="#07-nbsp-IPv4协议" class="headerlink" title="07&nbsp;IPv4协议"></a>07&nbsp;IPv4协议</h2><h3 id="IPv4数据报格式"><a href="#IPv4数据报格式" class="headerlink" title="IPv4数据报格式"></a>IPv4数据报格式</h3><p>  <img data-src="https://s3.ax1x.com/2021/03/18/6gHMAf.png" alt="ipv4sjb"></p><ul><li><strong>版本号</strong> ：占 4 比特，指 IP 协议的版本，目前广泛使用 IPv4。 </li><li><strong>首部长度（IHL）</strong> ：IP 头长度，占 4 比特，最大值 15 个单位（1 个单位 4 字节）。</li><li><strong>服务类型</strong> ：该字段包括一个 3 比特的优先级子字段（现在已废弃不用），还包括一个 4 比特的 ToS子字段，最后 1 比特必须置 0。ToS 中的 4 比特分别代表：最小时延（D）、最大吞吐率（T）、最高可靠性（R）和最小费用（C）,只能有 1 比特置 1。如果所有 4 比特均为 0，那就是一般服务。 </li><li><strong>标识符</strong> ：由主机指定同样的标识符。当原主机对数据分段时，对同一上层协议数据单元划分出的各个数据报指定同样的标识符，目标主机上层协议用这个字段进行重装配。 </li><li><strong>标志</strong> ：包括三个标志位。一个标志位没有使用；M 标志用于分段和重装配；D 标志为禁止分段标志。</li><li><strong>段偏置值</strong> ：指明该段处于原来数据报中的位置，已 8 字节为单位。</li><li><strong>生存期（TTL）</strong> ：用经过的路由器个数表示，源站设置一个数（32 或 64），每经过一个路由器减 1。如果某个路由器发现 TTL 字段为 0，则丢弃该数据报，不再转发。</li><li><strong>协议</strong> ：上层协议（TCP 或 UDP）。</li><li><strong>头检验和</strong> ：对 IP 头的检验序列。</li><li><strong>任选数据</strong> ：可变长，包含发送者想要发送的控制数据。</li></ul><hr><h3 id="IP协议簇"><a href="#IP协议簇" class="headerlink" title="IP协议簇"></a>IP协议簇</h3><p>  <img data-src="https://s3.ax1x.com/2021/03/18/6gHl4S.png" alt="ipxyz"></p><h2 id="08-nbsp-ICMP协议"><a href="#08-nbsp-ICMP协议" class="headerlink" title="08&nbsp;ICMP协议"></a>08&nbsp;ICMP协议</h2><h3 id="ICMP定义"><a href="#ICMP定义" class="headerlink" title="ICMP定义"></a>ICMP定义</h3><ul><li>ICMP（Internet Control Message Protocol）与 IP 协议同==属于网络层==，封装在 IP 数据报中传输，传送有关网络层通信问题的信息。</li><li><p>ICMP 常见应用有：</p><ul><li>报告访问失效（报告源主机网络不可达）；</li><li>报告网络拥塞（发送源抑制报文给源主机，降低发送速率）；</li><li>帮助排错（利用 ICMP 回声功能，ping 工具）；</li><li>声明报文超时（TraceRoute 工具，利用较小的 TTL 值发现中间设备）。<h3 id="ICMP报文格式"><a href="#ICMP报文格式" class="headerlink" title="ICMP报文格式"></a>ICMP报文格式</h3></li></ul><p><img data-src="https://s3.ax1x.com/2021/03/18/6gHJjs.png" alt="icmpbw"></p></li></ul><h2 id="09-nbsp-TCP格式"><a href="#09-nbsp-TCP格式" class="headerlink" title="09&nbsp;TCP格式"></a>09&nbsp;TCP格式</h2><p> <img data-src="https://s3.ax1x.com/2021/03/18/6gHtun.png" alt="tcpgs"></p><h3 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h3><ul><li><strong>源端口和目的端口</strong> ：<ul><li>都是 <code>16</code> 个比特，分别表示发送方和接收方的端口号。==端口号和IP地址构成套接字(socket)地址的主要内容==。源端和目的端的套接字合起来唯一地表示一条连接。网络应用程序在通信时直接向套接字发送和接收数据。</li></ul></li><li><strong>序列号和确认号</strong> ：<ul><li>都是 <code>32</code> 位的无符号整数，可以表示 0-4G(232)字节的范围。其中，序列号表示数据部分第一个字节的序列号，而确认号表示该数据报的接收者希望对方发送的下一个字节的序号(即序号小于确认号的数据都已正确地被接收)。</li></ul></li><li><strong>头长度(HLEN)</strong> ：<ul><li>表示 TCP 报文头的长度。长度以 <code>32-bit</code> 为单位来计算。所以如果选项部分的长度不是 4 个字节的整数倍，则要加上填充(padding)。</li></ul></li><li><p><strong>保留域</strong> ：</p><ul><li>紧接在头长度字段后有 6 个比特，应该把它设置为 0。</li></ul><hr></li></ul><p><strong>再后则是6个标志位。标志位特定的含义：</strong> <br></p><ul><li><strong>URG(urgent)</strong> 为==紧急数据标志==。如果它为 1，则表示本数据报中包含紧急数据。此时紧急数据指针表示的值有效。它表示在紧急数据之后的第一个字节的偏侈值(即紧急数据的总长度)。</li><li><strong>ACK(acknowledge)</strong> 为==确认标志位==。如果 ACK 为 1，则表示报文中的确认号是有效的。否则，报文中的确认号无效，接收端可以忽略它。</li><li><strong>PSH(push)</strong> 标志位。被置位后，要求发送方的 TCP 协议软件马上发送该数据报，接收方在收到数据后也应该立即上交给应用程序，即使其接收缓冲区尚未填满。</li><li><strong>RST(reset)</strong> 标志位。用来复位一条连接。RST 标志置位的报文称为复位报文。一般情况下，如果 TCP收到的一个报文明显不是属于该主机上的任何个连接，则向远端发送一个复位报文。</li><li><strong>SYN(synchronous)</strong> 标志位。用来建立连接，让连接双方同步序列号。如果 SYN=1 而 ACK=0，则表示该数据报为连接请求，如 SYN=1 而 ACK=1 则表示是接受连接。</li><li><p><strong>FIN(finish)</strong> 标志位。表示发送方已经没有数据要传输了，希望释放连接。</p><hr></li><li><p><strong>窗口(window)字段</strong></p><ul><li>窗口表示的是从被确认的字节开始，==发送方最多可以连续发送的字节的个数==。接收方通过设置该窗口值的大小，可以调节源端发送数据的速度，从而实现流控。</li></ul></li><li><strong>校验和(checksum)域</strong><ul><li>是 TCP 协议提供的一种检错机制。与我们在前面的章节中学过的 UDP 协议类似，在计算校验和时不仅要计算 TCP 报文自身(报文头和数据)，还要增加一些额外的信息内容 – 12 个字节的“伪包头”。</li></ul></li></ul><h3 id="TCP三次握手过程"><a href="#TCP三次握手过程" class="headerlink" title="TCP三次握手过程"></a>TCP三次握手过程</h3><ul><li>TCP 采用三次握手过程建立连接，首先是发起方发送一个 SYN 标志置位的段，其中的发送顺序号为某个值 X，称为初始顺序号 ISN（Initial Sequence Number），接收方以 SYN 和 ACK 标志置位的段响应，其中的应答顺序号应为 X+1（表示期望从第 $X+1$ 个字节处开始接收数据），发送顺序号为某个值 Y（接收端指定的 ISN）。这个段到达发起端后，发起端以 ACK 标志置位，应答顺序号为 $Y+1$ 的段回答，连接就正式建立了，连接建立的同时发起方还可以发送数据。</li><li><p>TCP 采用的流控方式与数据链路层的流控方式不同，属于可变大小的滑动窗口协议，也叫信贷（Credit）滑窗协议，它更适合于两个相距遥远的主机在无连接的网络上实现流量控制。</p><p><img data-src="https://s3.ax1x.com/2021/03/18/6gH2Hx.png" alt="scwsgc"></p></li></ul><h2 id="10-nbsp-UDP格式"><a href="#10-nbsp-UDP格式" class="headerlink" title="10&nbsp;UDP格式"></a>10&nbsp;UDP格式</h2><p>  <img data-src="https://s3.ax1x.com/2021/03/18/6gHfUK.png" alt="udpbwgs"></p><h3 id="UDP报文格式"><a href="#UDP报文格式" class="headerlink" title="UDP报文格式"></a>UDP报文格式</h3><p><strong>源端口(Source Port)和目的端口(Destination Port)字段</strong></p><ul><li>包含了 16 比特的 UDP 协议端口号，它使得多个应用程序可以多路复用同一个传输层协议 – UDP 协议，仅通过不同的端口号来区分不同的应用程序。</li></ul><p><strong>长度(Length)字段</strong></p><ul><li>记录了该 UDP 数据包的总长度(以字节为单位)，包括 8 字节的 UDP 头和其后的数据部分。最小值是 8(即报文头的长度)，==最大值为65,535字节==。<br>UDP 检验和(Checksum)的内容超出了 UDP 数据报文本身的范围，实际上，它的值是通过计算 UDP 数据报及一个伪包头而得到的。但校验和的计算方法与通用的一样，都是累加求和。</li></ul><ul><li>所谓“伪首部”是因为这种伪首部并不是 UDP 用户数据报的真正首部。只是在计算检验和时，临时和UDP用户数据报连接在一起，得到一个过渡的 UDP 用户数据报。检验和就是按照这个过渡的 UDP 用户数据报来计算的。伪首部既不向下传送也不向上递交，而仅仅是为了计算检验和。</li></ul><h2 id="11-nbsp-IPv6报文格式"><a href="#11-nbsp-IPv6报文格式" class="headerlink" title="11&nbsp;IPv6报文格式"></a>11&nbsp;IPv6报文格式</h2><p> <img data-src="https://s3.ax1x.com/2021/03/18/6gHI8e.png" alt="ipv6bwgs"></p><h3 id="IPv6数据报格式"><a href="#IPv6数据报格式" class="headerlink" title="IPv6数据报格式"></a>IPv6数据报格式</h3><ul><li>IPv6 包头==长度固定为 40 字节==，去掉了 IPv4 中一切可选项，只包括 8 个必要的字段，因此尽管 <font color=red>IPv6地址长度为 IPv4 的四倍，IPv6 包头长度仅为 IPv4 包头长度的两倍</font>。</li></ul><p><strong>其中的各个字段分别为：</strong> </p><ul><li><strong>Version（版本号）</strong> ：<ul><li>==4 位==，IP 协议版本号，值=6。</li></ul></li><li><strong>Traffice Class（通信类别）</strong> ：<ul><li>==8 位==，指示 IPv6 数据流通信类别或优先级。功能类似于 IPv4 的服务类型（TOS）字段。</li></ul></li><li><strong>Flow Label（流标记）</strong> ：<ul><li>==20 位==，IPv6 新增字段，标记需要 IPv6 路由器特殊处理的数据流。该字段用于某些对连接的服务质量有特殊要求的通信，诸如音频或视频等实时数据传输。在 IPv6 中，同一信源和信宿之间可以有多种不同的数据流，彼此之间以非“0”流标记区分。如果不要求路由器做特殊处理，则该字段值置为“0”。</li></ul></li><li><strong>Payload Length（负载长度）</strong> ：<ul><li>==16 位负载长度==。负载长度包括扩展头和上层 PDU，16 位最多可表示65535 字节负载长度。超过这一字节数的负载，该字段值置为“0”，使用扩展头逐个跳段（Hop-by-Hop）选项中的巨量负载（Jumbo Payload）选项。</li></ul></li><li><strong>Next Header（下一包头）</strong> ：<ul><li>==8 位==，识别紧跟 IPv6 头后的包头类型，如扩展头（有的话）或某个传输层协议头（诸如 TCP，UDP 或着 ICMPv6）。</li></ul></li><li><strong>Hop Limit（跳段数限制）</strong> ：<ul><li>==8 位==，类似于 IPv4 的 TTL（生命期）字段。与 IPv4 用时间来限定包的生命期不同，IPv6 用包在路由器之间的转发次数来限定包的生命期。包每经过一次转发，该字段减 1，减到 0 时就把这个包丢弃。</li></ul></li><li><strong>Source Address（源地址）</strong> ：<ul><li>==128 位==，发送方主机地址。</li></ul></li><li><strong>Destination Address（目的地址）</strong> ：<ul><li>==128 位==，在大多数情况下，目的地址即信宿地址。但如果存在路由扩展头的话，目的地址可能是发送方路由表中下一个路由器接口。</li></ul></li><li><p><strong>扩展首部</strong> ：</p><ul><li>IPv6 包头设计中对原 IPv4 包头所做的一项重要改进就是将所有可选字段移出 IPv6 包头，置于扩展头中。由于除 Hop-by-Hop 选项扩展头外，其他扩展头不受中转路由器检查或处理，这样就能提高路由器处理包含选项的 IPv6 分组的性能。</li></ul><hr></li></ul><blockquote><p>通常，一个典型的 IPv6 包，没有扩展头。仅当需要路由器或目的节点做某些特殊处理时，才由发送方添加一个或多个扩展头。与 IPv4 不同，IPv6 扩展头长度任意，不受 40 字节限制，以便于日后扩充新增选项，这一特征加上选项的处理方式使得 IPv6 选项能得以真正的利用。 但是为了提高处理选项头和传输层协议的性能，扩展头总是 8 字节长度的整数倍。</p><p>目前，RFC 2460 中定义了以下 6 个 IPv6 扩展头：Hop-by-Hop（逐个跳段）选项包头、目的地选项包头、路由包头、分段包头、认证包头和 ESP 协议包头。</p></blockquote><hr><h3 id="从-IPv4-向-IPv6-过渡的策略"><a href="#从-IPv4-向-IPv6-过渡的策略" class="headerlink" title="从 IPv4 向 IPv6 过渡的策略"></a>从 IPv4 向 IPv6 过渡的策略</h3><p><strong>两种向 IPv6 过渡的策略，即使用双协议栈和隧道技术</strong></p><ul><li>==双协议栈(dual stack)== 是指在完全过渡到IPv6 之前，使一部分主机（或路由器）装有两个协议栈，一个 IPv4 和一个 IPv6。因此双协议栈主机（或路由器）既能够和 IPv6 的系统通信，又能够和 IPv4 的系统进行通信。双协议栈的主机（或路由器）记为IPv6/ IPv4，表明它具有两种 IP 地址：一个 IPv6 地址和一个 IPv4 地址。</li><li>==隧道技术（tunneling）==。这种方法的要点就是在 IPv6 数据报要进入 IPv4 网络时，将 IPv6 数据报封装成IPv4 数据报（整个的 IPv6 数据变成了 IPv4 数据报的数据部分）。然后 IPv6 数据报就在 IPv4 网络的隧道中传输。当 IPv4 的数据报离开 IPv4 网络中的隧道时再将其数据部分（即原来的 IPv6 数据报）交给主机的 IPv6 协议栈。</li></ul><h1 id="网络新技术总结"><a href="#网络新技术总结" class="headerlink" title="网络新技术总结"></a>网络新技术总结</h1><h2 id="01-nbsp-IP交换技术"><a href="#01-nbsp-IP交换技术" class="headerlink" title="01&nbsp;IP交换技术"></a>01&nbsp;IP交换技术</h2><ul><li><p>所谓 IP 交换技术是指==利用第二层交换技术传送 IP 分组的一组协议和机制==，它<font color=blue>利用交换机的高带宽和低延迟优势</font>尽可能快地传送分组通过网络。由于 IP 是无连接的协议，对每个分组都必须单独选择路由，因此路由器的转发速度是比较慢的。IP 交换的目的是在快速交换硬件上获得最有效的 IP 实现，并非连接的 IP 和面向连接的 ATM 的优点互补。Ipsilon 公司开发的 IP 交换机提供了快捷通道（<code>Cut Through</code>），使得 IP 路由器的转发能力提高了 5 倍。IP 交换机之间的信令使用流管协议 IFMP（<code>Ipsilon Flow Management Protocol</code>）和通用交换机管理协议 GSMP（<code>General Switch Management Protocol</code>）。</p><ul><li>IFMP（RFC1953）的功能是建立结点间之间的邻接关系，并把一个第二层标记绑定到一个特殊的 IP 数据流上。==所谓“流”，是指具有相同源地址和目标地址、共同的上层协议（UDP、TCP）和服务类型的一个分组序列== 。利用标记可以实现对 IP 流进行分类，并更有效地访问有关数据流的路由信息，带有标记的分组无需经过后继结点的第三层转发，而是通过第二层交换快速传输。IFMP 报文包装在 IPv4 分组中广播出去。</li><li>GSMP（RFC1987）是一个通用的 ATM 交换机控制协议。GSMP 的功能是建立和释放连接，在组播通信中增加和删除叶子节点，管理交换机的端口，获取配置信息和统计数据等。可变长度的 GSMP 报文封装在 AAL5协议数据单元中。<br><br></li></ul></li><li><p>IP 交换的转发过程：一个流一旦被识别出来，IP 交换机就通知上游的结点使用新的虚电路（VC）传送这个流，同样的信令也会从下游结点传送过来。当 IP 流通过指定的 VC 传送时，就不再通过路由表转发，而是直接使用 ATM 交换硬件进行处理，同时把第二层标记附加在每个分组的头部，以便加快路由缓冲区的查找。</p></li><li><strong>一台IP交换机主要由三个模块组成：ATM交换模块、IP交换控制器和专用的管理协议组成。</strong></li></ul><h2 id="02-nbsp-MPLS：Multi-Protocol-Label-Switching"><a href="#02-nbsp-MPLS：Multi-Protocol-Label-Switching" class="headerlink" title="02&nbsp;MPLS：Multi-Protocol Label Switching"></a>02&nbsp;MPLS：Multi-Protocol Label Switching</h2><h3 id="MPLS定义"><a href="#MPLS定义" class="headerlink" title="MPLS定义"></a>MPLS定义</h3><ul><li><strong>MPLS（多协议标签转换技术）</strong> 是一种可以在多种第二层媒质上进行标记交换的网络技术。这一技术结合了第二层的交换和第三层路由的特点，将第二层的基础设施和第三层的路由有机地结合起来。第三层的路由在网络的边缘实施，而在 MPLS 的网络核心采用第二层交换，==可见MPLS相当于2.5层协议==。</li><li><p>MPLS 通过在每一个节点的标签交换来实现包的转发。它不改变现有的路由协议，并可以在多种第二层的物理媒质上实施，目前有 ATM、FR(帧中继)、Ethernet 以及 PPP 等媒质。</p><hr></li><li><p>通过 MPLS，第三层的路由可以得到第二层技术的很好补充，充分发挥第二层良好的流量设计管理以及第三层 <code>“Hop-By-Hop（逐跳寻径）”</code>路由的灵活性，以实现端到端的 QoS 保证。</p></li><li>MPLS 作为 <strong>一种分类转发技术</strong> ，将具有相同转发处理方式的分组归为一类，称为转发等价类 FEC（<code>Forwarding Equivalence Class</code>）。相同转发等价类的分组在 MPLS 网络中将获得完全相同的处理。转发等价类的划分方式非常灵活，可以是源地址、目的地址、源端口、目的端口、协议类型、VPN 等的任意组合。例如，在传统的采用最长匹配算法的 IP 转发中，到同一个目的地址的所有报文就是一个转发等价类。</li><li><p><strong>标签</strong> 是一个长度固定、只具有本地意义的短标识符，用于唯一标识一个分组所属的转发等价类 FEC。在某些情况下，例如要进行负载分担，对应一个 FEC 可能会有多个标签，但是一个标签只能代表一个 FEC。标签由报文的头部所携带，不包含拓扑信息，只具有局部意义。标签的长度为 4 个字节。</p><hr></li><li><p>MPLS 是一种特殊的转发机制，它为进入网络中的 IP 数据包分配标记，并通过对标记的交换来实现 IP数据包的转发。标记作为 IP 包头在网络中的替代品而存在，在网络内部 MPLS 在数据包所经过的路径沿途通过交换标记(而不是看 IP 包头)来实现转发；当数据包要退出 MPLS 网络时，数据包被解开封装，继续按照 IP 包的路由方式到达目的地。</p><p><img data-src="https://s3.ax1x.com/2021/03/18/6gHbDI.png" alt="pct"></p></li></ul><blockquote><p>如图所示，MPLS 网络包含一些基本的元素。在网络边缘的节点就称做标记边缘路由器(LER)，而网络的核心节点就称做为标记交换路由器(LSR)。LER 节点在 MPLS 网络中完成的是 IP 包的进入和退出过程；LSR节点在网络中提供高速交换功能。在 MPLS 节点之间的路径就叫做标记交换路径。一条 LSP 可以看做是一条贯穿网络的单向隧道。</p></blockquote><h3 id="MLPS相关术语"><a href="#MLPS相关术语" class="headerlink" title="MLPS相关术语"></a>MLPS相关术语</h3><ul><li><strong>LDP</strong> （<code>Label Distribution Protocol</code>），标记分配协议</li><li><strong>LSP</strong> （<code>Label Switched Path</code>），标记交换路径</li><li><strong>FEC</strong> （<code>Forwarding Equivalence Class</code>），转发等价类</li><li><strong>LSR</strong> （<code>Label Switching Router</code>），标记交换路由器</li><li><strong>LER</strong> （<code>Label Edge Router</code>），标记边缘路由器</li><li><strong>CR-LDP</strong> （<code>Constraint Route Label Distribution Protocol</code>），限制路由的标记分配协议</li></ul><h2 id="03-nbsp-DQDB-网分布式队列双总线协议"><a href="#03-nbsp-DQDB-网分布式队列双总线协议" class="headerlink" title="03&nbsp;DQDB 网分布式队列双总线协议"></a>03&nbsp;DQDB 网分布式队列双总线协议</h2><ul><li><p>IEEE802.6 城域网采用了分布式队列双总线（<code>Distributed Queue Dual Bus, DQDB</code>）协议。这种双总线一般采用光纤介质，如图所示，在这种配置中，每个站同时连接到两根总线上。一个站要发送数据时必须选择一根总线，使接收站成为它的下游站。</p><p><img data-src="https://s3.ax1x.com/2021/03/18/6gHXUf.png" alt="dbqb"></p></li></ul><blockquote><p>图中的黑圆点表示 A 总线和 B 总线的端头，它们不停地产生固定长度为 53 字节的时槽。当时槽沿沿着总线流动到达末端时由终端匹配器（黑方块）吸收。结点可以从忙时槽中读数据，也可以向空时槽中写数据。总线的运行由周期为 125μs 的时钟控制，一个时钟周期内端头可以产生多个时槽，时槽数量决定了总线的实际速率。</p></blockquote><ul><li><p>时槽分为两类，一类叫作排队仲裁（Queue-Arbitrated）时槽，用 QA 表示，用于分组交换业务；另一类叫作预仲裁（Pre-Arbitrated）时槽，用 PA 表示，由电路交换业务使用，可提供等时服务。时槽由 1个控制字节和 52 字节长的段组成，段头 4 字节，信息实际占 48 字节。</p></li><li><p>DQDB 是一个很有效的协议，可与 802.3 和 802.5 媲美。在重负载下，CD 的值很小，甚至为 0，空时槽是很富裕的。这样就像 CSMA/CD 协议一样，可以很快的访问信道，几乎没有延迟。在重负载下，实际上每个时槽都被等待发送的站利用，信道利用率达到 100％，性能 一点不比令牌环网差。轻负载下的快速访问和重负载下可预见的排队系统的奇妙结合使得 DQDB 成为最适合 MAN 的协议。</p></li></ul><h2 id="03-nbsp-LANE：LAN-Emulated"><a href="#03-nbsp-LANE：LAN-Emulated" class="headerlink" title="03&nbsp;LANE：LAN Emulated"></a>03&nbsp;LANE：LAN Emulated</h2><ul><li>ATM 论坛开发了 ATM LAN 仿真标准（LAN Emulated, LANE），用以解决不同局域网上的端系统相互作用问题，使得现有的共享介质网络上的主机也可以通过 ATM 网络进行通信。ATM-LAN 转换器对 ATM 信源流和MAC 帧进行转换。ATM 论坛提议使用 AAL5 对 MAC 帧进行分段和重装配。<br><br></li></ul><p><strong>在概念上LANE结构包括客户机和服务器两种成分</strong> ：</p><ul><li>LAN 仿真客户机（LEC）:是指传统的网络设备，它按照原有的 MAC 协议进行操作，并具有唯一的ATM 地址。例如 LAN 交换机就可以被看成 LEC，它有一个 ATM 地址，同时又通过各个端口访问对应的 MAC网卡。</li><li>LAN 仿真服务器（LES）:具有唯一的 ATM 地址，它提供控制功能，处理 LEC 的连接请求，并为它管理的一组 LEC 建立 MAC 地址与 ATM 地址的映像表。</li><li>LAN 仿真配置服务器（LECS）:其作用是根据配置数据库的信息和 LEC 的请求把 LEC 分配个特定的LES，每个管理域中只有一个 LECS。</li><li>广播和未知服务器（BUS）：第一个作用是实现广播和组播的传输，所有目标地址为广播地址（全 1）的数据帧都被发送给 BUS 传送。它的另外一个作用是利用广播功能实现未知地址的解析，即建立 ATM 地址与 MAC 地址的映像。</li></ul><h1 id="几个重要的认证方式"><a href="#几个重要的认证方式" class="headerlink" title="几个重要的认证方式"></a>几个重要的认证方式</h1><h2 id="01-nbsp-SSL认证过程"><a href="#01-nbsp-SSL认证过程" class="headerlink" title="01&nbsp;SSL认证过程"></a>01&nbsp;SSL认证过程</h2><p> <img data-src="https://s3.ax1x.com/2021/03/18/6gbibq.png" alt="sslrz"></p><ul><li><strong>安全套接字协议</strong> SSL（<code>Secure Socket Layer</code>）==工作在应用层和传输层之间==，==提供身份认证和保密通信功能==。<ul><li>SSL 所包含的协议有 SSL 握手协议、SSL 修改密文协议、SSL 警告协议和 SSL 记录协议。<ul><li>SSL 握手协议负责身份认证和密钥生成。</li><li>SSL 记录协议负责接收应用层报文，并将数据划分成可管理的块（214 个字节），选择性地压缩数据，应用报文认证码（MAC）对数据进行加密，并增加首部，通过 TCP 报文段传输数据；接收者将数据进行解密、验证、解压，重装配成应用报文，然后交付更高级的用户。</li></ul></li></ul></li></ul><p><br></p><ul><li>在客户端与服务器间传输的数据是通过使用对称算法（如 DES 或 RC4）进行加密的。公用密钥算法（通常为 RSA）是用来获得加密密钥交换和数字签名的，此算法使用服务器的SSL数字证书中的公用密钥。有了服务器的 SSL 数字证书，客户端也可以验证服务器的身份。SSL 协议的版本 1 和 2 只提供服务器认证。版本 3 添加了客户端认证，此认证同时需要客户端和服务器的数字证书。</li></ul><p><br></p><ul><li>SSL 安全连接 ==建立在TCP443端口== ，统一资源定位器使用 <code>HTTPS://开头</code>。</li></ul><h2 id="02-nbsp-Kerberos-认证"><a href="#02-nbsp-Kerberos-认证" class="headerlink" title="02&nbsp;Kerberos 认证"></a>02&nbsp;Kerberos 认证</h2><p> <img data-src="https://s3.ax1x.com/2021/03/18/6gbkV0.png" alt="kdc"></p><p><strong>整个流程大体上包含以下3个子过程</strong> ：</p><ol><li>Client 向 KDC 申请 TGT（<code>Ticket Granting Ticket</code>）。</li><li>Client 通过获得 TGT 向 KDC 申请用于访问 Server 的 Ticket。</li><li>Client 最终向为了 Server 对自己的认证向其提交 Ticket。</li></ol><h2 id="03-nbsp-WLAN接入认证方式"><a href="#03-nbsp-WLAN接入认证方式" class="headerlink" title="03&nbsp;WLAN接入认证方式"></a>03&nbsp;WLAN接入认证方式</h2><ul><li>WLAN 开放的传输介质使得只要符合协议要求的无线系统均可能在信号覆盖范围内收到所有信息，为达到和有线网络同等的安全性能，IEEE802.11 采取了认证和加密措施。</li><li>认证程序控制 WLAN 接入的能力，这一过程被所有无线终端用来建立自己的合法接入到 AP 的身份标志，如果 AP 和工作站之间无法完成相互间的认证，那么它们之间就不能建立有效的连接。==IEEE802.11协议支持多个不同的认证过程，并且允许认证方案扩充==。</li><li>==IEEE802.11提供的加密方式采用WEP机制== ，WEP 对数据的加密和解密使用同样的算法和密钥。它包括“共享密钥”认证和数据加密两个过程。“共享密钥”认证使得那些没有正确 WEP 密钥的用户无法访问网络，而加密则要求网络中所有数据的发送和接收都必须使用密钥加密。</li><li>认证采用了一个标准的询问和响应帧格式。执行过程中，AP 根据 RC4 算法运用共享密钥对 128 字节的随机序列进行加密后作为询问帧发给用户，用户将收到的询问帧进行解密后以正文形式响应 AP,AP 将正文与原始序列进行比较，如果两者一致，则通过认证。</li></ul><h1 id="路由协议总结"><a href="#路由协议总结" class="headerlink" title="路由协议总结"></a>路由协议总结</h1><div class="table-container"><table><thead><tr><th style="text-align:center">协议名称</th><th style="text-align:center">协议概述</th><th style="text-align:center">报文类型</th><th style="text-align:center">传输协议</th><th style="text-align:center">维护与更新</th><th style="text-align:center">路由配置要点</th></tr></thead><tbody><tr><td style="text-align:center"><strong>BGP-4</strong></td><td style="text-align:center">BGP是一种不同自治系统的路由器之间进行通信的==外部网关协议==。BGP 的==主要功能是控制路由策略==，BGP 系统与其他BGP系统之间交换网络可到达信息。这些信息包括数据到达这些网络所必须经过的自治系统 AS 中的所有路径。这些信息足以构造一幅自治系统连接图。然后，可以根据连接图删除选路环，制订选路策略。==BGP是一个距离向量协议。支持无类别的域间路由（CIDR）==</td><td style="text-align:center">1.建立（open）：建立邻居关系 <br>2. 保持活动状态（ keepalive ）： 对open 报文的应答/周期的确认邻居关系<br>3.更新：发送新的路由信息<br>4.通告：报告检测到的错误</td><td style="text-align:center">BGP 邻居之间通过TCP 连接交换路由信息， <strong>使用端口号为179</strong></td><td style="text-align:center">BGP 通过定期发送<code>keepalive</code>报文给其邻站来检测TCP连接对端的链路或主机失败。初始连接建立时要发送全部路由信息，以后只发送改变了的路由信息。BGP 路由器不需要进行周期性路由更新。</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>RIP</strong></td><td style="text-align:center">RIP 协议的全称是 ==路由信息协议==，它是==一种内部网关协议（IGP）==，用于一个自治系统（AS）内的路由信息的传递。==RIP协议是基于距离矢量算法（Bellman-ford）的==，它使用“跳数”，衡量到达目标地址的路由距离。RIP 使用非常广泛，简单可靠便于配置。==RIPv2支持CIDR、VLSM 和不连续子网==，使用组播地址（224.0.0.9）而不是广播传播路由更新报文，并且采用了触发更新机制来加速路由收敛。==RIPv2支持认证==，使用经过散的口令字来限制更新信息的传播。==RIP只适用小型同构网络，允许的最大跳数为 15，任何超过 15 个站点的目的地均被标记为不可达==。</td><td style="text-align:center"></td><td style="text-align:center">RIP 使用 UDP 作为其传输层协议， <strong>端口为520</strong></td><td style="text-align:center">==RIP的更新是经过定时广播实现的== ，在默认情况下，==路由器每隔30秒向相联的网络广播自己的路由表==，收到广播的路由器将收到的信息添加到自身的路由表，每个路由器都如此广播，最终网络上的路由器将得知全网的路由信息。<br>正常情况下，==路由器每50秒就可以得到一条路由的信息确认==，==经过180秒6个更新周期一个路由项没有被确认，路由器就认为该路由器失效，若经过240秒路由项没有得到确认，就将该由器从路由表中删除==。</td><td style="text-align:center"><code>router rip network network</code> (相连网络，即相连的网段号) <br> <code>version 1/2</code><br> <code>show ip route rip</code> <br> <code>no logging console</code> (防止大量端口状态变化和报警信息对配置过程的影响)</td></tr><tr><td style="text-align:center"><strong>IGRP</strong></td><td style="text-align:center">==内部网关路由协议（IGRP）== 是Cisco 公司 20 世纪 80 年代开发的，是==一种动态的、长跨度（最大可支持255跳）的路由协议==，使用度量（向量）来确定到达一个网络的最佳路由，由延时、带宽、可靠性和负载等来计算最优路由，它在同个自治系统内具有高跨度，适合复杂的网络，==但本质上讲，IGRP还是一种距离矢量路由协议。== Cisco IOS 允许路由器管理员对IGRP的网络带宽、延时、可靠性和负载进行权重设置，以影响度量的计算。==IGRP不支持VLSM和不连续子网==。</td><td style="text-align:center"></td><td style="text-align:center">IGRP 使用 UDP 发送路由表项</td><td style="text-align:center">默认情况下，==IGRP路由器每隔90s更新一次路由信息，如果 270s 内没有收到某路由器的回应，则认为该路由器不可到达；如果630s内仍未收到应答，则 IGRP 进程将从路由表中删除该路由==。</td><td style="text-align:center"><code>router igrp AS number</code> ( 创建 IGRP 路由进程)<br> <code>network network</code> (相连网络)<br> <code>clockrate</code> (DCE端串口配置时钟信号，用于同步) <br> <code>bandwidth</code>  (指定相应端口带宽) <br> <code>bandwidth</code> (指定相应端口带宽) <br><code>show ip route igrp</code></td></tr><tr><td style="text-align:center"><strong>OSPF</strong></td><td style="text-align:center">==开放式最短路径优先（OSPF）是一种链路状态选择协议== ，是由 IETF开发的内部网关路由协议，==基于Dijkstra算法== 。OSPF 的链路状态信息通过链路状态公告（LSA）发布到网上的每台路由器，每台路由器通过 LSA 建立一个关于网络的拓扑数据库。在一个区域（Area）中的路由器（区域边界路由器除外），都应具有相同的链路状态数据库。==OSPF是一种层次化的路由选择协议== ，区域 0（也称主干区域）是 OSPF 网络中必须具有的区域，其他所有区域要求与区域 0 互连到一起。 ==OSPF采用触发更新，支持VLSM及CIDR，对跳数没有限制==</td><td style="text-align:center">1.Hello 数据包：用于建立和维护邻居关系，在广播网络中Hello 分组还用于动态发现邻居路由器。<br>2.链路状态更新数据包：向邻居路由器发送链路状态公告（LSA）<br>3.链路状态应答数据包：对链路状态更新数据包的应答<br>4.数据库描述数据包：描述一个路由器OSPF链路状态数据库的内容<br>5.链路状态请求数据包：请求相邻路由器发送其链路数据库中的具体条目</td><td style="text-align:center">OSPF 路由信息利用 IP 数据报直接传送，IP 数据报的报头中“协议”字段的值为 89 （即 <strong>协议号为 89</strong> ）</td><td style="text-align:center">OSPF路由器以 ==固定的时间间隔== ，通常为 10 秒，发送Hello数据包建立和维护邻居路由器间的关系。如果 40 秒没有从特定邻居收到 Hello 分组，路由器就认为那个邻居不存在了，并且产生声明该邻居丢失的 LSA。Hello定时器的值可以改变，但是在一个网段中所有路由器的定时器必须保持一致，在稳定状态下，大的链路状态更新分组 30分钟才传送一次。每一个区域都具有该区域专用的链路状态数据库。一个区域的网络拓扑结构在区域外是不可见的。同样，每一个区域内路由器对区域外的网络结构也不了解，也就是说，区域内的LSA广播被区域边界挡住了，这样就减少了网络中的广播数据包，也减少了链路状态数据库的大小。随着区域概念的引入，AS 内的所有路由器不再具有相同的链路状态数据库，而是只具有所在区域的链路状态数据库。区域边界路由器则具有与其相连的所有区域的链路状态数据库。</td><td style="text-align:center"><code>router ospf process-id</code> (指定使用 OSPF 协议，进程号只在路由器内部起作用，不同路由器的进程号可以不同) <br><code>network address wildcard-mask</code> <br> <code>area area-id</code> (指定与该路由器相连的网络，区域号为十进制数，0 为主干区域) <br> <code>show ip route</code><br><code>show ip route ospf</code></td></tr><tr><td style="text-align:center"><strong>EIGRP</strong></td><td style="text-align:center">EIGRP 是 ==增强型的IGRP协议== ，是典型的平衡混合路由选择协议，融合了距离矢量和链路状态两种路由选择协议的优点， ==使用弥散修正算法（DUAL）快速收敛== ，采用不定期更新（触发更新）以减少带宽消耗。==EIGRP支持VLSM及不连续子网。EIGRP最大的跳数限制为 224== 。支持对自动路由汇总功能的设定，支持多种网络层协议，支持 IP、IPX、AppleTalk、Novell 等。</td><td style="text-align:center">1.hello 包：用于邻居发现与恢复，组播方式发送（224.0.0.10）<br>2.更新包：当路由器发现新邻居时使用更新包（单播）<br>3.确认包：对更新包的确认 <br>4.查询包：当 EIGRP路由器想从特定邻居或所有邻居那里获得特定的信息，EIGRP路由器使用查询包（单播或多播）<br>5.响应包：对查询包的响应</td><td style="text-align:center">EIGRP使用RTP（可靠的传输层协议）传输数据包， ==不依赖TCP/IP协议。RTP支持多播、组播和单播==</td><td style="text-align:center">EIGRP 通过使用 hello 数据包与邻居路由器建立联系，缺省情况下，hello数据包每间隔5秒发送一次。</td><td style="text-align:center"><code>router eigrp AS number</code> ( 创 建EIGRP 路由进程)<br> <code>network address wildcard-mask</code>(EIGRP 的网段声明中，如果是没有划分子网的 A、B、C 类主网地址，只需输入此网络地址；如果网络划分了子网，则必须在网络地址后面写入反掩码) <br> <code>no auto-summary</code> (关闭 EIGRP 协议的路由汇总功能，默认配置是自动汇总生效。在处理VLSM 时，通常需要关闭该功能)</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统基础</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><hr><h2 id="1-1-nbsp-进程状态"><a href="#1-1-nbsp-进程状态" class="headerlink" title="1.1&nbsp;进程状态"></a>1.1&nbsp;进程状态</h2><ul><li><strong>运行态</strong> ：<ul><li>占有处理器正在运行。</li></ul></li><li><strong>就绪态</strong> ：<ul><li>具备运行条件，等待系统分配处理器以便运行。</li></ul></li><li><p><strong>等待态（阻塞态）</strong> ：</p><ul><li>不具备运行条件，正在等待某个事件的完成。</li></ul></li><li><p>一个进程在创建后将处于就绪状态。在执行过程中，每个进程任一时刻只会处于这3种状态之一。</p><p><img data-src="https://s3.ax1x.com/2021/03/11/6Nm6wq.png" alt="jczt"></p></li><li><p>运行态→等待态：处于运行状态的进程在运行的过程中需要等待某一事件发生后，才能继续运行，于是该进程由运行状态变成等待状态。例如等待 I/O 完成。</p></li><li>等待态→就绪态：处于等待状态的进程，假如其等待的事件已经发生结束。于是进程由等待状态变成就绪状态。</li><li>就绪态→运行态：当处于就绪状态的进程被进程调度程序选中后，就分配到处理器来运行，进程由就绪状态变成运行状态。</li><li>运行态→就绪态：处于运行状态的进程在运行的过程中，因分给它的处理器时间片已用完而不得不让出处理器，于是进程由运行状态变成就绪状态。</li></ul><h2 id="进程死锁"><a href="#进程死锁" class="headerlink" title="进程死锁"></a>进程死锁</h2><ul><li>一个进程在等待的是一个不可能发生的事件，系统会将该进程死锁，若多个进程产生死锁，则系统自身会死锁</li></ul><h3 id="死锁的四个必要因素"><a href="#死锁的四个必要因素" class="headerlink" title="死锁的四个必要因素"></a>死锁的四个必要因素</h3><ul><li><strong>互斥</strong> ：至少有一个资源必须处于非共享模式，即一次只有一个进程可使用。如果另一进程申请该资源，那么申请进程应等到该资源释放为止。</li><li><strong>占有并等待</strong> ：一个进程应占有至少一个资源，并等待另一个资源，而该资源为其他进程所占有。</li><li><strong>非抢占</strong> ：资源不能被抢占，即资源只能被进程在完成任务后自愿释放。</li><li><strong>循环等待</strong> ：有一组等待进程{$P_0$ ，$P_1$ ，…，$P_n$ }，$P_0$等待的资源为$P_1$占有，$P_1$等待的资源为$P_2$占有，……，$P_{n-1}$ 等待的资源为$P_n$占有，$P_n$等待的资源为$P_0$占有。</li></ul><h3 id="解决死锁的策略"><a href="#解决死锁的策略" class="headerlink" title="解决死锁的策略"></a>解决死锁的策略</h3><ol><li><strong>死锁预防</strong> ：<ul><li>例如，要求用户申请资源时一次性申请所需要的全部资源，这样就破坏了保持和等待条件；将资源分层，得到上一层资源后，才能够申请下一层资源，它破坏了环路等待条件。预防通常会降低系统的效率。</li></ul></li><li><strong>死锁避免</strong> ：<ul><li>避免是指进程在每次申请资源时判断这些操作是否安全，典型算法是银行家算法。但这种算法会增加系统的开销。</li></ul></li></ol><ul><li><strong>所谓银行家算法</strong> ，是指在分配资源之前，先看清楚，如果资源分配下去后，是否会导致系统死锁。如果会死锁，则不分配，否则就分配。具体来说，银行家算法分配资源的原则总结如下：<ol><li>当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程。</li><li>进程可以分期请求资源，但请求的总数不能超过最大需求量。</li><li>当系统现有的资源不能满足进程尚需资源数时，对进程的请求可以推迟分配，但总能使进程在有限的时间里得到资源。</li></ol></li><li>注意：<ul><li>如果系统中有 N 个并发进程，若规定每个进程需要申请 R 个某类资源，则当系统提供 ==$K=N<script type="math/tex">\times</script>（R-1）+1$== 个同类资源时，无论采用何种方式申请使用，一定不会发生死锁。</li></ul></li></ul><ol><li><strong>死锁检测</strong> ：<ul><li>前两者是事前措施，而死锁的检测则是判断系统是否处于死锁状态，如果是，则执行死锁解除策略。</li></ul></li><li><strong>死锁解除</strong> ：<ul><li>这是与死锁检测结合使用的，它使用的方式就是剥夺。即将某进程所拥有的资源强行收回，分配给其他的进程。</li></ul></li></ol><h2 id="进程的同步与互斥"><a href="#进程的同步与互斥" class="headerlink" title="进程的同步与互斥"></a>进程的同步与互斥</h2><ol><li><strong>同步</strong><ul><li>进程同步也是进程之间直接的制约关系，是为完成某种任务而建立的两个或多个线程，这个线程需要在某些位置上协调他们的工作次序而等待、传递信息所产生的制约关系。进程间的直接制约关系来源于他们之间的合作。</li><li>比如说进程 A 需要从缓冲区读取进程 B 产生的信息，当缓冲区为空时，进程 B 因为读取不到信息而被阻塞。而当进程 A 产生信息放入缓冲区时，进程 B 才会被唤醒。</li></ul></li><li><strong>互斥</strong><ul><li>进程互斥是进程之间的间接制约关系。当一个进程进入临界区使用临界资源时，另一个进程必须等待。只有当使用临界资源的进程退出临界区后，这个进程才会解除阻塞状态。</li><li>比如进程 B 需要访问打印机，但此时进程 A 占有了打印机，进程 B 会被阻塞，直到进程 A 释放了打印机资源，进程 B 才可以继续执行。</li></ul></li></ol><h2 id="信号量与PV操作"><a href="#信号量与PV操作" class="headerlink" title="信号量与PV操作"></a>信号量与PV操作</h2><ul><li><strong>信号量</strong><ul><li>信号量 S 可以直接理解成计数器，是一个整数。信号量的值仅能由 PV 操作来改变。通过 PV 操作控制信号量来实现进程的同步和互斥。</li></ul></li><li><strong>PV操作</strong><ul><li>PV 操作：解决互斥和同步的问题。</li><li>PV 操作是分开来看的：</li><li>P 操作：使 S=S-1，若 S $\geq$ 0，则该进程继续执行，否则该进程排入等待队列。</li><li>V 操作：使 S=S+1，若 S $\leq$ 0，唤醒等待队列中的一个进程。</li><li>在资源使用之前将会执行 P 操作，之后将会执行 V 操作。在互斥关系中 PV 操作在一个进程中成对出现，而在同步关系中则一定在两个或多个进程中成对出现。</li></ul></li></ul><h1 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h1><hr><h2 id="页式存储管理"><a href="#页式存储管理" class="headerlink" title="页式存储管理"></a>页式存储管理</h2><ul><li><p>页式存储管理是通过引入==进程的逻辑地址==，把进程地址空间与实际物理存储位置分离，从而增加存储管理的灵活性。我们把逻辑地址空间划分为一些相等的片，这些片称为页或页面。同样，物理地址空间也被划分为同样大小的片，称为块。这样用户程序进入内存时，通过页表就可以将一页对应存入到一个块中。这些物理块不必连续。所以内存利用率可以大大提高。</p></li><li><p>在页式系统中，指令所给出的逻辑地址分为两部分：逻辑页号和页内地址。其中页号与页内地址所占多少位，与主存的最大容量、页面的大小有关。</p></li><li><p>CPU 中的内存管理单元按逻辑页号查找页表（操作系统为每一个进程维护了一个从虚拟地址到物理地址的映射关系的数据结构，页表的内容就是该进程的虚拟地址到物理地址的一个映射）得到物理页号，将物理页号与页内地址相加形成物理地址。</p></li></ul><h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><h2 id="gt-当程序的存储空间要求大于实际的内存空间时，就使得程序难以运行了。虚拟存储技术就是利用实际内存空间和相对大得多的外部储存器存储空间相结合构成一个远远大于实际内存空间的虚拟存储空间，程序就运行在这个虚拟存储空间中，能够实现虚拟存储的依据是程序的局部性原理，即程序在运行过程中经常体现出运行在某个局部范围之内的特点。即在一段时间内，整个程序的执行仅限于程序中的某一部分。虚拟存储是把一个程序所需要的存储空间分成若干页，程序运行用到的页就放在内存里，暂时不用就放在外存中，当用到外存中的页时，就把它们调到内存，反之就把它们送到外存中。由于所有的进程页面不是一次性地全部调入内存，而是部分页面装入。"><a href="#gt-当程序的存储空间要求大于实际的内存空间时，就使得程序难以运行了。虚拟存储技术就是利用实际内存空间和相对大得多的外部储存器存储空间相结合构成一个远远大于实际内存空间的虚拟存储空间，程序就运行在这个虚拟存储空间中，能够实现虚拟存储的依据是程序的局部性原理，即程序在运行过程中经常体现出运行在某个局部范围之内的特点。即在一段时间内，整个程序的执行仅限于程序中的某一部分。虚拟存储是把一个程序所需要的存储空间分成若干页，程序运行用到的页就放在内存里，暂时不用就放在外存中，当用到外存中的页时，就把它们调到内存，反之就把它们送到外存中。由于所有的进程页面不是一次性地全部调入内存，而是部分页面装入。" class="headerlink" title="&gt;当程序的存储空间要求大于实际的内存空间时，就使得程序难以运行了。虚拟存储技术就是利用实际内存空间和相对大得多的外部储存器存储空间相结合构成一个远远大于实际内存空间的虚拟存储空间，程序就运行在这个虚拟存储空间中，能够实现虚拟存储的依据是程序的局部性原理，即程序在运行过程中经常体现出运行在某个局部范围之内的特点。即在一段时间内，整个程序的执行仅限于程序中的某一部分。虚拟存储是把一个程序所需要的存储空间分成若干页，程序运行用到的页就放在内存里，暂时不用就放在外存中，当用到外存中的页时，就把它们调到内存，反之就把它们送到外存中。由于所有的进程页面不是一次性地全部调入内存，而是部分页面装入。"></a>&gt;当程序的存储空间要求大于实际的内存空间时，就使得程序难以运行了。虚拟存储技术就是利用实际内存空间和相对大得多的外部储存器存储空间相结合构成一个远远大于实际内存空间的虚拟存储空间，程序就运行在这个虚拟存储空间中，能够实现虚拟存储的依据是程序的局部性原理，即程序在运行过程中经常体现出运行在某个局部范围之内的特点。即在一段时间内，整个程序的执行仅限于程序中的某一部分。虚拟存储是把一个程序所需要的存储空间分成若干页，程序运行用到的页就放在内存里，暂时不用就放在外存中，当用到外存中的页时，就把它们调到内存，反之就把它们送到外存中。由于所有的进程页面不是一次性地全部调入内存，而是部分页面装入。</h2><ul><li>这就有可能出现下面的情况：要访问的页面不在内存，这时系统产生缺页中断。操作系统在处理缺页中断时，要把所需页面从外存调入到内存中。如果这时内存中有空闲块，就可以直接调入该页面；如果这时内存中没有空闲块，就必须先淘汰一个已经在内存中的页面，腾出空间，再把所需的页面装入，即进行页面置换。</li></ul><h3 id="先进先出法（FIFO）"><a href="#先进先出法（FIFO）" class="headerlink" title="先进先出法（FIFO）"></a>先进先出法（FIFO）</h3><ul><li>FIFO 算法认为最早调入内存的页不再被使用的可能性要大于刚调入内存的页，因此，先进先出法总是淘汰在内存中停留时间最长的一页，即先进入内存的页，先被换出。</li><li>该算法会出现在内存块增加的情况下，缺页率不减反增<ul><li>这种现象称为 <strong>贝拉迪Belady异常</strong> ————当为进程分配的物理块数增大时，缺页次数不减反增的异常现象。</li><li>只有FIFO算法会产生Belady异常。另外，FIFO算法==虽然实现简单，但是该算法与进程实际运行时的规律不适应==，因为先进入的页面也有可能最经常被访问。因此，算法性能差</li></ul></li></ul><h3 id="最佳置换法（OPT）"><a href="#最佳置换法（OPT）" class="headerlink" title="最佳置换法（OPT）"></a>最佳置换法（OPT）</h3><ul><li>最佳置换算法（OPT）在为调入新页面而必须预先淘汰某个老页面时，所选择的老页面应该以后不被使用，或者是在最远的以后时间才被访问。采用这种算法，能保证有最小缺页率。（缺页率=缺页次数/总共访问页面的次数）</li><li>==缺页时未必发生页面置换，有可能还有空闲的内存块等待使用==</li><li><strong>是一种理想化算法，在实际应用中无法实现</strong><h3 id="最近最少使用置换法（LRU）"><a href="#最近最少使用置换法（LRU）" class="headerlink" title="最近最少使用置换法（LRU）"></a>最近最少使用置换法（LRU）</h3></li><li>最近最少使用置换法（LRU）是选择在最近一段时间里最久没有使用过的页面予以淘汰。</li></ul><h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><h2 id="文件管理概念"><a href="#文件管理概念" class="headerlink" title="文件管理概念"></a>文件管理概念</h2><p> <img data-src="https://s3.ax1x.com/2021/03/11/6Nm701.png" alt="wjgl"></p><ul><li>在树型目录结构中，树的根结点为根目录，数据文件作为树叶，其他所有目录均作为树的结点。系统在建立每一个目录时，都会自动为它设定两个目录文件，一个是“.”，代表该目录自己；另一个是“..”，代表该目录的父目录，也就是上级目录。</li><li>从逻辑上讲，用户在登录到系统中之后，每时每刻都处在某个目录之中，此目录被称作工作目录或当前目录。工作目录是可以随时改变的。</li><li>对文件进行访问时，需要用到路径的概念。路径是指从树型目录中的某个目录层次到某个文件的一条道路。在树型目录结构中，从根目录到任何数据文件之间，只有一条唯一的通路，从树根开始，把全部目录文件名与数据文件名依次用“/”连接起来，构成该数据文件的路径名，且每个数据文件的路径名是唯一的。这样，可以解决文件重名问题，不同路径下的同名文件不一定是相同的文件。例如，在图 2-5 中，根目录下的文件 f1 和/D1/W1目录下的文件 f1 可能是相同的文件，也可能是不相同的文件。</li></ul><h1 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h1><ol><li><strong>程序查询方式</strong><br>最简单的 I/O 控制方式是程序查询方式，要求 CPU 不断使用指令检测方法来获取外设工作状态。由于 CPU 的速度远远高于 I/O 设备，导致 CPU 的绝大部分时间都处于等待 I/O设备过程中，造成 CPU 的运行效率极低。CPU 和外围设备只能串行工作。但是它==管理简单，在要求不高的场合可以被采用==。</li><li><strong>程序中断方式</strong></li></ol><ul><li>某一外设的数据准备就绪后，它“主动”向 CPU 发出中断请求信号，请求 CPU 暂时中断目前正在执行的程序转而进行数据交换；当 CPU 响应这个中断时，便暂停运行主程序，自动转去执行该设备的中断服务程序；当中断服务程序执行完毕（数据交换结束）后，CPU又回到原来的主程序继续执行。</li><li>程序中断方式虽然大大提高了主机的利用率，但是它以字（节）为单位进行数据传送，每完成一个字（节）的传送，控制器便要向 CPU 请求一次中断（做保存现场信息，恢复现场等工作），仍然占用了 CPU 的许多时间。这种方式==对于高速的块设备的 I/O 控制显然不适合==。</li></ul><ol><li><strong>DMA方式</strong></li></ol><ul><li><p>DMA存取方式，是一种完全由硬件执行 I/O 数据交换的工作方式。它既考虑到中断的响应，同时又要节约中断开销。此时，DMA 控制器代替 CPU 完全接管对总线的控制，数据交换不经过 CPU，直接在内存和外围设备之间成批进行。</p></li><li><p>优点：==速度快==，CPU 不参加传送操作，省去了CPU取指令、取数、送数等操作，也没有保存现场、恢复现场之类的工作。</p></li><li>缺点：批量数据传送前的准备工作，以及传送结束后的处理工作，仍由 CPU 通过执行管理程序来承担，DMA 控制器只负责具体的数据传送工作。==CPU仍然摆脱不了管理和控制外设的沉重负担，难以充分发挥高速运算的能力==。</li></ul><ol><li><strong>I/O通道控制方式</strong></li></ol><ul><li>通道是==一个特殊功能的处理器==，代替 CPU 管理控制外设的独立部件。有自己的指令和程序，专门负责数据输入输出的传输控制，而 CPU 在将“传输控制”功能下放给通道后，只负责“数据处理”功能。通道与 CPU 分时使用主存，实现了 CPU 内部运算与 I/O 设备的并行工作。</li></ul><ol><li><strong>输入输出处理机方式</strong></li></ol><ul><li>采用专用的小型通用计算机，可完成 I/O 通道所完成的 I/O 控制，还可完成码制转换、格式处理、检错纠错等操作，具有相应的运算处理部件、缓冲部件，还可形成 I/O 程序锁必需的程序转移手段。输入输出处理机基本独立于主机工作。在多数系统中，设置多台外围处理机，分别承担 I/O 控制、通信、维护等任务。</li><li>目前单片机、微型机多采用程序查询、程序中断和 DMA 方式。通道方式和输入输出处理机方式一般用在大中型计算机中。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机硬件基础(部分组成原理)</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h1><h2 id="数据的表示"><a href="#数据的表示" class="headerlink" title="数据的表示"></a>数据的表示</h2><hr><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><ul><li>n进制，逢n进一</li><li>基数：<ul><li>进制中允许使用的数码的个数</li></ul></li><li>位权：<ul><li>不同位置数码代表的数值</li></ul></li><li><p><strong>十进制</strong><br>|位权|$10^3$|$10^2$|$10^1$|$10^0$|<br>|:——:|:——:|:——:|:——:|:——:|<br>|位数|4（千位）|3（百位）|2（十位）|1（个位）|</p><ul><li>$(123)_{10}$= 3$\times<script type="math/tex">10^0$+2$\times</script>10^1$+1$\times$$10^2$=3+20+100=123</li><li>十转二：$(24)_{10}$= $2^4$+$2^3$=$(11000)_2$</li></ul></li><li><p><strong>二进制</strong><br>|位权|$2^3$|$2^2$|$2^1$|$2^0$|<br>|:—:|:—:|:—:|:—:|:—:|<br>|位数|4（八）|3（四）|2（二）|1（个）|</p><ul><li>二转十：$(110)_2$=0$\times<script type="math/tex">2^0$+1$\times</script>2^1$+1$\times$$2^2$=0+2+4=$6$</li></ul></li><li><p><strong>八进制</strong><br>|位权|$8^3$|$8^2$|$8^1$|$8^0$|<br>|:—:|:—:|:—:|:—:|:—:|<br>|位数|4（五百一十二）|3（六十四）|2（八）|1（个）|</p><ul><li>八转十：$(127)_8$=7$\times<script type="math/tex">8^0$+2$\times</script>8^1$+1$\times$$8^2$=7+16+64=$87$</li></ul></li><li><p><strong>十六进制</strong><br>|位权|$16^2$|$16^1$|$16^0$|<br>|:—:|:—:|:—:|:—:|<br>|位数|3（二百五十六）|2（十六）|1（个）|</p><ul><li>十六进制表示，逢十六进一；1-9,10A,11B,12C,13D,14E,15F</li><li>十六进制的10-15与二进制转换<br>|十六进制|二进制|<br>|:——:|:——:|<br>|A|1010|<br>|B|1011|<br>|C|1100|<br>|D|1101|<br>|E|1110|<br>|F|1111|</li></ul></li></ul><blockquote><p>详细视频讲解：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMU54NDExWTdBRD9mcm9tPXNlYXJjaCZhbXA7c2VpZD0zMjY1NjI5MjkxNTkyNjIwODU4">https://www.bilibili.com/video/BV1Nx411Y7AD?from=search&amp;seid=3265629291592620858</span></p></blockquote><h3 id="原码、反码、补码和移码"><a href="#原码、反码、补码和移码" class="headerlink" title="原码、反码、补码和移码"></a>原码、反码、补码和移码</h3><ul><li><strong>原码</strong><ul><li>原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。例如：假设用 8 位表示一个数值，则 <code>+11</code> 的原码是 <code>00001011</code>，<code>-11</code> 的原码是 <code>10001011</code></li></ul></li><li><strong>反码</strong><ul><li>反码通常是用来由原码求补码或者由补码求原码的过渡码。反码表示法和原码表示法一样是在数值前面增加了一位符号位（即最高位为符号位），<font color=red>正数的反码与原码相同</font> ，<font color=red>负数的反码符号位为1 ，其余各位为该数绝对值的原码按位取反</font>。例如：<code>+11</code> 的反码是 <code>00001011</code>，<code>-11</code> 的反码为 <code>11110100</code>。</li></ul></li><li><strong>补码</strong><ul><li>补码表示法和原码表示法一样是在数值前面增加了一位符号位（即最高位为符号位），<font color=red>正数的补码与原码相同</font> ，<font color=red>负数的补码是该数的反码末尾加1</font> ，这个加 1 就是“补”。例如：<code>+11</code> 的补码是 <code>00001011</code>，<code>-11</code> 的补码为 <code>11110101</code>。</li><li><strong>注意：其中负数补码转原码，符号位保留，其余各位取反+1。</strong></li></ul></li><li><strong>移码</strong><ul><li>移码（又叫增码）是<font color=red>符号位取反的补码</font>，一般用指数的移码减去 1 来做浮点数的阶码，引入的目的是为了保证浮点数的机器零为全 0。</li></ul></li></ul><h3 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h3><ul><li><strong>码距</strong> ：<ul><li>在一个编码系统中，任意两个合法编码之间至少有多少个二进制位不同</li></ul></li><li><strong>奇偶效验码</strong> ：<ul><li>通过在编码中增加 1 的个数为奇数或者偶数从而使码距为 2。</li></ul></li><li><strong>海明码</strong> ：<ul><li>利用奇偶性来检错和校验的方法。假设有 m 位信息码，加入 k 位校验码，则==m+k+1$\leq$$2^k$==</li></ul></li></ul><h2 id="处理器组成"><a href="#处理器组成" class="headerlink" title="处理器组成"></a>处理器组成</h2><hr><h3 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h3><ul><li>运算器通常是由 ALU（算术/逻辑单元，包括累加器、加法器等）、通用寄存器（不包含地址寄存器）等组成。</li><li><p><strong>ALU</strong> ：==进行算数运算和逻辑运算。==</p><ul><li>支持基本的==算术运算、按位逻辑运算、移位操作、多倍精度运算、复杂运算==</li><li>其中复杂运算包括： <font color=red>单周期运算、流水线运算、迭代运算</font></li></ul><p><img data-src="https://s3.ax1x.com/2021/03/09/68gjdx.png" alt="alu"></p></li><li><p><strong>累加器AC</strong> ：==暂时存放 ALU 运算的结果信息==。</p></li><li><strong>数据缓冲寄存器</strong> ：用来暂时存放由内存储器读出的一条指令或一个数据字。反之，当向内存存入一条指令或一个数据字时，也暂时将它们存放在数据缓冲寄存器中。状态条件寄存器（PSW）保存由算术指令和逻辑指令运算的状态和程序的工作方式。<h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3></li><li>控制器的组成包含程序计数器（PC）、指令寄存器（IR）、指令译码器、时序部件等。</li><li><strong>程序计数器（PC）</strong> ：存放的是下一条指令的地址。</li><li><strong>指令寄存器（IR）</strong> ：用来保存当前正在执行的一条指令。</li><li><strong>指令译码器</strong> ：指令中的操作码经过指令译码器译码后，即可向操作控制器发出具体操作的特定信号。</li><li><strong>时序部件</strong> ：为指令的执行产生时序信号。<h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3></li><li>微型计算机通过系统总线将各部件连接到一起，实现了微型计算机内部各部件间的信息交换。</li><li><strong>数据总线DB</strong> 用于传送数据信息。</li><li><strong>地址总线AB</strong> 是专门用来传送地址的，地址总线的位数决定了 CPU 可直接寻址的内存空间大小。一般来说，若地址总线为 n 位，则可寻址空间为 $2^n$ 字节。</li><li><strong>控制总线CB</strong> 用来传送控制信号和时序信号。</li></ul><h4 id="地址总线总结"><a href="#地址总线总结" class="headerlink" title="地址总线总结"></a>地址总线总结</h4><ul><li>地址总线的 <strong>位数</strong> 决定了 ==CPU可直接寻址的内存空间大小==，如8位微机的地址总线为 <strong>16位</strong> ，则其最大可寻址空间为： <script type="math/tex">2^{16}=64KB</script> 16位微机的地址总线为 <strong>20位</strong>，其可寻址空间为 <script type="math/tex">2^{20} =1MB</script> </li><li><strong>一般来说，若地址总线为n位，则可寻址空间为$2^n$字节</strong></li></ul><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><hr><ul><li>指令系统是中央处理器==所有指令的集合==，通常一条指令可分解为<font color=red>操作码和地址码两部分</font>，操作码确定指令的操作类型，地址码确定指令所要处理操作数的位置。</li></ul><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><ul><li><p>指令系统中采用不同寻址方式的目的是扩大寻址空间并提高编程灵活性。常见的寻址方式如图所示：</p><p><img data-src="https://s3.ax1x.com/2021/03/09/68R13D.png" alt="xzfs"></p></li></ul><ol><li><strong>立即寻址方式</strong> ：通常直接在指令的地址码部分给出操作数。</li><li><strong>内存寻址</strong><ul><li>直接寻址方式：在指令中直接给出参加运算的操作数或运算结果所存放的主存地址。</li><li>间接寻址方式：在指令中给出操作数地址的地址。</li><li>变址寻址方式：变址寻址就是变址寄存器中的内容加地址码中的内容即可完成寻址。</li></ul></li><li><strong>寄存器寻址</strong><ul><li>寄存器直接寻址：指令在执行过程中所需要的操作数来源于寄存器。</li><li>寄存器间接寻址：寄存器存放的是操作数在主存的地址。</li></ul></li></ol><h3 id="RISC和CISC"><a href="#RISC和CISC" class="headerlink" title="RISC和CISC"></a>RISC和CISC</h3><ul><li><strong>RISC和CISC都是当今CPU的两大开发技术</strong></li><li><strong>RISC</strong> ，即精简指令集计算机，属于CPU的一种==设计模式==，对指令数目和寻址方式做了精简<ul><li>采用 <strong>定长指令格式</strong></li><li>需要较大的存储空间</li><li>常见的精简指令集微处理器有 ARC、ARM、AVR等</li></ul></li><li><p><strong>CISC</strong> ，即复杂指令集计算机，<font color=red>特点是指令数目多而复杂，每条指令字长不等</font></p><ul><li><strong>CISC指令系统丰富，使用频率差别大，处理特殊任务效率高</strong></li><li>==高级语言实现简单，效率高==</li><li>常见的复杂指令集有VAX、PDP-11、x86等</li></ul><p><img data-src="https://s3.ax1x.com/2021/03/09/68Rzxe.png" alt="zljs"></p></li></ul><h3 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h3><ul><li>流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理实现技术。即可以同时为多条指令的不同部分进行工作，以提高各部件的利用率和指令的平均执行速度。</li></ul><h4 id="执行指令的三大阶段"><a href="#执行指令的三大阶段" class="headerlink" title="执行指令的三大阶段"></a>执行指令的三大阶段</h4><ol><li>取指</li><li>分析</li><li>执行<ol><li><strong>流水线指令执行时间</strong><ul><li><strong>标准算法</strong> ：==T＝第一条指令执行所需时间+（指令条数－1）×流水线周期==</li><li>关于流水线的周期，我们需要知道的是，流水线周期为指令执行阶段中执行时间最长的一段。例如指令流水线把一条指令分为取指令、分析和执行 3 个部分，且 3 个部分的时间分别是取指令 2ns、分析 2ns 及执行 1ns。那么最长的是 2ns，因此 100 条指令全部执行完毕所需要的时间就是（2ns+2ns+1ns）+（100－1）$\times$ 2ns=203ns。</li></ul></li><li><strong>流水线的技术指标</strong><ul><li><strong>吞吐率</strong> ：指的是计算机中的流水线在特定的时间内可以处理的任务数量。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>$TP=n/Tk$</font> <br>（n为指令条数，TK 为流水线方式时间），其中理论上的最大吞吐率是：1/流水线周期。</li><li><strong>加速比</strong> ：完成一批任务，不使用流水线所用的时间与使用流水线所用的时间之比称为流水线的加速比。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>$S=TS/Tk$</font> <br>（TS 为顺序执行时间，TK 为流水线方式时间）。流水线的效率指的是流水线的设备利用率。</li></ul></li><li><strong>流水线周期等于执行时间最长给的那个指令周期</strong></li><li><font color=red>$未采用流水线执行时间=(t_{取指}+t_{分析}+t_{执行}\times总指令数)$</font></li></ol></li></ol><h2 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h2><hr><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><ul><li>存储器中数据常用的存取方式有==顺序存取、直接存取、随机存取和相联存取==等四种。</li><li><strong>顺序存取</strong> ：<ul><li>存储器的数据是以记录的形式进行组织，对数据的访问必须按特定的线性顺序进行。磁带存储器的存取方式就是顺序存取。</li></ul></li><li><strong>直接存取</strong> ：<ul><li>共享读写装置，但是每个记录都有一个唯一的地址标识，共享的读写装置可以直接移动到目的数据块所在位置进行访问。访问时间与数据位置有关。磁盘存储器采用的这种方式。</li></ul></li><li><strong>随机存取</strong> ：<ul><li>存储器的每一个可寻址单元都具有唯一地址和读写装置，系统可以在相同的时间内对任意一个存储单元的数据进行访问，而与先前的访问序列无关。主存储器采用的是这种方式。</li></ul></li><li><strong>相联存取</strong> ：<ul><li>也是一种随机存取的形式，但是选择某一单元进行读写是取决于其内容而不是其地址。<code>Cache</code> 采用该方法进行访问。相联存储器是 <code>Cache</code> 一部分，<code>Cache</code> 中有按内容寻址的相联存储器，用于存放与 <code>Cache</code> 中数据相对应的主存地址，可以快速检索、判断 CPU 读取的某个字当前是否存在于 <code>Cache</code> 中。</li></ul></li></ul><h3 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h3><ul><li><strong>位(bit)：</strong> 一个二进制表示1个bit</li><li><strong>字节(B,Byte)：</strong> $1B=8bit$</li><li><strong>字：</strong> 表示CPU一次处理的二进制位数，通常为字节的整数倍</li><li><strong>存储容量：</strong> 存储器可容纳的二进制信息的大小</li></ul><h3 id="4-3-nbsp-存储设备"><a href="#4-3-nbsp-存储设备" class="headerlink" title="4.3&nbsp;存储设备"></a>4.3&nbsp;存储设备</h3><ul><li>传统意义上存储器分为 RAM 和 ROM。<ol><li><strong>RAM和ROM</strong><ul><li>RAM 是随机存储器，数据可读可写，一旦掉电，数据将消失。ROM 是只读存储器，掉电后数据依然保存。</li></ul></li></ol><ul><li>RAM 有静态和动态两种：<ul><li>静态 RAM 只要上电后信息不丢失，无须刷新电路过程，消耗较多功率，价格也较高。常作为芯片中的<code>Cache</code>使用。</li><li>最常用的动态 RAM 需要上电后，再定时刷新电路才能保持数据，而动态 RAM 集成度高、存储密度高、成本低，功耗低，适于作大容量存储器。常用在内存中。</li></ul></li></ul><ol><li><strong>Cache</strong><ul><li>在计算机执行时，需要从主存中读取指令和数据，需要将外存的数据读入内存中，这些读取的过程都是造成计算机性能下降的瓶颈，为了尽可能减少速度慢的设备对速度快的设备的约束，可以利用高速缓存<code>Cache</code>技术。</li></ul></li><li><strong>磁盘</strong><ul><li>与计算机技术一样，存储技术也在不断发展，在现代计算机中，最常见的存储介质包括机械硬盘、光盘、磁带，固态硬盘SSD等。</li></ul></li></ol></li></ul><h3 id="存储计算"><a href="#存储计算" class="headerlink" title="存储计算"></a>存储计算</h3><ul><li>实际的存储器总是由一片或多片存储芯片+控制电路构成的。<br><font color=red>$芯片数量≥存储器容量/存储芯片容量$</font></li><li>如果存储器 <strong>有256个存储单元</strong> ，那么它的地址编码为 <code>0～255</code>，对应的二进制数是<code>00000000～11111111</code>，需要用 8 位二进制来表示，也就是地址宽度为 8 位，需要 8 根地址线。存储器中所有存储单元的总和称为这个存储器的存储容量，存储容量的单位是 B、KB、MB、GB 和 TB 等。<ul><li>例如：按某存储器字节编址，地址从 A4000H 到 CBFFFH，则表示有<code>（A4000－CBFFF）＋1</code> 个字节，即 28000H 个字节，转换为十进制是 160KB。若用 16K×4bit 的存储器芯片构成该内存，共需 160K $\times$ 8/16K $\times$ 4=20 片。</li></ul></li></ul><hr><script type="math/tex; mode=display">存储器地址编码=(最大地址-最小地址)+1</script><script type="math/tex; mode=display">随机存储传输率=1/存储器周期</script><script type="math/tex; mode=display">非随机存储读写N位所需要的平均时间=平均存取时间+N为/数据传输率</script><ul><li><strong>平均存取时间</strong>：</li></ul><script type="math/tex; mode=display">T=H\times T_1+(1-H)T_2</script><p>  其中Cache的命中率为H，Cache的访问周期为 $T_1$  ,主存的访问周期为 $T_2$</p><ul><li><p><strong>命中率</strong>：</p><script type="math/tex; mode=display">H=N_1/(N_1+N2)</script></li></ul><p>  其中Cache的访问次数为 $N_1$ ,主存的访问次数为 $N_2$ ,H为命中率</p><h3 id="系统可靠性"><a href="#系统可靠性" class="headerlink" title="系统可靠性"></a>系统可靠性</h3><ul><li>计算机系统是一个复杂的系统，而且影响其可靠性的因素也非常繁复，很难直接对其进行可靠性分析。但通过建立适当的数学模型，把大系统分割成若干子系统，可以简化其分析过程。</li></ul><ol><li><p><strong>串联系统</strong></p><ul><li><p>假设一个系统由 n 个子系统组成，<font color=red>当且仅当</font> 所有的子系统都能正常工作时，系统才能正常工作，这种系统称为串联系统，如图所示:</p><p><img data-src="https://s3.ax1x.com/2021/03/09/68WFat.png" alt="clxt"></p></li><li>设系统各个子系统的可靠性分别用 $R_1$ ，$R_2$ ，…，$R_n$ 表示，则系统的可靠性:<ul><li>==R = $R_1$ $\times$ $R_2$ $\times$  …$\times$  $R_n$==</li></ul></li></ul></li><li><p><strong>并联系统</strong></p><ul><li><p>假如一个系统由n个子系统组成，<font color=red>只要</font> 有一个子系统能够正常工作，系统就能正常工作，如图所示:</p><p><img data-src="https://s3.ax1x.com/2021/03/09/68WEPf.png" alt="blxt"></p></li><li>设系统各个子系统的可靠性分别用 $R_1$ ，$R_2$ ，…，$R_n$ 表示，则系统的可靠性：<ul><li>==R = 1-（1-$R_1$ ）$\times$ （1- $R_2$ ）$\times$ … $\times$ （1 - $R_n$ ）==</li></ul></li></ul></li></ol><h3 id="磁盘阵列RAID"><a href="#磁盘阵列RAID" class="headerlink" title="磁盘阵列RAID"></a>磁盘阵列RAID</h3><ul><li><strong>RAID 0</strong> ：==需要两块以上磁盘==，每个磁盘划分不同的区块，数据采用交叉存取和并行传输这种 ==磁盘利用率高（100％）==， <strong>读写速度最快</strong> ，但由于没有数据差错控制，因此==很容易发生数据错误==</li><li><strong>RAID 1</strong> ：磁盘成对组成，每个工作磁盘均有对应的映射，上面保存着与工作盘完全相同的数据， <strong>具有最高的安全性</strong> 但 ==磁盘利用率为50‰==</li><li><strong>RAID 3</strong> ：把奇偶校验码（只能查不能纠错）存在一个独立的磁盘，如果一个磁盘失效，其上的数据可以通过其亻也盘上数据进行异或运算得到，读盘涑度快，但写入速度慢。适用于图像处理等要求高吞吐率的场合，==磁盘利用率：$n-1/n$==.</li><li><strong>RAID 5</strong> ：各块磁盘进行条带化分割，相同的条带进行分布式奇偶校验，检验数据平均分配在每一块硬盘上。==磁盘利用率：$n-1/n$==</li><li><strong>组合RAID技术</strong> ：RAID1+0以及RAID0+1，是RAID0与RAID1组合形式，它提供RAID1 的安全保障同时提供RAID0近似的访问速度。RAID1+0拥有更高的数据安全性在企业中更常使用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统开发和项目管理基础</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="软件生命周期与开发模型"><a href="#软件生命周期与开发模型" class="headerlink" title="软件生命周期与开发模型"></a>软件生命周期与开发模型</h1><h2 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a>软件生命周期</h2><ul><li><strong>计划周期</strong><ul><li>问题定义<ul><li>落实问题的性质、工程目标与规模</li></ul></li><li>可行性研究<ul><li>==估计系统的成本和效益==</li></ul></li></ul></li><li><strong>开发周期</strong><ul><li>需求分析</li><li>总体设计<ul><li>确立 ==总体结构和模块模块关系，定义模块之间的接口，指定综合测试规划==</li></ul></li><li>详细设计<ul><li>设计 ==模块内的细节，算法数据结构和接口信息==</li></ul></li><li>编码 </li><li>调试</li></ul></li><li><strong>运行时期</strong><ul><li>维护</li></ul></li></ul><h2 id="软件开发模型"><a href="#软件开发模型" class="headerlink" title="软件开发模型"></a>软件开发模型</h2><blockquote><p>参考模型详解： <span class="exturl" data-url="aHR0cHM6Ly93d3cuaHVhd2VpY2xvdWQuY29tL2FydGljbGVzL2Q3M2NjMzA2NTg5Njk3YjA1ZTBjYWUwMWNjNWM2NWUyLmh0bWw=">https://www.huaweicloud.com/articles/d73cc306589697b05e0cae01cc5c65e2.html</span></p></blockquote><ul><li><p><strong>瀑布模型</strong></p><ul><li>自顶向下，依次进行的线性模型</li><li>每个步骤要进行审核，建立检查点</li><li>最早的模型，现在已弃用；开发的后期测试阶段才可能找到错误，犯错成本高</li><li>但若是建立一个较为成熟的软件开发模板，可使用该模型，因为该模型目的性强，功能性高，且需求明确</li></ul><p><img data-src="https://s3.ax1x.com/2021/03/08/6l08uF.jpg" alt="pbmx"></p></li><li><p><strong>V模型</strong></p><ul><li>测试活动重点化</li><li>可尽早发现问题，降低犯错成本</li></ul></li></ul><p>  <img data-src="https://s3.ax1x.com/2021/03/08/6lU1wn.jpg" alt="vmx"></p><ul><li><p><strong>喷泉模型</strong></p><ul><li>是 ==面向对象设计== 的开发模型</li><li>每个工作步骤之间 ==无间隙== ，可同时执行分析和设计</li><li>每个工作之间  ==相互迭代==</li></ul><p><img data-src="https://s3.ax1x.com/2021/03/08/6l0kjS.png" alt="pqmx"></p></li><li><p><strong>螺旋模型</strong></p><ul><li>对于有风险的项目可以及时止损</li><li>适合 <strong>大规模开发的软件模型</strong></li></ul><p><img data-src="https://s3.ax1x.com/2021/03/08/6l0NNR.png" alt="lxmx"></p></li><li><p><strong>增量模型</strong></p><ul><li>能在较短的时间内向用户提交可完成部分工作的产品。</li><li>逐步增加产品功能可以使用户有充裕的时间学习和适应新产品，从而减少一个 全新的软件可能给客户组织带来的冲击。</li><li>规避技术风险</li><li>可并行开发构件，加快开发的进度</li><li>适用于 <strong>项目在既定的商业要求期限之前不可能找到足够的开发人员</strong></li></ul></li><li><p><strong>原型化模型</strong></p><ul><li>对于许多 ==需求不够明确的项目== ，比较适合采用该模型。原型技术有分为三类：抛弃式、演化式和递增式。</li></ul><p><img data-src="https://s3.ax1x.com/2021/03/08/6l0cEd.png" alt="zlmx"></p></li><li><p><strong>协同开发模型</strong></p><ul><li>适用于所有软件开发</li></ul></li></ul><h1 id="软件开发与测试"><a href="#软件开发与测试" class="headerlink" title="软件开发与测试"></a>软件开发与测试</h1><ul><li>划分软件系统模块应做到 ==高内聚，低耦合==</li></ul><h2 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h2><ul><li><strong>动态测试</strong><ul><li>白盒测试<ul><li>即透明盒测试，是基于代码的测试，也称 ==结构测试== 、 ==逻辑测试==</li><li>主要检测软件代码中的错误，修改代码的逻辑和参数</li></ul></li><li>黑盒测试<ul><li>直接让软件运行起来测试，不考虑软件的底层代码与内部结构，只关心软件的输入输出</li><li>也称  ==功能测试==</li><li>黑盒与白盒测试是互补的，缺一不可</li></ul></li><li>灰盒测试<ul><li>既关心软件代码，也关心软件的输入和输出，相当于是黑盒与白盒的结合</li></ul></li></ul></li><li><strong>静态测试</strong><ul><li>采用人工检测和计算机辅助静态分析的手段对程序进行检测。静态分析中进行人工测试的主要方法有桌前检查（程序员自查）、代码审查和代码走查。</li></ul></li></ul><h2 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h2><ul><li><strong>单元测试</strong><ul><li>测试的是模块接口，局部数据结构，边界条件，独立的路径，错误处理</li></ul></li><li><strong>集成测试</strong><ul><li>模块间的接口和通信</li></ul></li><li><strong>系统测试</strong><ul><li>包括恢复测试、安全性测试、强度测试、性能测试、可靠性测试和安装测试</li></ul></li><li><strong>验收测试</strong><ul><li>包括有效性测试、软件配置审查、验收测试</li></ul></li></ul><h1 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h1><h2 id="九大知识领域"><a href="#九大知识领域" class="headerlink" title="九大知识领域"></a>九大知识领域</h2><ol><li><strong>范围管理</strong></li><li><strong>时间管理</strong></li><li><strong>成本管理</strong></li><li><strong>质量管理</strong></li><li><strong>人力资源管理</strong></li><li><strong>沟通管理</strong></li><li><strong>风险管理</strong></li><li><strong>采购管理</strong></li><li><strong>整体管理</strong></li></ol><h2 id="甘特图-Gantt-Chart"><a href="#甘特图-Gantt-Chart" class="headerlink" title="甘特图(Gantt Chart)"></a>甘特图(Gantt Chart)</h2><ul><li>==通过条状图来显示项目、进度和其他时间相关的系统进展的内在关系随着时间进展的情况。==</li><li><strong>优点</strong><ul><li>在于标明了各任务的计划进度和当前进度，能动态地反映项目进展</li></ul></li><li><p><strong>缺点</strong></p><ul><li>在于难以反映多个任务之间存在的复杂逻辑关系</li></ul><p><img data-src="https://s3.ax1x.com/2021/03/08/6l0HEj.png" alt="gtt"></p></li></ul><h2 id="PERT图-计划审计方法"><a href="#PERT图-计划审计方法" class="headerlink" title="PERT图(计划审计方法)"></a>PERT图(计划审计方法)</h2><ul><li><strong>定义</strong>：<ul><li>一种 ==网络模型==，描述一个项目任务之间的关系。可以明确表达任务之间的依赖关系，即哪些任务完成后才能开始另一些任务，以及如期完成整个工程的关键路径，但是不能清晰地描述各个任务之间的并行关系。</li></ul></li><li><strong>关键路径</strong>：<ul><li>==从开始定点到结束定点的最长路径（时间开销最大路径）== 即为关键路径</li></ul></li><li><p><strong>松弛时间</strong>：</p><ul><li>==松弛时间=关键路径的时间-(包含某活动最长路径所需要的时间)==</li><li>第一种求法：最晚开始时间-最早开始时间</li><li>第二种求法：关键路径的总时间-包含该任务的关键路径花的时间</li></ul><p><img data-src="https://s3.ax1x.com/2021/03/08/6l0q5n.jpg" alt="pret"></p></li><li><p><strong>软件编码规模</strong></p><ul><li>==软件编码规模=(最大规模+4最可能的规模+最小规模)/6==</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协议名称与简介</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%8D%8F%E8%AE%AE%E5%90%8D%E7%A7%B0%E4%B8%8E%E7%AE%80%E4%BB%8B/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%8D%8F%E8%AE%AE%E5%90%8D%E7%A7%B0%E4%B8%8E%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的协议名称"><a href="#常用的协议名称" class="headerlink" title="常用的协议名称"></a>常用的协议名称</h1><hr><h2 id="计算机网络概论"><a href="#计算机网络概论" class="headerlink" title="计算机网络概论"></a>计算机网络概论</h2><ul><li><strong>SAP</strong> ；<code>service access point</code> /服务访问点。<ul><li>N+1 实体从 N 服务访问点 SAP 获得 N 服务。13</li></ul></li><li><strong>CEP</strong> ；<code>connection end point</code> /连接端点。<ul><li>N 连接的两端叫做 N 连接端点。14</li></ul></li><li><strong>SNA</strong> ；系统网络体系结构。<ul><li>是一种以大型主机为中心的集中式网络。18</li></ul></li><li><strong>APPN Advanced Peer-to-Peer Networking</strong> 高级点对点网络 19</li><li><strong>X.25</strong> ；包括了通信子网最下边的三个逻辑功能层，即==物理层、链路层和网络层==。20</li><li><strong>VC</strong> ；<code>virtual circuit</code> /虚电路连接。20</li></ul><hr><h2 id="数据通信基础"><a href="#数据通信基础" class="headerlink" title="数据通信基础"></a>数据通信基础</h2><ul><li><strong>PCM</strong> ：脉冲调制技术 40</li><li><strong>PAD</strong> ；<code>packet assembly and disassembly device</code> /分组拆装设备。<ul><li>在发送端要有一个设备对信息进行分组和编号，在接收端也要有一个设备对收到的分组拆去头尾并重排顺序。具有这些功能的设备叫做 PAD.（在以数据报的传播方式中）45</li></ul></li><li><strong>CATV</strong> ；有线电视系统。46</li><li><strong>TDM</strong> ；<code>time division multiplexing</code> /时分多路复用。47</li><li><strong>WDM</strong> ；<code>wave division multiplexing</code> /波分多路复用。48</li><li><p><strong>FDM</strong> ：<code>Frequency-division multiplexing</code> /频分多路复用</p></li><li><p><strong>CRC</strong> ；<code>cyclic redundancy check</code> /循环冗余校验码。53</p></li></ul><hr><h2 id="广域通信网"><a href="#广域通信网" class="headerlink" title="广域通信网"></a>广域通信网</h2><ul><li><strong>PSTN</strong> ；<code>public switched telephone network</code> /公共交换电话网。56</li><li><strong>DTE</strong> ；<code>data terminal equipment</code> /数据终端设备。57</li><li><p><strong>DCE</strong> ；<code>data circuit equipment</code>/数据电路设备。 57</p></li><li><p><strong>Modem</strong> ：<code>modulation and demodulation</code> /调制解调器，</p><ul><li>家用电脑上 Internet(国际互联网)网的必备工具，在一般英汉字典中是查不到这个词的，它是调制器(MOdulator)与解调器(DEModulator)的缩写形式。Modem 是实现计算机通信的一种必不可少的外部设备。因为计算机的数据是数字信号，欲将其通过传输线路(例如电话线)传送到远距离处的另一台计算机或其它终端(如电传打字机等)，必须将数字信号转换成适合于传输的模拟信号(调制信号)。在接收端又要将接收到的模拟信号恢复成原来的数字信号，这就需要利用调制解调器。61</li></ul></li><li><p><strong>TCM</strong> ；<code>trellis coded modulation</code> /格码调制技术。现代的高速 Modem（调制解调器）采用的技术。61</p></li><li><p><strong>ARQ</strong> ；（ <code>Automatic Repeat Request</code> ）ARQ 技术，</p><ul><li>主要思想：利用差错检测技术自动地对丢失帧和错误帧请求重发。停等 ARQ 协议，选择重发 ARQ 协议，后退 N 帧 ARQ 协议。 67</li></ul></li><li><p><strong>HDLC</strong> ；<code>high level data link control</code> /高级数据链路控制协议。由 SDLC 协议扩充开发而成的。69</p></li><li><strong>PVC</strong> ；<code>permanent virtual circuit</code> /永久虚电路。<ul><li>X.25 的分组层提供的虚电路服务形式中的一种。另一种是SVC(交换虚电路)。PVC 是网络指定的固定虚电路，像专用线一样，无需建立和清楚连接，可直接传送数据。PVC 适用于通过路由器维持恒定连接，从而便于在动态网络环境下传输路由选择信息的电路。75</li></ul></li><li><strong>SVC</strong> ；<code>switched virtual call</code> /交换虚电路。<ul><li>X.25 的分组层提供的虚电路服务形式中的一种。另一种是 PVC(永久虚电路)。SVC 是动态建立的虚电路，包含呼叫建立、数据传送和呼叫清除等几个过程。（以呼叫的形式通过信令来建立和释放）75</li></ul></li><li><strong>UNI</strong> ；用户-网络接口。87</li><li><strong>NNI</strong> ；<code>user-network interface</code> /网络-网络接口。87</li><li><strong>DLCI</strong> ；<code>data link connection identifier</code>/数据链路连接标识符。87</li><li><strong>LAP-B</strong> ；<code>Link Access Procedure-Balanced</code> /链路访问平衡协议。<ul><li>是 HDLC(高级数据链路控制)的子集，是链路层提供可靠数据传输的标准。</li></ul></li><li><strong>LAP-D</strong> ；链路访问规程 D-信道。<ul><li>是 CCITT 建议的 I 系列的一部分。它是为综合业务数字网络(ISDN)连接的 D 信道而设计的。D 信道是一种 ISDN 的信号传载信道。它与传输音频和数据的 B 信道共存。D 信道也能传输分组交换数据。LAP-D 为建立复杂信道，并在两点之间获得多逻辑链路提供了途径。帧结构是典型的，它包括标志、地址信息、控制信息、数据、帧检测序列和结束标志。地址能够确定服务的类型，例如是音频和数据，并终止服务。 80</li></ul></li><li><strong>ISDN</strong> ；<code>integrated service digital network</code> /综合业务数字网。<ul><li>分为 <code>narrowband integrated service digital network</code>/N-ISDN；窄带 ISDN 和 <code>Broadband integrated service digital network</code> /B-ISDN；宽带 ISDN；83</li></ul></li><li><strong>STM</strong> ；<code>synchronous transfer mode</code> /同步传输模式。<ul><li>电路交换网络按照时分多路的原理将信息从一个节点传送到另外一个节点，这种技术叫做 STM。86</li></ul></li><li><strong>ATM</strong> (<code>asynchronous transfer mode</code>) /异步传输模式<ul><li>一种能够实时传输数据、声音、视频和帧中继通信的网络技术。数据（包括帧中继数据）都被分为多个分别包含 53 字节的数据包，而这些数据包又以 1.5 到 622 Mbps 的速率在系统的任意两个节点之间进行交换。ATM 是在宽带 ISDN 协议中与 ISO/OSI 模型的 1 层和 2 层对应的层中定义的。目前通常用于包含工作站和个人计算机的局域网中。请参阅“综合服务数字网络”以及“国际标准化组织的开放式系统互联模型”。87</li></ul></li><li><strong>VCC</strong> ；<code>CadenceVirtual Component Co-design</code> /它是第一个为 IP 复用所设计的工业系统级 HW/SWco-design 开发平台环境。<ul><li>Cadence VCC 通过电子供给链进行交流和交换设计信息,为系统库和 SOC 提供必要的框架。92</li></ul></li></ul><hr><h2 id="局域网和城域网"><a href="#局域网和城域网" class="headerlink" title="局域网和城域网"></a>局域网和城域网</h2><ul><li><strong>Hub</strong> ；集线器。星型拓扑结构的中心节点。97</li><li><strong>MAC</strong> ；<code>media access control</code> /介质访问控制子层。<ul><li>IEEE802 标准吧数据链路层划分为两个子层。与物理介质相关的叫做 MAC 子层。99</li></ul></li><li><strong>NOS</strong> ；<code>Network operating system</code> /网络操作系统。<ul><li>即是，NOS 提供文件服务、打印服务、数据库服务、通信服务、信息服务、分布式服务、网络管理服务和 Internet/Intranet 服务。99</li></ul></li><li><strong>DSAP</strong> ；目标地址。<ul><li>在 IEEE802.2 中的地址字段用 DSAP 表示目标地址。101</li></ul></li><li><strong>SSAP</strong> ；源地址。在 IEEE802.2 中的地址字段用 SSAP 表示源地址。101</li><li><strong>LLC</strong> ；<code>Logic Link Control</code> /逻辑链路控制。<ul><li>数据链路层划分为逻辑链路层 LLC 子层和介质访问控制 MAC子层。LLC 负责识别网络层协议，然后对它们进行封装。LLC 报头告诉数据链路层一旦帧被接收到时，应当对数据包做何处理。它的工作原理是这样的：主机接收到帧并查看其 LLC 报头，以找到数据包的目的地，如网际层的 IP 协议。LLC 子层也可以提供流量控制并控制比特流的排序。102</li></ul></li><li><strong>CSMA/CD协议</strong> ；载波监听多路访问协议。<ul><li>CSMA 基本原理：站在发送数据前，先监听信道上是否有别的站发送的载波信号，若有，说明信道正忙，否则信道是空闲的。则根据预定的策略决定：<ul><li>1.若信道空闲，是否立即发送。</li><li>2.若信道忙，是否继续监听。103</li></ul></li></ul></li><li><strong>ALOHA协议</strong> ，和 CSMA/CD 都是随访问或竞争发送协议。 103</li><li><strong>MAN</strong> ；<code>Metropolitan Area Network</code> /城域网。<ul><li>其作用范围在广域网和局域网之间。城域网的传输速率也在 1Mbps 以上，其作用距离约为 5km—50km。106</li></ul></li><li><strong>NIC</strong> ；网卡。110</li><li><strong>EDLC</strong> ；<code>Ethernet data link controller</code> /以太网数据链路控制器。<ul><li>是网卡上的主要器件，有两套独立的系统，分别用于发送和接收。111</li></ul></li><li><strong>VLAN</strong> （<code>Virtual Local Area Network</code>）的中文名为”虚拟局域网”。<ul><li>VLAN 是一种将局域网设备从逻辑上划分成一个个网段，从而实现虚拟工作组的新兴数据交换技术。118</li></ul></li><li><strong>BPDU</strong> ；网桥协议数据单元。<ul><li>网桥之间要交换信息，这种信息以网桥协议数据单元的形式在所有网桥之间传播。126</li></ul></li><li><strong>RSTP</strong> :<code>Rapid Spanning Tree Protocol</code> /快速生成树协议<ul><li>用于加快生成树的收敛速度。128</li></ul></li><li><strong>RPR</strong> ；<code>Resilient Packet Ring</code> /弹性分组环。<ul><li>是一种采用环型拓扑的城域网技术。135</li></ul></li></ul><hr><h2 id="无线通信网"><a href="#无线通信网" class="headerlink" title="无线通信网"></a>无线通信网</h2><ul><li><strong>CDMA</strong> ；<code>code division multiple access</code> /码分多路复用。141</li><li><strong>WLAN</strong> ；(<code>Wireless Local Area Networks</code>) /无线局域网络。<ul><li>这是相当便利的数据传输系统，它利用射频(RadioFrequency； RF)的技术，取代旧式碍手碍脚的双绞铜线(Coaxial)所构成的局域网络，使得无线局域网络能利用简单的存取架构让用户透过。143</li></ul></li><li><strong>BSS</strong> ; <code>Basic Service Set</code> /基本业务集。接入点 AP 控制的所有终端组成一个 BSS。144</li><li><strong>DS</strong> ; <code>distribution system</code>/分布式系统。144</li><li><strong>AP</strong> ；<code>Access Point</code> 接入点，无线终端通过 AP 访问骨干网络。144</li><li><strong>BSA</strong> ; <code>Basic Service Area</code> /基本业务区。一个接入点 AP 覆盖的区域叫做 BSA。144</li><li><strong>IR</strong> ：<code>Infrared Ray</code> /红外线通信技术。<ul><li>红外线设备简单便宜，但受光照影响较大，对眼睛产生不良影响。145</li></ul></li><li><strong>PAM</strong> ；脉冲幅度调制。146</li><li><strong>PDM</strong> ；脉冲宽度调制。146</li><li><strong>PPM</strong> ；脉冲位置调制。146</li><li><strong>DSSS</strong> ；<code>direct sequence spread spectrum</code> /直接序列扩展频谱。146</li><li><strong>FHSS</strong> ；<code>ferquency-hopping spread spectrum</code> /频率跳动扩展频谱。146</li><li><strong>PLCP</strong> ；<code>physical layer convergence protocol</code> /物理层汇聚协议。<ul><li>物理层分为物理层汇聚协议、物理介质相关子层和 PHY 管理子层。150</li></ul></li><li><strong>CSMA/CA</strong> ；载波监听多路访问/冲突避免协议。类似于 CSMA/CD 协议。152</li><li><strong>RTS/CTS</strong> ；在 RTS/CTS 机制中，源终端先发送一个“请求发送”帧 RTS，目标终端收到 RTS 后等待一个 SIFS时间，然后发送“允许发送”帧 CTS。153</li><li><strong>MAC子层定义了三种访问控制机制</strong> ：CSMA/CA 支持竞争访问，RTS/CTS 和点协调功能支持无竞争的访问。154</li><li><strong>WEP</strong> ：<code>Wired Equivalent Privacy</code>/有线等效保密技术<ul><li>运用于IEEE 802.11，又称无线加密协议，包括共享密钥认证和数据加密两个过程。156</li></ul></li><li><strong>DSDV</strong> ：<code>Destination-Sequenced Distance Vector</code>/目标排序的距离矢量协议<ul><li>一种扁平式的==路由协议== 159</li></ul></li><li><strong>AODV</strong> ：<code>Ad hoc On-Demand Distance Vector</code>/按需分配的距离矢量协议<ul><li>一种扁平式的==路由协议== 162</li></ul></li><li><p><strong>OFDM</strong> ： <code>Orthogonal Frequency Division Multiplexing</code>/正交频分复用技术</p><ul><li>是一种多载波调制技术。168</li></ul></li><li><p><strong>PBB</strong> ；（<code>Provider Backbone Bridge</code>） /运营商主干网桥协议。</p><ul><li>PBB 基于运营商 MAC 地址，而不是基于用户 MAC 地址转发流量。PBB 技术主要定义了双层 MAC 地址的帧结构，在转发行为上并没有改变，仍然是采用了传统的 MAC 交换，这体现在 PBB 技术它的名字仍然是桥接（Bridge）上。不过交换的 MAC 地址是运营商定义的 MAC 地址，而不是用户的MAC 地址，因而这个 MAC 交换从某种角度上，也可以看成是MAC 标签交换。148</li></ul></li></ul><hr><h2 id="网络互联与互联网"><a href="#网络互联与互联网" class="headerlink" title="网络互联与互联网"></a>网络互联与互联网</h2><ul><li><strong>TP</strong> ；传输层。186<ul><li>中继器（Repeater） </li><li>网桥（Bridge）</li><li>交换机（Switch） </li><li>路由器（Router）</li><li>域（Domain）</li></ul></li><li><strong>SNACP</strong> ；<code>subnetwork access protocol</code> /子网访问协议。191</li><li><strong>SNDCP</strong> ；<code>subnetwork dependent convergence protocol</code> /会聚协议。与子网相关。191</li><li><strong>SNICP</strong> ；<code>subnetwork independent convergence protocol</code> /会聚协议。与子网无关。192</li><li><strong>CLNP</strong> ；<code>connectionless network protocol</code>/无连接的网络协议。与 IP 协议相似。194</li><li><strong>IP</strong> ；<code>Internet protocol</code> /因特网协议。是为 ARPAnet 研制的网际数据报协议。197</li><li><strong>VLSM</strong> ；<code>variable length subnetwork mask</code> /可变长子网掩码。199</li><li><strong>ID</strong> ；数据单元标识。<ul><li>IP 数据报报头中，包含下列内容：数据单元标识(ID)，数据长度，偏移(offset)，还有标识(more flag)。 201</li></ul></li><li><strong>ICMP</strong> ；<code>Internet control message protocol</code> /网际控制报文协议。<ul><li>ICMP 与 IP 同属于网络层，用于传送有关通信问题的信息。ICMP 报文封装在 IP 数据报中传送。是 IP 的伴随协议。所有实现 IP 协议的节点都必须实现 ICMP 协议。203</li></ul></li><li><strong>TCP</strong> ；<code>transmission control protocol</code> /传输控制协议。<ul><li>在 TCP/IP 协议簇中有两个传输协议：TCP 和 UDP。204</li></ul></li><li><p><strong>UDP</strong> ；<code>user datagram protocol</code> /用户数据报协议。</p><ul><li>TCP 是面向连接的，而 UDP 是无连接的。211</li></ul></li><li><p><strong>DNS</strong>  (<code>Domain Name System</code>) /Internet 的域名系统。</p><ul><li>借助该系统 Internet 上的主机具有域名地址（如microsoft.com）和 IP 地址（如 172.21.13.45）。域名地址由用户使用并自动翻译成数字 IP 地址，该地址由数据包路由软件使用。DNS 是域名服务的缩写，域名服务是执行域名系统的 Internet 实用程序。DNS 服务器也称为名称服务器，它维护包含地址的数据库并允许用户进行透明访问。213</li></ul></li><li><strong>TLD</strong> ；<code>top-level domains</code> /顶级域。<ul><li>分为国家顶级域（<code>county code top-level domains</code>，ccTLD）和通用顶级域（<code>generic top-level domains</code>，gTLD）。213</li></ul></li><li><strong>ARP</strong> (<code>Address Resolution Protocol</code>)地址解析协议<ul><li>用于在只知道一个 IP 地址（或逻辑地址）时决定与Internet 相连的局域网中节点的硬件地址（或物理地址）的 TCP/ IP 协议。向网络发送 ARP 请求，具有 IP地址的节点采用其硬件地址作出应答。虽然从技术上讲 ARP 仅指找到硬件地址，而反向 ARP (RARP) 则是指相反的过程，但是，缩写字 - ARP 通常用于描述这两种过程。ARP 受支持广播数据包的物理网络系统的限制。它在 RFC 826 中定义。 请参阅“反向地址解析协议”以及“传输控制协议/ 网际协议”。215</li></ul></li><li><strong>IGP</strong> ；<code>interior gateway protocol</code> /内部网关协议。<ul><li>在自治系统内部互相交换信息。218</li></ul></li><li><strong>EGP</strong> ；<code>exterior gateway protocol</code> /外部网关协议。<ul><li>在自治系统外部互相交换信息。218</li></ul></li><li><strong>BGP4</strong> : <code>Border Gateway Protocol 4</code>/外部网关协议<ul><li>一种动态路由发现协议，支持无类路由CIDR。219</li></ul></li><li><strong>RIP</strong> ；<code>Routing Information Protocol</code> /路由选择信息协议。221<ul><li>适用于==小型网络==，==允许最大跳数不超过15跳==</li><li>分为RIPv1和RIPv2两个版本</li><li>RIPv1的==默认路由更新时间为30s，持有时间180s==，是有类别的协议，必须IP地址与子网掩码相对应</li><li>RIPv2是增强型RIP协议，支持VLSM和CIDR</li></ul></li><li><strong>OSPF</strong> ；<code>Open Shortest Path First</code>/开放最短路径优先协议。224<ul><li>==一种链路状态协议，支持大型网络、占用网络资源少、路由收敛快==</li></ul></li><li><p><strong>GGP</strong> ；<code>gateway to gateway protocol</code> /核心网关协议。</p><ul><li>核心网关之间交换路由信息。228</li></ul></li><li><p><strong>NAT</strong> ；<code>network address translators</code>/网络地址翻译。</p><ul><li>在 IPv4 中解决 IP 路由短缺问题。230</li></ul></li><li><strong>NAPT</strong> ；<code>network address Port translation</code> /网络地址和端口翻译。230</li><li><strong>CIDR</strong> ；<code>classless inter-domain routing</code>/无类域间路由。<ul><li>CIDR 技术解决路由缩放问题 232</li></ul></li><li><strong>MPLS</strong> ；<code>multiprotocol label switching</code> /多协议标记交换。<ul><li>把第二层的链路状态信息（带宽、延迟、利用率等）集成到第三层的协议数据单元。用短而定长的标签来封装分组。该技术实现的核心就是在 IP 数据包之外封装一个 32 位的 MPLS 包头。从而简化和改进了第三层分组的交换过程。核心思想是利用标签交换取代复杂的路由运算和路由交换。234</li></ul></li><li><strong>IGMP</strong> ：<code>Internet Group Managerment Protocol</code>/因特网组管理协议。238</li><li><strong>QoS</strong> ；服务质量。247</li><li><strong>Telnet</strong> ；远程登录协议。255</li><li><strong>NVT</strong> ；<code>network virtual terminal</code> /网络虚拟终端。255</li><li><strong>FTP</strong> (<code>File Transfer Protocol</code>)/文件传输协议。<ul><li>Internet 最早的应用层协议。用于将文件复制到使用传输控制协议/网际协议 (TCP/IP) 的网络（如 Internet）上的远程计算机系统中或从其将复制出来的协议。该协议还允许用户使用 FTP 命令对文件进行操作，如在远程系统中列出文件和目录。256</li></ul></li><li><strong>匿名FTP</strong> （<code>Anonymous File Transfer Protocol</code>）/匿名文件传输协议无需建立登录名和密码就允许用户从 Internet 上任何地方检索文档、文件、程序和其它存档数据。256</li><li><strong>SMTP</strong> ；<code>simple mail transfer protocol</code> /简单邮件传输协议。257</li><li><strong>POP3</strong> ；<code>Post Office Protocol</code> /邮局协议第 3 版。电子系统中的收件服务器。SMTP 是发件服务器。257</li><li><strong>WWW</strong> : <code>World Wide Web</code> 的缩写，全球网，又称万维网。<ul><li>它是一个基于超文本方式的信息检索工具，提供一种友好的信息查询接口，是目前最受欢迎同时也是最先进Internet 检索工具之一。214 WWW 的模型： WWW 的运行方式是客户端/服务器方式。Web 服务器专用端口号（80）时刻监视进来的连接请求，建立连接后用 HTTP协议和用户进行交互作用。258</li></ul></li><li><strong>HTTP</strong> ；<code>Hyper Text Transmission Protocol</code> /超文本传输协议。是 Web 技术中的核心协议。258</li><li><strong>URL</strong> ；<code>uniform resource locators</code> /统一资源定位器。浏览器通过 URL 对信息进行寻址。259</li><li><strong>HTML</strong> : <code>Hyper Text Markup Language</code>,超文本标示语言。HTML 可以 描述主页(Home Page)和静态的文本。260</li></ul><hr><h2 id="下一代互联网"><a href="#下一代互联网" class="headerlink" title="下一代互联网"></a>下一代互联网</h2><ul><li><p><strong>IPv6路由协议</strong> 275</p><ul><li><code>RIPng</code></li><li><code>OSPFv3</code></li><li><code>BGP 4+</code></li><li><code>ICMPv6</code></li></ul></li><li><p><strong>ISATAP</strong> ；<code>intra-site automatic tunnel addressing protocol</code> /站内自动隧道寻址协议。</p><ul><li>ISATAP 过渡技术采用了双栈和隧道技术实现从 IPv4 向 IPv6 的过渡。ISATAP 隧道是点到点的自动随到技术，它将 IPv4 地址置入 IPv6 地址中。291</li></ul></li><li><strong>NAT-PT</strong> ；<code>network address translation-protocol</code> /网络地址转换协议转换。</li><li>是一种纯 IPv6 节点和 IPv4 节点间的互通方式。294</li></ul><hr><h2 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h2><ul><li><strong>现代加密技术</strong> 308<ul><li>DES</li><li>3DES</li><li>IDEA</li><li>AES</li><li>RC4</li><li>RSA</li><li>公钥加密算法</li></ul></li><li><strong>KDC</strong> ；<code>key distribution center</code> /密钥分发中心。312</li><li><strong>CA</strong> (<code>certification authority</code>) /证书颁发机构 319</li><li><strong>CRL</strong> （<code>certificate revocation list</code>）/证书吊销列表由证书颁发机构 (CA) 保留和发布的文档，列出已由证书颁发机构吊销的证书。请参阅“证书颁发机构”。321</li><li><strong>KMI</strong> ；<code>key management infrastructure</code> /密钥管理基础结构。322</li><li><strong>PKI</strong> ；<code>public key infrastructure</code> /公约基础结构。323</li><li><strong>RA</strong> ；<code>registration authority</code> /注册机构。323</li><li><strong>VPN</strong> ；<code>Virtual Private Network</code> /虚拟专用网。<ul><li>任意一对 VPN 用户之间没有专用的物理连接。325</li></ul></li><li><strong>PPP</strong> ；<code>point-to-point protocol</code> /点对点协议。<ul><li>可以在点对点链路上传输多种上层协议的数据报。PPP 协议是一组协议，包括：<ul><li>1.封装协议。</li><li>2.链路控制协议（<code>link control protocol</code>，LCP）。</li><li>3.网络控制协议。327</li></ul></li></ul></li><li><strong>PPTP</strong> ；<code>point-to-point tunneling protocol</code> /点对点隧道协议。<ul><li>PPTP 定义了由 PAC 和 PNS 组成的客户端/服务器结构，从而把 NAS（<code>Network Attached Storage</code>：网络附属存储）的功能分解给两个逻辑设备<ul><li>{1.PPTP接入集中器（<code>PPTP access concentrator</code> ,PAC），</li><li>2.PPTP 网络服务器（<code>PPTP network server</code>，PNS。</li><li>运行 TCP/IP协议，可以使用任何 LAN 和 WAN 接口硬件实现。）}，以支持虚拟专用网。在一对 PAC 和 PNS 之间必须建立两条并行的 PPTP 连接，一条是运行在 TCP 协议上的控制连接，一条是传输 PPP 协议数据单元的 IP 隧道。329</li></ul></li></ul></li><li><strong>L2TP</strong> ；<code>layer 2 tunneling protocol</code> /第 2 层隧道协议。<ul><li>用于把各种拨号服务集成到 ISP 的服务提供点。332</li></ul></li><li><strong>IPSec</strong> ；<code>IP security</code> /是 IETF 定义的一组协议，<ul><li>用于增强 IP 网络的安全性。333</li></ul></li><li><strong>SSL</strong> ；<code>secure socket layer</code> /安全套接层。<ul><li>传输层安全协议，用于实现 Web 安全通信。分为两层，底层是 SSL记录协议。运行在传输层 TCP 之上，用于封装各种上层协议。上层协议是 SSL 握手协议。SSL 与 IPSec 的区别：IPSec VPN 是在网络层建立安全隧道，适用于建立固定的虚拟专用网，而 SSL 的安全连接是通过运用层的 web 连接建立的，更适合移动用户远程访问公司的虚拟专用网。337</li></ul></li><li><strong>S-HTTP</strong> ；<code>secure HTTP</code> /安全的超文本协议。<ul><li>是一个面向报文的安全通信协议。341</li></ul></li><li><strong>PGP</strong> ；<code>pretty good privacy</code> /电子邮件加密软件包。341</li><li><strong>Firewall</strong> /防火墙<ul><li>一种安全系统，它试图保护公司网络不受外来的威胁，如来自 Internet 等其他网络的电脑入侵者的攻击。防火墙防止公司网络的计算机与外部计算机直接通讯，反之亦然。相反，所有通讯通过公司网络外的代理服务器进行传递，代理服务器将决定让特定信息或文件通过网络是否安全。348</li></ul></li><li><strong>IDS</strong> ；<code>intrusion detection system</code> /入侵检测系统。主动防御技术。357</li><li><strong>IPS</strong> ：<code>intrusion prevention system</code> /入侵防御系统。364</li></ul><hr><h2 id="网络操作系统与应用服务器"><a href="#网络操作系统与应用服务器" class="headerlink" title="网络操作系统与应用服务器"></a>网络操作系统与应用服务器</h2><ul><li><strong>MMC</strong> ；<code>Microsoft管理控制台</code>。MMC 不执行管理功能，但集成管理工具。381</li><li><strong>IIS</strong> ；<code>Internet information server</code> /因特网信息服务器。<ul><li>组建局域网时，可以利用 IIS 来构建 WWW 服务器、FTP 服务器和 SMTP 服务器。404</li></ul></li><li><strong>DHCP</strong> (<code>Dynamic Host Configuration Protocol</code>) /动态主机配置协议<ul><li>当主机与网络连接时，允许连接到 Internet 的网络自动指定主机临时 IP 地址的 TCP/IP 协议。427</li></ul></li></ul><hr><h2 id="网际协议"><a href="#网际协议" class="headerlink" title="网际协议"></a>网际协议</h2><h2 id="IPCP-；IP-控制协议。"><a href="#IPCP-；IP-控制协议。" class="headerlink" title="- IPCP ；IP 控制协议。"></a>- <strong>IPCP</strong> ；<code>IP 控制协议</code>。</h2><h2 id="网络安全认证协议"><a href="#网络安全认证协议" class="headerlink" title="网络安全认证协议"></a>网络安全认证协议</h2><ul><li><strong>PAP</strong> ；<code>password authentication protocol</code> /口令认证协议。</li><li><strong>CHAP</strong> ；<code>challenge handshake authentication protocol</code> /挑战-握手认证协议。<ul><li>是一种 3 次握手认证协议，并不传送密码，而是传送有密码生成的散列值。</li></ul></li><li><strong>TLS</strong> ；<code>transport layer security</code> /传输层安全标准。</li><li><strong>HTTPS</strong> ；SSL/TLS 在 web 安全通信中被称为 HTTPS。</li></ul><hr><h2 id="存储技术"><a href="#存储技术" class="headerlink" title="存储技术"></a>存储技术</h2><ul><li><strong>RAID</strong> ；<code>redundant arrays of inexpensive disk</code> /廉价磁盘冗余阵列。<ul><li>可靠快速的大容量磁盘系统。</li></ul></li><li><strong>DAS</strong> ；<code>direct-attached storage</code> /开放系统的直连式存储。534</li><li><strong>NAS</strong> ；<code>network attached storage</code> /网络接入存储。535</li><li><strong>SAN</strong> ；<code>storage area network</code> /存储区域网络。535 </li></ul><hr><h2 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h2><ul><li><strong>CMTS</strong> ；线缆调制解调器终端设备。<ul><li>向大量的线缆调制解调器提供高速连接。585</li></ul></li><li><strong>HFC</strong> ；<code>hybrid fiber/coax</code> /混合光纤/铜缆系统。585</li><li><strong>VDSL</strong> ；甚高比特率 DSL。一种快速非对称 DSL 业务。585—587</li><li><strong>BRAS</strong> ；宽带接入服务器。587</li><li><strong>DDN</strong> ；<code>digital data network</code> /数字数据网络。588</li><li><strong>DTU</strong> ；数据终端设备。588</li><li><strong>SDH</strong> ；<code>synchronous digital hierarchy</code> /同步数字体系。<ul><li>是一种将复接、线路传输及交换功能融为一体，并由统一网管系统操作的综合信息传送网络。589</li></ul></li><li><strong>PDH</strong> ；<code>plesiochronous digital hierarchy</code> /准同步数字系列兼容方式。<ul><li>提供两种方式的接口：一是传统 E1接口，另一个是封装了多个 E1 信道的 CPOS（channel POS）590</li></ul></li><li><strong>MSTP</strong> ；<code>multi-service transport platform</code> /基于 SDH 的多业务传送平台。<ul><li>是指基于 SDH 平台同时实现 TDM、ATM、以太网等业务的接入、处理和传送，提供统一网管的多业务节点。591</li></ul></li><li><strong>DSL</strong> ；<code>digital subscriber line</code> /数字用户电路。<ul><li>多种类型：<ul><li><strong>ADSL</strong> ；非对称 DSL。<ul><li>用户的上下行流量不对称，一般具有三个信道，分别是 1.544~9Mbps 的高速下行信道，16~640Kbps 的双工信道，64Kbps 的语音信道。</li></ul></li><li><strong>SDSL</strong> ；对称 DSL，<ul><li>用户的上下行流量对等，最高可以达到 1.544Mbps。</li></ul></li><li><strong>ISDN DSL</strong> ；介于 ISDN 和 DSL 之间，<ul><li>可以提供最远的距离为 4600~~5500m 的 128Kbps 双向对称传输。</li></ul></li><li><strong>HDSL</strong> ；高比特率 DSL。</li></ul></li></ul></li></ul><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><strong>LDAP</strong> ；<code>light directory access protocol</code> /轻型目录访问协议。<ul><li>架构（schema）是活动目录中的对象模型。通过建立对象模型来实现对 LDAP 的支持。</li></ul></li><li><strong>SAM</strong> ；<code>safe account manager</code> /安全目录管理器。</li><li><strong>VTP</strong> ；<code>VLAN 中继协议</code>。VTP 有三种工作模式，即服务器模式，客户模式和透明模式。</li><li><strong>IGRP</strong> ；<code>interior gateway routing protocol</code> /内部网关路由协议。<ul><li>是一种动态距离向量路由协议。</li></ul></li><li><strong>EIGRP</strong> ；增强型的 IGRP 协议。</li><li><strong>PRI</strong> ；<code>primary rate interface</code> /主要速率接口。<ul><li>ISDN 提供两种类型访问接口中的一种。</li></ul></li><li><strong>BRI</strong> ; <code>Basic Rate Inerface</code> /基本速率接口。<ul><li>ISDN 提供两种类型访问接口中的一种。</li></ul></li><li><strong>DDR</strong> ；<code>dial on demand routing</code> /按需拨号路由。</li><li><strong>ACL</strong> ；(<code>access control list</code>) /访问控制列表 。<ul><li>指明哪些用户或用户组有权访问或修改特定文件的列表；Windows 全权访问控制列表 (DACL) 以及系统访问控制列表 (SACL) 就是访问控制列表的示例。</li></ul></li><li><strong>NME</strong> ；<code>network management entity</code> /网络管理实体。<ul><li>每一个网络节点都包含一组与管理有关的软件，叫做网络管理实体。</li></ul></li><li><strong>NMA</strong> ；<code>network management application</code> /网络管理应用。<ul><li>NMA 提供用户接口，根据用户的命令显示管理信息，通过网络向 NME 发出请求或命令，以便获取有关设备的管理信息，或者改变设备的配置状态。442</li></ul></li><li><strong>MIB</strong> ；<code>management information base</code> /管理信息库。</li><li><strong>MTTR</strong> ；<code>mean time between failure</code> /平均无故障时间。</li><li><strong>SNMP</strong> ；<code>simple network management protocol</code> /简单网络管理协议。<ul><li>为应用层协议，所以它依赖于 UDP 数据报服务（原因是它的速率高）。作用是把管理应用程序的服务调用变成对应的 SNMP 协议数据单元，并利用 UDP数据报发送出去。</li></ul></li><li><strong>SGMP</strong> ；<code>simple gateway monitoring protocol</code> /简单网关监控协议。</li><li><strong>MPLS VPN</strong> ；是一种基于 MPLS 技术的 IP-VPN。595</li><li><strong>TDR</strong> ；<code>time domain reflectors</code> /时域反射计。<ul><li>能都快速的定位金属电缆中的断路、短路、压接、扭结、阻抗不匹配等问题。603</li></ul></li><li><strong>OTDR</strong> ；<code>optical time domain reflectors</code> /光时域反射计。用于光纤的测试。603</li><li><strong>default gateway</strong> /默认网关<ul><li>在 TCP/IP 协议中，本地网络中知道 Internet 上其他网络的网络 ID 的中间网络设备，以便它可以将数据包转发到其他网关直到将其传送到与指定目标相连的网络为止。</li></ul></li><li><strong>access control</strong> /访问控制<ul><li>根据用户标识及其在不同预定义组中的成员资格限制对资源进行访问的机制。访问控制通常用于控制用户对网络资源，如服务器、目录和文件等进行访问。</li></ul></li><li><strong>InterNIC</strong> ；<code>Internet network information center</code> /Internet 网络信息中心。<ul><li>管理着域名树的根，称为根域，是域名空间的最高级别。没有名称，用句号“.”表示。在 DNS 名称中，末尾附加一个“.”,就是表示根域。</li></ul></li><li><strong>GIDR</strong> ；<code>classless inter domain routing</code> /无类别的域间路由协议。<ul><li>在 IPv4 中解决 IP 路由短缺问题。198</li></ul></li><li><strong>LER</strong> ；<code>label edge router</code> /标记边缘路由器。<ul><li>分组进入 MPLS 网络时，LER 为其加一个标记。203</li></ul></li><li><strong>LSR</strong> ；<code>label switch router</code> /标记交换路由器。<ul><li>根据标记来处理分组。不经过第三层。从而加快了网络的交换速度。204</li></ul></li><li><strong>LIB</strong> ；<code>label information base</code> /标记信息库。204</li><li><strong>ISA</strong> ；<code>integrated service architecture</code> /集成服务体系结构。IP QoS 技术。204</li><li><strong>FEC</strong> ；<code>forward equivalent class</code> /转发等价类。<ul><li>MPLS 可以把多个通信流汇聚成为一个 FEC。204</li></ul></li><li><strong>DS域</strong> ；<code>DS Domain</code> /Internet 中能实现分区服务的连续区域称为 DS 域。在一个 DS 域中，服务提供策略和逐跳行为都是一致的。207</li><li><strong>DSCP</strong> ；<code>DS code point</code> /每个 IP 分组都要根据其 QoS 需要打上一个标记，这种标记称为 DS 码点。207</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用公式</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="一．可靠度-可用性-计算机"><a href="#一．可靠度-可用性-计算机" class="headerlink" title="一．可靠度(可用性)计算机"></a>一．可靠度(可用性)计算机</h1><ul><li>串联 ==R＝R1 $\times$ R2== 对应失效率：==λ1+λ2==</li><li>并联 ==R＝1-(1-R1)(1-R2)==<h1 id="二、-香农定理（有噪声）数据速率："><a href="#二、-香农定理（有噪声）数据速率：" class="headerlink" title="二、 香农定理（有噪声）数据速率："></a>二、 香农定理（有噪声）数据速率：</h1></li><li>在一条带宽为 W（HZ），信噪比为 S/N 的有噪声极限数据速率 </li><li>==Vmax = W $\times$ $\log_2 (1+S/N)$==<ul><li>单位(b/s)</li></ul></li><li><strong>分贝与信噪比的关系为：</strong></li><li>==dB=10 $\times$ $\lg(S/N)$==<ul><li>dB 的单位:分贝</li></ul></li><li>例：设信道带宽为 4kHz，信噪比为 30dB，按照香农定理，信道的最大数据传输速率约等于？</li><li>解：1，例出香农定理算式：<ul><li>==Vmax = W $\times$ $\log_2 (1+S/N)$== </li><li>2, 列出信噪比关系：==dB=10$\times$$\lg(S/N)$==</li><li>3, 计算 30dB=10$\times$$\lg(S/N)$, 则 $S/N=1000$ </li><li>4，Vmax=4KHz , $\log_2 (1+1000)$=4000 $\times$ 10 =40kb/s</li></ul></li><li><strong>注意：此处单位换算1kb/S=1000b/s</strong><h1 id="三、-尼奎斯特定理（无噪声）"><a href="#三、-尼奎斯特定理（无噪声）" class="headerlink" title="三、 尼奎斯特定理（无噪声）"></a>三、 尼奎斯特定理（无噪声）</h1></li><li>若信道带宽为 W（HZ）,则最大码元速率（波特率）:</li><li>==B=2W（baud）==</li><li>由尼奎斯特定理可得：</li><li>==Vmax=B  $\log_2 N$ = 2 W  $\log_2 N$==<ul><li>单位（b/s）</li></ul></li></ul><hr><ul><li>例：设信道带宽为 3400Hz，调制为 4 种不同的码元，根据 Nyquist 定理，理想信道的数据速率为？<br><br>解：<br><br>1，根据题意例出尼奎斯特定理算式：Vmax=2W$\log_2 N$ <br><br>2, 直接套入数字：Vmax=2 $\times$ 3400$\times$ $\log_2 4$ <br><br>3, Vmax=2x3400x2=13600b/S=13.6kb/s <br></li><li><strong>注意：此处出现单位换算一次，13600b/s=13.6kb/s</strong></li></ul><hr><ul><li>例 1：设信道采用 2DPSK 调制，码元速率为 300 波特，则最大数据速率为 <br><br>解：<br><br>Vmax=B $\times$ $\log_2 N$=300x1=300b/s <br></li></ul><hr><ul><li>例 2：在异步通信中，每个字符包含 1 位起始位，7 位数据位，1 位奇偶效验位和两位终止位，若每秒传送 100 个字符，采用 4DPSK 调制，则码元速率为？有效数据速率为？ <br><br>解：<br><br>1，根据题意计算数据速率为 （1+7+1+2）$\times$ 100=1100b/s <br><br>2，由尼奎斯特定理得出，1100b/s=B$\log_2 4$ <br><br>3，B=1100/2=550baud <br><br>4, 有效数据速率，即单位时间内传输的数据位，即 7 $\times$ 100=700b/S <br></li></ul><h1 id="四、-数据传输延迟"><a href="#四、-数据传输延迟" class="headerlink" title="四、 数据传输延迟"></a>四、 数据传输延迟</h1><ul><li><strong>总延迟 T=发送延迟 T1+传输延迟 T2</strong></li><li>==注意：电信号在电缆上传播的速度为光速的 2/3，即20wkm/s==</li><li>==卫星传送信号的延迟恒定为 270ms,与地面距离无关==</li></ul><hr><ul><li>例：在相隔 2000km 的两地间通过电缆以 4800b/s 的速率传送3000 比特长的数据包，从开始发生到接收数据需要的时间是？如果用 50Kb/s 的卫星信道传送，则需要的时间是？ <br><br>解： <br><br>对于电缆： <br><br>传输延迟 T1=2000km/(20km/ms)=10ms <br><br>发送延迟 T2=3000b/(4800b/s)=625ms <br><br>T=T1+T2=625ms+10ms=635ms <br><br>对于卫星：<br><br>传输延迟 T1=270ms <br><br>发送延迟 T2=3000 b/(50kb/s)=60ms <br><br>T=T1+T2=270ms+60ms=330ms <br></li><li><p><strong>注意：卫星传输数据时与地面相隔距离无关。</strong></p></li><li><p><strong>最小帧长计算，先求往时间，再用时间*数据速率</strong></p></li><li>例如：一个运行ＣＳＭＡ/ＣＤ协议的以太网，数据速率为 1Ｇb/s，网段长 1km,信号速率为为 20000km/s，则最小帧长是多少？<br><br>单程传播时间为 1km/200000=5us，往返要 10us,最小帧为 1Ｇb/s $\times$ 10us=10000bit </li></ul><h1 id="五、-PCM-计算问题"><a href="#五、-PCM-计算问题" class="headerlink" title="五、 PCM 计算问题"></a>五、 PCM 计算问题</h1><ul><li>PCM <strong>主要经过3个过程：采样、量化和编码。</strong></li><li>==f=1/T $\geq$ 2 $f_{max}$==</li><li>f为采样频率，T为采样周期， $f_{max}$为信号的最高频率。</li></ul><hr><ul><li>例：设信道带宽为 3400HZ，采用 PCM 编码，采样周期为 125μs，每个样本量化为 128 个等级，则信道的数据速率为？<br><br>解：<br></li><li>f=1s/125us=8000Hz</li><li>8000Hz＞3400Hz $\times$ 2</li><li>128= $2^7$</li><li>则：数据速率=8000Hz  $\times$  7=56000b/S=56kb/s</li></ul><h1 id="六、求芯片数计算必考"><a href="#六、求芯片数计算必考" class="headerlink" title="六、求芯片数计算必考"></a>六、求芯片数计算必考</h1><ul><li>假设有一个存储器存储容量为 M<em>N 位，若使用 m</em>n 的芯片，则需要(M/m) $\times$ (N/n)个存储芯片 (注：单位要换成一致)</li><li>若内存地址区间为 4000H~43FFH，每个存储单位可存储 16 位二进制数，该内存区域由 4 片存储器芯片构成，则构成该内存所用的存储器芯片的容量是 （） 。<ul><li>A．512×16bit B．256×8bit C．256×16bit D．1024×8bit<blockquote><p>试题解析：<br>总存储单位=（43FFH - 4000H + 1H）= 400H = 1024 （H 代表 16 进制）<br>每个存储器芯片的容量为：1024 × 16 / 4 = 4096。<br>由于每个存储单位可存储 16 位二进制数，所以可以采用 256×16bit</p></blockquote></li></ul></li></ul><h1 id="七、流水线计算"><a href="#七、流水线计算" class="headerlink" title="七、流水线计算"></a>七、流水线计算</h1><ul><li><strong>流水线周期值等于最慢的那个指令周期（最大值），即为△t</strong></li><li>==流水线执行时间=首条指令的全部时间+（指令总数－1）$\times$ 周期值==</li><li>==流水线吞吐率=任务数/完成时间=p/△t==</li><li><strong>流水线加速比=不采用流水线的执行时间/采用流水线的执行时间</strong></li><li>==流水线的总时间＝（指令总数+2）$\times$ 周期值==</li><li>流水线建立时间：<ul><li>==T= n$\times$△t==</li><li>其中，n表示指令的条数</li></ul></li><li>执行m条指令的时间：<ul><li>==T=$\sum_1^n<script type="math/tex">\Delta</script>t_i$+(M-1)$\Delta$$t_j$==</li><li>其中，n即把流水线分成n段，$\Delta<script type="math/tex">t_i$表示每段花费的时间，$\Delta</script>t_j$表示时间最长的那一段</li></ul></li></ul><hr><ul><li>例：若每一条指令为取指、分析和执行。已知取指时间 a，分析时间 b，执行时间 c（最大）。按串行方式执行完 100 条指令需要 多少时间？<br>按照流水方式执行，执行完 100 条指令需要多少时间。流水线周期为 C，即最大值。<br></li><li>100 条指令的串行方式时间是==(a+b+c) $\times$ 100==</li><li>100 条指令的流水方式时间是==(a+b+c)+c $\times$ 99==</li><li>流水线吞吐率为 100/(a+b+c)+c*99</li></ul><hr><h1 id="八、Cache：又称高速缓存存储器"><a href="#八、Cache：又称高速缓存存储器" class="headerlink" title="八、Cache：又称高速缓存存储器"></a>八、Cache：又称高速缓存存储器</h1><ul><li>==命中率：访问信息的概率==</li><li>假如执行过程中对 Cache 的访问次数为 N1 和对主存访问为 N2，则 Cache 命中率为 ==H＝N1/（N1+N2）==<br><br>平均存取时间：可用 Cache 和主存的访问周期 T1、T2 和命中率 H 表示<br><br>即：T＝H*T1+（1－H）T2 <br></li></ul><h1 id="九、CRC，海明码计算"><a href="#九、CRC，海明码计算" class="headerlink" title="九、CRC，海明码计算"></a>九、CRC，海明码计算</h1><ul><li><strong>奇偶校验码添加1位校验码，其码距变为2。</strong></li><li><p>海明码：利用奇偶性来检错和校验的方法。假设有 m 位信息码，加入 k 位校验码，则满足：<br><br> ==m+k+1 $\leq$ $2^k$==</p></li><li><p>一个码组内有e个误码，则最小码距: <br><br>  ==d $\geq$ e+1==</p></li><li><p>一个码组能够纠正 n 个误码，则最小码距: <br><br>  ==d $\geq$ 2n+1==</p><p><img data-src="https://s3.ax1x.com/2021/03/04/6VKcmq.png" alt="hmm"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络应用服务器02</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A802/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A802/</url>
      
        <content type="html"><![CDATA[<h1 id="01-nbsp-VM10虚拟机安装配置"><a href="#01-nbsp-VM10虚拟机安装配置" class="headerlink" title="01&nbsp;VM10虚拟机安装配置"></a>01&nbsp;VM10虚拟机安装配置</h1><h2 id="1-1-nbsp-虚拟机VM简介"><a href="#1-1-nbsp-虚拟机VM简介" class="headerlink" title="1.1&nbsp;虚拟机VM简介"></a>1.1&nbsp;虚拟机VM简介</h2><ul><li>VirtualMachineware，中文名“威睿”，虚拟机软件，可以使你在一台机器上同时允许两个或更多DOS、Windows、LINUX系统，每个系统你都可以进行虚拟机的分区、配置而不影响真实硬盘的数据，比较适合学习和测试。</li><li><p>在使用上，这台虚拟机和真正的物理主机没有太大的区别，都需要分区、格式化、安装操作系统、安装应用程序和软件，总之，一切操作都跟一台真正的计算机一样</p></li><li><p>虚拟机VM几个注意事项： <strong>CPU要支持虚拟化。</strong></p><ul><li>安装VMWareTools工具：可以实现虚拟机和真机之间的复制粘贴</li><li>虚拟机——管理——克隆：可以快速复制一个系统。</li><li>2008登陆密码：<code>dtwlxy_VlP</code>要符合复杂度。</li><li>VMware10永久许可密钥<ul><li><code>5A6Z-20JD2-LZWZ9-H38N0-92L62</code></li></ul></li><li>VMware14永久许可密钥<ul><li><code>FF31K-AHZD1-H8ETZ-8WWEZ-WUUVA</code></li></ul></li></ul></li><li><p>Windows Server 2008 R2只 <strong>支持64位主机</strong>，需要主机BIOS中CPU支持64位并开启虚拟化</p></li></ul><h2 id="1-2-nbsp-电脑主机BIOS屮的CPU开启虚拟化支持的方法"><a href="#1-2-nbsp-电脑主机BIOS屮的CPU开启虚拟化支持的方法" class="headerlink" title="1.2&nbsp;电脑主机BIOS屮的CPU开启虚拟化支持的方法"></a>1.2&nbsp;电脑主机BIOS屮的CPU开启虚拟化支持的方法</h2><ol><li>进BIOS，开机按F2或F12或DEL等键（Fn）。</li><li><code>Configuration</code>选项，<code>Intel Virtual Technology</code>并回车，将光标移至<code>Enabled</code>，然后再回车，最后按<code>F10</code>保存并退出。</li></ol><ul><li>如果找不到Configuration选项，尝试一下方法：</li></ul><ol><li>某些HP（惠普）电脑进入BIOS后，需要选择<br><code>SystemConfiguration</code>菜单，然后选择<code>Device Configuration</code>,找到<code>Virtualization Technology</code>,设置为<code>Enabled</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络应用服务器01</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A801/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A801/</url>
      
        <content type="html"><![CDATA[<h1 id="01-nbsp-Win2008基础"><a href="#01-nbsp-Win2008基础" class="headerlink" title="01&nbsp;Win2008基础"></a>01&nbsp;Win2008基础</h1><h2 id="1-1-nbsp-网络操作系统"><a href="#1-1-nbsp-网络操作系统" class="headerlink" title="1.1&nbsp;网络操作系统"></a>1.1&nbsp;网络操作系统</h2><ul><li><strong>定义</strong> ：<ul><li>用统一的方法管理各主机之间的通信和资源的共享</li></ul></li><li><strong>主要功能</strong>：<ul><li>网络通信、共享资源、网络管理、网络服务、互操作、网络接口</li></ul></li><li><strong>四大特征</strong>：<ul><li>并发、资源共享、虚拟、异步性</li></ul></li><li><strong>安全性</strong>：<ul><li>用户账号、时间限制、地点限制、磁盘空间限制、传输介质、加密审计</li></ul></li></ul><h2 id="1-2-nbsp-网络服务器Windows-Server-2008"><a href="#1-2-nbsp-网络服务器Windows-Server-2008" class="headerlink" title="1.2&nbsp;网络服务器Windows Server 2008"></a>1.2&nbsp;网络服务器Windows Server 2008</h2><ul><li>微软基于WindowsXP/NT5.1开发的服务器操作系统，于2008年发布，原定2018结束支持，后延期至2026年。==企业版、标准版、web版数据中心版等8个版本==。</li><li>专为下一代网络、应用程序和Web服务设计，R2升级版提升了虚拟机、系统管理、信息安全，仅支持64位，服务于大、中、小企业。</li><li><strong>新增功能</strong> ：1、网站IIS7，2、虚拟机化Hyper-V；3、可靠可扩展。4、管理中心增强。</li></ul><h2 id="1-3-nbsp-网络服务器Red-Hat-Enterprise-Linux7-0"><a href="#1-3-nbsp-网络服务器Red-Hat-Enterprise-Linux7-0" class="headerlink" title="1.3&nbsp;网络服务器Red Hat Enterprise Linux7.0"></a>1.3&nbsp;网络服务器Red Hat Enterprise Linux7.0</h2><ul><li>简称红帽子，是开放源代码的产品，是Linux操作系统的一种。因为它具备最好的图形界面，无论是安装、配置还是使用都十分方便，而且运行稳定，适合做服务器。</li><li>在第9个版本之后，RedHat公司不再发行RedHatLinux，而开始发行Fedorao。同时将其商业化的努力全部转向了RedHatEnterprise<br>Linux系列，目前最新版是RHEL7.0</li></ul><h1 id="02-nbsp-Win2008基础"><a href="#02-nbsp-Win2008基础" class="headerlink" title="02&nbsp;Win2008基础"></a>02&nbsp;Win2008基础</h1><h2 id="2-1-nbsp-winserver2008本地用户与组"><a href="#2-1-nbsp-winserver2008本地用户与组" class="headerlink" title="2.1&nbsp;winserver2008本地用户与组"></a>2.1&nbsp;winserver2008本地用户与组</h2><ul><li><strong>用户</strong>：<ul><li>就是包含用户名、密码、权限以及说明</li></ul></li><li><strong>用户组</strong>：<ul><li>就是具有相同性质的用户归结在一起，统一授权，组成用户组</li></ul></li><li><strong>用户组分类</strong>：<ul><li>全局组、本地组、特殊组</li></ul></li><li><strong>创建用户和组</strong>：<ul><li>计算机——右键——管理——配置——本地用户和组</li></ul></li></ul><h2 id="2-2-nbsp-常见用户和组的权限"><a href="#2-2-nbsp-常见用户和组的权限" class="headerlink" title="2.2&nbsp;常见用户和组的权限"></a>2.2&nbsp;常见用户和组的权限</h2><div class="table-container"><table><thead><tr><th style="text-align:center">组名</th><th style="text-align:center">描述信息</th></tr></thead><tbody><tr><td style="text-align:center">Administrators</td><td style="text-align:center">具有完全控制权限，并且可以向其他用户分配用户权利和访问控制权限</td></tr><tr><td style="text-align:center">Backup&nbsp;Operators</td><td style="text-align:center">加入该组的成员可以备份和还原服务器上所有文件</td></tr><tr><td style="text-align:center">Guests</td><td style="text-align:center">拥有一个在登录时创建的临时配置文件，在注销时该配置文件将被删除</td></tr><tr><td style="text-align:center">Network<br>Configuration<br>Operators</td><td style="text-align:center">该组具有创建用户账户和组账户的权利，可以在PowerUsers组、Users组和Guests组中添加或删除用户，但是不能管理Administrators组成员，可以创建和管理共享资源</td></tr><tr><td style="text-align:center">Print Operators</td><td style="text-align:center">可以管理打印机</td></tr><tr><td style="text-align:center">Users</td><td style="text-align:center">可以执行一些常见任务，但不能共享目录和创建本地打印机</td></tr></tbody></table></div><h2 id="2-3-nbsp-winserver2008活动目录"><a href="#2-3-nbsp-winserver2008活动目录" class="headerlink" title="2.3&nbsp;winserver2008活动目录"></a>2.3&nbsp;winserver2008活动目录</h2><ul><li>是指网络资源信息的目录，==是一个数据库==，如用户、计算机、进程、服务、应用程序等，有了活动目录，才能登陆域，才能访问网络资源</li><li><strong>活动目录</strong>（Active Directory），是一个==动态的分布式文件系统==，包含网络信息的目录结构和相关的目录服务，==自动维护信息的一致性==。</li><li><strong>AD</strong> ==存储着计算机网络的配置信息和安全信息==，这些信息分散地存储在网络的多个域控制器中，由多个网络管理员进行管理和维护。</li></ul><p>   <img data-src="https://s3.ax1x.com/2021/02/27/6S0nBt.png" alt="hdml"></p><h2 id="2-4-nbsp-活动目录结构"><a href="#2-4-nbsp-活动目录结构" class="headerlink" title="2.4&nbsp;活动目录结构"></a>2.4&nbsp;活动目录结构</h2><ul><li><strong>组织单元OU</strong><ul><li>共享同一活动目录的一组计算机 <strong>组合</strong></li></ul></li><li><strong>域Domain</strong><ul><li>活动目录的核心单元</li></ul></li><li><strong>域树Tree</strong><ul><li>域的集合</li></ul></li><li><strong>域林Forest</strong><ul><li>域树的集合</li></ul></li></ul><h2 id="2-5-nbsp-活动目录的工作组"><a href="#2-5-nbsp-活动目录的工作组" class="headerlink" title="2.5&nbsp;活动目录的工作组"></a>2.5&nbsp;活动目录的工作组</h2><ul><li>活动目录中的工作组<ul><li>全局组：来自本域用于全林。</li><li>通用组：来自全林用于全林。</li><li>域本地组：来自全林用于本域</li></ul></li><li><p>活动目录的安装和配置：1、需要NTFS分区。2、需要安装DNS服务器。开始——&gt;运行——&gt;执行<code>dcpromo.exe</code>，启动域控服务器安装向导。</p><p> <img data-src="https://s3.ax1x.com/2021/02/27/6S0uHP.png" alt="hdmlgzz"></p></li></ul><h2 id="2-6-nbsp-Windows2008R2远程桌面服务"><a href="#2-6-nbsp-Windows2008R2远程桌面服务" class="headerlink" title="2.6&nbsp;Windows2008R2远程桌面服务"></a>2.6&nbsp;Windows2008R2远程桌面服务</h2><ul><li><p>Windows2008R2远程桌面服务：了满足同时允许多个用户同时远程一台服务器，就需要开启多个Windows远程桌面连接才能满足自己的要求。</p></li><li><p>有6个组件：1、远程桌面会话主机，RD的服务端。2、远程桌面Web访问，提供通过Web浏览器或者APP访问。3、远程桌面授权，给RD客户端颁发许可证。4、远程桌面网关，可以给RD客户机通过外网连接网。5、远程桌面连接代理，支持连接APP程序或虚拟机。6、远程桌面虚拟化主机，集成了Hyper-v</p></li></ul><h2 id="2-7-nbsp-RD服务器安装步骤"><a href="#2-7-nbsp-RD服务器安装步骤" class="headerlink" title="2.7&nbsp;RD服务器安装步骤"></a>2.7&nbsp;RD服务器安装步骤</h2><ol><li>开始</li><li>管理工具</li><li>服务器管理器</li><li>角色</li><li>添加角色</li><li>服务器角色</li><li>远程桌面服务</li></ol><h2 id="2-8-nbsp-RD服务器配置方法"><a href="#2-8-nbsp-RD服务器配置方法" class="headerlink" title="2.8&nbsp;RD服务器配置方法"></a>2.8&nbsp;RD服务器配置方法</h2><ul><li>开始</li><li>管理工具</li><li>远程桌面服务</li><li>远程桌面会话主机配置</li><li>右键RDP</li><li>TCP</li><li>属性</li></ul><h2 id="2-9-nbsp-远程桌面连接"><a href="#2-9-nbsp-远程桌面连接" class="headerlink" title="2.9&nbsp;远程桌面连接"></a>2.9&nbsp;远程桌面连接</h2><ul><li>提供一种连接远程工作站桌面的一种远程管理工具<ol><li>计算机—-右键—-属性—-远程设置—-远程—-勾选运行—-进行远程桌面连接</li><li>防火墙放行</li><li>设置系统密码</li></ol></li></ul><h2 id="2-10-nbsp-使用客户端进行远程桌面连接"><a href="#2-10-nbsp-使用客户端进行远程桌面连接" class="headerlink" title="2.10&nbsp;使用客户端进行远程桌面连接"></a>2.10&nbsp;使用客户端进行远程桌面连接</h2><ul><li><strong>方法一</strong><ul><li>开始</li><li>所有程序</li><li>附件</li><li>远程桌面连接</li></ul></li><li><strong>方法二</strong><ul><li>开始</li><li>运行</li><li>输入 <code>mstsc.exe</code></li><li>输入IP地址</li></ul></li></ul><h2 id="2-11-nbsp-微软管理控制台MMC"><a href="#2-11-nbsp-微软管理控制台MMC" class="headerlink" title="2.11&nbsp;微软管理控制台MMC"></a>2.11&nbsp;微软管理控制台MMC</h2><ul><li>Microsoft管理控制台（MMC）集成了用来管理网络、计算机、服务及其他系统组件的管理工具。==可以使用MMC创建、保存并打开管理工具单元==，这些管理工具用来管理硬件、软件和Windows的网络组件。</li><li>它==本身不执行管理功能==，但可以集成许多管理工具以方便管理。可以添加到控制台的主要工具类型称为管理单元</li><li><strong>具体步骤</strong><ul><li>开始</li><li>运行</li><li>MMC</li><li>打开控制台</li><li>文件</li><li>添加删除</li></ul></li></ul><h1 id="03-nbsp-Linux7-0基础"><a href="#03-nbsp-Linux7-0基础" class="headerlink" title="03&nbsp;Linux7.0基础"></a>03&nbsp;Linux7.0基础</h1><h2 id="3-1-nbsp-Linux用户和组"><a href="#3-1-nbsp-Linux用户和组" class="headerlink" title="3.1&nbsp;Linux用户和组"></a>3.1&nbsp;Linux用户和组</h2><ul><li>Linux用户和组：Linux是一个多用户、多任务的==分时操作系统==。每个文件和程序必须属于某一个用户，每个用户对应一个账号。其中最重要的一个==超级用户root==。</li><li>超级用户root承担了系统管理的一切任务，可以控制所有的程序，访问所有文件，使用系统中的所有功能和资源。</li><li>其他用户和组都是由root来创建的。</li></ul><h2 id="3-2-nbsp-Linux用户和组3个重要配置文件"><a href="#3-2-nbsp-Linux用户和组3个重要配置文件" class="headerlink" title="3.2&nbsp;Linux用户和组3个重要配置文件"></a>3.2&nbsp;Linux用户和组3个重要配置文件</h2><ul><li><code>/etc/passwd</code>：用户文件，存储用户和密码的信息，对所有用户可读。</li><li><code>/etc/shadow</code>：用户文件，也是存储用户和密码等信息，只有超级用户root可以读，目前一般采用这个，保密性好。（相当于passwd的影子文件）</li><li><code>/etc/group</code>:用户组文件。使用组同时赋予多个用户相同的文件访问权限。一个用户可以同时属于多个组。</li></ul><h2 id="3-3-nbsp-Linux用户和组的4个重要管理命令"><a href="#3-3-nbsp-Linux用户和组的4个重要管理命令" class="headerlink" title="3.3&nbsp;Linux用户和组的4个重要管理命令"></a>3.3&nbsp;Linux用户和组的4个重要管理命令</h2><ul><li><code>useradd</code>：新增用户，暂时锁定，是因为，没有初始密码。</li><li><code>passwd</code>:配置密码，包括设置、修改、锁定密码等。</li><li><code>userdel</code>：删除用户，必要时删除用户的主目录。</li><li><code>su</code>：切换用户，比如由普通用户切换到root用户。（增、删、改、换）</li></ul><h2 id="3-4-nbsp-Linux文件目录管理"><a href="#3-4-nbsp-Linux文件目录管理" class="headerlink" title="3.4&nbsp;Linux文件目录管理"></a>3.4&nbsp;Linux文件目录管理</h2><ul><li><p>文件格式有：EXT2、EXT3、EXT5等。采用树形根目录结构，用/表示。其他所有发生目录都是从根目录出发生成的。将所有的硬件、软件都作为文件来<br>管理。</p></li><li><p><code>/bin</code>存放系统命令。</p></li><li><code>/dev</code>所支持全部的设备文<br>件。</li><li><code>/etc</code>系统管理配置文件。</li><li><code>/lib</code>函数库数据库<br>命令。</li><li><code>/mnt</code>空目录，安装拆卸文件硬件等。</li><li><code>/tmp</code>存放临时文件。</li><li><code>/usr</code>程序存放主目录。</li><li><code>/home</code>默认用户主目录。</li><li><code>/proc</code>内存虚拟目录。</li></ul><h2 id="3-5-nbsp-Linux文件权限"><a href="#3-5-nbsp-Linux文件权限" class="headerlink" title="3.5&nbsp;Linux文件权限"></a>3.5&nbsp;Linux文件权限</h2><ul><li><strong>五种类型、四种权限、三个分组，口诀543</strong></li><li><p>普通文件，用户权限可读可写，用户组权限可读，其他用户可读</p></li><li><p><strong>五种类型：</strong></p><ul><li>普通文件</li><li>目录文件</li><li>链接文件</li><li>设备文件</li><li>管道文件</li></ul></li><li><strong>四种权限：</strong><ul><li>可读的</li><li>可写的</li><li>可执行的</li><li>无访问权限</li></ul></li><li><strong>三个分组：</strong><ul><li>用户</li><li>用户组</li><li>其他用户</li></ul></li></ul><h2 id="3-6-nbsp-Linux文件和目录操作命令"><a href="#3-6-nbsp-Linux文件和目录操作命令" class="headerlink" title="3.6&nbsp;Linux文件和目录操作命令"></a>3.6&nbsp;Linux文件和目录操作命令</h2><ul><li><code>cat</code>滚动显示</li><li><code>more</code>分屏显示</li><li><code>less</code>按页显示</li><li><code>cp</code>文件复制</li><li><code>mv</code>文件移动</li><li><code>rm</code>文件删除</li><li><code>mkdir</code>创建目录</li><li><code>rmdir</code>删除目录</li><li><code>cd</code>改变目录</li><li><code>pwd</code>当前目录</li><li><code>ls</code>列出目录</li><li><code>chmod</code>改变权限</li><li><code>In</code>文件链接</li><li><code>touch</code>改变文件时间</li><li><code>find</code>查找文件</li><li><code>grep</code>表达式查找</li></ul><h2 id="3-7-nbsp-Linux网络配置文件"><a href="#3-7-nbsp-Linux网络配置文件" class="headerlink" title="3.7&nbsp;Linux网络配置文件"></a>3.7&nbsp;Linux网络配置文件</h2><ul><li><code>/etc/sysconfig/network</code>，服务器上网络置。</li><li><code>/etc/hostname</code>，主机名和完整域名</li><li><code>/etc/hosts</code>，IP和主机名映射．别名</li><li><code>/etc/host.conf</code>，和主机名解析顺序</li><li><code>/etc/resolv.conf</code>，DNS客户机配置</li><li><code>/etc/services</code>，服务名和端口号之间的映射。</li><li><code>/etc/rc.d/init.d/network</code>，网络配置脚本，开机通过脚本文件来读取相应的初始配置。</li></ul><h2 id="3-8-nbsp-Linux网络配置命令"><a href="#3-8-nbsp-Linux网络配置命令" class="headerlink" title="3.8&nbsp;Linux网络配置命令"></a>3.8&nbsp;Linux网络配置命令</h2><ul><li><code>ifconfig</code>，网络接口（网卡）命令<code>ifconfig up</code>、<code>ifconfig down</code>、<code>ifconfig ethO</code></li><li><code>route</code>，配置路由命令<code>route add</code>、<code>route del</code>、<code>route gw</code></li><li><code>ping</code>,网络测试命令<code>ping -a</code>、<code>ping -t</code>、<code>ping -n</code>、<code>ping -I</code></li><li><code>netstat</code>，网络查询命令<code>netstat -r</code>、<code>netstat -a</code>、<code>netstat -n</code></li></ul><h1 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h1><ol><li>在Windows系统中，默认用户权限最低的是 []{.gap} {.quiz}<ul><li>everyone  {.correct}</li><li>administrator {.options}</li><li>power users {.options}</li><li>users {.options}<br>{.options}</li></ul></li><li><p>在Windows系统中，通过运行 []{.gap} 命令可以打开Windows管理控制台{.quiz}</p><ul><li>regedit {.options}</li><li>cmd {.options}</li><li>mmc {.correct}</li><li>mfc {.options}<br>{.options}</li></ul></li><li><p>在Linux系统中把外部设备当做文件统一管理，外部设备文件通常放在 []{.gap} 目录中{.quiz}</p><ul><li>/dev {.correct}</li><li>/lib {.options}</li><li>/etc {.options}</li><li>/bin {.options}<br>{.options}<blockquote><ul><li>dev:设备、lib:库、etc配置、bin系统</li></ul></blockquote></li></ul></li><li><p>Linux系统中的文件操作命令grep用于 []{.gap} {.quiz}</p><ul><li>列出文件的属性信息 {.options}</li><li>在指定路径查找文件 {.options}</li><li>复制文件 {.options}</li><li>在指定文件中查找指定的字符串 {.correct}<br>{.options}</li></ul></li><li><p>在Linux中，更改用户口令的命令是 []{.gap} {.quiz}</p><ul><li>pwd {.options}</li><li>passwd {.correct}</li><li>kouling {.options}</li><li>password {.options}<br>{.options}</li></ul></li><li><p>默认情况下，Linux系统中用户登录密码信息存放在 []{.gap}  文件中{.quiz}</p><ul><li>/etc/group {.options}</li><li>/etc/userinfo {.options}</li><li>/etc/shadow {.correct}</li><li>/etc/profile {.options}<br>{.options}</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全与应用02</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%8E%E5%BA%94%E7%94%A802/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%8E%E5%BA%94%E7%94%A802/</url>
      
        <content type="html"><![CDATA[<h1 id="应用层安全协议"><a href="#应用层安全协议" class="headerlink" title="应用层安全协议"></a>应用层安全协议</h1><h2 id="应用层安全协议概念"><a href="#应用层安全协议概念" class="headerlink" title="应用层安全协议概念"></a>应用层安全协议概念</h2><ul><li>S-HTTP或SHTTP（Sec HTTP），安全超文本传输协议，是HTTP扩展，使用TCP的80端口</li><li>HTTPS： <strong>HTTP+SSL</strong>，使用TCP的443端口。与TLS（传输层安全标准）是双胞胎，为4.5层协议</li></ul><p>  <img data-src="https://s3.ax1x.com/2021/02/27/6S0p0x.png" alt="shttp"></p><h2 id="PGP"><a href="#PGP" class="headerlink" title="PGP"></a>PGP</h2><ul><li>PGP是电子邮件加密软件包， <strong>是一款软件</strong>，把RSA公钥体系的高保密和传统加密体系的高速度巧妙的结合起来，称为最流行的电子邮件加密系统</li><li>可以用来加密文件方式非授权者阅读，还能数字签名，防止篡改</li></ul><h3 id="PGP服务"><a href="#PGP服务" class="headerlink" title="PGP服务"></a>PGP服务</h3><ul><li>PGP提供两种服务： <strong>数据加密和数字签名</strong>，使用RSA对公钥证书加密认证 ， IDEA（128位密钥）进行数据加密，MD5进行完整性验证</li><li><strong>加密算法</strong>：支持IDEA、CAST、3DES算法对消息进行加密，采用Elgamal或RSA算法用接收方的公钥加密会话密钥</li><li><strong>数字签名</strong> ：采用SHA-1、MD5消息摘要算法计算消息的摘要值，用发送者的私钥按DSS或RSA算法加密消息摘要</li></ul><h3 id="PGP广泛应用的特点"><a href="#PGP广泛应用的特点" class="headerlink" title="PGP广泛应用的特点"></a>PGP广泛应用的特点</h3><ol><li>能够在各种平台上免费使用，有众多厂商支持</li><li>基于比较安全的加密算法（RSA、IDEA、MD5）</li><li>应用领域广泛，可加密文件，也可用于个人安全通信</li><li>不是政府或标准化组织开发和控制的</li><li>网民普遍喜欢这种自由化的软件包</li></ol><h2 id="安全电子交易协议SET"><a href="#安全电子交易协议SET" class="headerlink" title="安全电子交易协议SET"></a>安全电子交易协议SET</h2><ul><li>保证购物安全，以信用卡为基础，在线交易的标准</li><li><p>安全性高，保证信息传输的机密性、真实性、完整性和不可否认性</p><p>  <img data-src="https://s3.ax1x.com/2021/02/27/6S0PAK.gif" alt="set"></p></li><li><strong>SET</strong>是安全协议和报文格式的集合，融入了SSL、STT、SHTTP、PKI等加密签名认证等。采用公钥密码体制和X.509数字证书，称为目前公认的信用卡网上交易的国际标准</li></ul><h3 id="SET提供的服务"><a href="#SET提供的服务" class="headerlink" title="SET提供的服务"></a>SET提供的服务</h3><ol><li>保证客户交易信息的保密性和完整性</li><li>确保商家和客户交易行为的不可否认性</li><li>确保商家和客户的合法性</li></ol><h3 id="双重签名技术"><a href="#双重签名技术" class="headerlink" title="双重签名技术"></a>双重签名技术</h3><ul><li>消费者对订单信息和支付信息进行签名，商家看不到消费者账号信息，银行看不到消费者订购信息，但可确认是真实的</li></ul><h2 id="应用层安全协议Kerberos"><a href="#应用层安全协议Kerberos" class="headerlink" title="应用层安全协议Kerberos"></a>应用层安全协议Kerberos</h2><ul><li>Kerberos是一项认证范围，3A认证有验证、授权和记账</li><li>防重放、保护数据完整性</li><li><p>AS认证服务器，TGS票据授予服务器，V应用服务器</p><p><img data-src="https://s3.ax1x.com/2021/02/27/6S0itO.png" alt="kbros"></p></li></ul><h3 id="基于Kerberos的网关模型"><a href="#基于Kerberos的网关模型" class="headerlink" title="基于Kerberos的网关模型"></a>基于Kerberos的网关模型</h3><ul><li><p>用户初始登录一行，用户名和密码长期保存在内存中，用户登录新应用时，系统会自动提取用户名和密码，用户不需再输入</p><p><img data-src="https://s3.ax1x.com/2021/02/27/6S0E1H.png" alt="kbwg"></p></li></ul><h1 id="防火墙技术"><a href="#防火墙技术" class="headerlink" title="防火墙技术"></a>防火墙技术</h1><h2 id="防火墙基本概念"><a href="#防火墙基本概念" class="headerlink" title="防火墙基本概念"></a>防火墙基本概念</h2><ul><li><strong>定义</strong>：<ul><li>来源于建筑物防火墙一词，位于两个或多个网络之间，执行访问控制策略，过滤进出数据包的一种软件或硬件设备， ==是一个由软件和硬件设备组合而成，位于内外网之间、专用与公共网之间的保护屏障==</li></ul></li><li><strong>防火墙的要求</strong>：<ul><li>所有进出网络的通信流量都必须经过防火墙</li><li>只有内部访问策略授权的通信才能允许通过</li><li>防火墙本身具有很强的高可靠性</li></ul></li><li><strong>防火墙的主要功能</strong>：<ul><li>访问控制功能</li><li>内容控制功能</li><li>全面的日志功能</li><li>集中管理功能</li><li>自身的安全功能</li></ul></li><li><strong>防火墙的附加功能</strong> ：<ul><li>流量控制</li><li>网络地址转换NAT</li><li>虚拟专用网VPN</li></ul></li><li><strong>防火墙的局限性</strong>：<ul><li>关闭限制了一些访问带来不便</li><li>对内部的攻击无能为力</li><li>带来传输延迟单点失效</li><li>其他</li></ul></li><li><strong>防火墙的技术分类</strong>（OSI不同层次的防火墙）：<ul><li>包过滤防火墙<ul><li>==工作在网络层，通过检查数据包包头，对数据包进行筛选==</li></ul></li><li>代理防火墙<ul><li>==工作在应用层，通过代理服务器在内外网之间进行请求核实，代理服务器也称应用层网关==</li></ul></li><li>状态化包过滤防火墙<ul><li>==工作在网络层==</li></ul></li></ul></li></ul><h2 id="防火墙分类"><a href="#防火墙分类" class="headerlink" title="防火墙分类"></a>防火墙分类</h2><ul><li><strong>个人防火墙</strong> ：保护单个主机，有瑞星防火墙、天网防火墙、费尔防火墙等。</li><li><strong>企业防火墙</strong> ：对整个网络实时保护，有赛门铁克防火墙、诺顿防火墙、思科防火墙、华为防火墙、Juniper防火墙等）。</li><li><strong>软件防火墙</strong> ：有瑞星防火墙、天网防火墙、微软ISAServer、卡巴斯基防火墙等。</li><li><strong>硬件防火墙</strong> ：思科防火墙、Juniper防火墙等。</li></ul><h3 id="华为防火墙的网络划分"><a href="#华为防火墙的网络划分" class="headerlink" title="华为防火墙的网络划分"></a>华为防火墙的网络划分</h3><ol><li>连接外部网络的不信任区域（Untrust）</li><li>连接内部用户主机的信任区域（Trust）</li><li>连接需要对外提供应用服务的DMZ区域（DemilitarizedZone）—非军事区（停火区）</li></ol><h2 id="防火墙体系结构"><a href="#防火墙体系结构" class="headerlink" title="防火墙体系结构"></a>防火墙体系结构</h2><ul><li><strong>双宿主机模式</strong><ul><li>防火墙具有两个网卡接口，通过包过滤代理访问网络。这是比较简单的一种结构。一般可以根据IP地址和端口号进行过滤</li></ul></li><li><strong>屏蔽子网模式</strong><ul><li>又叫过滤子网模式，两个包过滤路由器中间建立一个隔离的子网，定义为DMZ网络，也称为非军事化区域，这是目前防火墙最常用的模式</li></ul></li></ul><h2 id="防火墙的工作模式"><a href="#防火墙的工作模式" class="headerlink" title="防火墙的工作模式"></a>防火墙的工作模式</h2><ul><li>==路由模式、透明模式、混合模式3种。==</li><li><strong>路由模式</strong> ：<ul><li>如果防火墙以第三层对外连接（接口具有IP地址），则认为防火墙工作在路由模式下。</li></ul></li><li><strong>透明模式</strong> ：<ul><li>防火墙通过第二层对外连接（接口无IP地址），则防火墙工作在透明模式下。</li></ul></li><li><strong>混合模式</strong> ：<ul><li>若防火墙同时具有工作在路由模式和透明模式的接口（某些接口具有IP地址，某些接口无IP地址）</li></ul></li></ul><h2 id="防火墙的访问规则"><a href="#防火墙的访问规则" class="headerlink" title="防火墙的访问规则"></a>防火墙的访问规则</h2><ul><li>3种接口，<ol><li>内部接口(Inbound)连接内网和内网服务器。</li><li>外部接口（Outbound）连接外部公共网络。</li><li>中间接口（DMZ）连接对外廾放服务器。</li></ol></li></ul><hr><ol><li>Inbound可以访问任何Outbound和dmz区域</li><li>dmz可以访问Outbound区域</li><li>Outbound访问dmz需配合static(静态地址转换)</li><li>Inbound访问dmz需要配合acl（访问控制列表)</li></ol><h2 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h2><ul><li><strong>Dual-homed方式</strong><ul><li>此方式最简单，Dual-homedGateway放置在两个网络之间，这个<code>Dual-homed Gateway</code>又称为<code>Bastion host</code>.这种==结构成本低==，但是它有单点失败的问题。这种结构没有增加网络安全的自我防卫能力，而它往往是受”黑客“攻击的首选目标，它自己一旦被攻破,整个网络也就暴露了。</li></ul></li><li><strong>Screened-host方式</strong><ul><li><code>Screening router</code>为保护<code>Bastion host</code>的安全建立了一j首屏障。它将所有进入的信息先送往<code>Bastion host</code>，并且只接受来自<code>Bastion host</code>的数据作为出去的数据。这种结构依赖<code>Screening router</code>和<code>Bastion host</code>，只要有一个失败，整个网络就暴露了。</li></ul></li><li><strong>Screened-subnet方式</strong><ul><li>包含两个<code>Screening router</code>和两个<code>Bastion host</code>.==在公共网络和私有网络之间构成了一个隔离网，称之为“停火区”（DMZ，即DemilitarizedZone）==，<code>Bastion host</code>放置在“停火区”内。这种==结构安全性好==，只有当两个安全单元被破坏后，网络才被暴露，但是==成本也很昂贵==</li></ul></li></ul><h1 id="网络攻击"><a href="#网络攻击" class="headerlink" title="网络攻击"></a>网络攻击</h1><ul><li><strong>定义</strong><ul><li>网络攻击（Cyberattack，也译为赛博攻击）是指针对计算机信息系统、基础设施、计算机网络或个人计算机设备的，任何类型的进攻动作。在电脑和电脑网络中，破坏、揭露、修改、使软件或服务失去功能、在没有得到授权的情况下偷取或访问任何一电脑的资料，都会被视为于电脑和电脑网络中的攻击</li></ul></li></ul><h2 id="常见网络攻击方式"><a href="#常见网络攻击方式" class="headerlink" title="常见网络攻击方式"></a>常见网络攻击方式</h2><h3 id="拒绝服务攻击（DOS攻击）"><a href="#拒绝服务攻击（DOS攻击）" class="headerlink" title="拒绝服务攻击（DOS攻击）"></a>拒绝服务攻击（DOS攻击）</h3><blockquote><p>拒绝服务攻击实现的流程：攻击者大量伪造的TCP连接请求，使被攻击方资源耗尽（CPU满负荷或内存不足）的攻击方式。</p><ul><li><strong>造成的危害</strong><ul><li>消耗系统资源（带宽、内存、队列、CPU）；</li><li>导致目标主机宕机，</li><li>阻止授权用户正常访问服务（慢、不能连接、没有响应）；<h3 id="分布式拒绝服务攻击（DDOS攻击）"><a href="#分布式拒绝服务攻击（DDOS攻击）" class="headerlink" title="分布式拒绝服务攻击（DDOS攻击）"></a>分布式拒绝服务攻击（DDOS攻击）</h3>基于DOS攻击，借助于客户/服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDoS攻击，从而成倍地提高拒绝服务攻击的威力<br>其他常见的DOS攻击还有<code>SYNF lood</code>、<code>Ping of Death</code>、<code>Teardrop</code>攻击、<code>Land</code>攻击、<code>SmurfIn</code>击、<code>winnuke</code>攻击等</li></ul></li></ul></blockquote><h3 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h3><ul><li><strong>攻击原理</strong> :<ul><li>通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令，获取攻击者想要取得的数据。具体来说，它是==利用现有应用程序，将（恶意的）SQL命令注入到后台数据库引擎执行的能力==。<blockquote><p>SQL注入攻击属于数据库安全攻击手段之一，可以通过数据库安全防护技术实现有效防护，数据库安全防护技术包括：数据库漏扫数据库加密、数据库防火墙、数据脱敏、数据库安全审计系统。<br>SQL注入攻击会导致的数据库安全风险包括：刷库、拖库、撞库</p></blockquote></li></ul></li></ul><h3 id="跨站脚本攻击"><a href="#跨站脚本攻击" class="headerlink" title="跨站脚本攻击"></a>跨站脚本攻击</h3><ul><li><p>跨站脚本攻击（也称为XSS）指利用网站漏洞从用户那里恶意盗取信息。</p></li><li><p><strong>攻击原理</strong> ：</p><ul><li>用户在浏览网站、使用即时通讯软件、甚至在阅读电子邮件时，通常会点击其中的链接。攻击者y4通过在这些链接中插入恶意代码，就能够盗取用户信息、破坏页面结构、重定向导其他网站等</li></ul></li><li>跨站脚本攻击（<code>Cross Site Scripting</code>)缩写为CSS，但这会与层叠样式表(<code>Cascading Style Sheets</code>,CSS）的缩写混淆。因此有人将跨站脚本攻击缩写为XSS,如果你听到有人说”我发现了一个XSS漏洞”，显然他是在说跨站脚本攻击。</li></ul><h2 id="网络攻击分类"><a href="#网络攻击分类" class="headerlink" title="网络攻击分类"></a>网络攻击分类</h2><h3 id="被动攻击"><a href="#被动攻击" class="headerlink" title="被动攻击"></a>被动攻击</h3><ul><li>攻击者通过监视所有信息流以获取某些秘密</li><li>基于网络或操作系统的</li><li>很难被检测到，只可==通过预防应付该类攻击==，主要通过==数据加密==的方式</li></ul><h3 id="主动攻击"><a href="#主动攻击" class="headerlink" title="主动攻击"></a>主动攻击</h3><ul><li>涉及数据流的修改或创建错误流</li><li><strong>主要攻击形式</strong><ul><li>假冒</li><li>欺骗</li><li>消息篡改</li><li>拒绝服务</li></ul></li><li>无法预防但可以检测</li><li>检测手段： ==防火墙、入侵检测技术==</li></ul><h3 id="物理临近攻击"><a href="#物理临近攻击" class="headerlink" title="物理临近攻击"></a>物理临近攻击</h3><ul><li><p>未授权者可物理上接近网络、系统或设备，目的是修改、手机或拒绝访问信息</p><p><img data-src="https://z3.ax1x.com/2021/03/20/64CQUK.png" alt="wlgj"></p></li></ul><h3 id="内部人员攻击"><a href="#内部人员攻击" class="headerlink" title="内部人员攻击"></a>内部人员攻击</h3><ul><li>信息安全处理系统由直接访问权的人直接干预系统进行攻击</li></ul><h3 id="分发攻击"><a href="#分发攻击" class="headerlink" title="分发攻击"></a>分发攻击</h3><ul><li><p>在软件和硬件开发出来之后和安装之前这段时间，受攻击者而已修改软/硬件</p><h1 id="病毒和木马"><a href="#病毒和木马" class="headerlink" title="病毒和木马"></a>病毒和木马</h1></li><li><p><strong>病毒</strong> ：一段可执行的程序代码，通过其他可执行程序启动和感染传播，可自我复制，难以清除，破坏性强。（强盗）</p></li><li><strong>木马</strong> ：一种潜伏在计算机里并且秘密开放一个甚至多个数据传输通道的远程控制程序。C/S结构，客户端也称为控制端。偷偷盗取账号、蜜码等信息。（间谍）</li><li><strong>恶意代码</strong> ：又称恶意软件。也称为广告软件、间谍软件，没有作用却会带来危险。（恶搞）</li></ul><h2 id="常见病毒木马的特征分类"><a href="#常见病毒木马的特征分类" class="headerlink" title="常见病毒木马的特征分类"></a>常见病毒木马的特征分类</h2><ul><li><strong>文件宏病毒</strong>：<ul><li>感染Offic文件，前缀Macro或者word/excel等</li></ul></li><li><strong>蠕虫病毒</strong> ：<ul><li>前缀Worm，通过系统漏洞传播</li></ul></li><li><strong>木马病毒</strong> ：<ul><li>前缀Trojan，黑客病毒前缀Hack,往往成对出现</li></ul></li><li><strong>系统病毒</strong> ：<ul><li>前缀Win32、PE、Win95等</li></ul></li><li><strong>脚本病毒</strong> ：<ul><li>前缀Script，通过网页传播</li></ul></li></ul><h2 id="黑客与骇客"><a href="#黑客与骇客" class="headerlink" title="黑客与骇客"></a>黑客与骇客</h2><ul><li>黑客技术高超，帮助测试建设网络</li><li>骇客专门搞破坏或恶作剧</li></ul><h3 id="黑客攻击"><a href="#黑客攻击" class="headerlink" title="黑客攻击"></a>黑客攻击</h3><ol><li>拒绝服务攻击</li><li>huanchongq溢出攻击</li><li>漏洞攻击</li><li>网络欺骗攻击</li><li>网络钓鱼</li><li>僵尸网络</li></ol><h3 id="预防攻击"><a href="#预防攻击" class="headerlink" title="预防攻击"></a>预防攻击</h3><ul><li>安装杀毒软件、硬件防火墙和UTM统一威胁安全管理设备，合理设置安全策略，制定应急预案<h1 id="IDS与IPS"><a href="#IDS与IPS" class="headerlink" title="IDS与IPS"></a>IDS与IPS</h1><h2 id="入侵检测系统IDS"><a href="#入侵检测系统IDS" class="headerlink" title="入侵检测系统IDS"></a>入侵检测系统IDS</h2></li><li>位于防火墙之后的第二道安全屏障，是防火墙的有力补充</li><li>通过对网络关键点收集信息并对其分析，检测到违反安全策略的行为和入侵的迹象，做出自动反应，在系统损坏或数据丢失之前阻止入侵者的进一步行动</li></ul><h2 id="入侵防御系统IPS"><a href="#入侵防御系统IPS" class="headerlink" title="入侵防御系统IPS"></a>入侵防御系统IPS</h2><ul><li>位于防火墙之后的第二道安全屏障，是防火墙的有力补充</li><li>通过对网络关键点收集信息并对其分析，检测到攻击企图，就会自动将攻击包丢掉或采取措施阻挡攻击源，切断网络</li></ul><h2 id="IPS-IDS和防火墙的区别"><a href="#IPS-IDS和防火墙的区别" class="headerlink" title="IPS/IDS和防火墙的区别"></a>IPS/IDS和防火墙的区别</h2><ul><li>防火墙一般只检测网络层和传输层的数据报，不能检测应用层的内容</li><li>IPS/IDS可以检查字节内容</li><li><strong>IPS与IDS的区别</strong><ul><li>IPS是串接在网络中，会切断网络</li><li>IDS是旁路式并联在网络中，不切断网络</li></ul></li><li>IDS/IPS:<ul><li>连接在需要把交换机端口配置成镜像端口上，可以检测全网流量</li></ul></li></ul><h1 id="计算机系统安全等级"><a href="#计算机系统安全等级" class="headerlink" title="计算机系统安全等级"></a>计算机系统安全等级</h1><blockquote><p>美国国防部提出可信计算机系统评测标准TCSEC(习惯上称橘皮书),TCSEC将系统分成ABCD四类7个安全级别：</p><ul><li><strong>D级</strong> ：级别最低，保护措施少，没有安全功能；</li><li><strong>C级</strong> ：自定义保护级。<ul><li><strong>C1级</strong> ：自主安全保护级。</li><li><strong>C2级</strong> ：受控访问级实现更细粒度的自主访问控制，通过登录规程、审计安全性事件以隔离资源。<code>Windows NT 4.0</code>属于C2级。</li></ul></li><li><strong>B级</strong> ：强制保护级<ul><li><strong>Bl</strong> 标记安全保护级</li><li><strong>B2</strong> 结构化安全保护级</li><li><strong>B3</strong> 安全域</li></ul></li><li><strong>A级</strong> ：可验证的保护<ul><li><strong>Al</strong> ：拥有止式的分析和数学方法。</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全与应用01</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%8E%E5%BA%94%E7%94%A801/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%8E%E5%BA%94%E7%94%A801/</url>
      
        <content type="html"><![CDATA[<h1 id="网络安全基础"><a href="#网络安全基础" class="headerlink" title="网络安全基础"></a>网络安全基础</h1><h2 id="网络安全威胁和漏洞类型"><a href="#网络安全威胁和漏洞类型" class="headerlink" title="网络安全威胁和漏洞类型"></a>网络安全威胁和漏洞类型</h2><ul><li>窃听&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;病毒（强盗行为）</li><li>假冒（假的）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;木马（间谍行为）</li><li><strong>重放</strong> （真的）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;诽谤</li><li><strong>流量分析</strong> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;非授权访问</li><li>破坏完整&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拒绝服务</li></ul><hr><ul><li>漏洞：==物理、软件、不兼容等==</li></ul><h2 id="网络安全信息数据的五大特征"><a href="#网络安全信息数据的五大特征" class="headerlink" title="网络安全信息数据的五大特征"></a>网络安全信息数据的五大特征</h2><ul><li><strong>完整性</strong> ：信息数据完整不破坏</li><li><strong>保密性</strong> ：信息数据需授权不泄露</li><li><strong>可用性</strong> ：信息数据攻击后迅速恢复可用</li><li><strong>不可否任性</strong> ：信息数据参与者不可否认不可抵赖，身份真实有效</li><li><strong>可控性</strong> ：信息数据可以管控传播范围</li></ul><h2 id="网络安全基本技术"><a href="#网络安全基本技术" class="headerlink" title="网络安全基本技术"></a>网络安全基本技术</h2><ul><li><strong>数据加密</strong> ：数据按照规则打乱，重新组合</li><li><strong>数字签名</strong> ：证明发送者签发，具有不可抵赖、完整性</li><li><strong>身份认证</strong> ：用户合法性，身份真实没假冒</li><li><strong>防火墙</strong> ：控制内外数据进出，阻挡木马病毒</li><li><strong>入侵检测</strong> ：采用经常检测特征保护网络</li><li><strong>网络隔离</strong> ：内外网隔离分开使用</li></ul><hr><h2 id="加密算法与信息摘要"><a href="#加密算法与信息摘要" class="headerlink" title="加密算法与信息摘要"></a>加密算法与信息摘要</h2><h3 id="密码体制分类"><a href="#密码体制分类" class="headerlink" title="密码体制分类"></a>密码体制分类</h3><p><strong>一个密码系统的组成包括以下五个部分：</strong></p><ol><li><strong>明文空间M</strong> (Message) ，它是全体明文的集合。</li><li><strong>密文空间C</strong> (Ciphertext)，它是全体密文的集合。</li><li><strong>密钥空间K</strong> (Key) ，它是全体密钥的集合。其中每一个密钥K均由加密密钥和解密密钥组成，即:<ol><li><strong>加密算法E</strong> (Encryption)，它是一族由M到C的加密变换，对于每一个具体的，则E就确定出一个具体的加密函数，把M加密成密文C。</li><li><strong>解密算法D</strong> (Decryption)，它是一族由C到M的解密变换，对于每一个确定的，则D就确定出一个具体的解密函数。</li></ol></li></ol><ul><li><p><strong>加密过程</strong></p><ul><li>将明文变换为密文所使用的的变换函数，其变换过程即为加密<script type="math/tex; mode=display">c=E(k_1,m)</script>(其中明文为m，加密算法E，加密密钥$k_1$，密文为c)</li></ul></li><li><p><strong>解密过程</strong></p><ul><li>将密文恢复为明文的变换函数，其变换过程称为解密<script type="math/tex; mode=display">m=D(k_2,c)</script>(其中密文c，解密算法D，解密密钥$k_2$,明文m)</li></ul></li></ul><p><strong>根据密钥类型不同将密码体制分为两类：</strong></p><ol><li><strong>对称密钥</strong> ：<ul><li>==加密、解密用的是同一个密钥==，一旦密钥持有方任何一方泄露密钥——加密的内容将不再安全。</li></ul></li><li><strong>不对称密钥</strong> <ul><li>即==公钥加密==，==加密、解密用的是不同的密钥==，一个密钥“公开”，即公钥，另一个自己秘密持有，即私钥，加密方用公钥加密，只有用私钥才能解密——史称公钥加密体系：PKI。</li></ul></li></ol><h3 id="公钥加密体制"><a href="#公钥加密体制" class="headerlink" title="公钥加密体制"></a>公钥加密体制</h3><ul><li>==非对称密码体制==也叫==公钥加密技术==，该技术就是针对私钥密码体制的缺陷被提出来的。在公钥加密系统中，加密和解密是相对独立的，加密和解密会使用两把不同的密钥，加密密钥(公开密钥)向公众公开，谁都可以使用，解密密钥(秘密密钥)只有解密人自己知道，非法使用者根据公开的加密密钥无法推算出解密密钥，顾其可称为公钥密码体制。</li></ul><h3 id="私钥加密体制"><a href="#私钥加密体制" class="headerlink" title="私钥加密体制"></a>私钥加密体制</h3><ul><li>==对称密码体制==是一种传统密码体制，也称为==私钥密码体制==。在对称加密系统中，加密和解密采用相同的密钥。因为加解密密钥相同，需要通信的双方必须选择和保存他们共同的密钥，各方必须信任对方不会将密钥泄密出去，这样就可以实现数据的机密性和完整性。<h2 id="现代信息加密技术"><a href="#现代信息加密技术" class="headerlink" title="现代信息加密技术"></a>现代信息加密技术</h2></li><li><p>分为 ==对称和非对称==</p><ul><li><strong>对称</strong><ul><li>DES</li><li>3DES</li><li>IDEA</li><li>AES</li><li>RC4</li></ul></li><li><strong>非对称</strong><ul><li>RSA(基于大素数分解3人)</li><li>ECC(椭圆曲线密码编码学)</li><li>Elgamal(基于离散对数1人)</li></ul></li></ul></li><li><p>DES数据加密标准</p></li><li>3DES三重DES加密</li><li>IDEA国际数据加密算法</li><li>AES高级加密标准</li><li>RC4流加密算法第四版</li></ul><h2 id="现代信息加密技术堆成密钥总结"><a href="#现代信息加密技术堆成密钥总结" class="headerlink" title="现代信息加密技术堆成密钥总结"></a>现代信息加密技术堆成密钥总结</h2><p>  <img data-src="https://s3.ax1x.com/2021/02/25/yv7K9s.png" alt="jmjs"></p><h2 id="公钥加密RSA"><a href="#公钥加密RSA" class="headerlink" title="公钥加密RSA"></a>公钥加密RSA</h2><ul><li><strong>加密体系</strong> ：<ul><li>==公钥加密==</li><li>==私钥解密==</li></ul></li><li><p><strong>签名体系</strong> ：</p><ul><li>==私钥加密==</li><li>==公钥解密==</li></ul></li><li><p><strong>算法步骤</strong> ：</p></li></ul><ol><li>选两个大素数p和q （大于1的自然数，除了1和它本身没有能被其他自然数整除的数）</li><li>令 $n=p*q$,$z=(p-1)(q-1)$</li><li>满足公式 $e*d=1(mod z)$,e公钥，d私钥<ol><li>mod为模运算（即取余数）</li></ol></li></ol><h1 id="数字签名技术"><a href="#数字签名技术" class="headerlink" title="数字签名技术"></a>数字签名技术</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>数字签名用于确认发送者身份和消息的完整性</li><li>满足三个条件：<ul><li>接受者能够核实发送者</li><li>发送者事后不能抵赖</li><li>接收者不能伪造签名</li></ul></li></ul><h1 id="密钥管理技术"><a href="#密钥管理技术" class="headerlink" title="密钥管理技术"></a>密钥管理技术</h1><h2 id="密钥管理体系"><a href="#密钥管理体系" class="headerlink" title="密钥管理体系"></a>密钥管理体系</h2><ul><li><strong>KMI</strong> ：密钥管理基础结构，第三方KDC，秘密物理通道，适用于封闭的内网使用</li><li><strong>PKI</strong> ：公钥基础结构，不依赖秘密物理通道，适用于开放的外网</li><li><strong>SPK</strong> ：适用于规模化专用网</li><li><strong>记忆口诀</strong>： ==男人在外面PK(I)（拼搏，指外网使用）,女人在家里KM(I)（看门，指内网使用）==</li></ul><h1 id="虚拟专用网VPN"><a href="#虚拟专用网VPN" class="headerlink" title="虚拟专用网VPN"></a>虚拟专用网VPN</h1><h2 id="VPN技术"><a href="#VPN技术" class="headerlink" title="VPN技术"></a>VPN技术</h2><ul><li>建立在公网上</li><li>虚拟性，没有专用物理连接</li><li>利用隧道协议进行加密发送私人消息</li><li>专用性，非VPN用户无法访问</li><li>可在不安全的网络下发送安全可靠的信息</li></ul><h2 id="VPN四大关键技术"><a href="#VPN四大关键技术" class="headerlink" title="VPN四大关键技术"></a>VPN四大关键技术</h2><ul><li>隧道技术</li><li>加解密技术</li><li>密钥管理技术</li><li>身份认证技术</li></ul><h2 id="VPN三种应用解决方案"><a href="#VPN三种应用解决方案" class="headerlink" title="VPN三种应用解决方案"></a>VPN三种应用解决方案</h2><ul><li><strong>内联网VPN</strong><ul><li>企业内部用于连通综合和分布各个LAN局域网</li></ul></li><li><strong>外联网VPN</strong><ul><li>企业外部用于实现企业与客户、银行、供应商互通</li></ul></li><li><strong>远程接入</strong><ul><li>解决远程用户出差访问企业内部网络</li></ul></li></ul><h2 id="VPN在七层协议中使用的技术"><a href="#VPN在七层协议中使用的技术" class="headerlink" title="VPN在七层协议中使用的技术"></a>VPN在七层协议中使用的技术</h2><p>   <img data-src="https://s3.ax1x.com/2021/02/25/yv7lj0.png" alt="vpnjs"></p><h3 id="PPP、PPTP、P2TP技术对比"><a href="#PPP、PPTP、P2TP技术对比" class="headerlink" title="PPP、PPTP、P2TP技术对比"></a>PPP、PPTP、P2TP技术对比</h3><p>   <img data-src="https://s3.ax1x.com/2021/02/25/yv7YEF.png" alt="vpnhz"></p><h3 id="PPTP与L2TP的比较"><a href="#PPTP与L2TP的比较" class="headerlink" title="PPTP与L2TP的比较"></a>PPTP与L2TP的比较</h3><ol><li>PPTP要求IP网络下使用，L2TP适用于各种网络</li><li>PPTP只能建立一条隧道，L2TP可以建立多条</li><li>PPTP包头占用6字节，L2TP占用4字节</li><li>PPTP不支持隧道验证，L2TP支持隧道验证</li></ol><h2 id="IPSec"><a href="#IPSec" class="headerlink" title="IPSec"></a>IPSec</h2><ul><li>IP安全性，在IP层通过加密与数据源验证，来保证数据报传输安全</li></ul><ol><li>认证头AH，用于数据完整和数据源认证，防止重放</li><li>封装安全负荷ESP，提供数据保密、数据完整、辅助防重放</li><li>密钥交换协议IKE，生成分发密钥</li></ol><ul><li><strong>IPSec两种模式</strong>：<ul><li>==传输模式==</li><li>==隧道模式==</li></ul></li></ul><h2 id="SSL安全套接层"><a href="#SSL安全套接层" class="headerlink" title="SSL安全套接层"></a>SSL安全套接层</h2><ul><li>和TLS（传输层安全标准）是双胞胎</li><li>在传输层上4.5层套接安全协议</li><li>SSL/TLS称为 <strong>HTTPS</strong></li><li>工作在传输层</li><li>对传输层、应用层都可控制</li></ul><h2 id="SSL与IPSec的区别"><a href="#SSL与IPSec的区别" class="headerlink" title="SSL与IPSec的区别"></a>SSL与IPSec的区别</h2><ol><li><strong>IPSec在网络层建立隧道，适用于固定的VPN</strong> 。SSL是通过应用层的Web连接建立的，适用于移动用户远程访问公司的VPN</li><li>IPSec==工作在网络层，灵活性小==。SSL==工作在传输层，灵活性大==</li></ol><h1 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h1><ol><li><p>高级加密标准AES支持的三种密钥长度不包括 []{.gap} {.quiz}</p><ul><li>56 {.correct} </li><li>128 {.options}</li><li>192 {.options}</li><li>256 {.options}<br>{.options}</li></ul></li><li><p>在报文摘要算法MD5中，首先要进行明文分组与填充，其中分组时明文报文摘要按照 []{.gap}  位进行分组。 {.quiz}</p><ul><li>128 {.options}</li><li>256 {.options}</li><li>512 {.correct}</li><li>1024 {.options}<br>{.options}</li></ul></li><li><p>按RSA算法，若选两个奇数P=5，Q=3，公钥E=7，则私钥为 []{.gap} {.quiz}</p><ul><li>6 {.options}</li><li>7 {.options}</li><li>8 {.options}</li><li>9 {.correct}<br>{.options} <blockquote><ul><li>n=pq=15,  z=(p-1)(q-1)=8, 根据ed=1（mod z）</li><li>即ed/z余数为1，则（7*d）/8…1，即9符合</li></ul></blockquote></li></ul></li><li><p>甲和乙要进行通信，甲对发送的信息附加了数字签名，乙收到该消息后利用   []{.gap}  验证该消息的真实性 {.quiz}</p><ul><li>甲的公钥 {.correct}</li><li>甲的私钥 {.options} </li><li>乙的公钥 {.options} </li><li>乙的私钥 {.options}<br>{.options} <blockquote><ul><li>数字签名：公钥解密，私钥加密</li></ul></blockquote></li></ul></li><li><p>某企业打算采用IPSec协议构建VPN，由于企业申请的全球IP地址不够，企业内部网绝对使用本地IP地址，这是在内外网间的路由器上应采用  []{.gap} {.quiz}  </p><ul><li>NAT技术 {.correct}</li><li>加密技术 {.options} </li><li>消息鉴别技术 {.options} </li><li>数字签名技术 {.options}<br>{.options} </li></ul></li><li><p>（续第五题），IPSec协议应采用  []{.gap} {.quiz}  </p><ul><li>传输模式 {.options} </li><li>隧道模式 {.correct}</li><li>传输和隧道混合模式 {.options} </li><li>传输和隧道嵌套模式 {.options}<br>{.options} </li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下一代互联网</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E4%B8%8B%E4%B8%80%E4%BB%A3%E4%BA%92%E8%81%94%E7%BD%91/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E4%B8%8B%E4%B8%80%E4%BB%A3%E4%BA%92%E8%81%94%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="IPv6基础知识"><a href="#IPv6基础知识" class="headerlink" title="IPv6基础知识"></a>IPv6基础知识</h1><h2 id="IPv6概念"><a href="#IPv6概念" class="headerlink" title="IPv6概念"></a>IPv6概念</h2><ul><li><p>下一代互联网NGI，目前是第六版。IPv6分组有1个固定头部和n个扩展头部（任选）以及上层协议的负载组成</p><p>  <img data-src="https://s3.ax1x.com/2021/02/25/yv7FjP.png" alt="ipv6"></p></li><li><p><strong>IPv6优点</strong></p><ul><li>更快的传输速度，地址空间更大，层次结构，首部格式灵活</li><li>更安全的传输方式</li><li>即插即用，支持资源预分配</li></ul></li><li><p><strong>IPV6各个字段的解释含义</strong>：</p><ul><li>版本0110，代表IPV6</li><li>通信类型：8位，IP分组优先级，同服务类型</li><li>流标记：20位，标记特殊处理的分组</li><li>负载长度：16位，除了固定，扩展和负载</li><li>下一头部：8位，指明下一头部的类型</li><li>跳数限制：检测路由循环</li><li>源地址：128位，发送端的地址</li><li>目标地址：128位，接收端的地址</li></ul></li><li><p><strong>IPV6扩展头部分组封装顺序</strong>：</p><ol><li>IPV6头部</li><li>逐跳选项头</li><li>目标选项头（第一个目标节点要处理的信息）</li><li>路由选择头</li><li>分段头</li><li>认证头</li><li>封装安全负荷头</li><li>目标选项头（最后的目标节点要处理的信息）</li><li>上层协议头部 </li></ol></li><li><p><strong>IPV6地址</strong> ：128位，冒分十六进制。8000:0000:0000:0000:0123:4567:89AB:CDE F（8段，每4位二进制，写成十六进制） </p></li><li><p><strong>IPV6地址简化书写</strong> ：①前面的0可以省，后面 的不可以省。②多个0可以用冒号，但只能一 次。③多个0可以压缩为一个0。④IPV4兼容写法::192.168.1.10</p></li><li><p><strong>IPV6格式前缀</strong> ：12AB00000000CD3/60简写 12AB::CD30:0:0:0:0/60、12AB:0:0:CD30::/60</p></li><li><p><strong>IPV6地址分类</strong> ：单播地址、任意播 地址、组(多)播地址。分配到接口，一个接口 可以被赋予任何类型的多个地址或地址范围。</p><ul><li><p>任意播：①不能作源，只能作目标。②不能给主机，只能给路由器。</p></li><li><p>组(多)播：一组接口。没有广播，格式前缀 1111 1111。</p></li><li><p>单播：①可聚合全球单播。②链路本地地址。③站点本地地址。④特殊单播地址。</p></li></ul></li></ul><h2 id="IPv6地址分类"><a href="#IPv6地址分类" class="headerlink" title="IPv6地址分类"></a>IPv6地址分类</h2><ul><li><p>①可聚合全球单播（相当于公网IP）：前缀&nbsp; 001。</p></li><li><p>②链路本地地址（相当于自动专用IP）：前缀 &nbsp;1111 1110 10。</p></li><li><p>③站点本地地址（相当于私有IP）：前缀&nbsp; 1111 1110 11。</p></li><li><p>④特殊单播地址：不确定地址0:0:0:0:0:0:0:0， 不分配，初始用，能作源地址，不能目的地址。回环地址 0:0:0:0:0:0:0:1，发给自己，可作源地址和目的地址。</p></li></ul><h2 id="IPv6地址配置"><a href="#IPv6地址配置" class="headerlink" title="IPv6地址配置"></a>IPv6地址配置</h2><ul><li><strong>默认自动配置分两种</strong>：<ul><li>全状态自动配置：动态主机配置协议DHCP，实现了IP地址的自动配置</li></ul></li><li><strong>无状态自动配置</strong>：<ul><li>获得链路本地地址：链路本地地址前缀 <code>1111 1110 10</code>后加网卡MAC地址，产生一个链路本地地址，并发出一个ICMPv6请求，确认唯一性</li><li>获得可聚合全球单播地址：向本地链路中所有足部ICMPv6路由器请求，主机获得单播前缀001后加自己的接口ID，自动配置单播地址</li></ul></li></ul><h2 id="IPv6与IPv4区别"><a href="#IPv6与IPv4区别" class="headerlink" title="IPv6与IPv4区别"></a>IPv6与IPv4区别</h2><div class="table-container"><table><thead><tr><th style="text-align:center">IPv4地址</th><th style="text-align:center">IPv6地址</th></tr></thead><tbody><tr><td style="text-align:center">点分十进制表示</td><td style="text-align:center">带冒号的十六进制表示，0压缩</td></tr><tr><td style="text-align:center">分为ABCDE类</td><td style="text-align:center">不分类</td></tr><tr><td style="text-align:center">组播地址<code>224.0.0.0/4</code></td><td style="text-align:center">组播地址<code>FF00::/8</code></td></tr><tr><td style="text-align:center">广播地址（主机部分全为1</td><td style="text-align:center">任意播（限于子网内部）</td></tr><tr><td style="text-align:center">默认地址<code>0.0.0.0</code></td><td style="text-align:center">不确定地址 <code>::</code></td></tr><tr><td style="text-align:center">回环地址<code>127.0.0.1</code></td><td style="text-align:center">回环地址<code>::1</code></td></tr><tr><td style="text-align:center">公共地址</td><td style="text-align:center">可聚合全球单播地址<code>FP=001</code></td></tr><tr><td style="text-align:center">私网地址 <code>10.0.0.0/8</code>、<code>172.16.0.0/12</code></td><td style="text-align:center">站点本地地址<code>FECO::/48</code></td></tr><tr><td style="text-align:center">自动专用IP地址<code>169.254.0.0/16</code></td><td style="text-align:center">链路本地地址<code>FE8O::/48</code></td></tr></tbody></table></div><h2 id="IPv6相比IPv4的改进"><a href="#IPv6相比IPv4的改进" class="headerlink" title="IPv6相比IPv4的改进"></a>IPv6相比IPv4的改进</h2><ol><li><strong>扩展寻址能力</strong>：扩展到128位，致辞多级地址层次，改进组播，增加任意播更实用</li><li><strong>简化报头格式</strong>：IP头部字段由12个减少为8个，中间路由器由6个减少为4个，提高效率</li><li><strong>改进路由选项</strong>：路由选项放在扩展头部，仅在需要时插上路由选项，更灵活流畅</li><li><strong>提供流标记</strong>：对某些分组进行特别处理，可以提供特别的服务质量，更好的传送数据</li></ol><h1 id="移动IP"><a href="#移动IP" class="headerlink" title="移动IP"></a>移动IP</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p>移动主机在移动的同时，能够在任何地方使用它的家乡地址进行联网</p><p>  <img data-src="https://s3.ax1x.com/2021/02/25/yv7VHS.png" alt="ydip"></p></li><li><p>移动IP的原理：移动主机分配一个家乡地址作为永久标识。如果到外地赋予一个转交地址，家乡地址会获得外地的转交地址。</p></li></ul><h1 id="IPv6过渡技术"><a href="#IPv6过渡技术" class="headerlink" title="IPv6过渡技术"></a>IPv6过渡技术</h1><h2 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a>隧道技术</h2><ul><li>用于解决IPV6网络节点之间通过IPV4网络进行通信的问题（时空隧道）</li><li>优点：<ul><li>充分利用现有网络投资，过渡初期实现方便</li></ul></li><li>缺点：<ul><li>路由器隧道出入口负载重，实现复杂，不利于大规模应用</li></ul></li></ul><h2 id="协议翻译技术"><a href="#协议翻译技术" class="headerlink" title="协议翻译技术"></a>协议翻译技术</h2><ul><li>使得纯IPV6节点之间和纯IPV4节点之间可以通信（英汉互译）</li><li>优点：<ul><li>不需要升级改造，开启NAT-PT即可</li></ul></li><li>缺点：<ul><li>转换不能完全保持原有含义，缺乏安全性</li></ul></li><li>技术：SIIT翻译、NAT-PT翻译、TRT翻译<h2 id="双协议技术"><a href="#双协议技术" class="headerlink" title="双协议技术"></a>双协议技术</h2></li><li>使得IPV4与IPV6共存于同一设备和同一网络中（英汉双语）</li><li>优点：<ul><li>网络规划相对简单，可以充分发挥安全性、路由约束和流支持</li></ul></li><li>缺点：<ul><li>对设备要求较高，维护大量协议和数据，升级改造投资大、建设周期比较长</li></ul></li><li>技术：BIS双栈、BIA双栈 </li></ul><h2 id="6to4隧道"><a href="#6to4隧道" class="headerlink" title="6to4隧道"></a>6to4隧道</h2><ul><li>IPV6穿越PIV4.6to4地址：前缀为2002，如<code>192.0.2.42</code>对应于6to4地址为<code>2002:c000:022a::/48</code>，隧道两端的节点必须都支持IPV6和IPV4协议栈</li></ul><h2 id="6over4隧道"><a href="#6over4隧道" class="headerlink" title="6over4隧道"></a>6over4隧道</h2><ul><li>IPV4自动生成IPV6地址，例如<code>192.0.2.142</code>对应的链路本地地址为<code>FE80::C000:028E/64</code>,这种方法就是无状态自动配置，依赖于IPV4组播，收到局限</li></ul><h2 id="ISATAP隧道"><a href="#ISATAP隧道" class="headerlink" title="ISATAP隧道"></a>ISATAP隧道</h2><ul><li>站内自动隧道寻址协议，自动分配地址的技术，可以穿透NAT设备</li></ul><h1 id="IPV6路由协议"><a href="#IPV6路由协议" class="headerlink" title="IPV6路由协议"></a>IPV6路由协议</h1><ul><li><strong>RIPng</strong>：RIPv2的扩展，UDP521端口</li><li><strong>OSPFv3</strong>：OSPFv2的扩展</li><li><strong>BGP4+</strong>：BGP4的扩展，用于支持IPV6</li><li><strong>ICMPv6</strong>：ICMP的扩展，集成了ARP功能</li><li><strong>IS-IS</strong>：中间系统到中间系统，IS-IS属于内部网关路由协议。使用SPT算法进行路由计算</li></ul><h1 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h1><ol><li><p>IPV6地址可以表示成各种简写形式，以下地址，33AB:0000:0000:CD30:0000:0000:0000:0000/60简写形式，正确的是 []{.gap} {.quiz}</p><ul><li>33AB:0:0:CD30::/60 {.correct}</li><li>33AB::CD3/60 {.options}</li><li>33AB:0:0:CD3/60 {.options}</li><li>33AB::CD30/60 {.options}<br>{.options}</li></ul></li><li><p>在IPv6地址中，IPV6可聚合全球单播地址的格式前缀是 []{.gap} {.quiz}</p><ul><li>001 {.correct}</li><li>100 {.options}</li><li>11111111011 {.options}</li><li>11111111 {.options}<br>{.options}</li></ul></li><li><p>所谓移动IP是指 []{.gap} {.quiz}</p><ul><li>通过地址翻译技术改变主机的IP地址 {.options}</li><li>一个主机IP地址可以转移给另一个手机  {.options}</li><li>移动主机通过在无线通信网中漫游来保持网络连接 {.correct}</li><li>移动主机在离开家乡网络的远程站点可以连接工作 {.options}<br>{.options}</li></ul></li><li><p>在IPV4和IPV6混合的网络中，协议翻译技术用于 []{.gap} {.quiz}</p><ul><li>两个IPV6主机通过IPV4网络通信 {.options}</li><li>两个IPV4主机提过IPV6网络通信 {.options}</li><li>纯IPV4主机和纯IPV6主机之间的同学 {.correct}</li><li>两个双协议栈主机之间的通信 {.options}<br>{.options}</li></ul></li><li><p>实现移动IP的关键技术是 []{.gap} {.quiz}</p><ul><li>移动主机具有一个可以接入任何网络的通用IP地址 {.options}</li><li>移动主机具有一个家乡网络地址并获取一个外地转交地址 {.correct}</li><li>移动主机通过控制全网的管理中心申请网络接入服务 {.options}</li><li>移动主机总是通过家乡网络地址采取接入服务 {.options}<br>{.options} </li></ul></li><li><p>IPv6单播地址的描述中，正确的是 []{.gap} {.quiz}</p><ul><li>任何端口只能用于一个唯一的全局地址 {.options} </li><li>站点本地地址的格式前缀为FE00::/10 {.options} </li><li>链路本地地址的额格式前缀为FE00::/12 {.options} </li><li>全球单播地址的格式前缀为2000::/3  {.correct}<br>{.options} </li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络互联与互联网04</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E4%BA%92%E8%81%94%E4%B8%8E%E4%BA%92%E8%81%94%E7%BD%9104/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E4%BA%92%E8%81%94%E4%B8%8E%E4%BA%92%E8%81%94%E7%BD%9104/</url>
      
        <content type="html"><![CDATA[<h1 id="路由器技术NAT"><a href="#路由器技术NAT" class="headerlink" title="路由器技术NAT"></a>路由器技术NAT</h1><h2 id="路由器技术NAT（地址转换）"><a href="#路由器技术NAT（地址转换）" class="headerlink" title="路由器技术NAT（地址转换）"></a>路由器技术NAT（地址转换）</h2><ul><li><strong>网络地址翻译</strong> ，解决IP短缺，路由器内部和外部地址进行转换</li><li><strong>静态地址转换</strong> ：静态NAT（一对一）</li><li><strong>动态地址转换</strong> ：动态NAT（多对少）<ul><li>内外多对少转换，用于内部局域网较多用户访问外部网络</li></ul></li><li><strong>网络地址端口转换</strong> ：NAPT（多对一）<ul><li>内外多对一转换，使用外部一个IP，多个端口号对应内部IP，也称IP伪装，可以隐藏内部主机</li></ul></li></ul><h2 id="静态NAT"><a href="#静态NAT" class="headerlink" title="静态NAT"></a>静态NAT</h2><ul><li>内外一对一转换， ==用于Web服务器==， ==ftp服务器==等 <strong>固定IP的主机服务器</strong></li></ul><h2 id="动态NAT"><a href="#动态NAT" class="headerlink" title="动态NAT"></a>动态NAT</h2><ul><li>内外多对少转换，用于内部局域网较多用户访问外部网络</li><li>外部需要地址池（Pool）</li></ul><h1 id="路由器技术VLSM和CIDR"><a href="#路由器技术VLSM和CIDR" class="headerlink" title="路由器技术VLSM和CIDR"></a>路由器技术VLSM和CIDR</h1><h2 id="路由器技术VLSM"><a href="#路由器技术VLSM" class="headerlink" title="路由器技术VLSM"></a>路由器技术VLSM</h2><ul><li><strong>可变长子网掩码</strong></li><li>在有类的IP地址的基础上，从他们的主机号部分解除相应的位数来做网络号，也就是增加网络号的位数，即子网划分</li><li>各类网络可以用来再划分子网的位数为:<ul><li>A类有24位可以借</li><li>B类有16位可以借</li><li>C类有8位可以借</li></ul></li><li>VLSM是把标准网络分割成更小的子网的技术，而CIDR是把几个标准的网络合并为一个大网络的技术</li></ul><h2 id="路由器技术CIDR"><a href="#路由器技术CIDR" class="headerlink" title="路由器技术CIDR"></a>路由器技术CIDR</h2><ul><li>无类域间路由，解决路由缩放问题，采用/比特位，无类不区分A、B、C类，称为CIDR地址块，即路由汇聚</li></ul><h1 id="路由器技术QoS"><a href="#路由器技术QoS" class="headerlink" title="路由器技术QoS"></a>路由器技术QoS</h1><ul><li>网络访问质量。将网络数据流分成不同的等级，提供不同的服务</li><li><p>有 ==集成服务(IntServ)和区分服务(DiffServ)== 两种标准</p><p>  <img data-src="https://s3.ax1x.com/2021/02/24/yXDVcq.jpg" alt="qos"></p></li></ul><h2 id="QoS集成服务"><a href="#QoS集成服务" class="headerlink" title="QoS集成服务"></a>QoS集成服务</h2><ul><li><p><strong>分为三种</strong> ：</p><ul><li>保证质量的服务</li><li>控制负载的服务</li><li>尽力而为的服务（目前因特网提供的服务）</li></ul></li><li><p><code>Best-Effort service</code>（尽力而为服务模型）</p></li><li><code>Integrated service</code>（综合服务模型，简称 <code>Int-Serv</code> ）</li><li><code>Differentiated service</code>（区分服务模型，简称<code>Diff-Serv</code> ）</li></ul><ol><li><strong>Best-Effort 服务模型</strong></li></ol><ul><li>Best-Effort 是一个单一的服务模型，也是最简单的服务模型。对Best-Effort 服务模型，网络尽最大的可能性来发送报文。但对时延、可靠性等性能不提供任何保证。Best-Effort 服务模型是网络的缺省服务模型，通过FIFO 队列来实现。它适用于绝大多数网络应用，如FTP、E-Mail等。</li></ul><ol><li><strong>Int-Serv 服务模型</strong>（集成服务）</li></ol><ul><li>Int-Serv 是一个综合服务模型，它可以满足多种QoS需求。该模型使用资源预留协议（RSVP），RSVP 运行在从源端到目的端的每个设备上，可以监视每个流，以防止其消耗资源过多。这种体系能够明确区分并保证每一个业务流的服务质量，为网络提供最细粒度化的服务质量区分。比如我用VOIP，需要12k的带宽和100ms以内的延迟，集成服务模型就会将其归到事先设定的一种服务等级中。<br>但是，Inter-Serv 模型对设备的要求很高，当网络中的数据流数量很大时，设备的存储和处理能力会遇到很大的压力。Inter-Serv 模型可扩展性很差，难以在Internet核心网络实施。这种为单一数据流进行带宽预留的解决思路在Internet上想要实现很难，所以该模型在1994年推出以后就没有使用过。</li></ul><ol><li><strong>Diff-Serv 服务模型</strong></li></ol><ul><li>Diff-Serv 是一个多服务模型，由一系列技术组成，它可以满足不同的QoS 需求。与Int-Serv 不同，它不需要通知网络为每个业务预留资源。</li><li>区分服务代码点DSCP，利用IP包头的服务类型字段ToS</li><li>不再使用资源预约，而是区分不同的业务流</li><li>分为三种：<ul><li>尽力服务BE</li><li>优质服务AF</li><li>加上服务EF</li></ul></li><li><p><strong>逐跳行为PHB：</strong>：</p><ul><li><p>逐级跳的转发方式，每个PHB对于一种转发方式</p><p><img data-src="https://s3.ax1x.com/2021/02/24/yXDnBT.png" alt="phb"></p></li></ul></li></ul><h1 id="路由器技术MPLS"><a href="#路由器技术MPLS" class="headerlink" title="路由器技术MPLS"></a>路由器技术MPLS</h1><ul><li>MPLS，多协议标签交换，属于2.5层，一般认为是第三层交换，硬件交换、速度快</li><li>一次路由，多次交换</li><li>用标签交换代替赋值的路由运算</li></ul><h2 id="MPLS工作原理"><a href="#MPLS工作原理" class="headerlink" title="MPLS工作原理"></a>MPLS工作原理</h2><ul><li><p>标记边缘路由器LER，标记交换路由器LSR</p><p><img data-src="https://s3.ax1x.com/2021/02/24/yXDuHU.jpg" alt="mpls"></p></li></ul><h2 id="MPLS转发等价类（FEC）"><a href="#MPLS转发等价类（FEC）" class="headerlink" title="MPLS转发等价类（FEC）"></a>MPLS转发等价类（FEC）</h2><ul><li>把等价的通信流汇聚转发，标记具有局部性</li><li>提供QoS、粒度控制、负载均衡</li></ul><h1 id="路由器技术组播"><a href="#路由器技术组播" class="headerlink" title="路由器技术组播"></a>路由器技术组播</h1><h2 id="IP组播"><a href="#IP组播" class="headerlink" title="IP组播"></a>IP组播</h2><ul><li>有一个源向一个组主机发送信息，D类地址（一个IP地址代表一个主机，称为单播地址）</li></ul><h2 id="IP组播用途"><a href="#IP组播用途" class="headerlink" title="IP组播用途"></a>IP组播用途</h2><ul><li>用于视频点播、网络电视、视频会议和 ==点到多点== 的业务</li></ul><h2 id="组播地址分类"><a href="#组播地址分类" class="headerlink" title="组播地址分类"></a>组播地址分类</h2><ul><li><strong>保留组播</strong>：<ul><li><code>224.0.0.0-224.0.0.255</code>，用于路由协议，如<code>224.0.0.1</code>代表所有主机，<code>224.0.0.2</code>代表所有路由器</li></ul></li><li><strong>用户组播</strong>：<ul><li><code>224.0.1.0-238.255.255.255</code>，全球范围分配，类似公网IP</li></ul></li><li><strong>本地组播</strong>：<ul><li><code>239.0.0.0-239.255.255.255</code>。本地子网分配，类似私网IP</li></ul></li></ul><h2 id="常考IP组播地址"><a href="#常考IP组播地址" class="headerlink" title="常考IP组播地址"></a>常考IP组播地址</h2><ul><li><code>224.0.0.1</code><ul><li>所有主机的地址</li></ul></li><li><code>224.0.0.2</code><ul><li>所有组播路由器的地址</li></ul></li><li><code>224.0.0.5</code><ul><li>所有OSPF路由器</li></ul></li><li><code>224.0.0.6</code><ul><li>OSPF DR/BDR </li></ul></li><li><code>224.0.0.9</code><ul><li>RIPv2路由器</li></ul></li><li><code>224.0.0.10</code><ul><li>EIGRP路由器</li></ul></li><li><code>224.0.0.12</code><ul><li>DHCP服务器/中继代理</li></ul></li><li><code>224.0.0.13</code><ul><li>所有pim路由器</li></ul></li></ul><h2 id="IP组播地址与MAC地址"><a href="#IP组播地址与MAC地址" class="headerlink" title="IP组播地址与MAC地址"></a>IP组播地址与MAC地址</h2><p>   <img data-src="https://s3.ax1x.com/2021/02/24/yXD3C9.png" alt="ipzb"></p><h2 id="IP组播协议"><a href="#IP组播协议" class="headerlink" title="IP组播协议"></a>IP组播协议</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>IGMP因特网组管理协议，管理主机加入或离开组播组</li><li>IGMP封装在IP中，协议号为2</li></ul><h3 id="IGMPv3报文分类"><a href="#IGMPv3报文分类" class="headerlink" title="IGMPv3报文分类"></a>IGMPv3报文分类</h3><ul><li>IGMPv3报文分类：<ul><li>成员资格询问报文：<ul><li>组播路由器发出，询问是否有主机加入组播</li></ul></li><li>成员资格报告报文<ul><li>主机加入组播组</li></ul></li><li>组记录报文<ul><li>记录组播的状态和信息</li></ul></li></ul></li></ul><h2 id="IP组播路由协议"><a href="#IP组播路由协议" class="headerlink" title="IP组播路由协议"></a>IP组播路由协议</h2><ul><li>用来建立组播树，是实现组播传输的关键技术</li><li><p>分为 ==源分发树和共享分发树==</p><p><img data-src="https://s3.ax1x.com/2021/02/24/yXDNDK.png" alt="zblyxy"></p></li></ul><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li><strong>PIM</strong>：协议无关组播</li><li><strong>PIM-DM</strong>：密集模式PIM</li><li><strong>DVMRP</strong>：距离矢量组播路由协议</li><li><strong>MOSPF</strong>：组播开放式最短路径优先</li><li><strong>CBT</strong>：基于核心的树</li><li><strong>PIM-SM</strong>：稀疏模式PIM</li></ul><h3 id="PIM-DM"><a href="#PIM-DM" class="headerlink" title="PIM-DM"></a>PIM-DM</h3><ul><li>IP组播路由协议：PIM-DM：密集模<br>式PIM。</li><li>用于组播成员集中，且较多，如局域网。</li><li>采取“泛洪扩散-修剪丢弃”维护组播分发树。使用“推”的机制， <strong>先给你，可以不要。</strong></li><li>关键技术是利用反向通路，使用自己找回来的路径。</li><li>使用源分发树：以组播源为根节点构造到所有组播组成员的生成树，通常也称为最短路径树（SPT）</li></ul><h3 id="PIM-SM"><a href="#PIM-SM" class="headerlink" title="PIM-SM"></a>PIM-SM</h3><ul><li>IP组播路由协议：PIM-SM：稀疏模式PIM，用于组播成员少，且稀疏分布，如<br>广域网。</li><li>采用选择性的建立和维护分布树。只有发送请求的才会收到数据。使用“拉”的机制， <strong>你要了，才会给你。</strong></li><li>使用共享分发树：确定一个汇聚点。先发给汇聚点，再有汇聚点发给其他路由器</li></ul><h1 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h1><ol><li>NAT技术解决了IPv4地址短缺的问题，假设内网的地址数是m，而外网的地址数n，则这种技术叫做 []{.gap} {.quiz}<ul><li>动态地址翻译 {.correct} </li><li>静态地址翻译 {.options}</li><li>地址伪装 {.options}</li><li>地址变换 {.options}<br>{.options}</li></ul></li><li><p>续第一题，若$M&gt;N$m，且n=1，则这种技术叫做 []{.gap} {.quiz}</p><ul><li>动态地址翻译 {.options}</li><li>静态地址翻译 {.options}</li><li>地址伪装 {.correct} </li><li>地址变换 {.options}<br>{.options}</li></ul></li><li><p>一个组播包括4个成员，当组播服务发送信息是需要发出 （[]{.gap}） 个分组 {.quiz}</p><ul><li>1 {.correct}</li><li>2 {.options}</li><li>3 {.options}</li><li>4 {.options}<br>{.options}</li></ul></li><li><p>可以用于表示地址块220.17.0.0-220.17.7.0的网络地址为 []{.gap} {.quiz}</p><ul><li>220.17.0.0/20 {.options}</li><li>220.17.0.0/21 {.correct}</li><li>220.17.0.0/16 {.options}</li><li>220.17.0.0/24 {.options}<br>{.options}</li></ul></li><li><p>续第四题，这个地址块可以分配  （[]{.gap}） 个主机地址？ {.quiz}</p><ul><li>2032 {.correct}</li><li>2048 {.options}</li><li>2000 {.options}</li><li>2056 {.options}<br>{.options}</li></ul></li><li><p>把网络10.1.0.0/16进一步划分子网10.1.0.0/18，则原网络被划分为  （[]{.gap}）   子网 {.quiz}</p><ul><li>2 {.options}</li><li>3 {.options}</li><li>4 {.correct}</li><li>6 {.options}<br>{.options}<blockquote><ul><li>/16到/18相差2位，即$2^2=4$</li></ul></blockquote></li></ul></li><li><p>IP 地址202.117.18.254/22是 （[]{.gap}） 地址？ {.quiz}</p><ul><li>网络地址 {.options}</li><li>全局广播地址 {.options}</li><li>定向广播地址 {.options}</li><li>主机地址 {.correct}<br>{.options}</li></ul></li><li><p>如果指定子网掩码为255.255.254.0，则 （[]{.gap}） 地址可以被赋予一个主机 {.quiz}</p><ul><li>112.10.4.0 {.options}</li><li>186.55.3.0 {.correct}</li><li>117.30.3.255 {.options}</li><li>17.34.36.0 {.options}<br>{.options}</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络互联与互联网03</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E4%BA%92%E8%81%94%E4%B8%8E%E4%BA%92%E8%81%94%E7%BD%9103/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E4%BA%92%E8%81%94%E4%B8%8E%E4%BA%92%E8%81%94%E7%BD%9103/</url>
      
        <content type="html"><![CDATA[<h1 id="传输层协议TCP"><a href="#传输层协议TCP" class="headerlink" title="传输层协议TCP"></a>传输层协议TCP</h1><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><ul><li>传输控制协议，面向字节流按顺序、连接、可靠、全双工，可变滑动窗口、缓冲累积传送。</li><li>协议号6</li></ul><h2 id="TCP协议几个重要字段"><a href="#TCP协议几个重要字段" class="headerlink" title="TCP协议几个重要字段"></a>TCP协议几个重要字段</h2><ul><li><strong>源端口、目的端口：</strong> 16位，$2^{16}$（0-65535）</li><li><strong>URG</strong>：紧急指针有效</li><li><strong>ACK</strong>：应答顺序号有效</li><li><strong>PSH</strong>：推进功能有效</li><li><strong>RST</strong>：复位为初始状态</li><li><strong>SYN</strong>：建立同步连接</li><li><strong>FIN</strong>：结束释放连接</li><li><strong>校验和</strong>：包括TCP段头、数据、伪段头</li></ul><p>  <img data-src="https://s3.ax1x.com/2021/02/24/yX0OyV.jpg" alt="tcpbt"></p><h2 id="TCP端口"><a href="#TCP端口" class="headerlink" title="TCP端口"></a>TCP端口</h2><div class="table-container"><table><thead><tr><th style="text-align:center">端口</th><th style="text-align:center">服务</th><th style="text-align:center">端口</th><th style="text-align:center">服务</th></tr></thead><tbody><tr><td style="text-align:center">20</td><td style="text-align:center">文件传输协议（数据）</td><td style="text-align:center">80</td><td style="text-align:center">超文本传输协议</td></tr><tr><td style="text-align:center">21</td><td style="text-align:center">文件传输协议（控制）</td><td style="text-align:center">110</td><td style="text-align:center">POP3服务器（邮箱发送）</td></tr><tr><td style="text-align:center">23</td><td style="text-align:center">Telnet终端仿真协议</td><td style="text-align:center">139</td><td style="text-align:center">Win98共享资源端口</td></tr><tr><td style="text-align:center">25</td><td style="text-align:center">SMTP简单邮件发送协议</td><td style="text-align:center">143</td><td style="text-align:center">IMAP电子邮件</td></tr><tr><td style="text-align:center">42</td><td style="text-align:center">WINS主机名服务</td><td style="text-align:center">161</td><td style="text-align:center">NMP-snmp</td></tr><tr><td style="text-align:center">53</td><td style="text-align:center">域名服务器（DNS）</td><td style="text-align:center">162</td><td style="text-align:center">SNMP-trap-snmp</td></tr></tbody></table></div><h2 id="TCP三次握手：防止产生错误的连接"><a href="#TCP三次握手：防止产生错误的连接" class="headerlink" title="TCP三次握手：防止产生错误的连接"></a>TCP三次握手：防止产生错误的连接</h2><p>  <img data-src="https://s3.ax1x.com/2021/02/24/yX0OyV.jpg" alt="scws"></p><ul><li>SYN码：1为肯定，0为否定</li></ul><h2 id="TCP四次挥手：释放连接"><a href="#TCP四次挥手：释放连接" class="headerlink" title="TCP四次挥手：释放连接"></a>TCP四次挥手：释放连接</h2><p>   <img data-src="https://s3.ax1x.com/2021/02/24/yXBZwD.png" alt="schs"></p><h2 id="TCP拥塞控制机制"><a href="#TCP拥塞控制机制" class="headerlink" title="TCP拥塞控制机制"></a>TCP拥塞控制机制</h2><ul><li>报文到达速率大于路由器的转发速率，产生拥塞</li><li><strong>解决方法</strong><ul><li>重传计时器</li><li>慢启动</li><li>拥塞避免</li><li>快速重传</li><li>可变滑动窗口</li><li>选择重发ARQ</li></ul></li><li><strong>总结：差错控制、流量控制、拥塞控制</strong></li></ul><h2 id="超时重传计时器"><a href="#超时重传计时器" class="headerlink" title="超时重传计时器"></a>超时重传计时器</h2><ul><li>重传是为了保证TCP可靠的重要措施。TCP每发送一个报文段，就对这个报文段设置一次计时器。只要计时器设置的时间到了，但还没有收到确认，就重传这一报文段</li><li>重传时间要设置的合理，一般和 <strong>往返时间</strong>、 <strong>平均时延</strong>、 <strong>时间偏差</strong> 等有关。大多数采取观察最近一段时间的报文时延来估算往返时间</li></ul><h2 id="慢启动"><a href="#慢启动" class="headerlink" title="慢启动"></a>慢启动</h2><ul><li>发送方在接收到确认之前逐步扩大窗口的大小</li><li><p>1、2、4、8等按指数规律翻倍，最后达到门限阈值。出现超时，将拥塞窗口回到1，再次开始慢启动</p><p>  <img data-src="https://s3.ax1x.com/2021/02/24/yXBnFH.png" alt="mqd"></p></li></ul><h2 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h2><ul><li>窗口达到门限阈值以后，进入拥塞避免阶段，TCP采用线性增加方式放大窗口，按照+1递增。发生拥塞，门限阈值减半。再发生再减半。按指数规律成倍减半</li></ul><h2 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h2><ul><li><p>发送端一连收到3个重复ACK，就重传，不等待计时器</p><p>  <img data-src="https://s3.ax1x.com/2021/02/24/yXBNkQ.png" alt="kscc"></p></li></ul><h1 id="传输层协议UDP"><a href="#传输层协议UDP" class="headerlink" title="传输层协议UDP"></a>传输层协议UDP</h1><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><ul><li>用户数据报协议，无连接的、不可靠的、不保证顺序的、无差错流控机制</li><li>校验和包括：UDP头部、数据、伪头部</li><li>协议号17</li></ul><h2 id="UDP报文格式"><a href="#UDP报文格式" class="headerlink" title="UDP报文格式"></a>UDP报文格式</h2><ul><li>少量传输数据，高层程序负责解决数据排序、差错控制等</li><li><p>开销少，网络管理经常使用</p><p>  <img data-src="https://s3.ax1x.com/2021/02/24/yXB0lq.png" alt="UDPbw"></p></li><li><p><strong>TCP支持数据传输，UDP支持音视频传输</strong></p></li></ul><h1 id="场景应用层协议"><a href="#场景应用层协议" class="headerlink" title="场景应用层协议"></a>场景应用层协议</h1><h2 id="电子邮件协议SMTP"><a href="#电子邮件协议SMTP" class="headerlink" title="电子邮件协议SMTP"></a>电子邮件协议SMTP</h2><ul><li>SMTP简单邮件传输协议，负责将邮件==上传到服务器==，采用TCP的25端口，C/S工作模式，仅传送ASCII码文本</li></ul><p>   <img data-src="https://s3.ax1x.com/2021/02/24/yXBRh9.jpg" alt="smtp"></p><h2 id="电子邮件协议POP3"><a href="#电子邮件协议POP3" class="headerlink" title="电子邮件协议POP3"></a>电子邮件协议POP3</h2><ul><li>POP3邮局协议，负责将邮件==下载到客户机==，采用TCP的110端口，C/S工作模式</li><li><p>用户从服务器读取邮件后，服务器就删除该邮件</p><p>  <img data-src="https://s3.ax1x.com/2021/02/24/yXB46x.png" alt="pop3"></p></li></ul><h2 id="电子邮件协议S-MIME"><a href="#电子邮件协议S-MIME" class="headerlink" title="电子邮件协议S/MIME"></a>电子邮件协议S/MIME</h2><ul><li>S/MIME多用途互联网邮件扩展协议，负责将多媒体邮件安全 ==上传到服务器中==，包含文本、图像、音频、视频以及其他应用程序专用的数据</li></ul><h2 id="电子邮件协议IMAP4"><a href="#电子邮件协议IMAP4" class="headerlink" title="电子邮件协议IMAP4"></a>电子邮件协议IMAP4</h2><ul><li>IMAP4互联网消息访问协议，提供摘要浏览，选择下载</li><li>采用TCP的142端口，C/S工作模式</li><li>用户从服务器读取邮件后，服务器 <strong>仍会保存该邮件</strong></li></ul><h2 id="电子邮件协议PGP"><a href="#电子邮件协议PGP" class="headerlink" title="电子邮件协议PGP"></a>电子邮件协议PGP</h2><ul><li>PGP电子邮件加密协议，数据加密、鉴别、签名和压缩等技术</li><li>使用IDEA（128位）加密数据，RSA加密密钥，MD5认证</li></ul><ul><li><strong>PEM增强保密邮件协议</strong><ul><li>使用多种加密方法提供机密性、认证和信息完整性的因特网电子邮件协议，采用每个报文 <strong>一次一密的方法加密</strong> ，其他和PGP功能差不多</li></ul></li></ul><h2 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a>文件传输协议FTP</h2><ul><li>FTP文件传输协议，赋值文件通过服务器 ==上下传送==，</li><li>采用TCP的两条连接<ul><li>数据连接20端口</li><li>控制连接21端口</li></ul></li><li>C/S工作模式</li><li>分为合法访问和匿名访问<ul><li><code>ftp://192.168.12.106</code>的格式访问，或把IP改为域名也可访问，但必须加上<code>ftp://</code>协议头</li></ul></li></ul><h3 id="FTP的传输模式"><a href="#FTP的传输模式" class="headerlink" title="FTP的传输模式"></a>FTP的传输模式</h3><ul><li><strong>FTP的传输模式</strong><ul><li>主动模式（PORT/Standard）</li><li>被动模式（PASV/Passive）</li></ul></li><li><p>区别为：服务器主动使用20端口传数据，被动随机传端口</p><p>   <img data-src="https://s3.ax1x.com/2021/02/24/yXBLhd.jpg" alt="port"></p><p>   <img data-src="https://s3.ax1x.com/2021/02/24/yXBbAe.jpg" alt="pasv"></p></li></ul><h2 id="远程登录协议Telnet"><a href="#远程登录协议Telnet" class="headerlink" title="远程登录协议Telnet"></a>远程登录协议Telnet</h2><ul><li>TCP/IP仿真协议，登录到远程主机上操作，网络虚拟终端NVT致辞异构主机，采用TCP的23端口，C/S工作</li><li><p>使用命令 <code>telnet 192.168.1.254</code></p><p>  <img data-src="https://s3.ax1x.com/2021/02/24/yXDSnf.png" alt="telnet"></p></li></ul><h2 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a>超文本传输协议HTTP</h2><ul><li>万维网WWW（Web）服务器提供全球的、分布的、动态的、多平台的、交互的多媒体信息</li><li>使用TCP的80端口，B/S工作模式，统一资源定位符URL</li><li>编程语言为HTML</li></ul><h1 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h1><ol><li><p>如果一个TCP连接处于ESTABISHED状态，则表示[]{.gap} {.quiz}</p><ul><li>已经发出了连接请求 {.options}</li><li>处于连接监听状态 {.options}</li><li>连接已经建立 {.correct}</li><li>等待对方的释放连接响应 {.options}<br>{.options}</li></ul></li><li><p>下面哪个字段的信息出现在TCP头部而不出现在UDP头部？ ([]{.gap} )。{.quiz}</p><ul><li>目标端口号 {.options}</li><li>顺序号 {.correct} </li><li>源端口号 {.options}</li><li>校验和 {.options}<br>{.options}<blockquote><ul><li>数据排列：TCP有序，UDP无序</li></ul></blockquote></li></ul></li><li><p>SMTP协议用于 ([]{.gap} ) 电子邮件。 {.quiz}</p><ul><li>接受 {.options}</li><li>发送 {.correct} </li><li>丢弃 {.options}</li><li>阻挡 {.options}<br>{.options}</li></ul></li><li><p>POP3协议采用  ([]{.gap} ) 模式进行通信。 {.quiz}</p><ul><li>B/S {.options}</li><li>C/S {.correct} </li><li>P-to-P {.options}</li><li>P-to-C {.options}<br>{.options}</li></ul></li><li><p>在POP3协议中，当客户机需要访问时，客户端软件与POP3服务器建立 ([]{.gap} )  连接。 {.quiz}</p><ul><li>TCP {.correct} </li><li>UDP {.options}</li><li>PHP {.options}</li><li>IP {.options}<br>{.options}</li></ul></li><li><p>在TCP/IP协议中，合法的端口地址的范围是 []{.gap} {.quiz}</p><ul><li>1-255 {.options}</li><li>1-1023 {.options}</li><li>1-1024 {.options}</li><li>1-65535 {.correct}<br>{.options}</li></ul></li><li><p>FTP需要建立两个连接，当工作与PSVE模式时，其数据连接的端口号是 []{.gap} {.quiz}</p><ul><li>20 {.options}</li><li>21 {.options}</li><li>用户确定 {.options}</li><li>服务器确定 {.correct}<br>{.options}<blockquote><ul><li>FTP 默认是主动模式 使用20 21端口，PSVE是随机的，由服务器确定端口号</li></ul></blockquote></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络互联与互联网02</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E4%BA%92%E8%81%94%E4%B8%8E%E4%BA%92%E8%81%94%E7%BD%9102/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E4%BA%92%E8%81%94%E4%B8%8E%E4%BA%92%E8%81%94%E7%BD%9102/</url>
      
        <content type="html"><![CDATA[<h1 id="地址解析协议ARP"><a href="#地址解析协议ARP" class="headerlink" title="地址解析协议ARP"></a>地址解析协议ARP</h1><ul><li><strong>地址解析协议ARP</strong>：IP查询MAC地址，询问/回答机制。ARP缓存表、ARP欺骗、ARP病毒、代理ARP、反向RARP<br><img data-src="https://s3.ax1x.com/2021/02/24/yOlvFS.png" alt="yOlvFS.png">(<span class="exturl" data-url="aHR0cHM6Ly9pbWd0dS5jb20vaS95T2x2RlM=">https://imgtu.com/i/yOlvFS</span>)<h2 id="ARP工作原理"><a href="#ARP工作原理" class="headerlink" title="ARP工作原理"></a>ARP工作原理</h2></li><li>如果主机A向主机B发送数据，首先发送端主机（主机A）检查自己的ARP缓存列表中是否有接收端主机信息，这个列表的==生存周期为300s==，如没有则广播发送<code>ARP request</code>(内容包括主机A的地址、MAC地址),接收端主机（主机B）返回<code>ARP response</code>单播（内容包括主机B的IP地址、MAC地址、主机A的IP地址、MAC地址）并将发送端主机（主机A）的IP和MAC映射关系缓存，而发送端主机（主机A）收到<code>ARP response</code>后更新其ARP缓存表，并发送数据。</li></ul><h2 id="ARP缓存表"><a href="#ARP缓存表" class="headerlink" title="ARP缓存表"></a>ARP缓存表</h2><ul><li>每台主机或路由都维护一个ARP缓存，缓存中含有最近使<br>用过的|P地址与物理地址的映射列表。</li><li>ARP缓存的使用过程<ul><li>主机发送叩数据报需要获取目的主机的物理地址时，首先检查它的ARP缓存，如果ARP缓存中已经存在对应的映射表项，就可以直接从缓存中获取目的主机的物理地址</li><li>只有当ARP缓存中不存在对应的映射表项时，才广播ARP请求。</li></ul></li><li><strong>命令</strong>：<ul><li>开始————&gt;运行————&gt;cmd</li><li>输入 <code>arp -a</code>或<code>-s/-d</code>等————&gt;回车</li><li><code>-a</code>是解析，<code>-s</code>是绑定，<code>-d</code>是删除</li></ul></li></ul><h2 id="代理ARP"><a href="#代理ARP" class="headerlink" title="代理ARP"></a>代理ARP</h2><ul><li>有路由器充当第三方代理，进行ARP请求/回答</li><li>ARP协议的一个变种</li><li>代理ARP(ProxyARP）代表一组主机或一个子网实现ARP</li><li><p>当运行代理P的路由器收到子网1中某一主机查找子网2（被代理子网）中某一主机的|P地址的ARP请求，该路由器代表子网2回送ARP应答。达到隐藏子网的目的。</p><p><img data-src="https://s3.ax1x.com/2021/02/24/yO1Fe0.png" alt="dlarp"></p></li></ul><h2 id="反向地址解析协议RARP"><a href="#反向地址解析协议RARP" class="headerlink" title="反向地址解析协议RARP"></a>反向地址解析协议RARP</h2><ul><li>用MAC查找IP，常用于无盘工作站，设备没有硬盘，无法记录IP，刚启动时发送一个广播，用MAC去获取IP。需要一台RARP服务器，记录MAC与IP的对应关系</li></ul><h2 id="ARP欺骗与ARP病毒"><a href="#ARP欺骗与ARP病毒" class="headerlink" title="ARP欺骗与ARP病毒"></a>ARP欺骗与ARP病毒</h2><ul><li>假设向某一台主机发送伪装应答报文，使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个ARP欺骗。例如，网管软件获取全网MAC地址。病毒伪装网关MAC收集信息</li></ul><h1 id="内部路由协议RIP"><a href="#内部路由协议RIP" class="headerlink" title="内部路由协议RIP"></a>内部路由协议RIP</h1><ul><li><strong>网络层路由协议：选择转发数据路径</strong></li><li>路由协议<ul><li>静态路由协议（手动设置）</li><li>动态路由协议 (自动配置)<ul><li>内部网关协议（RIP）<ul><li>链路状态路由算法（OSPF）</li><li>距离矢量路由算法<ul><li>RIP</li><li>RIPv2</li><li>IGRP （国内几乎不用）</li></ul></li><li>增强型路由算法<ul><li>EIGRP （国内几乎不用）</li></ul></li></ul></li><li>外部网关协议（EGP）<ul><li>EIG</li><li>BGP</li></ul></li></ul></li></ul></li></ul><h2 id="路由信息协议RIP"><a href="#路由信息协议RIP" class="headerlink" title="路由信息协议RIP"></a>路由信息协议RIP</h2><ul><li>距离矢量算法：<ul><li>计算跳数，最大15跳，==16跳不可达==</li><li>30s更新、180s不存在、240s删除<ul><li>一个更新周期30s,==更新、不存在、删除——口诀“168”==</li></ul></li></ul></li><li>支持等费用负载均衡和链路冗余，使用UDP的520端口<ul><li><strong>负载均衡</strong> ：类似于高速公路的分流措施，把数据看成车流，传输的数据要平均分配到每条路径中</li><li><strong>链路冗余</strong>：有一个数据流，两个路径，数据只走一条路径，就产生链路冗余</li><li>等费用，没条路径上的开销要相同，即设备和到达时间的开销</li></ul></li></ul><p>  <img data-src="https://s3.ax1x.com/2021/02/24/yO1ZYF.png" alt="rip"></p><h3 id="RIP的两个版本"><a href="#RIP的两个版本" class="headerlink" title="RIP的两个版本"></a>RIP的两个版本</h3><ul><li>RIP适用于小型网络</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">RIPV1</th><th style="text-align:center">RIPV2</th></tr></thead><tbody><tr><td style="text-align:center">有类不携带子网掩码</td><td style="text-align:center">无类携带子网掩码</td></tr><tr><td style="text-align:center">采用广播更新</td><td style="text-align:center">采用组播224.0.0.9+广播</td></tr><tr><td style="text-align:center">周期性更新30s</td><td style="text-align:center">采用触发更新</td></tr><tr><td style="text-align:center">不支持VLSM、CIDR</td><td style="text-align:center">支持VLSM、CIDR</td></tr><tr><td style="text-align:center">不提供认证</td><td style="text-align:center">提供明文和MD5认证</td></tr></tbody></table></div><h3 id="RIP防止环路的方法"><a href="#RIP防止环路的方法" class="headerlink" title="RIP防止环路的方法"></a>RIP防止环路的方法</h3><ol><li><strong>最大跳数</strong>：当一个路由条目发送出去会自加1跳，跳数最大为16跳，意味着不可达</li><li><strong>水平分割</strong>：一条路由信息不回发送给信息的来源</li><li><strong>反向毒化的水平分割</strong>：把从邻居学习到的路由信息设为16跳，再发送给那个邻居，更加安全</li><li><strong>抑制定时器</strong>和 <strong>触发更新</strong>也可以防止环路</li></ol><h1 id="内部路由协议OSPF"><a href="#内部路由协议OSPF" class="headerlink" title="内部路由协议OSPF"></a>内部路由协议OSPF</h1><h2 id="什么是OSPF？"><a href="#什么是OSPF？" class="headerlink" title="什么是OSPF？"></a>什么是OSPF？</h2><ul><li><p><strong>开放最短路径优先协议OSPF</strong>，链路状态算法，包括：连通、距离、时延、带宽等状态。==Dijkstra的SPF算法==。触发更新、分层路由，==支持大型网络==</p><p><img data-src="https://s3.ax1x.com/2021/02/24/yO1KyR.png" alt="ospf"></p></li></ul><h2 id="OSPF区域类型"><a href="#OSPF区域类型" class="headerlink" title="OSPF区域类型"></a>OSPF区域类型</h2><ul><li>主干区域（32位）<ul><li><code>Area 0.0.0.0</code>或<code>Area 0</code>表示</li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">区域类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">主干区域</td><td style="text-align:center">连接其他区域，都要经过主干区域，也接受任何路由信息</td></tr><tr><td style="text-align:center">标准区域</td><td style="text-align:center">接受任何路由信息</td></tr><tr><td style="text-align:center">完全存根区域</td><td style="text-align:center">只接受本区域内的路由信息，其他一概不接收（思科专用）</td></tr><tr><td style="text-align:center">不完全存根区域</td><td style="text-align:center">除接受本区域的路由信息，还接受类型7的</td></tr></tbody></table></div><h2 id="OSPF网络类型"><a href="#OSPF网络类型" class="headerlink" title="OSPF网络类型"></a>OSPF网络类型</h2><div class="table-container"><table><thead><tr><th style="text-align:center">OSPF网络类型</th><th style="text-align:center">特点</th><th style="text-align:center">数据传输方式</th></tr></thead><tbody><tr><td style="text-align:center">点到点网络<br>(Point-to-Point)</td><td style="text-align:center">有效邻居走势可以形成邻居关系</td><td style="text-align:center">组播地址为<code>224.0.0.5</code>，该地址称为AIISPFRouters</td></tr><tr><td style="text-align:center">点到多点网络<br>(Point-to-Multicast)</td><td style="text-align:center">不选举DR/BDR，可看作是多个Point-to-Point链路的集合</td><td style="text-align:center">单播（Unicast）</td></tr><tr><td style="text-align:center">广播型网络<br>(Broadcast)</td><td style="text-align:center">选举DR/BDR，所有路由器和DR/BDR交换信息。DR/BDR不能被抢占。广播型网络有： <strong>以太网</strong>、 <strong>TokenRing</strong> 和 <strong>FDDI</strong></td><td style="text-align:center">DR、BDR组播到<code>224.0.0.5</code>，DR、BDR侦听<code>224.0.0.6</code>，该地址称为AIIDRouters</td></tr><tr><td style="text-align:center">非广播型<br>(NBMA)</td><td style="text-align:center">没有广播，需手动指定邻居，Hello消息单播，NBMA网络有 X.25、Frame Relay和ATM</td><td style="text-align:center">单播</td></tr><tr><td style="text-align:center">虚拟连接<br>(Virtual Link)</td><td style="text-align:center">虚链路一旦建立，就不在发送Hello消息，通过一个非Area0连接到Area0，一个非Area0连接Area0的两个分段骨干区域</td><td style="text-align:center">单播</td></tr></tbody></table></div><h2 id="OSPF路由器分类"><a href="#OSPF路由器分类" class="headerlink" title="OSPF路由器分类"></a>OSPF路由器分类</h2><ul><li>BR（骨干）</li><li>IR</li><li>ABR</li><li><p>ASBR</p><p><img data-src="https://s3.ax1x.com/2021/02/24/yO11w6.png" alt="ospflyq"></p></li></ul><h2 id="OSPF五种报文类型"><a href="#OSPF五种报文类型" class="headerlink" title="OSPF五种报文类型"></a>OSPF五种报文类型</h2><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">报文类型</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Hello—建立外交关系</td><td style="text-align:center">用于发现相邻的路由器</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">数据库描述DBD—外交（数据）内容</td><td style="text-align:center">表示发送者的链路状态数据库内容</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">链路状态请求LSR—向对方请求消息</td><td style="text-align:center">向对方请求链路状态信息</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">链路状态更新LSU</td><td style="text-align:center">向邻居路由器发送链路状态通告</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">链路状态LSAck</td><td style="text-align:center">对链路状态更新报文的应答</td></tr></tbody></table></div><ul><li><strong>Hello报文</strong><ul><li>默认10s（30s）更新一次，40s失效，目的地址是<code>224.0.0.5</code>所有路由器。用于发现建立邻居、还用于选出区域内的指定路由器DR和备份指定路由器BDR</li><li>10s是在点对点网络中</li><li>30s是在广播网络中，更新太频繁容易导致网络抖动</li></ul></li></ul><h1 id="外部网关协议BGP"><a href="#外部网关协议BGP" class="headerlink" title="外部网关协议BGP"></a>外部网关协议BGP</h1><h2 id="什么是BGP？"><a href="#什么是BGP？" class="headerlink" title="什么是BGP？"></a>什么是BGP？</h2><ul><li>BGP，边界网关协议。是外部网关协议，存在于不同自治系统AS之间。寻找较好的路由策略</li><li>通过TCP的179端口建立连接</li><li>支持VLSM和CIDR，是一种路径矢量协议</li><li>目前最新版本BGP4，BGP4+支持IPV6</li></ul><h2 id="BGP的四种报文"><a href="#BGP的四种报文" class="headerlink" title="BGP的四种报文"></a>BGP的四种报文</h2><div class="table-container"><table><thead><tr><th style="text-align:center">报文类型</th><th style="text-align:center">功能描述</th></tr></thead><tbody><tr><td style="text-align:center">打开（Open）</td><td style="text-align:center">建立邻居关系—建立外交</td></tr><tr><td style="text-align:center">更新（Update）</td><td style="text-align:center">发送新的路由信息—更新外交信息</td></tr><tr><td style="text-align:center">保持活动状态（keepalive）</td><td style="text-align:center">对Open的应答/周期性的确认邻居关系—保持外交活动</td></tr><tr><td style="text-align:center">通告（Notification）</td><td style="text-align:center">报告检测到的错误—发布外交通告</td></tr></tbody></table></div><ul><li>Open建立邻居，keepalive周期性探测邻居存活</li><li>每个自治系统都要选择至少一个路由器作为该自治系统的“BGP发言人”。增量更新、支持认证。可靠传输、防止环路。自治通信、策略选路。支持无类、支持聚合</li></ul><h1 id="域名与地址"><a href="#域名与地址" class="headerlink" title="域名与地址"></a>域名与地址</h1><h2 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h2><ul><li><strong>域名系统DNS</strong> (DomainNameSystem）是Internet上解决网上机器命名的一种系统，==采用C/S模式服务==。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</li><li>域名系统==使用TCP和UDP端口53==，==对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符==。</li></ul><h3 id="名称解析方法"><a href="#名称解析方法" class="headerlink" title="名称解析方法"></a>名称解析方法</h3><ul><li><strong>Hosts表</strong> ：是一个没有扩展名的文本文件。其中存放一些常用的主机域名和其对应的IP地址映<br>射，文件中每一行对应一个条目。</li><li><strong>NIS系统</strong> ：由sun公司开发的域名系统。用于中小型系统。</li><li><strong>DNS系统</strong> ：规定域名中的标号由英文字母和数字组合而成，每个标号不能超过63个字符，为方便记忆一般不超过12个字符。</li></ul><h3 id="DNS查询过程"><a href="#DNS查询过程" class="headerlink" title="DNS查询过程"></a>DNS查询过程</h3><ol><li><strong>本地解析</strong> ：客户机平时查询得到的DNS记录均保存在本地DNS缓存中，当有进程提出DNS查询时，DNS客户端先使用本地缓存的信息来解析，如果可以解析则直接应答查询而不必向DNS服务器查询。==本地解析有两个来源：Hosts表和DNS缓存==。</li><li><strong>直接解析</strong> ：如果本地解析不能找到DNS信息，则客户端向其所设定的DNS服务器发出查询请求，服务器收到请求后先检查本地配置区域中是否有所需查询信息，如果有则作出应答，如果没有，服务器则检能否通过其缓存的查询信息来解析，如果有则作出应答。</li><li><strong>递归解析</strong> ：如果DNS服务器不能解析该查询信息，则服务器向上级DNS服务器查询，直到查询到该信息为止。（服务器默认配置）</li><li><strong>迭代解析</strong> ：如果DNS服务器不能解析该查询信息，服务器不会向上级DNS服务器查询该信息，而是将上级DNS服务器地址告诉给客户端，有客户端向上级DNS服务器查询该信息</li></ol><h3 id="DNS对象类型与资源记录："><a href="#DNS对象类型与资源记录：" class="headerlink" title="DNS对象类型与资源记录："></a>DNS对象类型与资源记录：</h3><ul><li><strong>A</strong> ：列出域名到IP地址的映射。</li><li><strong>PTR</strong> ：将地址转换为域名。</li><li><strong>NS</strong> ：指明区域中的所有域名服务器(包括主域名服务器和辅助域名服务器)</li><li><strong>MX</strong> ：邮件交换。</li><li><strong>CNAME</strong> ：允许多个域名指向同一台服务器。</li><li><strong>SOA</strong> ：指明区域中的主域名服务器。<h1 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h1></li></ul><ol><li><p>ARP协议的作用是 []{.gap} {.quiz}</p><ul><li>由MAC地址求IP地址 {.options}</li><li>由IP地址求MAC地址 {.correct}</li><li>由IP地址查域名 {.options}</li><li>由域名查IP地址 {.options}<br>{.options}</li></ul></li><li><p>ARP协议数据单元封装在 []{.gap} 中传送 {.quiz}</p><ul><li>IP分组 {.options}</li><li>以太帧 {.correct}</li><li>TCP段 {.options}</li><li>UDP报文 {.options}<br>{.options}</li></ul></li><li><p>ARP请求是采用 []{.gap} 方式发送的 {.quiz}</p><ul><li>单播 {.options}</li><li>组播 {.options}</li><li>广播 {.correct}</li><li>点播 {.options}<br>{.options}<blockquote><ul><li>广播发送，单播响应</li></ul></blockquote></li></ul></li><li><p>为了解决RIP协议形成环路的问题，可以采用多种方法，下面列出的方法中效果最好的是 []{.gap} {.quiz}</p><ul><li>不用把从一个邻居学习到的路由发送给那个邻居 {.options}</li><li>经常检查邻居路由器状态，以便及时发现断开的链路 {.options}</li><li>把从邻居学习到的路由设置为无限大，然后发送给那个邻居 {.correct}</li><li>缩短路由更新周期，以便出现链路失效时尽快达到路由无限大 {.options}<br>{.options}</li></ul></li><li><p>OSPF网络可以划分成多个区域，下面对区域描述错误的是 []{.gap} {.quiz}</p><ul><li>区域可以被赋予0-65535中的任何编号 {.options}</li><li>单域OSPF网络必须配置为区域1 {.correct}</li><li>区域0被称为主干网 {.options}</li><li>分层的OSPF网络必须划分为多个区域 {.options}<br>{.options}<blockquote><ul><li>配置为区域0，必须的</li></ul></blockquote></li></ul></li><li><p>在BGP4协议中， []{.gap} 报文给出了新的路由信息  {.quiz}</p><ul><li>打开 {.options}</li><li>更新 {.correct}</li><li>保持活动 {.options}</li><li>通告 {.options}<br>{.options}</li></ul></li><li><p>边界网关协议BGP4被称为路径矢量协议，它传送的路由信息是由一个地址前缀后跟 []{.gap}  组成 {.quiz}</p><ul><li>一串IP地址 {.options}</li><li>一串自治系统编号 {.correct}</li><li>一串路由器编号 {.options}</li><li>一串子网地址 {.options}<br>{.options}</li></ul></li><li><p>BGP4的优点是 []{.gap} {.quiz}</p><ul><li>防止域间路由循环 {.correct}</li><li>可以及时更新路由 {.options}</li><li>便于发现最短通路 {.options}</li><li>考虑了多种路由度量因素 {.options}<br>{.options}</li></ul></li><li><p>OSPF协议将其管理的网络划分为不同类型的若干区域，其中标准区域的特点是 []{.gap} {.quiz}</p><ul><li>不接受本地AS之外的路由信息，也不接受其他区域的路由汇总信息 {.options}</li><li>不接受本地AS之外的路由信息，对本地AS之外的目标采用默认路由 {.options}</li><li>可以就接收任何链路更新信息和路由汇总信息 {.correct}</li><li>可以学习其他AS的利欲熏心，对本地AS中的其他区域采用默认路由 {.options}<br>{.options}</li></ul></li><li><p>OSPF协议将其管理的网络划分为不同类型的若干区域，存根区域（stub）的特点是 []{.gap} {.quiz}</p><ul><li>不接受本地AS之外的路由信息，也不接受其他区域的路由汇总信息 {.correct}</li><li>不接受本地AS之外的路由信息，对本地AS之外的目标采用默认路由 {.options}</li><li>可以就接收任何链路更新信息和路由汇总信息 {.options}</li><li>可以学习其他AS的利欲熏心，对本地AS中的其他区域采用默认路由 {.options}<br>{.options}</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP子网划分专题</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/IP%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E4%B8%93%E9%A2%98/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/IP%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="2-10进制转换"><a href="#2-10进制转换" class="headerlink" title="2-10进制转换"></a>2-10进制转换</h1><h2 id="8421法————二转十（连加）或十转二（连减）"><a href="#8421法————二转十（连加）或十转二（连减）" class="headerlink" title="8421法————二转十（连加）或十转二（连减）"></a>8421法————二转十（连加）或十转二（连减）</h2><ul><li><p>增加时翻倍，减少时减半 </p><p><img data-src="https://s3.ax1x.com/2021/02/23/yqvjxI.png" alt="8421"></p></li><li><p><strong>例子</strong></p></li></ul><ol><li><code>11001101</code>的十进制为多少？<ul><li>$128+64+0+0+8+4+0+1=205$</li></ul></li><li><code>11110001</code>的十进制为多少？<ul><li>$128+64+32+16+0+0+0+1=241$</li></ul></li><li><code>127</code>的二进制是多少？<ul><li>$128-1=127$,则第八位后面的全为1，即01111111</li></ul></li><li><code>204</code>的二进制是多少？<ul><li>$128+64+8+4=204$,则第8、7、4、3位为1，其他全为0，即11001100</li></ul></li></ol><h2 id="IP地址转换"><a href="#IP地址转换" class="headerlink" title="IP地址转换"></a>IP地址转换</h2><ul><li><p>IP地址有4个32位，每一个8位组用0-255表示。因此最小的IP地址值为<code>0.0.0.0</code>,最大为<code>255.255.255.255</code></p><p><img data-src="https://s3.ax1x.com/2021/02/23/yqxSqf.png" alt="ipzh"></p></li></ul><h3 id="位数与个数的关系"><a href="#位数与个数的关系" class="headerlink" title="位数与个数的关系"></a>位数与个数的关系</h3><ul><li><p>关系是： $2^n$次方</p><p><img data-src="https://s3.ax1x.com/2021/02/23/yqxEzn.png" alt="yqxEzn.png"></p></li></ul><h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><ul><li>屏蔽IP地址的网络部分的“全1”比特模式， <strong>将某个IP地址划分成网络地址和主机地址两部分</strong>，子网掩码 ==不能单独存在==，必须结合IP地址一起使用</li><li>如A类地址子网掩码的主机位和网络位：</li></ul><table>    <tr><th>网络位</th><th colspan="3">主机位</th></tr>    <tr><td>11111111</td><td>00000000</td><td>00000000</td><td>00000000</td></tr>    <tr><td>255</td><td>0</td><td>0</td><td>0</td></tr></table><ul><li><strong>A类地址：</strong><ul><li>默认子网掩码：<code>255.0.0.0/8</code></li></ul></li><li><strong>B类地址：</strong><ul><li>默认子网掩码：<code>255.255.0.0/16</code></li></ul></li><li><strong>C类地址：</strong><ul><li>默认子网掩码：<code>255.255.255.0/24</code></li></ul></li></ul><h3 id="常用的子网掩码（建网比特数）"><a href="#常用的子网掩码（建网比特数）" class="headerlink" title="常用的子网掩码（建网比特数）"></a>常用的子网掩码（建网比特数）</h3><div class="table-container"><table><thead><tr><th style="text-align:center">网络位</th><th style="text-align:center">子网掩码</th><th style="text-align:center">网络位</th><th style="text-align:center">子网掩码</th></tr></thead><tbody><tr><td style="text-align:center">/32</td><td style="text-align:center"><code>255.255.255.255</code></td><td style="text-align:center">/24</td><td style="text-align:center"><code>255.255.255.0</code></td></tr><tr><td style="text-align:center">/31</td><td style="text-align:center"><code>255.255.255.254</code></td><td style="text-align:center">/23</td><td style="text-align:center"><code>255.255.254.0</code></td></tr><tr><td style="text-align:center">/30</td><td style="text-align:center"><code>255.255.255.252</code></td><td style="text-align:center">/22</td><td style="text-align:center"><code>255.255.252.0</code></td></tr><tr><td style="text-align:center">/29</td><td style="text-align:center"><code>255.255.255.248</code></td><td style="text-align:center">/21</td><td style="text-align:center"><code>255.255.248.0</code></td></tr><tr><td style="text-align:center">/28</td><td style="text-align:center"><code>255.255.255.240</code></td><td style="text-align:center">/20</td><td style="text-align:center"><code>255.255.240.0</code></td></tr><tr><td style="text-align:center">/27</td><td style="text-align:center"><code>255.255.255.224</code></td><td style="text-align:center">/19</td><td style="text-align:center"><code>255.255.224.0</code></td></tr><tr><td style="text-align:center">/26</td><td style="text-align:center"><code>255.255.255.192</code></td><td style="text-align:center">/18</td><td style="text-align:center"><code>255.255.192.0</code></td></tr><tr><td style="text-align:center">/25</td><td style="text-align:center"><code>255.255.255.128</code></td><td style="text-align:center">/17</td><td style="text-align:center"><code>255.255.128.0</code></td></tr></tbody></table></div><h2 id="子网划分原理"><a href="#子网划分原理" class="headerlink" title="子网划分原理"></a>子网划分原理</h2><ul><li><strong>网段：</strong><ul><li>是指标准子网掩码产生得到一端网络IP范围</li></ul></li><li><strong>子网：</strong><ul><li>借用“主机位”将网段划分更小的网络，称为子网，一般指往右“借位”VLSM</li></ul></li><li><strong>超网：</strong><ul><li>借用“网络位”将网段合成更大的网络，称为超网，一般指往左“借位”CIDR</li></ul></li></ul><h3 id="划分子网三步骤"><a href="#划分子网三步骤" class="headerlink" title="划分子网三步骤"></a>划分子网三步骤</h3><ol><li><strong>看段</strong> ：看子网掩码在第几段开始变化</li><li><strong>算块</strong> ：计算块大小，即范围</li><li><strong>求数</strong> ：计算</li></ol><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><ol><li>某单位有一个C类网络<code>192.168.1.0</code>，子网掩码<code>255.255.255.192/26</code>,求子网数、主机数、子网号、广播号、范围<ul><li>子网数：$256-192=64$,$256\lt64=4$,有四个子网（0-255共256台主机）</li><li>主机数：$32-26=6$ $2^6=64$,有64台主机</li><li>范围：<code>192.168.1.0-192.168.1.63</code>、<code>192.168.1.64-192.168.1.127</code>、<code>192.168.1.128-192.168.1.191</code>、<code>192.168.1.192-192.168.1.255</code>,共四个网段</li><li>子网号：每个网段的第一个IP地址</li><li>广播号：每个网段的最后一个IP地址</li></ul></li></ol><ul><li><strong>总结：</strong><ul><li>==一头一尾：网络地址、广播地址，可用主机要-2==</li><li>==网络地址是块大小的倍数==</li></ul></li></ul><ol><li>IP地址<code>219.25.23.56</code>的缺省子网掩码是 []{.gap}位。{.quiz}<ul><li>8 {.options}</li><li>16 {.options}</li><li>24 {.correct}</li><li>32 {.options}<br>{.options}<blockquote><ul><li>219是C类地址，缺省子网掩码即/24</li></ul></blockquote></li></ul></li><li>B类地址子网掩码为<code>255.55.255.248</code>，则每个子网内可用主机地址数为 []{.gap}。{.quiz}<ul><li>10 {.options}</li><li>8 {.options}</li><li>6 {.correct}</li><li>4 {.options}<br>{.options}<blockquote><p>256-248=8,可用主机8-2=6</p></blockquote></li></ul></li><li>以下给出的地址中，属于子网<code>172.112.15.19/28</code>的主机地址是 []{.gap}。{.quiz}<ul><li>172.112.15.17 {.correct}</li><li>172.112.15.14 {.options}</li><li>172.112.15.16 {.options}</li><li>172.112.15.31 {.options}<br>{.options}<blockquote><ul><li>子网数：32-28=4 ；主机数：2^4=16</li><li>可用主机数：16-2=14</li><li>各个网段范围：0-15、16-31、32-47….因此17和19在同一网段</li></ul></blockquote></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络互联与互联网01</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E4%BA%92%E8%81%94%E4%B8%8E%E4%BA%92%E8%81%94%E7%BD%9101/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E4%BA%92%E8%81%94%E4%B8%8E%E4%BA%92%E8%81%94%E7%BD%9101/</url>
      
        <content type="html"><![CDATA[<h1 id="网络互联设备"><a href="#网络互联设备" class="headerlink" title="网络互联设备"></a>网络互联设备</h1><h2 id="常用网络互联设备"><a href="#常用网络互联设备" class="headerlink" title="常用网络互联设备"></a>常用网络互联设备</h2><ul><li><strong>1层物理层：中继器、集线器</strong><ul><li>中继器（Repeater）、集线器（Hub），又叫多端口中继器，传输比特0&nbsp;1，可放大信号，延长传输距离</li></ul></li><li><strong>2层链路层：网桥、交换机</strong><ul><li>网桥（Bridge）、交换机（Switch），又叫多端口网桥，用来传输MAC帧；有源地址、目的地址和自己的MAC地址</li></ul></li><li><strong>3层网络层：路由器、三层交换机</strong><ul><li>路由器（Router），用于选择网络路径，传输分组，有自己的逻辑地址——IP地址</li></ul></li><li><p><strong>4层以上：网关</strong><br><br></p><p><img data-src="https://s3.ax1x.com/2021/02/23/yqvg54.png" alt="2021s"></p></li></ul><h1 id="因特网协议IP"><a href="#因特网协议IP" class="headerlink" title="因特网协议IP"></a>因特网协议IP</h1><h2 id="TCP-IP协议簇"><a href="#TCP-IP协议簇" class="headerlink" title="TCP/IP协议簇"></a>TCP/IP协议簇</h2><table style="width: 100%;" align="center">        <tr><th colspan="2">OSI</th><th colspan="2">TCP/IP</th></tr>     <tr><td align="center">7</td><td>应用层</td><td rowspan="3" align="center">4</td><td rowspan="3">进程/应用层</td></tr>   <tr><td align="center">6</td><td>表示层</td></tr>  <tr><td align="center">5</td><td>会话层</td></tr>    <tr><td align="center">4</td><td>传输层</td><td align="center">3</td><td>主机-主机层</td></tr>  <tr><td align="center">3</td><td>网络层</td><td align="center">2</td><td>网络互联层</td></tr>  <tr><td align="center">2</td><td>数据链路层</td><td rowspan="2" align="center">1</td><td rowspan="2">网络访问层</td></tr>  <tr><td align="center">1</td><td>物理层</td></tr></table> <ul><li><strong>TCP/IP报文封装</strong><table> <tr><td>Ethernet帧头</td><td>IP头部</td><td>TCP头部</td><td>上层数据</td><td>FCS</td></tr> <div align="center"></div></table> </li></ul><h3 id="UDP的主要协议STDD"><a href="#UDP的主要协议STDD" class="headerlink" title="UDP的主要协议STDD"></a>UDP的主要协议STDD</h3><ul><li>S——SNMP（简单网络管理协议）</li><li>T——TFTP（简单文件传输协议）</li><li>D——DNS（域名系统）</li><li><p>D——DHCP（动态主机控制协议）</p><p><img data-src="https://s3.ax1x.com/2021/02/23/yqv5Kx.jpg" alt="stdd"></p></li></ul><h2 id="常用协议端口号"><a href="#常用协议端口号" class="headerlink" title="常用协议端口号"></a>常用协议端口号</h2><div class="table-container"><table><thead><tr><th style="text-align:center">端口</th><th style="text-align:center">服务</th><th style="text-align:center">端口</th><th style="text-align:center">服务</th></tr></thead><tbody><tr><td style="text-align:center">20</td><td style="text-align:center">文件传输协议（数据）</td><td style="text-align:center">80</td><td style="text-align:center">超文本传输协议</td></tr><tr><td style="text-align:center">21</td><td style="text-align:center">文件传输协议（控制）</td><td style="text-align:center">110</td><td style="text-align:center">POP3服务器（邮箱发送）</td></tr><tr><td style="text-align:center">23</td><td style="text-align:center">Telnet终端仿真协议</td><td style="text-align:center">139</td><td style="text-align:center">Win98共享资源端口</td></tr><tr><td style="text-align:center">25</td><td style="text-align:center">SMTP简单邮件发送协议</td><td style="text-align:center">143</td><td style="text-align:center">IMAP电子邮件</td></tr><tr><td style="text-align:center">42</td><td style="text-align:center">WINS主机名服务</td><td style="text-align:center">161</td><td style="text-align:center">NMP-snmp</td></tr><tr><td style="text-align:center">53</td><td style="text-align:center">域名服务器（DNS）</td><td style="text-align:center">162</td><td style="text-align:center">SNMP-trap-snmp</td></tr></tbody></table></div><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><ul><li>因特网协议，是网络层最重要的协议</li><li><p><strong>无连接、不可靠的</strong></p><p><img data-src="https://s3.ax1x.com/2021/02/23/yqv7VO.png" alt="ipxy"></p></li></ul><h3 id="IP协议数据单元"><a href="#IP协议数据单元" class="headerlink" title="IP协议数据单元"></a>IP协议数据单元</h3><ul><li><strong>IHL</strong><ul><li>IP头长度，20字节</li></ul></li><li><strong>服务类型</strong><ul><li>区分优先级</li></ul></li><li><strong>总长度</strong><ul><li>包含IP头在内</li></ul></li><li><strong>头检验和</strong><ul><li>只校验IP头，不包括数据</li></ul></li><li><strong>源地址：IP地址</strong></li><li><strong>目的地址：IP地址</strong></li><li><strong>生存周期</strong><ul><li>路由器个数+1，超过定值丢弃</li></ul></li><li><strong>用户数据</strong><ul><li>==MAC帧长1518，MTU1500==</li><li>IP层：$1518-14-4-20=1480$<ul><li>14为6个字节的目的地址，6个字节的源地址，2个字节长度字段</li><li>4为FCS4位的帧校验码</li><li>20位IP头长度20字节</li></ul></li><li>TCP层还要再$1480-20=1460$</li></ul></li></ul><h2 id="网络层IP地址"><a href="#网络层IP地址" class="headerlink" title="网络层IP地址"></a>网络层IP地址</h2><ul><li><p><strong>四个字节32位，采用点分割法，十进制表示，即点分十进制</strong></p><p><img data-src="https://s3.ax1x.com/2021/02/23/yqvHaD.png" alt="ipdz"></p></li></ul><h2 id="IP私有地址"><a href="#IP私有地址" class="headerlink" title="IP私有地址"></a>IP私有地址</h2><ul><li><p>不可用于公网，只能在内部局域网使用，它们在Internet上也不会被路由，但可以通过NAT等技术与公网通信</p><p><img data-src="https://s3.ax1x.com/2021/02/23/yqvLPH.png" alt="syip"></p></li></ul><h2 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h2><ol><li><code>0.0.0.0</code>；不确定地址，一般设备刚启动尚无IP临时使用，表示本机，也叫 <strong>默认路由地址</strong></li><li><code>255.255.255.255</code>：限制广播地址，通一广播域内的主机，表示本网所有主机。即 <strong>广播地址</strong></li><li><code>127.0.0.1</code>： <strong>回环地址</strong> ，Localhost，向本机发送本机IP测试数据</li><li><code>169.254.x.x</code>： <strong>自动专用地址</strong> ，找不到DHCP服务器，主机给自己分配一个IP</li><li><code>224.0.0.1</code>： <strong>组播地址</strong>，从<code>224.0.0.0</code>到<code>239.255.255.255</code>表示一个组内的主机</li></ol><h1 id="控制报文协议ICMP"><a href="#控制报文协议ICMP" class="headerlink" title="控制报文协议ICMP"></a>控制报文协议ICMP</h1><h2 id="什么是ICMP？"><a href="#什么是ICMP？" class="headerlink" title="什么是ICMP？"></a>什么是ICMP？</h2><ul><li>因特网控制报文协议，网络层的协议，协议号为1，传送有关通信控制和差错报文，就想侦查员。封装在IP包中，因此也不可靠。ICMP的校验和是整个ICMP</li></ul><h2 id="ICMP协议报文类型及功能"><a href="#ICMP协议报文类型及功能" class="headerlink" title="ICMP协议报文类型及功能"></a>ICMP协议报文类型及功能</h2><table style="width: 100%;" align="center">  <tr><th>ICMP报文类型</th><th>描述</th><th>类型的值</th><th>ICM报文的类型</th><th>功能</th></tr>     <tr><td rowspan="5">差错报告报文</td><td rowspan="5">拐两个弯不大，堵塞事故源抑制；拐一个弯重定向</td><td>3</td><td>终点不可达</td><td>当路由器不能把数据报转交给目的站时，就向源站方式终点不可达报文</td></tr>  <tr><td>4</td><td>源站抑制</td><td>当路由器由于拥塞而丢弃数据报时，就向源站发生源站抑制报文，是源站放慢数据报的发送速度</td></tr>  <tr><td>5</td><td>改变路由</td><td>当路由器发现主机可以把数据报发送给另外一个路由器，使数据报沿着更短更好的路由被转发</td></tr>  <tr><td>11</td><td>时间超时</td><td>当路由器收到一个IP数据报时，发现它的生存时间为0，或主机在预定的时间内无法完成数据报的重装，则向源站发送时间超时报文</td></tr>  <tr><td>12</td><td>参数问题</td><td>当路由器或目的站发现收到的数据报首部字段中有不正确的字段时，就向源站点发送参数问题报文</td></tr>  <tr><td rowspan="2">询问报文</td><td rowspan="2">喇叭口有回声么，一生一世时间戳</td><td>8或10</td><td>回送请求或回答</td><td>当需要测试某一目的站点是否可达时，就发送一个ICMP回送请求报文，然后目的站点会向发送站回送一个ICMP回答报文</td></tr>  <tr><td>13或14</td><td>时间戳请求或回答</td><td>当需要每个路由器或主机给出当前的时间和日期时，就发送时间戳请求报文，然后被请求方会回送一个时间戳回答报文，告知自己当前的日期和时间，用来测试通信延迟</td></tr></table> <h1 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h1><ol><li><p>各种联网设备的功能不同，路由器的主要功能是 []{.gap}。{.quiz}</p><ul><li>根据路由表进行分组转发 {.correct}</li><li>负责网络访问层的安全 {.options}</li><li>分配VLAN成员 {.options}</li><li>扩大局域网覆盖范围 {.options}<br>{.options}</li></ul></li><li><p>以下地址中属于自动专用IP地址（APIPA）的是 []{.gap}。{.quiz}</p><ul><li>224.0.0.1  {.options}</li><li>127.0.0.1  {.options}</li><li>192.168.0.1  {.options}</li><li>169.254.1.15  {.correct}<br>{.options}<blockquote><ul><li>A、C为私有地址，B为回环地址</li></ul></blockquote></li></ul></li><li><p>ICMP协议属于因特网中的 []{.gap}协议。{.quiz}</p><ul><li>数据链路层 {.options}</li><li>网络层 {.correct}</li><li>传输层 {.options}</li><li>会话层 {.options}<br>{.options}</li></ul></li><li><p>ICMP协议数据单元封装在 []{.gap}中传送。{.quiz}</p><ul><li>以太帧 {.options}</li><li>TCP段 {.options}</li><li>UDP数据报 {.options}</li><li>IP数据报 {.correct}<br>{.options}</li></ul></li><li><p>下面哪个地址可用于公共互联网中？[]{.gap} {.quiz}</p><ul><li>10.172.12.56 {.options}</li><li>172.64.12.23 {.correct}</li><li>192.168.22.78 {.options}</li><li>172.16.33.124 {.options}<br>{.options}</li></ul></li><li><p>01未来防止因出现未来路由环路，而导致IP数据报在网络中无休止地转发，IP协议在IP报头设置了表示[]{.gap} 的TTL位 {.quiz}</p><ul><li>过期值 {.options}</li><li>数据报生存期 {.correct}</li><li>总时间 {.options}</li><li>计时位 {.options}<br>{.options}</li></ul></li><li><p>02（续第6题）它是一个计数器，每经过 []{.gap} ，其值加1。 {.quiz}</p><ul><li>一台交换机 {.options}</li><li>一台主机 {.options}</li><li>一台路由器 {.correct}</li><li>1秒钟 {.options}<br>{.options}</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线通信网</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E7%BD%91/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="无线移动通信"><a href="#无线移动通信" class="headerlink" title="无线移动通信"></a>无线移动通信</h1><h2 id="各种移动通信标准"><a href="#各种移动通信标准" class="headerlink" title="各种移动通信标准"></a>各种移动通信标准</h2><ul><li><strong>1G:</strong><ul><li>第一代模拟蜂窝；频分双工FDD</li></ul></li><li><strong>2G:</strong><ul><li>第二代数字蜂窝<ol><li>GSM全球移动通信，采用TDMA</li><li>CDMA码分多址通信</li></ol></li></ul></li><li><strong>2.5G：</strong><ul><li>第2.5代通用分组无线业务GPRS</li></ul></li><li><strong>2.75G：</strong><ul><li>第2.75代增强型GPRS，称作EDGE </li></ul></li><li><strong>3G:</strong><ul><li>第三代，速率达到 <strong>2Mbps</strong></li></ul></li><li><strong>4G：</strong><ul><li>第四代，速率达到 <strong>100Mbps</strong></li></ul></li><li><strong>4G+，4.5G，5G</strong></li></ul><h2 id="3G和4G标准汇总"><a href="#3G和4G标准汇总" class="headerlink" title="3G和4G标准汇总"></a>3G和4G标准汇总</h2><ul><li><strong>3G（6个）</strong><ul><li>W-CDMA,频分双工</li><li>CDMA-2000,频分双工</li><li>TD-SCDMA,时分双工， ==中国技术标准==</li><li>EDGE</li><li>DECT</li><li>WiMAX IEEE 802.16d固定；无线城域网 IEEE802.16e移动</li></ul></li><li><strong>4G（3个）</strong><ul><li>UMB，超移动宽带（已停用）</li><li>LTE Advanced ，长期演进技术， ==中国技术标准==</li><li>WIMAX II 全球微博互联接入 IEEE 802.16m</li></ul></li></ul><h2 id="4G标准"><a href="#4G标准" class="headerlink" title="4G标准"></a>4G标准</h2><ul><li>==至少100Mbps，下行1Gbps，上行500Mbps==</li><li>使用 <strong>正交频分多址</strong> ==接入OFDM和MIMO技术==，包含TDD和FDD两种制式</li></ul><h1 id="无线局域网WLAN"><a href="#无线局域网WLAN" class="headerlink" title="无线局域网WLAN"></a>无线局域网WLAN</h1><ul><li><strong>两大阵营：</strong><ul><li>IEEE802.11,面向数据无连接</li><li>欧洲邮电委HIPERLAN,面向语音有连接</li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">发布时间</th><th style="text-align:center">工作频段</th><th style="text-align:center">调制技术</th><th style="text-align:center">数据速率</th></tr></thead><tbody><tr><td style="text-align:center">802.11</td><td style="text-align:center">1997年</td><td style="text-align:center">2.4GHz&nbsp; ISM频段</td><td style="text-align:center">DB/SK<br>DQPSK</td><td style="text-align:center">1Mbps<br>2Mbps</td></tr><tr><td style="text-align:center">802.11b</td><td style="text-align:center">1998年</td><td style="text-align:center">2.4GHz &nbsp;ISM频段</td><td style="text-align:center">CCK</td><td style="text-align:center">5.5Mbps,11Mbps</td></tr><tr><td style="text-align:center">802.11a</td><td style="text-align:center">1999年</td><td style="text-align:center">5GHz&nbsp;U-NII频段</td><td style="text-align:center">OFDM</td><td style="text-align:center">54Mbps</td></tr><tr><td style="text-align:center">802.11g</td><td style="text-align:center">2003年</td><td style="text-align:center">2.4GHz &nbsp;ISM频段</td><td style="text-align:center">OFDM</td><td style="text-align:center">54Mbps</td></tr><tr><td style="text-align:center">802.11n</td><td style="text-align:center">2009年</td><td style="text-align:center">2.4GHz/5GHz &nbsp;频段</td><td style="text-align:center">OFDM  &nbsp;MIMO</td><td style="text-align:center">300Mbps<br>600Mbps</td></tr><tr><td style="text-align:center">802.11ac</td><td style="text-align:center">2012年</td><td style="text-align:center">5GHz&nbsp;U-NII频段</td><td style="text-align:center">OFDM  &nbsp;MIMO</td><td style="text-align:center">500Mbps<br>1Gbps</td></tr></tbody></table></div><ul><li><p><strong>两种结构：</strong></p><ul><li>基础设施网络</li><li>特殊网络Ad &nbsp;Hoc</li></ul><p><img data-src="https://s3.ax1x.com/2021/02/22/yHv1g0.png" alt="wlanjg"></p></li><li><p><strong>两种AP：</strong></p><ul><li>==胖AP（FAT）== <ul><li>一般指无线路由，胖AP多用于家庭和小型网络，功能比较全，一般一台设备就能实现接入、认证、路由、VPN、地址翻译甚至防火墙功能</li></ul></li><li>==瘦AP（FIT）==<ul><li>一般指无线网关或网桥，瘦AP多用于要求较高的场合，要实现认证一般需要认证服务器或支持认证功能的交换配合</li></ul></li></ul></li><li><p><strong>三种技术：</strong></p><ul><li>==红外线==<ul><li>分为定向光束红外线、全向广播红外线、漫反射红外线</li></ul></li><li>==扩展频谱==<ul><li>分为频率跳动FHSS、直接序列DSSS</li></ul></li><li>==窄带微波==<ul><li>分为申请许可证RF、免许可证RE</li></ul></li></ul></li></ul><h2 id="CSMA-CA-载波监听多路访问冲突避免"><a href="#CSMA-CA-载波监听多路访问冲突避免" class="headerlink" title="CSMA/CA:载波监听多路访问冲突避免"></a>CSMA/CA:载波监听多路访问冲突避免</h2><ul><li>与CSMA/CD很像<ul><li>但是D——检测，A——避免，两者并不同</li></ul></li><li><strong>用于结局隐蔽终端的问题</strong></li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ol><li>传数据先检测，如果探测到网络没有数据，则等待一个IFS时间，再随机选择一个时间片继续探测，如果无线网路中还没有活动的话，九江数据发送过去</li><li>发出数据之前，先发送一段小的请求报文给目标端，收到目标端回应后，再传送大量的数据，确保不会碰撞，开销最少</li></ol><h2 id="2-2-nbsp-三种帧间隔IFS"><a href="#2-2-nbsp-三种帧间隔IFS" class="headerlink" title="2.2&nbsp;三种帧间隔IFS"></a>2.2&nbsp;三种帧间隔IFS</h2><ol><li><strong>DIFS</strong> （分布式协调IFS），最长，优先级最低</li><li><strong>PIFS</strong> （点协调IFS），中等长度，优先级居中</li><li><strong>SIFS</strong> （短IFS），最短，运行高立即响应</li></ol><h2 id="无线加密协议WEP"><a href="#无线加密协议WEP" class="headerlink" title="无线加密协议WEP"></a>无线加密协议WEP</h2><ul><li>用于认证和加密，为明文的</li></ul><h2 id="无线保护接入WPA-WPA2"><a href="#无线保护接入WPA-WPA2" class="headerlink" title="无线保护接入WPA/WPA2"></a>无线保护接入WPA/WPA2</h2><ul><li>802.1x认证、RC4加密和TKIP数据完整性</li></ul><h2 id="Ad-nbsp-Hoc网络"><a href="#Ad-nbsp-Hoc网络" class="headerlink" title="Ad&nbsp;Hoc网络"></a>Ad&nbsp;Hoc网络</h2><ul><li>节点之间对等，每个节点既是主机，又是路由器，形成自组织网MANET</li></ul><h3 id="MANET的路由协议"><a href="#MANET的路由协议" class="headerlink" title="MANET的路由协议"></a>MANET的路由协议</h3><ul><li><strong>MANET路由协议</strong><ul><li>扁平的路由协议<ul><li>先验式：周期交换，开销大，周期检查身体花销大</li><li>反应式：按需分配，开销少，有病再查身体花销小</li></ul></li><li>分层的路由协议</li><li>地理信息的路由协议（GPS定位）</li></ul></li></ul><h3 id="DSDV路由协议"><a href="#DSDV路由协议" class="headerlink" title="DSDV路由协议"></a>DSDV路由协议</h3><ul><li><strong>目标排序的距离矢量协议</strong>，扁平式，先验式，利用 <strong>序列号</strong> 解决环路</li></ul><h3 id="AODV路由协议"><a href="#AODV路由协议" class="headerlink" title="AODV路由协议"></a>AODV路由协议</h3><ul><li><strong>按需分配的距离矢量协议</strong>，扁平式，反应式，开销少，适合快速变化的网络</li></ul><h2 id="无线网的安全"><a href="#无线网的安全" class="headerlink" title="无线网的安全"></a>无线网的安全</h2><ul><li><strong>隐藏SSID</strong></li><li><strong>MAC过滤</strong></li><li><strong>WEP/WPA/WPA2</strong></li><li><strong>802.11i</strong></li></ul><h1 id="无线个人网"><a href="#无线个人网" class="headerlink" title="无线个人网"></a>无线个人网</h1><h2 id="无线个人网WPAN"><a href="#无线个人网WPAN" class="headerlink" title="无线个人网WPAN"></a>无线个人网WPAN</h2><ul><li>小范围，10米左右，手持设备</li><li>IEEE802.15.1/2/3/4标准</li></ul><h2 id="蓝牙技术"><a href="#蓝牙技术" class="headerlink" title="蓝牙技术"></a>蓝牙技术</h2><ul><li>IEEE&nbsp;802.15.1标准</li><li>==1个主设备，7个从设备==</li><li>四个重要协议：<ul><li>RF无线电频率协议</li><li>链路控制协议LCP</li><li>链路管理协议LMP</li><li>链路自适应协议L2CAP</li></ul></li></ul><h2 id="ZigBee（蜜蜂网）技术"><a href="#ZigBee（蜜蜂网）技术" class="headerlink" title="ZigBee（蜜蜂网）技术"></a>ZigBee（蜜蜂网）技术</h2><ul><li>IEEE&nbsp;802.15.4标准</li><li>全功能设备FFD，简单功能设备RFD，RFD之间不能通信。 <strong>一般用于物联网</strong></li></ul><h1 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h1><ol><li><p>中国自主研发的4G通信标准是 []{.gap} 。 {.quiz}</p><ul><li>TD-SCDMA {.options}</li><li>UMB {.options}</li><li>LTE  {.correct}</li><li>WiMAX {.options}<br>{.options}</li></ul></li><li><p>IEEE802.11定义了多种WLAN的通信标准，其中  []{.gap} 与其他标准采用频段不同，因而不能兼容。{.quiz}</p><ul><li>802.1a {.correct}</li><li>802.1b {.options}</li><li>802.1g {.options}</li><li>802.1n {.options}<br>{.options}</li></ul></li><li><p>IEEE802.11采用CSMA/CA协议，采用这个协议的原因是 []{.gap} 。 {.quiz}</p><ul><li>这个协议比CSMA/CD更安全 {.options}</li><li>这种协议可以引进更多业务 {.options}</li><li>这种协议可以解决隐蔽终端问题 {.correct}</li><li>这个协议比其他协议更有效率 {.options}<br>{.options}</li></ul></li><li><p>以下通信技术中，未在IEEE802.11无线局域网中使用的是 []{.gap} 。 {.quiz}</p><ul><li>FHSS {.options}</li><li>DSSS {.options}</li><li>CDMA {.correct}</li><li>IR {.options}<br>{.options}<blockquote><ul><li>CDMA是2G无线移动数据，不是局域网</li><li>IR可通过红外线建立无线局域网</li></ul></blockquote></li></ul></li><li><p>在Wi-Fi安全协议中，WPA与WEP相比，采用了 []{.gap} 。 {.quiz}</p><ul><li>较短的初始化向量 {.options}</li><li>更强的加密算法 {.options}</li><li>共享密钥认证方案 {.options}</li><li>临时密钥以减少安全风险 {.correct}<br>{.options}</li></ul></li><li><p>IEEE802.16工作组提出的无线接入系统中的接口标准是 []{.gap} 。 {.quiz}</p><ul><li>GPRS {.options}</li><li>WiMAX {.correct}</li><li>LTE {.options}</li><li>UMB {.options}<br>{.options}</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局域网与城域网02</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8E%E5%9F%8E%E5%9F%9F%E7%BD%9102/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8E%E5%9F%8E%E5%9F%9F%E7%BD%9102/</url>
      
        <content type="html"><![CDATA[<h1 id="局域网互联"><a href="#局域网互联" class="headerlink" title="局域网互联"></a>局域网互联</h1><h2 id="局域网互联设备"><a href="#局域网互联设备" class="headerlink" title="局域网互联设备"></a>局域网互联设备</h2><ul><li>两层网桥（生成树、源路由）、三层交换机、路由器。</li><li><p>网桥要求3层以上的协议相同，1、2层协议不同可互联</p><p><img data-src="https://s3.ax1x.com/2021/02/21/yTfAlq.jpg" alt="jywwq"></p></li></ul><h1 id="生成树网桥"><a href="#生成树网桥" class="headerlink" title="生成树网桥"></a>生成树网桥</h1><ul><li>又叫透明网桥，IEEE802.1d,生成树算法</li><li>基本思想是在网桥之间传递BPDU，比较参数，根据STP打开好端口，阻塞差的端口，沿着好的端口建立路径， <strong>边走边拐弯</strong>，应用于以太网</li></ul><blockquote><p>生成树协议与算法参考文档：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzYyNzAyMi9hcnRpY2xlL2RldGFpbHMvMTA1NzMwNjE2">https://blog.csdn.net/weixin_43627022/article/details/105730616</span></p></blockquote><h3 id="生成树网桥步骤"><a href="#生成树网桥步骤" class="headerlink" title="生成树网桥步骤"></a>生成树网桥步骤</h3><ol><li>确定根桥</li><li>确定根端口</li><li>确定指定桥</li><li>确定指定端口</li><li>阻塞剩余端口</li><li>形成无环网络</li></ol><h3 id="生成树网桥计算数据"><a href="#生成树网桥计算数据" class="headerlink" title="生成树网桥计算数据"></a>生成树网桥计算数据</h3><ol><li><strong>确定根桥ID</strong><ul><li>优先级+MAC地址，都选最小</li><li>优先级0-65535，默认32768（±4096）</li></ul></li><li><strong>确定根端口</strong><ul><li>优先级+编号，都选最小的</li><li>优先级0-255，默认128</li></ul></li><li><strong>三小原则</strong><ul><li>优先级</li><li>MAC地址</li><li>通路费用 </li></ul></li></ol><h3 id="生成树端口的四种状态"><a href="#生成树端口的四种状态" class="headerlink" title="生成树端口的四种状态"></a>生成树端口的四种状态</h3><ul><li><strong>Blocking（阻塞）</strong><ul><li>接收BPDU（网桥协议数据单元），不学习MAC地址，不转发数据帧。20s</li></ul></li><li><strong>Listening（侦听）</strong><ul><li>接收BPDU，不学习MAC地址，不转发数据帧，但交换机向其他交换机通告该端口，参与选举根端口或指定端口</li></ul></li><li><strong>Learning（学习）</strong><ul><li>接收BPDU，学习MAC地址，不转发数据帧</li></ul></li><li><strong>Forwarding（转发）</strong><ul><li>正常转发数据帧</li></ul></li><li><strong>总结：</strong><blockquote><p>阻塞————&gt;20秒————&gt;侦听————&gt;15秒————&gt;学习————&gt;15秒————&gt;转发</p></blockquote></li></ul><h3 id="生成树种类和标准"><a href="#生成树种类和标准" class="headerlink" title="生成树种类和标准"></a>生成树种类和标准</h3><div class="table-container"><table><thead><tr><th style="text-align:center">种类</th><th style="text-align:center">英文简称</th><th style="text-align:center">标准</th></tr></thead><tbody><tr><td style="text-align:center">多生成树</td><td style="text-align:center">MSTP</td><td style="text-align:center">IEEE802.1s</td></tr><tr><td style="text-align:center">快速生成树</td><td style="text-align:center">RSTP</td><td style="text-align:center">IEEE802.1w</td></tr><tr><td style="text-align:center">生成树</td><td style="text-align:center">STP</td><td style="text-align:center">IEEE802.1d</td></tr><tr><td style="text-align:center">端口认证</td><td style="text-align:center">基于用户</td><td style="text-align:center">IEEE802.1x</td></tr></tbody></table></div><ul><li>巧记： ==多块生（人）口，是s我w弟d兄x==</li></ul><h1 id="源路由网桥"><a href="#源路由网桥" class="headerlink" title="源路由网桥"></a>源路由网桥</h1><ul><li>IEEE802.5，基本思想是发送探测帧到目的节点，返回路径以后沿着路径再传送，发送帧在这条路径上就传送，不在则发送广播，查询路径，选择最优路径再发送。 <strong>选好路再走</strong></li></ul><h1 id="城域网简介"><a href="#城域网简介" class="headerlink" title="城域网简介"></a>城域网简介</h1><h2 id="什么是城域网？"><a href="#什么是城域网？" class="headerlink" title="什么是城域网？"></a>什么是城域网？</h2><ul><li>城域网比局域网传输距离远，能覆盖整个城市。能够提供分组传输的数据、语音和视频等多媒体业务。更大的传输容量，更高的传输效率</li><li><strong>城域以太网</strong><ul><li>以太网专用线</li><li>以太网虚拟专线</li><li>以太局域网服务</li></ul></li><li><strong>无线城域网标准</strong><ul><li>WIMAX(802.16d固定、802.16e移动)</li><li>WIMAXII(802.16m 4G)</li></ul></li></ul><h2 id="Q-in-Q"><a href="#Q-in-Q" class="headerlink" title="Q-in-Q"></a>Q-in-Q</h2><ul><li><strong>运营商网桥协议（PBP）IEEE802.1ad</strong></li></ul><h2 id="MAC-in-MAC"><a href="#MAC-in-MAC" class="headerlink" title="MAC-in-MAC"></a>MAC-in-MAC</h2><ul><li><strong>运营商主干网桥（PBB）IEEE802.1ah</strong></li></ul><h1 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h1><ol><li><p>生成树协议STP使用[]{.gap}两个参数来选举根网桥。 {.quiz}</p><ul><li>网桥优先级和IP地址 {.options}</li><li>链路速率和IP地址 {.options}</li><li>链路速率和MAC地址 {.options}</li><li>网桥优先级和MAC地址  {.correct}<br>{.options}<blockquote><ul><li>网桥优先级就是桥ID</li></ul></blockquote></li></ul></li><li><p>动态分配VLAN的方法不包括  []{.gap} 。 {.quiz}</p><ul><li>网络层协议 {.options}</li><li>网络层地址 {.options}</li><li>交换机端口 {.correct}</li><li>MAC地址 {.options}<br>{.options}</li></ul></li><li><p>在下面的标准中，定义快速生成树协议的是[]{.gap} {.quiz}</p><ul><li>802.1d {.options}</li><li>802.1w {.correct}</li><li>802.1s {.options}</li><li>802.1x {.options}<br>{.options}</li></ul></li><li><p>在下面的标准中，支持端口认证的协议是[]{.gap} {.quiz}</p><ul><li>802.1d {.options}</li><li>802.1w {.options}</li><li>802.1s {.options}</li><li>802.1x {.correct}<br>{.options}</li></ul></li><li><p>在生成树协议（STP）IEEE802.1d,根据 []{.gap} 来选中根交换机。 {.quiz}</p><ul><li>最小的MAC地址 {.options}</li><li>最大的MAC地址 {.options}</li><li>最小的交换机ID {.correct}</li><li>最大的交换机ID {.options}<br>{.options}</li></ul></li><li><p>在当千兆以太网使用UTP作为传输介质时，限制单根的长度不超过100m，其原因为 []{.gap} {.quiz}</p><ul><li>信号衰减严重 {.options}</li><li>编码方式限制 {.options}</li><li>与百兆以太网兼容 {.options}</li><li>采用CSMA/CD {.correct}<br>{.options}<blockquote><ul><li>超过100m检测不到信号，而不是信号衰减</li></ul></blockquote></li></ul></li><li><p>IEEE802.1q协议的作用是 []{.gap} {.quiz}</p><ul><li>生成树协议 {.options}</li><li>以太网流量控制 {.options}</li><li>生成VLAN标记 {.correct}</li><li>基于端口的认证 {.options}<br>{.options}</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局域网与城域网01</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8E%E5%9F%8E%E5%9F%9F%E7%BD%9101/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8E%E5%9F%8E%E5%9F%9F%E7%BD%9101/</url>
      
        <content type="html"><![CDATA[<h1 id="局域网体系与标准"><a href="#局域网体系与标准" class="headerlink" title="局域网体系与标准"></a>局域网体系与标准</h1><h2 id="什么是局域网？"><a href="#什么是局域网？" class="headerlink" title="什么是局域网？"></a>什么是局域网？</h2><ul><li>单一机构所拥有的专用计算机网络，中等规模地理范围，实现 ==多个设备互联==、==信息交换== 和 ==资源共享==</li><li><p>主要针对数据链路层和物理层而制定 </p><p><img data-src="https://s3.ax1x.com/2021/02/21/yTWOSI.png" alt="jywtxjg"></p></li><li><p>在==数据链路层分为LLC（逻辑链路控制子层）== 和 ==MAC（介质访问控制子层）==</p></li><li>LLC为上层通过服务，MAC依托在物理层之上</li></ul><h2 id="LAN-MAN-的IEEE802标准"><a href="#LAN-MAN-的IEEE802标准" class="headerlink" title="LAN/MAN 的IEEE802标准"></a>LAN/MAN 的IEEE802标准</h2><ul><li>802.3 &nbsp;&nbsp;CSMA/CD&nbsp;&nbsp;<ul><li><strong>以太网规范，定义CSMA/CD</strong></li><li>还分为IEEE&nbsp;802.3ab和IEEE&nbsp;802.3u</li></ul></li><li>802.6 &nbsp;&nbsp;城域网&nbsp;&nbsp;<ul><li><strong>定义城域网的每天访问控制子层和物理层规范</strong></li></ul></li><li>802.11 &nbsp;&nbsp;无线局域网&nbsp;&nbsp;<ul><li><strong>定义自由空间媒体的媒体访问控制子层和物理层规范</strong></li></ul></li><li>802.16  &nbsp;&nbsp;宽带无线接入标准BWA&nbsp;&nbsp;</li></ul><h1 id="数据链路LLC和MAC"><a href="#数据链路LLC和MAC" class="headerlink" title="数据链路LLC和MAC"></a>数据链路LLC和MAC</h1><h2 id="逻辑链路控制LLC"><a href="#逻辑链路控制LLC" class="headerlink" title="逻辑链路控制LLC"></a>逻辑链路控制LLC</h2><ul><li>目的是 <strong>屏蔽不同介质访问</strong> 控制方法，以向高层（网络层）提供统一的服务和接口，==LLC地址是SAP==</li><li>这个标准和HDLC是 <strong>兼容的</strong>，无帧校验字段，放到了MAC层，同时提供目标地址和源地址字段</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">8位</th><th style="text-align:center">8位</th><th style="text-align:center">8位或16位</th><th style="text-align:center">M*8位</th></tr></thead><tbody><tr><td style="text-align:center">DSAP</td><td style="text-align:center">SSAP</td><td style="text-align:center">控制</td><td style="text-align:center">信息</td></tr></tbody></table></div><h2 id="介质访问控制MAC"><a href="#介质访问控制MAC" class="headerlink" title="介质访问控制MAC"></a>介质访问控制MAC</h2><ul><li>长度字段表示数据实际长度，==最大1500==。同时还可以表示上层协议类型，1501以上的值</li><li>6+6+2+0-1500+0-46+4</li><li>最小64，最大1518</li><li><strong>MAC地址</strong>：采用16进制数表示，共6B（48位），有IEEE和厂家烧制到网卡</li></ul><h2 id="CSMA-CD协议"><a href="#CSMA-CD协议" class="headerlink" title="CSMA/CD协议"></a>CSMA/CD协议</h2><ul><li>载波监听多路访问/冲突检测。是分布式介质访问控制方法<ul><li>非坚持型：有礼貌的，等一会下楼</li><li>1坚持型：霸道点的，一直要下楼</li><li>P坚持型：和事佬，有概率等下楼</li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">监听算法</th><th style="text-align:center">信道空闲时</th><th style="text-align:center">信道忙时</th><th style="text-align:center">特点</th></tr></thead><tbody><tr><td style="text-align:center">非坚持型监听算法</td><td style="text-align:center">立即发送</td><td style="text-align:center">等待N，再监听</td><td style="text-align:center">减少冲突，信道利用率降低</td></tr><tr><td style="text-align:center">1-坚持型监听算法</td><td style="text-align:center">立即发送</td><td style="text-align:center">继续监听</td><td style="text-align:center">提高信道利用率，增大了冲突</td></tr><tr><td style="text-align:center">P-坚持型监听算法</td><td style="text-align:center">以概率P发送</td><td style="text-align:center">继续监听</td><td style="text-align:center">有效平衡，但是复杂</td></tr></tbody></table></div><h2 id="最小帧长计算"><a href="#最小帧长计算" class="headerlink" title="最小帧长计算"></a>最小帧长计算</h2><ul><li>为检测到冲突，<br><br>$L=2R*d/v$ <br><ul><li>其中，R为网络数据速率，d为最大段长，v为信号传播速度</li></ul></li><li><strong>二进制后退指数算法：</strong><ol><li>考虑网络负载编号</li><li>后退次数与负载大小有关</li><li>重发词素最大为16，然后报给上层协议 </li></ol></li></ul><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><ul><li>早期的802.3局域网，10Mbps，来源于光在空气中传播的介质“以太（ether）”，由此得名“以太网（Ethernet）”</li><li>交换式以太网核心部件是交换机，有一个高速底板，插上一些插槽，插槽上有一些链接器，用于连接10M网卡的主机。如：e0/0,f0/1(插槽/接口),g0/0/0(插槽/模块/接口)<ul><li>==e:以太网10Mbps，f：快速以太网100Mbps，g：吉比特以太网1000Mbps==</li></ul></li></ul><h2 id="快速以太网"><a href="#快速以太网" class="headerlink" title="快速以太网"></a>快速以太网</h2><ul><li>802.3u标准，速率 ==可达100M==，采用100Base-T/F规范</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">标准</th><th style="text-align:center">传输介质</th><th style="text-align:center">线对数</th><th style="text-align:center">传输距离</th></tr></thead><tbody><tr><td style="text-align:center">100Base-T2</td><td style="text-align:center">3类UTP</td><td style="text-align:center">2对</td><td style="text-align:center">100m</td></tr><tr><td style="text-align:center">100Base-T4</td><td style="text-align:center">3类UTP</td><td style="text-align:center">4对</td><td style="text-align:center">100m</td></tr><tr><td style="text-align:center">100Base-TX</td><td style="text-align:center">5类UTP</td><td style="text-align:center">2对</td><td style="text-align:center">100m</td></tr><tr><td style="text-align:center">100Base-TXSTP</td><td style="text-align:center">2对</td><td style="text-align:center">100m</td></tr><tr><td style="text-align:center">100Base-FX</td><td style="text-align:center">多模光纤</td><td style="text-align:center">1对</td><td style="text-align:center">2Km（全双工）</td></tr><tr><td style="text-align:center">100Base-FX</td><td style="text-align:center">单模光纤</td><td style="text-align:center">1对</td><td style="text-align:center">40Km（全双工）</td></tr></tbody></table></div><h2 id="千兆以太网（吉比特以太网）"><a href="#千兆以太网（吉比特以太网）" class="headerlink" title="千兆以太网（吉比特以太网）"></a>千兆以太网（吉比特以太网）</h2><ul><li>802.3z标准，速率可达 ==1000M==，兼容10M/100M以太网</li></ul><table style="width: 100%;">        <tr><th>标准</th><th>名称</th><th>传输介质</th><th>传输距离</th></tr>     <tr><td rowspan="6">IEEE802.3z</td><td rowspan="3">1000Base-LX</td><td>62.5μm多模光纤</td><td>550m</td></tr>     <td>50μm多模光纤</td><td>550m</td></tr>  <td>10μm单模光纤</td><td>5Km</td></tr>  <tr><td rowspan="2">1000Base-SX</td ><td>62.5μm多模光纤</td><td>275m</td></tr>  <tr><td>50μm多模光纤</td><td>550m</td></tr>  <tr><td rowspan="1">1000Base-CX</td><td>2对STP</td><td>25m</td></tr>  <tr><td>IEEE802.3ab</td><td>1000Base-T</td><td>4对5类UTP</td><td>100m</td></tr></table>  <h2 id="万兆以太网"><a href="#万兆以太网" class="headerlink" title="万兆以太网"></a>万兆以太网</h2><ul><li>802.3ae标准，速率可达 ==万兆（10Gbps）==， <strong>只支持光纤</strong>， <strong>只支持全双工</strong>，不再采用CSMA/CD，可用于城域网</li></ul><table style="width: 100%;" >        <tr><th>名称</th><th>传输介质</th><th>传输距离</th><th>特点</th></tr>     <tr><td rowspan="2">10GBase-S（Short）</td><td>50μm的多模光纤</td><td>300m</td><td rowspan="2">850nm串行</td></tr>   <tr><td>62.5μm多模光纤</td><td>65m</td></tr>    <tr><td>10GBase-L（Long）</td ><td>单模光纤</td><td>10km</td><td>1310nm串行</td></tr>  <tr><td>10GBase-E（Extended）</td ><td>单模光纤</td><td>40km</td><td>1550nm串行</td></tr>  <tr><td rowspan="3">10GBase-LX4</td><td>单模光纤</td><td>10km</td><td rowspan="3">1310nm<br>4x2.5Gbps<br>波分多路复用（WDM）</td></tr>  <tr><td>50μm的多模光纤</td><td>300m</td></tr>  <tr><td>62.5μm的多模光纤</td><td>300m</td></tr></table>  <h2 id="虚拟局域网VLAN"><a href="#虚拟局域网VLAN" class="headerlink" title="虚拟局域网VLAN"></a>虚拟局域网VLAN</h2><ul><li>根据管理功能、组织机构或应用类型，对物理网络进行分段而形成的逻辑网络，与用户的物理位置无关</li></ul><h3 id="VLAN划分方式"><a href="#VLAN划分方式" class="headerlink" title="VLAN划分方式"></a>VLAN划分方式</h3><ol><li>静态分配VLAN：基于端口</li><li>动态分配VLAN：基于MAC地址、网络层IP地址、规则策略等</li></ol><h3 id="划分VLAN的好处"><a href="#划分VLAN的好处" class="headerlink" title="划分VLAN的好处"></a>划分VLAN的好处</h3><ol><li>控制网络流量，抑制广播风暴</li><li>提高网络安全性，不同VLAN之间可以做控制</li><li>网络管理灵活，用户可以随地接入网络</li></ol><ul><li>==不同VLAN之间通信，需要路由器或三层交换机==</li></ul><h3 id="VLAN802-1q标准（dot1q）"><a href="#VLAN802-1q标准（dot1q）" class="headerlink" title="VLAN802.1q标准（dot1q）"></a>VLAN802.1q标准（dot1q）</h3><ul><li><p>在原来的以太帧增加了 <strong>4B</strong>的控制信息，其中包含 ==12位VLAN标识符VID== ，可用 <strong>4096个VLAN</strong></p><p><img data-src="https://s3.ax1x.com/2021/02/21/yTWzm8.png" alt="802.1q"></p></li></ul><h3 id="两种端口"><a href="#两种端口" class="headerlink" title="两种端口"></a>两种端口</h3><ul><li><strong>接入端口Access</strong><ul><li>可通过单个VLAN</li></ul></li><li><p><strong>中继端口Trunk</strong></p><ul><li>可通过多个VLAN</li></ul><p><img data-src="https://s3.ax1x.com/2021/02/21/yTfifs.png" alt="vlandk"></p></li></ul><h2 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h2><hr><ol><li><p>IEEE802.3规定的最小帧长为64B，这个帧长是指 []{.gap} 。 {.quiz}</p><ul><li>从前导字段到校验和的字段 {.options}</li><li>从目标地址到校验和的长度 {.correct}</li><li>从帧起始符到校验和的长度 {.options}</li><li>数据字段的长度 {.options}<br>{.options}</li></ul></li><li><p>在以太网的帧结构中“填充”字段的作用是[]{.gap} 。 {.quiz}</p><ul><li>承载任选的路由信息 {.options}</li><li>用于捎带应答 {.options}</li><li>发送紧急数据 {.options}</li><li>保持最小帧长 {.correct}<br>{.options}<blockquote><p>为了保证64B的最小帧长让以太网识别</p></blockquote></li></ul></li><li><p>下面的光纤以太网标准中，支持1000m以上创术距离的是[]{.gap} 。 {.quiz}</p><ul><li>1000Base-Fx {.options}</li><li>1000Base-Cx {.options}</li><li>1000Base-Sx {.options}</li><li>1000Base-Lx {.correct}<br>{.options}</li></ul></li><li><p>一个CSMA/CD协议的以太网，数据速率为1Gb/s，网段长1km，信号速率为200000km/s，则最小帧长为[]{.gap} bit。 {.quiz}</p><ul><li>1000 {.options}</li><li>2000 {.options}</li><li>10000 {.correct}</li><li>2000000 {.options}<br>{.options}<blockquote><ul><li>$R=1Gbps=10^9bps$ <br> $S=1km=1000m$<br>$v=2000000m/s=2\times10^8m/s$<br>$L=2R\times(S/v)=2\times10^9\times(1000/2\times10^8)=10000bit$</li></ul></blockquote></li></ul></li><li><p>以太网采用的CSMA/CD协议，当冲突发送时，要跳过二进制指数后退算法计算后退时延，关于这个算法，描述错误的是[]{.gap} 。 {.quiz}</p><ul><li>冲突次数越多，后退的时间越短  {.correct}</li><li>平均后退次数的多少与负载有关 {.options}</li><li>后退时延的平均值与负载大小有关 {.options}</li><li>重发次数达到一定极限后放弃发送 {.options}<br>{.options}</li></ul></li><li><p>在以太网中，载波监听是网络协议设计中很重要的一个方面。在下列载波监听算法中，信道利用率最高的是（B）监听算法，其存在的最大不足是（H）{multi.quiz}</p><ul><li>非坚持型 {.options}</li><li>1-坚持型 {.correct}</li><li>p-坚持型 {.options}</li><li>N-坚持型 {.options}</li><li>算法的效率不够高，会降低网络速率 {.options}</li><li>算法的硬件实现太复杂，会等待提高成本 {.options}</li><li>对冲突的检测会有影响，实现起来不太容易 {.options}</li><li>它会增大冲突出现的概率 {.correct}<br>{.options}</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广域通信网</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%B9%BF%E5%9F%9F%E9%80%9A%E4%BF%A1%E7%BD%91/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E5%B9%BF%E5%9F%9F%E9%80%9A%E4%BF%A1%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="广域网概念与分类"><a href="#广域网概念与分类" class="headerlink" title="广域网概念与分类"></a>广域网概念与分类</h1><h2 id="什么是广域网？"><a href="#什么是广域网？" class="headerlink" title="什么是广域网？"></a>什么是广域网？</h2><ul><li>广域网是指长距离块地区的各种局域网、计算机、终端互联在一起，组成一个资源共享的通信网络</li></ul><table style="width: 100%;">      <tr><th colspan="3">传统广域网</th></tr>     <tr><td>公共交换电话网PSTN</td><td>公共数据网X.25</td><td>帧中继网FR</td></tr>     <tr><td>综合业务数据网ISDN</td><td>异步传输模式ATM</td><td>虚拟专用网VPN</td></tr>   </table>  <table style="width: 100%;">      <tr><th colspan="3">现代广域网</th></tr>     <tr><td>数字数据网DDN</td><td>同步数字传输网SDH</td><td>多业务传送平台MSTP</td></tr>     <tr><td>光纤接入FTTX</td><td>无源光网络PON</td><td>无线网WiMAX、4G、5G</td></tr>   </table> <h1 id="公共交换电话网PSTN"><a href="#公共交换电话网PSTN" class="headerlink" title="公共交换电话网PSTN"></a>公共交换电话网PSTN</h1><ul><li>公共交换电话网PSTN，利用电话线上网，早期是电话+“猫”拨号上网</li><li><strong>四大特性：</strong><ul><li>机械特性</li><li>电气特性</li><li>功能特性</li><li>过程特性</li></ul></li></ul><h2 id="调制解调器Modem"><a href="#调制解调器Modem" class="headerlink" title="调制解调器Modem"></a>调制解调器Modem</h2><ul><li>俗称“猫”，作用是把电话线里面的模拟信号和数字信号互相转换，==V.90标准==可以达到==56Kb/s==（电话猫、电视猫、电力猫、光纤猫）</li></ul><h2 id="数据终端设备DTE"><a href="#数据终端设备DTE" class="headerlink" title="数据终端设备DTE"></a>数据终端设备DTE</h2><ul><li>具有一定数据处理能力和数据收发能力的设备，用于提供或接收数据，如路由器、PC、终端，==DTE和DCE两端要同步==<h2 id="数据通信设备DCE"><a href="#数据通信设备DCE" class="headerlink" title="数据通信设备DCE"></a>数据通信设备DCE</h2></li><li>在DTE和传输线路之间提供信号变换和编码功能，并负责建立、保持和释放链路的连接。如广域网交换机、MODEM</li></ul><h1 id="公共数据网X-25"><a href="#公共数据网X-25" class="headerlink" title="公共数据网X.25"></a>公共数据网X.25</h1><ul><li>X.25使用 <strong>分组交换</strong>，分为三层：物理层、链路层、分组层。对应于OSI的底三层。</li><li>采用虚拟电路、面向连接</li><li><p>才会后退N帧ARQ、滑动窗口默认2</p><p>  <img data-src="https://s3.ax1x.com/2021/02/20/yI2L7j.png" alt="ggjhw"></p></li></ul><h2 id="流量控制技术"><a href="#流量控制技术" class="headerlink" title="流量控制技术"></a>流量控制技术</h2><h3 id="停等协议"><a href="#停等协议" class="headerlink" title="停等协议"></a>停等协议</h3><ul><li><p>协调收发端流量。假设没有传输错误的流控技术： <strong>停等协议</strong>，发送一帧，等到应答，在发送；如果不应答，一直等，类似于银行柜台存钱</p><p> <img data-src="https://s3.ax1x.com/2021/02/20/yIRS3V.png" alt="tdxy"></p></li></ul><h3 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a>滑动窗口协议</h3><ul><li><p>协调收发端流量。假设没有传输错误的流控技术： <strong>滑动窗口协议</strong>，连续发送多个帧而无需应答，类似于银行ATM机</p><p>  <img data-src="https://s3.ax1x.com/2021/02/20/yIRFHJ.png" alt="hdckxy"></p></li></ul><h2 id="差错控制技术"><a href="#差错控制技术" class="headerlink" title="差错控制技术"></a>差错控制技术</h2><h2 id="检查和纠正错误"><a href="#检查和纠正错误" class="headerlink" title="- 检查和纠正错误"></a>- 检查和纠正错误</h2><ol><li>肯定应答：收到肯定应答信号ACK继续发送</li><li>否定应答重发：收到否定应答信号NAK重发出错帧</li><li>超时重发：超过规定时间重发该帧。这种技术称为自动重发ARQ<ul><li>ARQ分为三种：停等ARQ、选择重发ARQ、后退N帧ARQ</li></ul></li></ol><h3 id="停等ARQ"><a href="#停等ARQ" class="headerlink" title="停等ARQ"></a>停等ARQ</h3><ul><li>是停等流控和ARQ结合，类似于银行柜台存钱，手续齐全办理，叫号等时间长下一位，忘带身份证就不办理</li></ul><h3 id="选择重发ARQ"><a href="#选择重发ARQ" class="headerlink" title="选择重发ARQ"></a>选择重发ARQ</h3><ul><li>是滑动窗口和ARQ结合，类似于银行ATM一沓一沓存钱，出现假币，选择该假币重发，其他不用重发</li></ul><h3 id="后退N帧ARQ"><a href="#后退N帧ARQ" class="headerlink" title="后退N帧ARQ"></a>后退N帧ARQ</h3><ul><li>是滑动窗口和ARQ结合，类似银行ATM一沓一沓数钱，一张是假币，这一张包括后面的全部重发</li></ul><h2 id="各种流控和差错利用率计算公式"><a href="#各种流控和差错利用率计算公式" class="headerlink" title="各种流控和差错利用率计算公式"></a>各种流控和差错利用率计算公式</h2><ol><li>常数a值的计算：<br><br>$a=(d/v)/(L/R)=(RT)/L=(Rd/v)/L$</li></ol><ul><li>其中，R=数据速率，d=线路长度，v=传播速度，L=帧长，T=传播延迟</li></ul><ol><li><p>效率E值的计算：<br><br>停等协议：$E=1/(2a+1)$<br><br>滑动窗口：$E=W/(2a+1)$</p></li><li><p>窗口W值的计算：<br><br>选择ARQ：W$\leq<script type="math/tex">2^{k-1}$<br>后退ARQ：W$\leq</script>2^k-1$</p></li></ol><h2 id="高级数据链路控制协议HDLC"><a href="#高级数据链路控制协议HDLC" class="headerlink" title="高级数据链路控制协议HDLC"></a>高级数据链路控制协议HDLC</h2><ul><li>面向比特的，通擦使用CRC-16、CRC-32校验</li><li><p>帧边界01111110在两端，用户数据字段INFO大小不固定</p><p><img data-src="https://s3.ax1x.com/2021/02/20/yIRAE9.png" alt="hdlc"></p></li></ul><h1 id="帧中继FR"><a href="#帧中继FR" class="headerlink" title="帧中继FR"></a>帧中继FR</h1><ul><li>帧中继FR是X.25演变改进的</li></ul><ol><li>工作在OSI的最底两层</li><li>在第二层建立虚电路，承载数据业务</li><li>FR只做检错，不会重传，没有流控，只有拥塞控制，检错交给高层</li></ol><h2 id="帧中继的优点"><a href="#帧中继的优点" class="headerlink" title="帧中继的优点"></a>帧中继的优点</h2><ol><li>基于分组（帧）交换的透明传输，可提供 <strong>面向连接</strong>的服务</li><li>帧长可变，长度达1600-4096字节，可承载各种局域网的数据帧</li><li>数据速率可达2-45Mbps</li><li>既可以提供带宽，也可以应付突发的数据传输</li><li>没有流控和重传机制，开销小</li></ol><h1 id="综合业务数据网ISDN"><a href="#综合业务数据网ISDN" class="headerlink" title="综合业务数据网ISDN"></a>综合业务数据网ISDN</h1><ul><li>基于电路交换，把数据、声音和视频信号三合一传输</li></ul><h2 id="ISDN的两种速率"><a href="#ISDN的两种速率" class="headerlink" title="ISDN的两种速率"></a>ISDN的两种速率</h2><ul><li>基本（N-ISDN）速率BRI（2B+D）</li><li>基群（B-ISDN）速率PRI（30B+D）<ul><li>B信道为数据信道，D信道为控制信道</li></ul></li><li>$2B+D=2*64+16=144Kb/s$</li><li>$30B+D=30*64+64=1.984Mb/s$，近似于E1</li></ul><h1 id="异步传输模式ATM"><a href="#异步传输模式ATM" class="headerlink" title="异步传输模式ATM"></a>异步传输模式ATM</h1><ul><li>最早是B-ISBN的一部分，分为四层模型</li><li>各功能介绍</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">层次</th><th style="text-align:center">子层</th><th style="text-align:center">功能</th><th style="text-align:center">与OSI的对应</th></tr></thead><tbody><tr><td style="text-align:center">高层</td><td style="text-align:center"></td><td style="text-align:center">对用户数据的控制</td><td style="text-align:center">高层</td></tr><tr><td style="text-align:center">ATM适配层</td><td style="text-align:center">汇聚子层</td><td style="text-align:center">为高层提供统一接口</td><td style="text-align:center">第四层</td></tr><tr><td style="text-align:center">ATM适配层</td><td style="text-align:center">拆装子层</td><td style="text-align:center">分割与合并用户数据</td><td style="text-align:center">第四层</td></tr><tr><td style="text-align:center">ATM层</td><td style="text-align:center"></td><td style="text-align:center">虚通路和虚信道的管理、信元头的组装和拆分、信元的多路复用、流量控制</td><td style="text-align:center">第三层</td></tr><tr><td style="text-align:center">物理层</td><td style="text-align:center">传输汇聚子层</td><td style="text-align:center">信元校验和速率控制、数据帧的组装和拆分</td><td style="text-align:center">第二层</td></tr><tr><td style="text-align:center">物理层</td><td style="text-align:center">物理介质子层</td><td style="text-align:center">位定时、物理网络接入</td><td style="text-align:center">第一层</td></tr></tbody></table></div><ul><li>ATM采用53字节信元分组交换，使用统计时分TDM。采用 <strong>双绞线或光纤</strong>，典型数据速率 <strong>155M</strong>，==面向连接==，使用虚电路的虚通路VPI和虚信道VCI</li></ul><h1 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h1><ol><li><p>关于RS-232-C标准的描述正确的是[]{.gap} 。 {.quiz}</p><ul><li>可以实现长距离远程通信 {.options}</li><li>可以使用9针或25针D型连接器 {.correct}</li><li>必须采用24根线的电缆进行连接 {.options}</li><li>通常用于连接并行打印机 {.options}<br>{.options}</li></ul></li><li><p>ATM高层定义了4类业务，压缩视频信号的传送属于[]{.gap} 类业务。{.quiz}</p><ul><li>CBR {.options}</li><li>VBR {.correct}</li><li>UBR {.options}</li><li>ABR {.options}<br>{.options}</li></ul></li><li><p>下列选项中，不采用虚电路通信的网络是 []{.gap}网。{.quiz}</p><ul><li>X.25 {.options}</li><li>帧中继 {.options}</li><li>ATM {.options}</li><li>IP {.correct}<br>{.options}<blockquote><ul><li>IP 是数据报通信</li></ul></blockquote></li></ul></li><li><p>下面关于帧中继网络的描述错误的是[]{.gap} 。 {.quiz}</p><ul><li>用户的数据速率可以在一定的范围内变化 {.options}</li><li>既可以使用流式业务，又可以适应突发式业务 {.options}</li><li>帧中继网可以提供永久虚电路和交换虚电路 {.options}</li><li>帧中继虚电路建立在HDLC协议之上 {.correct}<br>{.options}<blockquote><ul><li>帧中继虚电路是建立在X.25协议之上</li></ul></blockquote></li></ul></li><li><p>对于选择重发ARQ协议，如果帧编号字段为K位，则窗口大小为[]{.gap} 。 {.quiz}</p><ul><li>W$\leq$$2^k-1$ {.options}</li><li>W$\leq$$2^{k-1}$ {.correct}</li><li>W=$2k-1$ {.options}</li><li>W$\leq$$2k-1$ {.options}<br>{.options}<blockquote><ul><li>A是后退，CD都错误，无中生有</li></ul></blockquote></li></ul></li><li><p>由30B+D组成的ISDN称为[]{.gap} ，通常可以将若干个B信道组成不同的H信道，而最大的H信道的带宽是1.92Mb/s。 {.quiz}</p><ul><li>N-ISDN BRI {.options}</li><li>N-ISDN PRI {.options}</li><li>B-ISDN PRI {.correct}</li><li>B-ISDN BRI {.options}<br>{.options}</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据通信基础02</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%8002/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%8002/</url>
      
        <content type="html"><![CDATA[<h1 id="数据通信方式"><a href="#数据通信方式" class="headerlink" title="数据通信方式"></a>数据通信方式</h1><h2 id="通信方向"><a href="#通信方向" class="headerlink" title="通信方向"></a>通信方向</h2><ul><li><strong>单工通信（电视）</strong><ul><li>数据只能从一个方向向另一个方向传输</li></ul></li><li><strong>半双工通信（对讲机）</strong><ul><li>数据可以双向传输，但不可同步进行传输</li></ul></li><li><strong>全双工（手机）</strong><ul><li>数据可双向传输，并且可以同步传输</li></ul></li></ul><h2 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h2><h3 id="按传输方式分"><a href="#按传输方式分" class="headerlink" title="按传输方式分"></a>按传输方式分</h3><ul><li><strong>串行传输</strong><ul><li>串行传输是数据在传输中只有1个数据位在设备之间进行的传输，对任何一个由若干位二进制表示的字符,串行传输都是用一个传输信道，按位有序的对字符进行传输。==串行传输的速度比并行传输的速度要慢得多，但费用低。并行传输适用距离短，而串行传输适用远距离传输。==</li></ul></li><li><strong>并行传输</strong><ul><li>并行传输是在传输中有多个数据位同时在设备之间进行的传输。所有数据位能同时沿着各自的信道并排的传输并行传输时，一次可以传一个字符，收发双方不存在同步的问题。==而且速度快、控制方式简单。但是并行传输需要多个物理通道。所以并行传输只适合于短距离、要求传输速度快的场合使用。==<h3 id="按同步方式分"><a href="#按同步方式分" class="headerlink" title="按同步方式分"></a>按同步方式分</h3></li></ul></li><li><strong>异步传输</strong><ul><li>异步传输将比特分成小组进行传送，小组可以是8位的1个字符或更长。发送方可以在任何时刻发送这些比特组，而接收方从不知道它们会在什么时候到达。==（适用于远距离，数据量小的场景）==</li></ul></li><li><p><strong>同步传输</strong></p><ul><li>同步传输的比特分组要大得多。它不是独立地发送每个字符，每个字符都有自己的开始位和停止位，而是把它们组合起来一起发送。我们将这些组合称为数据帧，或简称为帧。==（适用于近距离，数据量大的场景）==</li></ul></li><li><p><strong>两者区别</strong></p><ol><li><p>异步传输是面向字符的传输，而同步传输是面向比特的传输。</p></li><li><p>异步传输的单位是字符而同步传输的单位是桢。</p></li><li><p>异步传输通过字符起止的开始和停止码抓住再同步的机会，而同步传输则是以数据中抽取同步信息。</p></li><li><p>异步传输对时序的要求较低，同步传输往往通过特定的时钟线路协调时序。</p></li><li><p>异步传输相对于同步传输效率较低。</p></li></ol></li></ul><p>  <img data-src="https://s3.ax1x.com/2021/02/19/yhwYm8.jpg" alt="sjcs"></p><h1 id="数据交换方式"><a href="#数据交换方式" class="headerlink" title="数据交换方式"></a>数据交换方式</h1><h2 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h2><ul><li>通信双方通过建立一条物理链路，当双方需要通信时，全权占用该链路，直到通信结束，才释放链路，==电话就是使用电路交换的方式==</li><li><strong>优点：</strong><ul><li>实时性强、适合传输大量数据、有序传输、无冲突</li></ul></li><li><strong>缺点：</strong><ul><li>高独占性、需要建立一条物理链路，利用率低，无差错控制能力</li></ul></li></ul><h2 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h2><ul><li><strong>优点：</strong><ul><li>不需要专用通道，线路利用率高，存储转发节点可校验纠错</li></ul></li><li><strong>缺点：</strong><ul><li>有通信延迟</li></ul></li></ul><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h2><ul><li><strong>优点：</strong><ul><li>利用率更高，可选路径，数据率转换，支持优先级</li></ul></li><li><strong>缺点：</strong><ul><li>时延、开销大</li></ul></li></ul><h3 id="分组交换的三种方式"><a href="#分组交换的三种方式" class="headerlink" title="分组交换的三种方式"></a>分组交换的三种方式</h3><ul><li><strong>数据报</strong><ul><li>无连接、无序的，单向传输</li></ul></li><li><strong>虚电路</strong><ul><li>交互式、逻辑连接、可靠性高</li></ul></li><li><strong>信元交换</strong><ul><li>升级版虚电路，固定分组长度</li></ul></li></ul><h2 id="分组数据报"><a href="#分组数据报" class="headerlink" title="分组数据报"></a>分组数据报</h2><ul><li>是单线传输、无连接的</li></ul><h1 id="多路复用技术"><a href="#多路复用技术" class="headerlink" title="多路复用技术"></a>多路复用技术</h1><h2 id="频分复用FDM"><a href="#频分复用FDM" class="headerlink" title="频分复用FDM"></a>频分复用FDM</h2><ul><li><p>不同的频率，子信道隔离频带方串扰，如CATV、WIFI</p><p><img data-src="https://s3.ax1x.com/2021/02/19/yhwWtJ.png" alt="pffy"></p></li></ul><h2 id="时分复用TDM"><a href="#时分复用TDM" class="headerlink" title="时分复用TDM"></a>时分复用TDM</h2><ul><li><p>不同的时间，轮流占用</p><p><img data-src="https://s3.ax1x.com/2021/02/19/yhwLAe.png" alt="sffy"></p></li></ul><h2 id="波分复用WDM"><a href="#波分复用WDM" class="headerlink" title="波分复用WDM"></a>波分复用WDM</h2><ul><li><p>不同的波长</p><p> <img data-src="https://s3.ax1x.com/2021/02/19/yhwXhd.jpg" alt="bffy"></p></li></ul><h1 id="数字传输标准"><a href="#数字传输标准" class="headerlink" title="数字传输标准"></a>数字传输标准</h1><h2 id="T1标准（北美和日本使用）"><a href="#T1标准（北美和日本使用）" class="headerlink" title="T1标准（北美和日本使用）"></a>T1标准（北美和日本使用）</h2><ul><li>T1标准，即北美的24路PCM国际标准</li><li>速率： ==1.544Mbps==</li><li>次数：125us=8000次</li><li>==1.544Mbps=(24<em>(7+1)+1)</em>8000==<ul><li>其中，北美使用的T1系统共有24个话路，每个话路采样脉冲用7bit编码，然后再加上1位信令码元，因此一个话路占用8bit。帧同步码是在24路的编码之后加上1bit，这样每帧共有193bit，因此T1一次群的数据率为1.544Mbit/s。<h3 id="T2、T3、T4标准"><a href="#T2、T3、T4标准" class="headerlink" title="T2、T3、T4标准"></a>T2、T3、T4标准</h3></li></ul></li><li>T2=4T1</li><li>T3=7T1</li><li>T4=6T1</li><li>巧记T2、T3、T4： <strong>T476=踢屎去喽</strong></li></ul><h2 id="E1标准（中国和欧洲使用）"><a href="#E1标准（中国和欧洲使用）" class="headerlink" title="E1标准（中国和欧洲使用）"></a>E1标准（中国和欧洲使用）</h2><ul><li>E1标准，即欧洲30路PCM国家标准</li><li>速率：==2.048Mbps==</li><li>次数：125us=8000次</li><li>==2.048Mbps=(32<em>(7+1))</em>8000==<ul><li>其中，E1的一个时分复用帧（其长度T=125us）共划 分为32相等的时隙，时隙的编号为CH0~CH31。其中时隙CH0用作帧同步用，时隙CH16用来传送信令，剩下CH1~CH15和CH17~CH31 共30个时隙用作30个话路。每个时隙传送8bit，因此共用256bit。</li><li>每秒传送8个帧，因此PCM一次群E1的数据率就是 2.048Mbit/s。</li></ul></li><li>CH0和CH16为控制信令，30个话音数据</li></ul><h3 id="E2、E3、E4标准"><a href="#E2、E3、E4标准" class="headerlink" title="E2、E3、E4标准"></a>E2、E3、E4标准</h3><ul><li>E2=4E1</li><li>E3=4E2</li><li>E4=4E3</li><li>巧记： <strong>E444</strong></li></ul><h2 id="SONET标准（美国）和SDH标准（国际）—-用于光纤网络"><a href="#SONET标准（美国）和SDH标准（国际）—-用于光纤网络" class="headerlink" title="SONET标准（美国）和SDH标准（国际）—-用于光纤网络"></a>SONET标准（美国）和SDH标准（国际）—-用于光纤网络</h2><ul><li>SONET标准是同步光纤网</li><li>在SONET中，OC-1为 <strong>最小单位</strong> ， <strong>值为51.84Mb/s</strong> ，OC-N表示N倍的OC-1</li><li><strong>OC-3=OC-1*3=155.520Mb/s</strong><font color=red>(重点！！！)</font></li><li><strong>OC-1=57384Mb/s</strong><font color=red>(重点！！！)</font></li></ul><h1 id="数据检错纠错"><a href="#数据检错纠错" class="headerlink" title="数据检错纠错"></a>数据检错纠错</h1><h2 id="检错码"><a href="#检错码" class="headerlink" title="检错码"></a>检错码</h2><ul><li>==奇偶校验== 看1的个数是奇数还是偶数， <strong>只能检错不能纠错</strong> ，广泛应用与移动通信</li></ul><h2 id="海明码"><a href="#海明码" class="headerlink" title="海明码"></a>海明码</h2><ul><li>在数据位m后面增加冗余检验位k，组成信息m+k，则满足m+k $\lt$ $2^k$ -1可纠正一位错误， <strong>即可检错也可纠错</strong></li><li><strong>码距d</strong>：两个码字之间不同的最小的位数（比特数）</li><li>可以查出多少位错误： $\leq$ d-1</li><li>可以纠正多少位错误： $\lt$ d/2</li></ul><h2 id="CRC码"><a href="#CRC码" class="headerlink" title="CRC码"></a>CRC码</h2><ul><li>即冗余循环校验码，是一种循环码，通过循环移位，实现检错，硬件容易实现，广泛用于局域网， <strong>只能检错不能纠错</strong></li><li><p>计算CRC校验码：多项式除法，不进位加法，如生产多项式G(x)= $x^4$ +x+1，信息码字为10111，求CRC校验码。</p><blockquote><p>计算步骤： 把原式变形为： 1$x^4$+0$x^3$+0$x^2$+1$x^1$+1$x^0$<br>看每个指数的系数，把系数连起来作为除数10011<br>由于多项式中最高项系数为4，则在信息码字后面加4个0，即101110000为被除数<br>再进行模2计算，得到的余数即为CRC校验码1100</p></blockquote><p><img data-src="https://s3.ax1x.com/2021/02/19/yhwv9A.png" alt="crc"></p></li></ul><h2 id="DHCP的功能"><a href="#DHCP的功能" class="headerlink" title="DHCP的功能"></a>DHCP的功能</h2><ol><li>保证任何IP地址在==同一时刻只能由一台DHCP客户机所使用==。</li><li>DHCP应当可以给用户分配永久固定的IP地址。</li><li>DHCP应当可以同用其他方法获得IP地址的主机共存（如手工配置IP地址的主机）</li><li>DHCP服务器应当向现有的BOOTP客户端提供服务。</li></ol><h2 id="DHCP三种分配IP地址的机制"><a href="#DHCP三种分配IP地址的机制" class="headerlink" title="DHCP三种分配IP地址的机制"></a>DHCP三种分配IP地址的机制</h2><ol><li>==自动分配方式==(<code>AutomaticAllocation</code>),DHCP服务器为主机指定一个永久性的IP地址，一旦DHCP客户端第一次成功从DHCP服务器端租用到IP地址后，就可以永久性的使用该地址。</li><li>==动态分配方式==(<code>DynamicAllocation</code>),DHCP服务器给主机指定一个具有时间限制的IP地址，时间到期或主机明确表示放弃该地址时，该地址可以被其他主机使用。</li><li>==手工分配方式==(<code>ManualAllocation</code>),客户端的IP地址是由网络管理员指定的，DHCP服务器只是将指定的IP地址告诉客户端主机。<blockquote><p>三种地址分配方式中，只有动态分配可以重复使用客户端不再需要的地址。</p></blockquote></li></ol><h1 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h1><ol><li><p>采用海明码进行差错校验，信息码字为1001011，为纠正一位错，则需要 []{.gap} 位冗余位。 {.quiz}</p><ul><li>2 {.options}</li><li>3 {.options}</li><li>4 {.correct}</li><li>8 {.options}<br>{.options}<blockquote><ul><li>:x:</li><li>:x:</li><li>:heavy_check_mark: m=k=1&lt;2^k,m=7 ,k=4</li><li>:x: </li></ul></blockquote></li></ul></li><li><p>按照美国制定的光纤通行标准SONET，OC-48的线路速率是 []{.gap} Mb/s。 {.quiz}</p><ul><li>51.84 {.options}</li><li>622.05 {.options}</li><li>2488.32 {.correct}</li><li>9953.28 {.options}<br>{.options}<blockquote><ul><li>:x:</li><li>:x:</li><li>:heavy_check_mark: OC-3=155.520，OC-3的16倍约为2488</li><li>:x:</li></ul></blockquote></li></ul></li><li><p>E1载波把32个信道按 []{.gap} 方式复用在一条2.048Mb/s的高速信道上。 {.quiz}</p><ul><li>TDM {.correct}</li><li>CDMA {.options}</li><li>WDM {.options}</li><li>FDM {.options}<br>{.options}<blockquote><ul><li>:heavy_check_mark: 8b*8000=64kb/s</li><li>:x:</li><li>:x:</li><li>:x:</li></ul></blockquote></li></ul></li><li><p>E1载波的数据速率是 [B]{.gap} Mb/s，T1载波的数据速率是 [A]{.gap} Mb/s。 {.quiz}</p><ul><li>1.544 {.correct}</li><li>2.048 {.correct}</li><li>6.312 {.options}</li><li>8.448 {.options}<br>{.options}</li></ul></li><li><p>E1信道的数据速率是2.048Mb/s，其中每个话音信道的数据速率是 []{.gap} Kb/s。 {.quiz}</p><ul><li>56 {.options}</li><li>64 {.correct}</li><li>128 {.options}</li><li>2048 {.options}<br>{.options}<blockquote><ul><li>:x:</li><li>:heavy_check_mark: 8/125us=64kbps 或者8*8000</li><li>:x:</li><li>:x:</li></ul></blockquote></li></ul></li></ol><ol><li>E1线路是一种以时分多路复用技术为基础的传输技术，其有效数据率（扣除开销）约为 []{.gap} Mb/s。{.quiz}<ul><li>1.34 {.options}</li><li>1.544 {.options}</li><li>1.92 {.correct}</li><li>2.048 {.options}<br>{.options}<blockquote><ul><li>:x:</li><li>:x:</li><li>:heavy_check_mark: 2.048*（30/32）=1.92,其中E1线路的速率为2.048Mb/s</li><li>:x:</li></ul></blockquote></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据通信基础01</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%8001/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%8001/</url>
      
        <content type="html"><![CDATA[<h1 id="数据通信基本概念"><a href="#数据通信基本概念" class="headerlink" title="数据通信基本概念"></a>数据通信基本概念</h1><hr><h2 id="信源"><a href="#信源" class="headerlink" title="信源"></a>信源</h2><ul><li>信源，是产生各类信息的实体。信源给出的符号是不确定的，可用随机变量及其统计特性描述。</li></ul><h2 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h2><ul><li>通信的通道</li></ul><h2 id="信宿"><a href="#信宿" class="headerlink" title="信宿"></a>信宿</h2><ul><li>信息接收者指在信息传递过程中，发出信息一方称发信息者，接受信息的一方称信息接受者，又称受信息或信宿。</li></ul><h2 id="数字信号"><a href="#数字信号" class="headerlink" title="数字信号"></a>数字信号</h2><ul><li>数字信号是信息用于若干个明确定义的离散值表示的时间离散星火</li></ul><h2 id="模拟信号"><a href="#模拟信号" class="headerlink" title="模拟信号"></a>模拟信号</h2><ul><li>模拟信号是在一段连续的时间间隔内，其代表信息的特征量可以在任意瞬间程序为任意数值的信号</li></ul><h2 id="模拟通信"><a href="#模拟通信" class="headerlink" title="模拟通信"></a>模拟通信</h2><ul><li>利用正弦波的幅度、频率或相位的变化，或利用脉冲的幅度、宽度或位置变化来模拟原始信号，以达到通信的目的<h2 id="数字通信"><a href="#数字通信" class="headerlink" title="数字通信"></a>数字通信</h2></li><li><p>用数值信号作为载体来传输消息，或用数字信号对载波就行数字调制后再传输的通信方式</p><p><img data-src="https://z3.ax1x.com/2021/03/21/64y5DK.png" alt="sztxjc"></p></li></ul><h1 id="数据通信计算"><a href="#数据通信计算" class="headerlink" title="数据通信计算"></a>数据通信计算</h1><hr><h2 id="模拟信道带宽计算"><a href="#模拟信道带宽计算" class="headerlink" title="模拟信道带宽计算"></a>模拟信道带宽计算</h2><script type="math/tex; mode=display">W=f2-f1</script><ul><li>其中f1是低频，f2是高频</li></ul><h2 id="尼奎斯特定理"><a href="#尼奎斯特定理" class="headerlink" title="尼奎斯特定理"></a>尼奎斯特定理</h2><script type="math/tex; mode=display">最大数据速率=2W \log_2 N=B \log_2 N</script><ul><li>其中，W表示带宽，B表示波特率，N是码元总的种类数</li></ul><h2 id="信息量n与码元种类N的关系"><a href="#信息量n与码元种类N的关系" class="headerlink" title="信息量n与码元种类N的关系"></a>信息量n与码元种类N的关系</h2><script type="math/tex; mode=display">n =\log_2 N</script><h2 id="香农公式"><a href="#香农公式" class="headerlink" title="香农公式"></a>香农公式</h2><script type="math/tex; mode=display">极限数据速率=带宽\times\log_2 (1+S/N)</script><ul><li>其中，S为信号功率，N为噪声功率</li></ul><h2 id="误码率"><a href="#误码率" class="headerlink" title="误码率"></a>误码率</h2><ul><li>指接收到的错误码元数在总传送码元数中所占的比例</li></ul><script type="math/tex; mode=display">P_C = 错误码元数/码元总数</script><h2 id="信噪比"><a href="#信噪比" class="headerlink" title="信噪比"></a>信噪比</h2><script type="math/tex; mode=display">信噪比=信号功率/噪声功率=S/N</script><h2 id="码元速率（波特率）"><a href="#码元速率（波特率）" class="headerlink" title="码元速率（波特率）"></a>码元速率（波特率）</h2><ul><li>即单位时间内载波参数（相位、振幅、频率等）变化的次数，单位为波特，符号<code>Baud</code>，简写<code>B</code></li></ul><h2 id="比特率（信息传输速率、信息速率）"><a href="#比特率（信息传输速率、信息速率）" class="headerlink" title="比特率（信息传输速率、信息速率）"></a>比特率（信息传输速率、信息速率）</h2><ul><li>指单位时间内在信道上传达的数据量（即比特数），单位为比特每秒（<code>bit/s</code>），简写<code>b/s</code>或<code>bps</code></li></ul><h2 id="波特率与比特率的关系"><a href="#波特率与比特率的关系" class="headerlink" title="波特率与比特率的关系"></a>波特率与比特率的关系</h2><script type="math/tex; mode=display">比特率=波特率 \times 单个调制状态对应的二进制位数= 波特率\times\log_2 N</script><h2 id="分贝数与信噪比的关系"><a href="#分贝数与信噪比的关系" class="headerlink" title="分贝数与信噪比的关系"></a>分贝数与信噪比的关系</h2><script type="math/tex; mode=display">dB =10 \lg (S/N)</script><h2 id="公式总结"><a href="#公式总结" class="headerlink" title="公式总结"></a>公式总结</h2><p><img data-src="https://s3.ax1x.com/2021/02/19/yfwB8I.jpg" alt="gongshi"></p><h1 id="常用考试数据"><a href="#常用考试数据" class="headerlink" title="常用考试数据"></a>常用考试数据</h1><h2 id="单位换算"><a href="#单位换算" class="headerlink" title="单位换算"></a>单位换算</h2><ul><li>通信换算进制1000 &nbsp;&nbsp;1G=1000M</li><li>存储换算进制1024 &nbsp;&nbsp;1G=1024M</li></ul><h2 id="信道延迟"><a href="#信道延迟" class="headerlink" title="信道延迟"></a>信道延迟</h2><ul><li><p><strong>总延迟时间</strong>：</p><script type="math/tex; mode=display">T_{总延迟}=T_1+T_2</script><ul><li>其中$T_1$为发送延迟，$T_2$为传输延迟</li></ul></li><li>==电缆信道延迟：200m/us==（200km/ms、200000km/s）为光速的2/3</li><li>==卫星信道延迟：270ms==</li></ul><h1 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h1><ul><li>双绞线分为 <strong>非屏蔽双绞线UTP</strong> ， <strong>屏蔽双绞线STP</strong>。</li><li><strong>100米可达到100MB/s</strong></li></ul><h2 id="屏蔽双绞线"><a href="#屏蔽双绞线" class="headerlink" title="屏蔽双绞线"></a>屏蔽双绞线</h2><ul><li>三类线——带宽10Mbps—-cat3</li><li>五类线——带宽100Mbps—-cat5</li><li>超五类线——带宽100Mbps—-cat5e</li><li>六类线——带宽250Mbps—-cat6</li></ul><h2 id="非屏蔽双绞线"><a href="#非屏蔽双绞线" class="headerlink" title="非屏蔽双绞线"></a>非屏蔽双绞线</h2><ul><li>三类线——带宽16Mbps—-cat3</li><li>五类线——带宽100Mbps—-cat5</li><li>超五类线——带宽100Mbps—-cat5e</li></ul><h2 id="双绞线线序标准"><a href="#双绞线线序标准" class="headerlink" title="双绞线线序标准"></a>双绞线线序标准</h2><ul><li>分为T568A与T568B</li></ul><h3 id="T568A—交叉线"><a href="#T568A—交叉线" class="headerlink" title="T568A—交叉线"></a>T568A—交叉线</h3><p>绿白、绿、橙白、蓝、蓝白、橙、棕白、棕</p><h3 id="T568B—直通线"><a href="#T568B—直通线" class="headerlink" title="T568B—直通线"></a>T568B—直通线</h3><p>橙白、橙、绿白、蓝、蓝白、绿、棕白、棕</p><h2 id="交叉线与直通线的适用范围"><a href="#交叉线与直通线的适用范围" class="headerlink" title="交叉线与直通线的适用范围"></a>交叉线与直通线的适用范围</h2><div class="table-container"><table><thead><tr><th style="text-align:center">线缆连接设备情况</th><th style="text-align:center">采用的线缆种类</th></tr></thead><tbody><tr><td style="text-align:center">计算机——计算机</td><td style="text-align:center">交叉线</td></tr><tr><td style="text-align:center">计算机——交换机</td><td style="text-align:center">直通线</td></tr><tr><td style="text-align:center">计算机——路由器</td><td style="text-align:center">交叉线</td></tr><tr><td style="text-align:center">交换机——交换机</td><td style="text-align:center">交叉线</td></tr><tr><td style="text-align:center">交换机——路由器</td><td style="text-align:center">直通线</td></tr><tr><td style="text-align:center">路由器——路由器</td><td style="text-align:center">交叉线</td></tr></tbody></table></div><h1 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h1><ul><li>分为粗同轴电缆与细同轴电缆。 <strong>传送距离长，信号稳定的特点</strong>，常用于电监控、音响设备</li><li><strong>由里到外分别是：中心铜线，塑料绝缘体，网状导电层和电线外皮</strong></li><li>==优点是传送距离长，信号稳定==</li><li><p>同轴电缆分为 <strong>RG-58（基带），RG-59（宽带）</strong></p><p>  <img data-src="https://s3.ax1x.com/2021/02/19/yfwRaQ.jpg" alt="tzdl"></p></li></ul><h1 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a>光纤</h1><ul><li><p>分为单模光纤SMF与多模光纤MMF，黄色为单模，橙色水蓝色为多模</p><p><img data-src="https://s3.ax1x.com/2021/02/19/yfwhPs.jpg" alt="gx"></p></li></ul><h2 id="单模光纤与多模光纤的对比"><a href="#单模光纤与多模光纤的对比" class="headerlink" title="单模光纤与多模光纤的对比"></a>单模光纤与多模光纤的对比</h2><div class="table-container"><table><thead><tr><th style="text-align:center">项目</th><th style="text-align:center">单模光纤</th><th style="text-align:center">单模光纤</th></tr></thead><tbody><tr><td style="text-align:center">距离</td><td style="text-align:center">长</td><td style="text-align:center">短</td></tr><tr><td style="text-align:center">速率</td><td style="text-align:center">高</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">光源</td><td style="text-align:center">激光</td><td style="text-align:center">发光二极管</td></tr><tr><td style="text-align:center">直径</td><td style="text-align:center">小</td><td style="text-align:center">大</td></tr><tr><td style="text-align:center">端接</td><td style="text-align:center">较难</td><td style="text-align:center">较易</td></tr><tr><td style="text-align:center">造价</td><td style="text-align:center">高</td><td style="text-align:center">低</td></tr></tbody></table></div><h1 id="无线信道"><a href="#无线信道" class="headerlink" title="无线信道"></a>无线信道</h1><ul><li><p>分为 <strong>无线电波</strong> 和 <strong>红外光波</strong></p></li><li><p><strong>无线电波</strong></p><ul><li>长波</li><li>中波</li><li>短波</li><li>超短波</li><li><strong>微波</strong><ul><li>地面微波</li><li>卫星微波</li></ul></li></ul></li><li><strong>红外光波</strong><ul><li>近红外线</li><li>中红外线</li><li>远红外线</li></ul></li></ul><h1 id="模拟信道调制"><a href="#模拟信道调制" class="headerlink" title="模拟信道调制"></a>模拟信道调制</h1><ul><li><p>分为 <strong>调幅ASK</strong>、 <strong>调频FSK</strong>、 <strong>调相PSK</strong>、 <strong>正交调幅QAM</strong></p><p>  <img data-src="https://s3.ax1x.com/2021/02/19/yfwTMV.png" alt="tiaozhi"></p></li></ul><h1 id="数字信道编码"><a href="#数字信道编码" class="headerlink" title="数字信道编码"></a>数字信道编码</h1><ul><li>分为采样、量化、编码三步骤</li></ul><h1 id="调制技术与码元数"><a href="#调制技术与码元数" class="headerlink" title="调制技术与码元数"></a>调制技术与码元数</h1><div class="table-container"><table><thead><tr><th style="text-align:center">调制技术</th><th style="text-align:center">名称</th><th style="text-align:center">码元种类N</th><th style="text-align:center">比特位n</th></tr></thead><tbody><tr><td style="text-align:center">ASK</td><td style="text-align:center">幅度键控</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">FSK</td><td style="text-align:center">频移键控</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">PSK</td><td style="text-align:center">相移键控</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">DPSK</td><td style="text-align:center">4相键控</td><td style="text-align:center">4</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">QPSK</td><td style="text-align:center">正交相移键控</td><td style="text-align:center">4</td><td style="text-align:center">2</td></tr></tbody></table></div><h1 id="极性编码"><a href="#极性编码" class="headerlink" title="极性编码"></a>极性编码</h1><blockquote><p>参考视频：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW40NDExMTd4NT9mcm9tPXNlYXJjaCZhbXA7c2VpZD0xMDQ4NzEzMTI4MDg4NTA3NDA3NQ==">https://www.bilibili.com/video/BV1n441117x5?from=search&amp;seid=10487131280885074075</span></p></blockquote><ul><li><p>分为单极性、极性、双极性</p><p>  <img data-src="https://s3.ax1x.com/2021/02/19/yfwqZF.jpg" alt="jxbm"></p><ul><li><strong>单极性码</strong><ul><li>只有 ==一个极性==，正电平为0，零电平为1</li></ul></li><li><strong>极性码</strong><ul><li>==两个极性==，正电平为0，零电平为1</li></ul></li><li><strong>双极性码</strong><ul><li>零电平为0，正负电平交替翻转表示1，这种编码不能定时，需要引入时钟</li></ul></li></ul></li></ul><h1 id="归零性编码"><a href="#归零性编码" class="headerlink" title="归零性编码"></a>归零性编码</h1><ul><li><p>分为归零码、不归零码、双相码</p><p>  <img data-src="https://s3.ax1x.com/2021/02/19/yfwji9.png" alt="gljxm"></p><ul><li><strong>归零码</strong><ul><li>码元中间 ==信号回归到零电平，正电平到零电平转换变为0，负点平到零电平转换变为1==，这种码元自定时</li><li>通过“归零”这一步骤，相当于代替时钟信号编码在数据中，即可做到同步</li><li>该编码效率较低</li></ul></li><li><strong>不归零码</strong><ul><li>码元中间信号==不归零==，1表示电平翻转，0不翻转，正电为1，负电为0</li><li>因存在同步问题，计算机网络不使用该类编码</li></ul></li><li><strong>双相码</strong><ul><li>低到高表示0，高到低表示1，这种编码抗干扰性好，实现自同步</li></ul></li></ul></li></ul><h1 id="曼彻斯特码与差分曼码"><a href="#曼彻斯特码与差分曼码" class="headerlink" title="曼彻斯特码与差分曼码"></a>曼彻斯特码与差分曼码</h1><ul><li>曼彻斯特码降0升1，降1升0，效率50%</li><li><p>差分曼码折0平1，效率50%</p><p>  <img data-src="https://s3.ax1x.com/2021/02/19/yf08ij.png" alt="cfmm"></p><ul><li><strong>曼彻斯特码</strong><ul><li>==低到高表示0，高到低表示1==，码元中间==电平转换既表示数据，又做定时信号==</li><li>使用在10Mb/s的传统以太网中，跳变时刻即表示数据，也表示时钟</li></ul></li><li><strong>差分曼彻斯特码</strong><ul><li>每一位开始处是否有电平翻转，有着表示0，没有则表示1</li><li>跳变仅表示时钟，码元开始处才表示数据的变化</li></ul></li></ul></li></ul><h1 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h1><ol><li><p>设信道带宽为4000Hz，信噪比为30dB，按照香农定理，信道容量为 []{.gap} 。 {.quiz}</p><ul><li>4Kb/s {.options}</li><li>1.6Kb/s {.options}</li><li>40Kb/s {.correct}</li><li>120Kb/s {.options}<br>{.options}<blockquote><ul><li>使用香农公式 C&nbsp;=&nbsp;W $\log_2 (1+S/N)$ ,和公式 dB&nbsp;=&nbsp;10 $\lg_10 (S/N)$,由30dB得到&nbsp;S/N&nbsp;=&nbsp;1000；于是&nbsp;C&nbsp;=&nbsp;4000 $\log_2 (1+1000)$ &nbsp;= &nbsp;40000b/s；除以进率1000，换算为Kb/s等于40Kb/s</li><li>{.options}</li></ul></blockquote></li></ul></li><li><p>所谓正交幅度调制是把两个 []{.gap} 的模拟信号合为一个载波信号。 {.quiz} </p><ul><li>幅度相同相位相差90° {.correct}</li><li>幅度相同相位相差180°  {.options}</li><li>频率相同相位相差90° {.options}</li><li>频率相同相位相差180° {.options}<br>{.options}</li></ul></li><li><p>地面上相距2000km的两地之间通过电缆传输4000bit长的数据包，数据速率为64Kb/s，从喀什发送到接收完成需要花费的时间为 []{.gap} 。 {.quiz}</p><ul><li>48ms {.options}</li><li>640ms {.options}</li><li>32.5ms {.options}</li><li>72.5ms {.correct}<br>{.options}<blockquote><ul><li>一个数据包从开始发送到接收完成的总时间=发送时间+传播延迟时间；传播延迟时间=2000km/(200km/ms)=10ms;发送时间=4000b/(6400b/s)=0.065s=62.5ms;总时间=62.5+10=72.5ms  </li><li>{.options}</li></ul></blockquote></li></ul></li><li><p>PCM编码是把模拟信号数字化的过程，通常模拟话音信道的带宽为4000Hz，则在数字化采用频率至少 []{.gap} 次/秒。 {.quiz}</p><ul><li>2000 {.options}</li><li>4000 {.options}</li><li>8000 {.correct}</li><li>16000 {.options}<br>{.options}</li></ul></li><li><p>在异步通信中，每个字符包含一位起始位、7位数据位、1位奇偶位和1位终止位，每秒钟传送200个字符，采用DPSK调制，则码元速率为 []{.gap} B。 {.quiz}</p><ul><li>200 {.options}</li><li>500 {.options}</li><li>1000 {.options}</li><li>2000 {.correct}<br>{.options}<blockquote><ul><li>R=200*(1+7+1+1)=2000bps，根据DPSK默认是2DPSK，也就是2相N=2，带入R=B$\log_2 (N)$，数值为：2000=B$\log_2 (2)$，得出波特率B=2000</li><li>{.options}</li></ul></blockquote></li></ul></li><li><p>设信道带宽为4000Hz，采用PCM编码，采用周期为125us，每个样本量化为128个等级，则信道的数据速率为 []{.gap} Kb/s。 {.quiz}</p><ul><li>10 {.options}</li><li>16 {.options}</li><li>56 {.correct}</li><li>64 {.options}<br>{.options}<blockquote><ul><li>128个等级即2^7=128，需要yong7位来表示，125us的周期是每秒变化8000次，则有7*8000=56000b/s=56Kb/s</li><li>{.options}</li></ul></blockquote></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础概论</title>
      <link href="/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E6%A6%82%E8%AE%BA/"/>
      <url>/my-blog/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E6%A6%82%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络概念"><a href="#计算机网络概念" class="headerlink" title="计算机网络概念"></a>计算机网络概念</h1><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><ul><li>计算机网络时通过通信线路和通信设备连接的许多的 ==分散独立工作== 的计算机系统，遵从一定的协议用 软件==实现资源共享== 的 <strong>系统</strong></li></ul><h2 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h2><ul><li><strong>硬件</strong><ul><li>电脑、路由器等</li></ul></li><li><strong>软件</strong><ul><li>聊天软件、通信软件等</li></ul></li><li><strong>协议</strong><ul><li>一类数据传输的标准</li></ul></li></ul><h2 id="协议分类"><a href="#协议分类" class="headerlink" title="协议分类"></a>协议分类</h2><ul><li>协议分为国际标准OSI/RM和工人标准TCP/IP</li></ul><h2 id="计算机网络分类"><a href="#计算机网络分类" class="headerlink" title="计算机网络分类"></a>计算机网络分类</h2><h3 id="按分布范围"><a href="#按分布范围" class="headerlink" title="按分布范围"></a>按分布范围</h3><ul><li>局域网</li><li>城域网</li><li>广域网</li></ul><h3 id="按拓扑结构"><a href="#按拓扑结构" class="headerlink" title="按拓扑结构"></a>按拓扑结构</h3><ul><li><strong>星型</strong><ul><li>耗材多，过于依赖中心节点，便于管理</li></ul></li><li><strong>环型</strong><ul><li>单点破坏，则全网络瘫痪</li></ul></li><li><strong>树型</strong><ul><li>层次化便于管理</li></ul></li><li><strong>总线型（已淘汰！）</strong><ul><li>耗材少，成本低，冲突多</li></ul></li><li><p><strong>网状拓扑</strong></p><ul><li>可靠性高，实现负载均衡，选路成本高</li></ul><p><img data-src="https://s3.ax1x.com/2021/02/18/yRt8I0.jpg" alt="tuopu"></p></li></ul><h3 id="其他分类"><a href="#其他分类" class="headerlink" title="其他分类"></a>其他分类</h3><ul><li>公用与专用网</li><li>通信网ISP与信息网ICP</li><li>校园网与企业网</li><li>骨干网与接入网</li><li>有线网与无线网</li></ul><h2 id="OSI-RM模型"><a href="#OSI-RM模型" class="headerlink" title="OSI/RM模型"></a>OSI/RM模型</h2><ul><li><p>OSI/RM模型（开放系统互联参考模型）是应用层、表示层、会话层、传输层、网络层、数据链路层、物理层</p><p><img data-src="https://s3.ax1x.com/2021/02/18/yRtBZR.png" alt="osi01"></p><p><img data-src="https://s3.ax1x.com/2021/02/18/yRtgzD.png" alt="[osi02](osi02.png)"></p><p><img data-src="https://s3.ax1x.com/2021/02/18/yRtfLd.png" alt="[osi03](osi03.png)"></p></li></ul><h2 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h2><ul><li><p>TCP/IP（因特网传输协议）四层协议模型包括应用层、传输层、互联网层、网路接口层</p><p><img data-src="https://s3.ax1x.com/2021/02/18/yRt5dI.png" alt="[tcpips](tcp_ip.png)"></p></li></ul><h2 id="OSI各层解析"><a href="#OSI各层解析" class="headerlink" title="OSI各层解析"></a>OSI各层解析</h2><h3 id="底层（用于通信）"><a href="#底层（用于通信）" class="headerlink" title="底层（用于通信）"></a>底层（用于通信）</h3><ul><li><strong>物理层</strong><ul><li>封装单位：==比特流==</li><li>地址标识：bit流</li><li>功能：提供物理链路，二进制数据比特流传输、定义机械/电气特性与接口</li></ul></li><li><strong>数据链路层</strong><ul><li>封装单位：==数据帧==</li><li>地址标识：MAC地址</li><li>功能：把不可靠信道转变为可靠信道，将比特组织成帧，在链路上提供点到点的帧传输，进行差错检测与流量控制</li></ul></li><li><strong>网络层</strong><ul><li>封装单位： ==数据报或数据分组==</li><li>地址标识：IP地址</li><li>功能：路径的选择，网络联机的多路复用、差错的检测与恢复、排序与流量控制、服务选择</li></ul></li><li><strong>传输层</strong><ul><li>封装单位： ==数据报文或数据段==</li><li>地址标识：端口号</li><li>功能：提供端到端之间可靠透明的数据传输。分段与重组、差错控制与流量控制，保证数据传输的正确性</li></ul></li></ul><h3 id="高层（用于资源）"><a href="#高层（用于资源）" class="headerlink" title="高层（用于资源）"></a>高层（用于资源）</h3><ul><li><strong>会话层</strong><ul><li>封装单位： ==应用进程==</li><li>地址标识： 进程号</li><li>功能：会话连接的恢复与释放、对会话进行分段、同步等操作</li></ul></li><li><strong>表示层</strong><ul><li>封装单位： ==应用进程==</li><li>地址标识： 进程号</li><li>功能：数据加密与数据压缩、语法表示与连接管理</li></ul></li><li><strong>应用层</strong><ul><li>封装单位： ==应用进程==</li><li>地址标识： 进程号</li><li>功能：应用层包含用户应用程序和协议</li></ul></li></ul><h2 id="数据在网络传输中的操作——封装与解封"><a href="#数据在网络传输中的操作——封装与解封" class="headerlink" title="数据在网络传输中的操作——封装与解封"></a>数据在网络传输中的操作——封装与解封</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p> <img data-src="https://s3.ax1x.com/2021/02/18/yRNeT1.png" alt="fz01"></p><h3 id="解封"><a href="#解封" class="headerlink" title="解封"></a>解封</h3><p> <img data-src="https://s3.ax1x.com/2021/02/18/yRtves.png" alt="[jf01](jf01.png)"></p><h2 id="练习例题"><a href="#练习例题" class="headerlink" title="练习例题"></a>练习例题</h2><ol><li><p>[]{.gap} 结构要求把工作站连接到一台中央设备 {.quiz}</p><ul><li>星型 {.correct}</li><li>环型 {.options}</li><li>树型 {.options} </li><li>总线型 {.options}<br>{.options}</li></ul></li><li><p>组建计算机网络的目的是实现联网计算机系统的 []{.gap} 。 {.quiz}</p><ul><li>硬件共享 {.options}</li><li>软件共享 {.options}</li><li>数据共享 {.options}</li><li>资源共享 {.correct}<br>{.options}</li></ul></li><li><p>在ISO OSI/RM中，[]{.gap} 实现 ==数据压缩== 功能 {.quiz}</p><ul><li>应用层 {.options}</li><li>表示层 {.correct}</li><li>会话层 {.options}</li><li>传输层 {.options}<br>{.options}</li></ul></li><li><p>在OSI参考模型中，数据链路层处理的数据单位是 []{.gap} 。 {.quiz}</p><ul><li>比特 {.options}</li><li>帧 {.correct}</li><li>分组 {.options}</li><li>报文 {.options}<br>{.options}<blockquote><ul><li>:x: 物理层</li><li>:heavy_check_mark: 数据链路层</li><li>:x: 网络层</li><li>:x: 传输层<br>{.options}</li></ul></blockquote></li></ul></li><li><p>在OSI参考模型中，实现端到端的应答、分组排序和流量控制功能的协议层是 []{.gap} 。 {.quiz}</p><ul><li>数据链路层 {.options}</li><li>网络层 {.options}</li><li>传输层 {.correct}</li><li>会话层 {.options}<br>{.options}</li></ul></li><li><p>在ISU参考模型中，下层协议为上层洗衣提供服务（SAP）。在Internet中，网络层的服务访问点是[]{.gap} 。 {.quiz}</p><ul><li>MAC地址 {.options}</li><li>LLC地址 {.options}</li><li>IP地址 {.correct}</li><li>端口号  {.options}<br>{.options}<blockquote><ul><li>:x: 位于数据链路层</li><li>:x: 介于数据链路层与网络层之间，作为逻辑链路控制</li><li>:heavy_check_mark: 网络层</li><li>:x: 传输层<br>{.options}</li></ul></blockquote></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考网络工程师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考网络工程师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶</title>
      <link href="/my-blog/MySQL/MySQL%E8%BF%9B%E9%98%B6/"/>
      <url>/my-blog/MySQL/MySQL%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="事务-transaction"><a href="#事务-transaction" class="headerlink" title="事务(transaction)"></a>事务(transaction)</h2><h3 id="何为事务？"><a href="#何为事务？" class="headerlink" title="何为事务？"></a>何为事务？</h3><ul><li>一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。在计算机术语中，事务通常就是指数据库事务。</li></ul><h3 id="事务在数据库的作用"><a href="#事务在数据库的作用" class="headerlink" title="事务在数据库的作用"></a>事务在数据库的作用</h3><ul><li>一个数据库事务通常包含对数据库进行读或写的一个操作序列。它的存在包含有以下两个目的：<ul><li>==1、为数据库操作提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。==</li><li>==2、当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。==</li></ul></li></ul><h3 id="事务的四大原则"><a href="#事务的四大原则" class="headerlink" title="事务的四大原则"></a>事务的四大原则</h3><h4 id="原子性-Atomicity"><a href="#原子性-Atomicity" class="headerlink" title="原子性(Atomicity)"></a>原子性(Atomicity)</h4><ul><li>原子性保证将每个事务视为一个单独的“单元”，它==要么完全成功，要么完全失败==：如果构成事务的任何语句未能完成，则整个事务都会失败，并且数据库将保持不变。</li><li>例如：用户A给用户B进行银行转账，数据库要确保这一事务的两个操作都成功：这两个操作即A成功转账给B，B成功收到A的转账。两个操作缺少一个就失败，这两个操作可看成一个事务。</li></ul><h4 id="一致性-Consistency"><a href="#一致性-Consistency" class="headerlink" title="一致性(Consistency)"></a>一致性(Consistency)</h4><ul><li>事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。</li><li>例如：用户A给用户B转账前与转账后，双方的总资产保持不变，即转账事务前后的一致性。</li></ul><h4 id="隔离性-Isolation"><a href="#隔离性-Isolation" class="headerlink" title="隔离性(Isolation)"></a>隔离性(Isolation)</h4><ul><li>多个事务并发时，一个事务不会影响到另一个事务。</li><li>例如：用户B同时受到用户A与C的银行转账，此时当两个转账操作结束后，B的总金额为其原金额加上A与C转给其的金额总数。即A转账B和C转账B两个事务相互隔离，当A、C没有确认提交之前，两者转账的钱具有隔离性。</li></ul><h4 id="持久性-Durability"><a href="#持久性-Durability" class="headerlink" title="持久性(Durability)"></a>持久性(Durability)</h4><ul><li>一个事务一旦提交，他对数据库的修改应该永久保存在数据库中。</li><li>例如：当A把钱转账到B账户上时，双方的账户金额在数据库中就会永久保存。</li></ul><h3 id="隔离的一些问题"><a href="#隔离的一些问题" class="headerlink" title="隔离的一些问题"></a>隔离的一些问题</h3><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><ul><li><strong>指一个事务读取了另一个事务未提交的数据</strong></li></ul><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><ul><li><strong>在一个事务内读取表中的某一行数据，多次读取结果不同（不一定是错误，只是场合不对）</strong></li></ul><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><ul><li><strong>指在一个事务内读到了别的事务插入的数据，导致前后读取不一致</strong></li></ul><h3 id="事务的使用"><a href="#事务的使用" class="headerlink" title="事务的使用"></a>事务的使用</h3><pre><code class="lang-sql">-- 在默认状态下MySQL是开启事务自动提交的SET autocommit = 0 --关闭SET autocommit = 1 --开启-- 手动处理事务SET autocommit = 0 --关闭自动提交-- 事务开启START TRANSACTION --标记一个事务的开始，从这里为一个事务内的SQLINSERT .....-- 提交：持久化,即成功COMMIT-- 回滚：回到原来的样子,即失败ROLLBACK--事务结束SET autocommit = 1 --开启</code></pre><h2 id="索引-Index"><a href="#索引-Index" class="headerlink" title="索引(Index)"></a>索引(Index)</h2><h3 id="何为索引？"><a href="#何为索引？" class="headerlink" title="何为索引？"></a>何为索引？</h3><ul><li><strong>索引是存储引擎用于快速找到记录的一种数据结构.</strong></li><li>最常见的例子为==书本的目录==，我们在一本很厚的书中，需要通过目录找到需要的知识，可以快速精确定位到第几页中，不必一页一页的查找，提高查询效率</li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><ul><li><strong>主键索引</strong><ul><li>PRIMARY KEY,主键不可重复，一个表只有一列可作为主键</li></ul></li><li><strong>唯一索引</strong><ul><li>UNIQUE KEY，唯一索引的使用可以重复，但不可出现相同字段的唯一索引</li></ul></li><li><strong>常规索引</strong><ul><li>INDEX/KEY</li></ul></li><li><strong>全文索引</strong><ul><li>FULLTEXT，只有在<code>MyISAM</code>数据库引擎下才有，可快速定位数据</li></ul></li></ul><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre><code class="lang-sql">-- 索引的使用-- 1.再创建表的时候给字段增加索引-- 2.创建完毕后，增加索引-- 显示索引的索引信息SHOW INDEX FROM student-- 增加一个全文索引ALTER TABLE school.student ADD FULLTEXT INDEX `studentName` (`studentName`);-- EXPLAIN 分析sql执行情况EXPLAIN SELECT * FROM student; --非全文索引</code></pre><h3 id="索引原则"><a href="#索引原则" class="headerlink" title="索引原则"></a>索引原则</h3><ul><li><strong>索引并不是越多越好</strong></li><li><strong>不要对进程变得数据加索引</strong></li><li><strong>小数据量的表不需要加索引</strong></li><li><strong>素养一把加在常用来查询的字段上</strong></li></ul><h3 id="索引背后的数据结构"><a href="#索引背后的数据结构" class="headerlink" title="索引背后的数据结构"></a>索引背后的数据结构</h3><blockquote><p>参考文档：<span class="exturl" data-url="aHR0cDovL2Jsb2cuY29kaW5nbGFicy5vcmcvYXJ0aWNsZXMvdGhlb3J5LW9mLW15c3FsLWluZGV4Lmh0bWw=">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</span></p></blockquote><h2 id="权限管理与备份"><a href="#权限管理与备份" class="headerlink" title="权限管理与备份"></a>权限管理与备份</h2><h3 id="权限管理的作用"><a href="#权限管理的作用" class="headerlink" title="权限管理的作用"></a>权限管理的作用</h3><ol><li>可以限制用户访问哪些库、哪些表</li><li>可以限制用户对哪些表执行SELECT、CREATE、DELETE、DELETE、ALTER等操作</li><li>可以限制用户登录的IP或域名</li><li>可以限制用户自己的权限是否可以授权给别的用户</li></ol><h3 id="MYSQL连接权限"><a href="#MYSQL连接权限" class="headerlink" title="MYSQL连接权限"></a>MYSQL连接权限</h3><ul><li><strong>主要依据：</strong><ul><li>你从哪里来？ host</li><li>你是谁？ user</li><li>你的密码是多少？ password</li></ul></li><li>通过用户提供的这三个信息，存储MySQL库中的user表中</li></ul><h3 id="MySQL执行权限的检查顺序"><a href="#MySQL执行权限的检查顺序" class="headerlink" title="MySQL执行权限的检查顺序"></a>MySQL执行权限的检查顺序</h3><p><img data-src="https://s3.ax1x.com/2021/01/20/sR4ytA.png" alt="quanxian"></p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><ul><li><p><strong>有两种方式创建MySQL授权用户</strong></p><ul><li><p>==方法一、通过insert语句直接操作MySQL系统权限表==</p></li><li><p>==方法二、执行create user/grant命令（推荐）==</p></li></ul></li></ul><h4 id="创建语法"><a href="#创建语法" class="headerlink" title="创建语法"></a>创建语法</h4><pre><code class="lang-sql">create user [用户名]@[访问地址] identified by [密码]</code></pre><h4 id="授权语法"><a href="#授权语法" class="headerlink" title="授权语法"></a>授权语法</h4><pre><code class="lang-sql">grant [权限1,权限2,权限3] on *.* to user@&#39;host&#39; identified by &#39;password&#39;</code></pre><blockquote><p>详细资料参考：<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNjU2MDA4">https://cloud.tencent.com/developer/article/1656008</span></p></blockquote><h2 id="数据库规范"><a href="#数据库规范" class="headerlink" title="数据库规范"></a>数据库规范</h2><h3 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h3><h4 id="第一范式-1NF"><a href="#第一范式-1NF" class="headerlink" title="第一范式(1NF)"></a>第一范式(1NF)</h4><ul><li>原子性，保证每一列不再可分<h4 id="第二范式-2NF"><a href="#第二范式-2NF" class="headerlink" title="第二范式(2NF)"></a>第二范式(2NF)</h4></li><li>必要前提：==满足第一范式==</li><li>每张表只描述一件事情</li></ul><h4 id="第三范式-3NF"><a href="#第三范式-3NF" class="headerlink" title="第三范式(3NF)"></a>第三范式(3NF)</h4><ul><li>必要前提： ==满足第一、第二范式==</li><li>第三范式需要确保数据表中的每一列数据和主键直接相关，而==不能间接相关==</li></ul><h3 id="规范与性能的问题"><a href="#规范与性能的问题" class="headerlink" title="规范与性能的问题"></a>规范与性能的问题</h3><ul><li><strong>关联查询的表不可超过三张</strong><ul><li>考虑商业化的需求和目标</li><li>适当考虑规范性</li><li>故意给某些表增加一些冗余的字段</li><li>故意增加一些计算列</li></ul></li></ul><h2 id="JDBC-重点"><a href="#JDBC-重点" class="headerlink" title="JDBC (重点)"></a>JDBC (重点)</h2><h3 id="数据库驱动"><a href="#数据库驱动" class="headerlink" title="数据库驱动"></a>数据库驱动</h3><ul><li>图解：<br><img data-src="https://s3.ax1x.com/2021/01/20/sf8EGt.png" alt="qudong"></li></ul><h3 id="Java数据库连接（JDBC）"><a href="#Java数据库连接（JDBC）" class="headerlink" title="Java数据库连接（JDBC）"></a>Java数据库连接（JDBC）</h3><ul><li>Java数据库连接（JDBC）是Java编程语言的应用程序编程接口（API），它定义了客户端如何访问数据库。==它是用于Java数据库连接的基于Java的数据访问技术==。它是Oracle Corporation的Java Standard Edition平台的一部分。它提供了查询和更新数据库中数据的方法，并且面向关系数据库。</li></ul><h3 id="编程步骤"><a href="#编程步骤" class="headerlink" title="编程步骤"></a>编程步骤</h3><ol><li><strong>加载驱动程序</strong><pre><code class="lang-java">Class.forName(driverClass)//加载MySql驱动Class.forName(&quot;com.mysql.jdbc.Driver&quot;)//加载Oracle驱动Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;)</code></pre></li><li><p><strong>获得数据库连接</strong></p><pre><code class="lang-java">DriverManager.getConnection(&quot;jdbc:mysql://127.0.0.1:3306/abc&quot;, &quot;root&quot;, &quot;root&quot;);</code></pre></li><li><p><strong>创建Statement\PreparedStatement对象：</strong></p><pre><code class="lang-java">conn.createStatement();conn.prepareStatement(sql);</code></pre></li></ol><ul><li><strong>总结：</strong><ul><li>加载驱动</li><li>连接数据库<code>DriverManager</code></li><li>获得执行sql对象 <code>statement</code></li><li>获得返回的结果集</li><li>释放连接</li></ul></li></ul><h3 id="主要java代码"><a href="#主要java代码" class="headerlink" title="主要java代码"></a>主要java代码</h3><h4 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h4><pre><code class="lang-java">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());Class.forName(&quot;com.mysql.jdbc.Driver&quot;);Connection connection = DriverManager.getConnection(url,username,password);// connection 代表数据库// 数据库设置自动提交connection.setAutoCommit();// 事务提交connection.commit();//事务回滚connection.rollback();</code></pre><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><pre><code class="lang-java">String url = &quot;jdbc:mysql://localhost:3306/jdbcstudy......&quot;//按照实际的数据库url填写// 3306为mysql数据库的端口号</code></pre><h4 id="statement执行SQL的对象-PrepareStatement执行SQL的对象"><a href="#statement执行SQL的对象-PrepareStatement执行SQL的对象" class="headerlink" title="statement执行SQL的对象 PrepareStatement执行SQL的对象"></a>statement执行SQL的对象 PrepareStatement执行SQL的对象</h4><pre><code class="lang-java">String sql = &quot;SELECT * FROM users&quot;; //编写SQLstatement.executeQuery();//查询潮州返回的结果集ResultSetstatement.execute(); //执行任何SQLstatement.executeUpdate(); //为增删改使用</code></pre><h4 id="ResultSet-查询的结果集，封装了所有查询结果"><a href="#ResultSet-查询的结果集，封装了所有查询结果" class="headerlink" title="ResultSet 查询的结果集，封装了所有查询结果"></a>ResultSet 查询的结果集，封装了所有查询结果</h4><ul><li><p>获得指定的数据类型</p><pre><code class="lang-java">resultSet.getObject(); //在不知道列类型的情况下使用//以下为指导列类型使用resultSet.getString();resultSet.getInt();resultSet.getDate();</code></pre></li><li><p>遍历<br>```java<br>resultSet.beforeFirst(); //移到最前面<br>resultSet.afterLast(); //移到最后面<br>resultSet.next(); //移到下一个数据<br>resultSet.previous(); //移到前一行<br>resultSet.absoulute(row); //移动到指定行</p></li></ul><h4 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h4><pre><code class="lang-java">resultSet.close();statement.close();connection.close();</code></pre><h3 id="statement对象"><a href="#statement对象" class="headerlink" title="statement对象"></a>statement对象</h3><blockquote><p>参考资料：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vRWFzb25KaW0vcC82OTk0MDE0Lmh0bWw=">https://www.cnblogs.com/EasonJim/p/6994014.html</span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库</title>
      <link href="/my-blog/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
      <url>/my-blog/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="认识数据库"><a href="#认识数据库" class="headerlink" title="认识数据库"></a>认识数据库</h2><ul><li>数据库(DataBase),即数据存储的仓库，一个数据库由多个表空间组成</li><li>用户可在数据库中对库中的表进行增删改查的操作</li></ul><h2 id="数据库管理系统（DBMS）"><a href="#数据库管理系统（DBMS）" class="headerlink" title="数据库管理系统（DBMS）"></a>数据库管理系统（DBMS）</h2><ul><li>具有管理数据库的一种软件系统，==具有存储、截取、安全保障、数据备份==等功能</li></ul><h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><h3 id="什么是关系模式"><a href="#什么是关系模式" class="headerlink" title="什么是关系模式"></a>什么是关系模式</h3><ul><li>关系的描述称为关系模式（Relation Schema）它可以形式化地表示为：<ul><li>R（U，D，dom，F）</li></ul></li><li>==其中R为关系名，U为组成该关系的属性名集合，D为属性组U中属性所来自的域，dom为属性向域的映象集合，F为属性间数据的依赖关系集合。==</li><li>通常简记为：<ul><li>R(U)或R(A1，A2，…,An)</li><li>其中R为关系名，U为属性名集合，A1，A2，…,An为各属性名。</li></ul></li></ul><h3 id="什么是关系模型"><a href="#什么是关系模型" class="headerlink" title="什么是关系模型"></a>什么是关系模型</h3><ul><li>关系实际上就是关系模式在某一时刻的状态或内容。也就是说，关系模式是型，关系是它的值。关系模式是静态的、稳定的，而关系是动态的、随时间不断变化的，因为关系操作在不断地更新着数据库中的数据。但在实际当中，常常把关系模式和关系统称为关系，读者可以从上下文中加以区别。</li></ul><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><h2 id="采用了关系模型来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了数据库。"><a href="#采用了关系模型来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了数据库。" class="headerlink" title="- ==采用了关系模型来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了数据库。=="></a>- ==采用了关系模型来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了数据库。==</h2><ul><li>MySQL</li><li>Oracle</li><li>SQL Server</li><li>SQLite</li><li>DB2</li></ul><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><h2 id="NoSQL，泛指非关系型的数据库。随着互联网web2-0网站的兴起，传统的关系数据库在处理web2-0网站，特别是超大规模和高并发的SNS类型的web2-0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。"><a href="#NoSQL，泛指非关系型的数据库。随着互联网web2-0网站的兴起，传统的关系数据库在处理web2-0网站，特别是超大规模和高并发的SNS类型的web2-0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。" class="headerlink" title="- ==NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。=="></a>- ==NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。==</h2><ul><li>Redis</li><li>MongoDB</li></ul><h2 id="关于MySQL"><a href="#关于MySQL" class="headerlink" title="关于MySQL"></a>关于MySQL</h2><ul><li>原开发者为瑞典的MySQL AB公司，该公司于2008年被昇阳微系统（Sun Microsystems）收购。2009年，甲骨文公司（Oracle）收购昇阳微系统公司，MySQL成为Oracle旗下产品。</li><li>==开源的数据库系统软件==</li><li>==最好的RDBMS(Relational DataBase Manager System)关系型数据库管理系统==</li><li>体积小，速度快，开发成本低等优点，多用于中小型网站的开发，大型网站用到集群</li></ul><h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><ul><li>官网下载压缩包<blockquote><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubXlzcWwuY29tL2NuL2Rvd25sb2Fkcy8=">https://www.mysql.com/cn/downloads/</span></p></blockquote></li><li>解压</li><li>把解压包放在电脑环境目录下</li><li>配置环境变量</li><li>新建MySQL配置文件<code>ini</code><pre><code class="lang-ini">[mysqld]# 目录按个人的来basedir=E:\software\mysql-5.02.11\datadir=E:\software\mysql-5.02.11\data\port=3306skip-grant-tables</code></pre></li><li>启动管理员运行，运行CMD命令<ul><li>先把命令路径切换至mysql下的bin命令然后输入<code>mysqld -install</code></li><li>再输入<code>mysqld --initialize-insecure --user=mysql</code>初始化数据文件</li><li>然后再次启动mysql，用命令<code>mysql -u root -p</code>进入mysql管理界面</li><li>进入界面更改root密码</li><li><code>update mysql.user set authentication_string=password(&#39;123456&#39;) where user=&#39;root&#39; and Host = &#39;localhost&#39;;</code></li><li>然后输入<code>flush privileges</code>刷新权限</li></ul></li><li>修改<code>my.ini</code>文件删除最后一句<code>skip-grant-tables</code></li><li>重启mysql即可使用<ul><li><code>net stop mysql</code></li><li><code>net start mysql</code></li></ul></li></ul><h2 id="数据库使用"><a href="#数据库使用" class="headerlink" title="数据库使用"></a>数据库使用</h2><h3 id="使用命令行连接数据库"><a href="#使用命令行连接数据库" class="headerlink" title="使用命令行连接数据库"></a>使用命令行连接数据库</h3><pre><code class="lang-sql">mysql -uroot -p123456 --连接数据库update mysql.user set authentication_string=password(&#39;123456&#39;) where user=&#39;root&#39; and Host = &#39;localhost&#39;; --修改用户密码flush privileges; --刷新权限show databases; --查看所有数据库mysql&gt; use college --切换数据库+use关键字+数据库名Database changedshow tables; --查看数据库中所有的表describe student; --显示数据库中所有表信息create database stuRepo; --创建一个数据库exit; --退出连接</code></pre><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><ul><li><strong>创库</strong><pre><code class="lang-sql">CREATE DATABASE [IF NOT EXIST] stuRepo;</code></pre></li><li><strong>删库</strong><pre><code class="lang-sql">DROP DATABASE [IF EXIST] stuRepo;</code></pre></li><li><strong>使用数据库</strong><pre><code class="lang-sql">use &#39;stuRepo&#39;;</code></pre></li><li><strong>查看数据库</strong><pre><code class="lang-sql">show Databases;</code></pre></li></ul><h3 id="数据库的数据类型"><a href="#数据库的数据类型" class="headerlink" title="数据库的数据类型"></a>数据库的数据类型</h3><h4 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h4><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">适用范围</th><th style="text-align:center">大小</th></tr></thead><tbody><tr><td style="text-align:center"><code>tinyint</code></td><td style="text-align:center">极小的整数</td><td style="text-align:center">1字节</td></tr><tr><td style="text-align:center"><code>smallint</code></td><td style="text-align:center">较小的整数</td><td style="text-align:center">2字节</td></tr><tr><td style="text-align:center"><code>mediumint</code></td><td style="text-align:center">中等的整数</td><td style="text-align:center">3字节</td></tr><tr><td style="text-align:center"><code>int</code></td><td style="text-align:center">标准的整数</td><td style="text-align:center">4字节</td></tr><tr><td style="text-align:center"><code>bigint</code></td><td style="text-align:center">较大的整数</td><td style="text-align:center">8字节</td></tr><tr><td style="text-align:center"><code>float</code></td><td style="text-align:center">浮点数</td><td style="text-align:center">4字节</td></tr><tr><td style="text-align:center"><code>double</code></td><td style="text-align:center">双精度浮点数</td><td style="text-align:center">8字节</td></tr><tr><td style="text-align:center"><code>decimal</code></td><td style="text-align:center">字符串形式的浮点数</td></tr></tbody></table></div><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">解释</th><th style="text-align:center">数值范围</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>char</code></td><td style="text-align:center">字符串固定大小的</td><td style="text-align:center">0~255</td></tr><tr><td style="text-align:center"><code>varchar</code></td><td style="text-align:center">可变字符串</td><td style="text-align:center">0~65535</td><td style="text-align:center">最常用的变量如String</td></tr><tr><td style="text-align:center"><code>tinytext</code></td><td style="text-align:center">微型文本</td><td style="text-align:center">2^8-1</td></tr><tr><td style="text-align:center"><code>text</code></td><td style="text-align:center">文本串</td><td style="text-align:center">2^16-1</td><td style="text-align:center">存储大文本</td></tr></tbody></table></div><h4 id="时间日期型"><a href="#时间日期型" class="headerlink" title="时间日期型"></a>时间日期型</h4><ul><li>出自<code>java.util.Date</code>包</li><li>|类型|格式|解释|<br>|:——:|:——:|:——-:|<br>|<code>date</code>|YYYY-MM-DD|日期格式|<br>|<code>time</code>|HH:mm:ss|时间格式|<br>|<code>datatime</code>|YYYY-MM-DD HH:mm:ss|最常见的时间格式|<br>|<code>timestamp</code>|即时间戳|1970.1.1至今的毫秒数|<br>|<code>year</code>||年份表示|<h4 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h4></li><li>无数值</li><li>不可使用<code>NULL</code>进行运算，结果为<code>NULL</code></li></ul><h3 id="数据库字段属性"><a href="#数据库字段属性" class="headerlink" title="数据库字段属性"></a>数据库字段属性</h3><ul><li><strong>Unsigned</strong><ul><li>无符号的整数</li><li>声明了该列不可为 <strong>负数</strong></li></ul></li><li><strong>zerofill</strong><ul><li>0填充的</li><li>不足的位数，使用0来填充</li></ul></li><li><strong>自增</strong>(AUTO_INCREMENT)<ul><li>通常理解为自增，自动在上一条记录的属性上加1（默认）</li><li>通常用来设计唯一的主键(如id、index等)，必须为整数类型</li><li>可以自定义设计主键自增的起始值和步长</li></ul></li><li><strong>非空</strong>(NOT_NULL)<ul><li>若字段设置为非空，则不给该字段赋值，系统报错</li><li>NULL，不填写默认为空</li></ul></li><li><strong>默认</strong>(DEFAULT)<h2 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h2><h3 id="创表"><a href="#创表" class="headerlink" title="创表"></a>创表</h3><pre><code class="lang-sql">--业务：创建一个school数据库--然后创建学生表，使用SQL语句创建--关键点：--使用英文的(),表名和字段名尽量使用``括起来--AUTO_INCREMENT自增--PRIMARY KEY 主键，一个表只有一个主键CREATE DATABASE IF NOT EXISTS `school`;use `school`;CREATE TABLE IF NOT EXISTS `student` {`id` int(6) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,`name` VARCHAR(22) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,`pwd` VARCHAR(30) NOT NULL DEFAULT &#39;123&#39; COMMENT &#39;密码&#39;,`sex` VARCHAR(2) NOT NULL DEFAULT &#39;女&#39; COMMENT &#39;性别&#39;,`birthday` DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,PRIMARY KEY(`id`)}ENGINE=INNOOB DEFAULT CHARSET=UTF8</code></pre><h4 id="标准格式"><a href="#标准格式" class="headerlink" title="标准格式"></a>标准格式</h4><pre><code class="lang-sql">CREATE TABLE [IF NOT EXISTS] `表名`{`字段名1` 列类型 [属性] [索引] [注释],`字段名2` 列类型 [属性] [索引] [注释],...}[表类型] [字符集设置] [注释]</code></pre><h3 id="查看库与表的语句"><a href="#查看库与表的语句" class="headerlink" title="查看库与表的语句"></a>查看库与表的语句</h3><pre><code class="lang-sql">SHOW CREATE DATABASE school -- 查看创建数据库的语句SHOW CREATE TABLE student -- 查看student数据库中表的定义语句DESC student -- 显示表的结构</code></pre><h3 id="数据表类型"><a href="#数据表类型" class="headerlink" title="数据表类型"></a>数据表类型</h3><h4 id="数据库引擎"><a href="#数据库引擎" class="headerlink" title="数据库引擎"></a>数据库引擎</h4></li><li><strong>定义：</strong><ul><li>==数据库引擎是用于存储、处理和保护数据的核心服务。利用数据库引擎可控制访问权限并快速处理事务，从而满足企业内大多数需要处理大量数据的应用程序的要求。 使用数据库引擎创建用于联机事务处理或联机分析处理数据的关系数据库。==</li></ul></li><li>目前常用的（必记的）<ul><li><code>INNODB</code> 默认使用</li><li><code>MYISAM</code> 早期使用的</li></ul></li><li><strong>两者区别</strong></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><code>MYISAM</code></th><th style="text-align:center"><code>INNODB</code></th></tr></thead><tbody><tr><td style="text-align:center">事务支持</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">数据行锁定</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">外键约束</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">全文索引</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">表空间的大小</td><td style="text-align:center">较小</td><td style="text-align:center">较大，约为MYISAM的两倍</td></tr></tbody></table></div><ul><li><strong>使用特点</strong><ul><li>对于<code>MYISAM</code>而言，可节约空间，高速运行</li><li>对于<code>INNODB</code>而言，安全性高，可实现多表多用户操作</li></ul></li></ul><blockquote><p>在物理环境中存在的位置<br>索引的数据库文件都存储在data文件目录下，一个文件夹对应一个数据库<br>本质上是文件的存储</p></blockquote><ul><li><strong>两个数据库引擎在物理上的区别</strong><ul><li><code>INNODB</code>在数据库表中只有一个<code>*.frm</code>文件，以及上级目录下的<code>ibdata1</code>文件</li><li><code>MYISAM</code>对应文件<br>|文件后缀|解释|<br>|:—-:|:——:|<br>|<code>*.frm</code>|表结构定义文件|<br>|<code>*.MYD</code>|数据文件data|<br>|<code>*.MYI</code>|索引文件index|</li></ul></li></ul><h3 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h3><ul><li><strong>设置编码(创表的SQL语句中)</strong><pre><code class="lang-sql">CHARSET=utf8</code></pre></li><li>不设置utf-8，==MYSQL默认编码为Latin1，且不支持中文==</li><li>也可在<code>my.ini</code>配置文件中设置默认编码（但不推荐，因为非本机操作数据库会失效）<pre><code class="lang-ini">character-set-server=utf8</code></pre><h3 id="增加与删除表字段"><a href="#增加与删除表字段" class="headerlink" title="增加与删除表字段"></a>增加与删除表字段</h3><h4 id="修改表名称"><a href="#修改表名称" class="headerlink" title="修改表名称"></a>修改表名称</h4></li><li><strong>举例：</strong><pre><code class="lang-sql">ALTER TABLE person RENAME AS man</code></pre></li><li><strong>标准格式</strong><pre><code class="lang-sql">ALTER TABLE [表名称]  RENAME AS [新表的名称]</code></pre><h4 id="增加表字段"><a href="#增加表字段" class="headerlink" title="增加表字段"></a>增加表字段</h4></li><li><strong>举例：</strong><pre><code class="lang-sql">ALTER TABLE teacher ADD age INT(11)--增加teacher表的年龄字段</code></pre></li><li><strong>标准格式:</strong><pre><code class="lang-sql">ALTER TABLE [表名称] ADD [字段名] [字段属性]</code></pre></li></ul><h4 id="修改表字段-修改约束与重命名"><a href="#修改表字段-修改约束与重命名" class="headerlink" title="修改表字段(修改约束与重命名)"></a>修改表字段(修改约束与重命名)</h4><ul><li><strong>举例：</strong><pre><code class="lang-sql">ALTER TABLE JOB MODIFY salary int(12) --修改约束</code></pre></li><li><strong>标准格式：</strong><pre><code class="lang-sql">ALTER TABLE [表名称] MODIFY [字段名] [字段属性]</code></pre></li><li><strong>举例：</strong><pre><code class="lang-sql">ALTER TABLE JOB CHANGE salary salary1 int(12) --字段重命名 salary为原字段名</code></pre><h4 id="删除表字段"><a href="#删除表字段" class="headerlink" title="删除表字段"></a>删除表字段</h4></li><li><strong>举例：</strong><pre><code class="lang-sql">ALTER TABLE JOB DROP salary1</code></pre></li><li><strong>标准格式：</strong><pre><code class="lang-sql">ALTER TABLE [表名称] DROP [字段名]</code></pre></li></ul><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><ul><li><strong>标准格式：</strong><pre><code class="lang-sql">DROP TABLE IF EXISTS JOB</code></pre></li></ul><h2 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h2><h3 id="外键-Foreign-key"><a href="#外键-Foreign-key" class="headerlink" title="外键(Foreign key)"></a>外键(Foreign key)</h3><pre><code class="lang-sql">-- 为学生表的gradeid添加年级表的 gradeid外键CREATE DATABASE IF NOT EXISTS `school`;use `school`;CREATE TABLE IF NOT EXISTS `student` {  `id` int(6) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,  `name` VARCHAR(22) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,  `pwd` VARCHAR(30) NOT NULL DEFAULT &#39;123&#39; COMMENT &#39;密码&#39;,  `sex` VARCHAR(2) NOT NULL DEFAULT &#39;女&#39; COMMENT &#39;性别&#39;,  `gradeid` int(15) NOT NULL COMMENT &#39;年级&#39;,  `birthday` DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,  PRIMARY KEY(`id`)}ENGINE=INNOOB DEFAULT CHARSET=UTF8--添加外键ALTER TABLE `student`ADD CONSTRAINT `FK_gradeid` FOREIGN KEY(`gradeid`) REFERENCES `grade`(`gradeid`);</code></pre><ul><li><strong>标准格式：</strong><pre><code class="lang-sql">ALTER TABLE 表名  ADD CONSTRAINT 约束名 FOREIGN KEY(作为外键的列) REFERENCES 引用的表名(引用的表的字段);</code></pre><ul><li>==不建议使用外键约束，而是在应用层进行代码的约束==</li><li>==外键约束对后期程序的开发有很大的影响，对<code>update</code>和<code>delete</code>操作都会有更大的麻烦==</li></ul></li></ul><h3 id="DML-数据管理语言"><a href="#DML-数据管理语言" class="headerlink" title="DML 数据管理语言"></a>DML 数据管理语言</h3><h4 id="添加insert"><a href="#添加insert" class="headerlink" title="添加insert"></a>添加insert</h4><pre><code class="lang-sql">insert into `表名`(`字段名1`,`字段名2`,`字段名3`)values(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;)</code></pre><ul><li>==左边字段的个数与右边值的个数要相同，并且数据类型要一一对应==</li></ul><h4 id="修改update"><a href="#修改update" class="headerlink" title="修改update"></a>修改update</h4><pre><code class="lang-sql">update `表名` set `列名1` = `值1`,`列名2` = `值2` where 条件</code></pre><ul><li>==没有where子句后的条件，会默认修改所有列==</li><li>==value既可以是一个值，也可以是一个变量==</li></ul><h4 id="删除delete"><a href="#删除delete" class="headerlink" title="删除delete"></a>删除delete</h4><pre><code class="lang-sql">delete from 表名 where 条件--where子句可写可不写，按照实际要求决定，where实际上相当于一个删除的约束--不写where则会删除整个表的数据</code></pre><h4 id="清空truncate"><a href="#清空truncate" class="headerlink" title="清空truncate"></a>清空truncate</h4><ul><li><strong>只是清空表里的数据，表的结构和字段不会改变</strong></li></ul><pre><code class="lang-sql">--清空JOB表truncate `JOB`</code></pre><h4 id="delete与truncate的区别"><a href="#delete与truncate的区别" class="headerlink" title="delete与truncate的区别"></a>delete与truncate的区别</h4><ul><li>==都可删除数据，但都不影响表结构==</li><li>==不同点：==<ul><li><code>truncate</code> 重新设置自增列，计时器会归零 不会影响事务</li></ul></li></ul><h3 id="DQL数据查询语言"><a href="#DQL数据查询语言" class="headerlink" title="DQL数据查询语言"></a>DQL数据查询语言</h3><ul><li><p>数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE子句组成的查询块：</p><ul><li><p>SELECT &lt;字段名表&gt;</p></li><li><p>FROM &lt;表或视图名&gt;</p></li><li><p>WHERE &lt;查询条件&gt;</p><h4 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h4><p>```sql<br>— 查询全部学生<br>select * from student</p></li></ul></li></ul><p>— 查询指定字段<br>select <code>id</code>,<code>name</code> from student</p><p>— 别名，为某个表或字段起一个别名<br>select <code>employeeName</code> AS 员工姓名 from employee AS e</p><p>— 函数 Concat（a,b）<br>select CONCAT(‘员工姓名：’,employeeName) as 新列名 from employee<br>— 输出的格式会为 员工姓名：张三</p><pre><code>#### 去重distinct- 筛选出表中重复的数据，只显示一个```sqlselect distinct `employeeNo` from employee</code></pre><h4 id="Where条件子句"><a href="#Where条件子句" class="headerlink" title="Where条件子句"></a>Where条件子句</h4><ul><li>作用：为了筛选出需要的数据，即添加条件</li><li>==通过逻辑运算符配合使用！！！==<br>|运算符|语法|描述|<br>|:—-:|:—-:|:——:|<br>|<code>and</code>&nbsp;<code>&amp;&amp;</code>| a&nbsp;<code>and</code>&nbsp;b&nbsp;&nbsp;a<code>&amp;&amp;</code>b|逻辑与，两个都为真，结果为真|<br>|<code>or</code>&nbsp;<code>||</code>|a&nbsp;<code>or</code>&nbsp;b&nbsp;&nbsp;a&nbsp;<code>||</code>&nbsp;b|逻辑或，其中一个为真，则结果为真|<br>|<code>not</code>&nbsp;<code>!</code>|<code>not</code>&nbsp;a&nbsp;&nbsp;<code>!</code>&nbsp;a|逻辑非，真为假，假为真|</li></ul><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><ul><li><p>在 MySQL 中，LIKE 关键字主要用于搜索匹配字段中的指定内容。其语法格式如下：</p><ul><li><code>[NOT] LIKE  &#39;字符串&#39;</code></li></ul></li><li><p>其中：</p><ul><li><p><code>NOT</code> ：可选参数，字段中的内容与指定的字符串不匹配时满足条件。<br>字符串：指定用来匹配的字符串。“字符串”可以是一个很完整的字符串，也可以包含通配符。</p></li><li><p><code>LIKE</code>&nbsp; 关键字支持百分号“%”和下划线“_”通配符。</p></li></ul></li><li>==通配符是一种特殊语句，主要用来模糊查询。当不知道真正字符或者懒得输入完整名称时，可以使用通配符来代替一个或多个真正的字符。==</li><li><strong>模糊查询通常会使用到比较运算符</strong><br>|运算符|语法|描述|<br>|:——:|:——:|:——:|<br>|<code>IS NULL</code>|a&nbsp;is&nbsp;null|如果操作符为<code>NULL</code>,则结果为真|<br>|<code>IS NOT NULL</code>|a&nbsp;is&nbsp;not&nbsp;null|如果操作符不为<code>NULL</code>,则结果为真|<br>|<code>BETWEEN</code>|a&nbsp;between&nbsp;b&nbsp;and&nbsp;c|若a在b与c之间，则结果为真|<br>|<code>LIKE</code>|a&nbsp;like&nbsp;b|如果a匹配b，则结果为真|<br>|<code>IN</code>|a&nbsp;in&nbsp;(a1,a2,a3…)|假设a在a1，或a2…其中的某一个值中，则结果为真|</li><li><p><strong>模糊查询的SQL语句实例</strong></p><pre><code class="lang-sql">-- 查询姓刘的同学-- like结婚 %（岱庙0到任意个字符） _（代表一个字符）SELECT `studentId`,`name` FROM `student`WHERE `name` LIKE &#39;刘%&#39;-- 查询姓刘的同学，姓后面为一个字的SELECT `studentId`,`name` FROM `student`WHERE `name` LIKE &#39;刘_&#39;-- 查询姓刘的同学，姓后面为两个字的SELECT `studentId`,`name` FROM `student`WHERE `name` LIKE &#39;刘__&#39;-- 查询名字中间为欣字的同学 %欣%SELECT `studentId`,`name` FROM `student`WHERE `name` LIKE &#39;%欣%&#39;-- 查询1001、1002、1003号学员SELECT `studentId`,`name` FROM `student`WHERE `studentId` IN (1001,1002,1003)-- 查询地址为空的学生 nullSELECT `studentId`,`name` FROM `student`WHERE `address`=&#39;&#39; OR `address` IS NULL-- 查询有出生日期的同学 not nullSELECT `studentId`,`name` FROM `student`WHERE `birthday` IS NOT NULL</code></pre></li></ul><h4 id="联表查询（重要！）"><a href="#联表查询（重要！）" class="headerlink" title="联表查询（重要！）"></a>联表查询（重要！）</h4><ul><li><strong>联表查询的种类</strong></li></ul><p><img data-src="https://s3.ax1x.com/2021/01/18/syrWa4.jpg" alt="joinlist"></p><ul><li><code>inner join</code> <strong>内连接</strong> ，两个表中都匹配时返回行</li><li><p><code>left join</code> <strong>左连接</strong> ，即使左侧表中没有匹配项，也返回左侧表中的所有行。</p></li><li><p><code>RIGHT JOIN</code> <strong>右连接</strong> ， 即使左侧表中没有匹配项，也返回右侧表中的所有行。</p></li><li><p><code>FULL JOIN</code> <strong>全连接</strong>， 它合并了左右外部联接的结果。</p></li><li><p>==联接的表将包含两个表中的所有记录，并为任一侧缺少的匹配项填充NULL。==</p></li><li><p><code>SELF JOIN</code> <strong>自连接</strong>， 用于将一个表连接到自身，就好像该表是两个表一样，在SQL语句中临时重命名至少一个表。</p></li><li><p><code>CARTESIAN JOIN</code> <strong>笛卡尔连接</strong> 从两个或多个联接表中返回记录集的笛卡尔积。</p></li><li><p><strong>联表图解</strong></p></li></ul><p><img data-src="https://s3.ax1x.com/2021/01/18/sysNS1.png" alt="joindetails"></p><ul><li><p><strong>代码示例：</strong></p><pre><code class="lang-sql">-- inner joinSELECT s.studentId ,studentName,subNo,stuRes FROM student AS s INNER JOIN result AS r ON s.studentId = r.studentId--right joinSELECT s.studentId ,studentName,subNo,stuRes FROM student AS s RIGHT JOIN result AS r ON s.studentId = r.studentId  --left joinSELECT s.studentId ,studentName,subNo,stuRes FROM student AS s LEFT JOIN result AS r ON s.studentId = r.studentId</code></pre></li></ul><h4 id="分页和排序"><a href="#分页和排序" class="headerlink" title="分页和排序"></a>分页和排序</h4><ul><li><strong>排序：</strong><pre><code class="lang-sql">-- 排序： 升序ASC，降序DESC-- ORDER BY 通过字段排序-- 查询的结构根据成绩降序SELECT s.`studentId`,`name`,`subName`,`subRes` FROM student sINNER JOIN `result` rON s.`studentId` = r.`studentId`INNER JOIN `subject` subON r.`subId` = sub.`subId`WHERE `subName` = `数据库`ORDER BY subRes ASC</code></pre></li><li><p><strong>分页：</strong></p><pre><code class="lang-sql">-- 分页的目的：让用户观看更加舒服，也减轻数据库的压力，无需一次性输出所有数据-- 分页的效果：在一个网页中显示部分数据，给数据分页显示-- 语法：limit 起始值,页面大小-- 例如：limit 0,3 即从第一个数据到第四个数据SELECT s.`studentId`,`name`,`subName`,`subRes` FROM student sINNER JOIN `result` rON s.`studentId` = r.`studentId`INNER JOIN `subject` subON r.`subId` = sub.`subId`WHERE `subName` = `数据库`ORDER BY subRes ASCLIMIT 0,8-- 第一页 limit 0,5 (1-1)*5-- 第二页 limit 5,5 (2-1)*5-- 第n 页 limit     (n-1)*pagesize,pagesize-- pageSize:页面大小-- (n-1)*pageSize:起始值-- n：当前值-- 数据总数/页面大小 =总页数</code></pre></li></ul><h4 id="分组和过滤"><a href="#分组和过滤" class="headerlink" title="分组和过滤"></a>分组和过滤</h4><pre><code class="lang-sql">ORDER BY()HAVING()</code></pre><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><ul><li>子查询是<font color=red>将一个查询语句嵌套在另一个查询语句中；</font></li><li>在特定情况下，一个查询语句的条件需要另一个查询语句来获取，==内层查询（inner query）语句==的查询结果，可以为==外层查询（outer query）语句==提供查询条件。</li><li><strong>代码示例</strong><pre><code class="lang-sql">SELECT DISTINCT s.`studentId`,`name`FROM student sINNER JOIN result rON r.studentId = s.studentIdWHERE `studentRes`&gt;=80 AND `subId` =(  SELECT subId FROM `subject`  WHERE `subName` =&#39;高数&#39;)</code></pre></li></ul><h3 id="MySQL常用函数"><a href="#MySQL常用函数" class="headerlink" title="MySQL常用函数"></a>MySQL常用函数</h3><h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><pre><code class="lang-sql">SELECT ABS(-10) --绝对值SELECT CEILING(8.4) --向上取整SELECT FLOOR(8.4) --向下取整SELECT RAND() --返回一个0~1内的随机数SELECT SIGN(10) --判断一个数的符号  负数返回-1 正数返回1</code></pre><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><pre><code class="lang-sql">SELECT CHAR_LENGTH(&#39;adhsakdajsx&#39;) --求字符串长度SELECT CONCAT(&#39;We&#39;,&#39;are&#39;,&#39;family&#39;) --拼接字符串 WearefamilySELECT INSERT(&#39;这是一个美好的故事&#39;,5,6,7,&#39;动人的&#39;) --查询，从某个位置开始替换长度 这是一个动人的故事SELECT LOWER(&#39;PETERPAN&#39;) --小写字母SELECT UPPER(&#39;peterpan&#39;) --大写字母SELECT INSTR(&#39;peterpan&#39;,&#39;e&#39;) --返回第一个出现的子串的索引SELECT REPLACE(&#39;未上岸&#39;,&#39;未&#39;,&#39;已&#39;) --替换出现指定的字符串 已上岸SELECT SUBSTR(&#39;只要努力就能成功&#39;,3,8) --返回指定的子字符串 努力就能成功SELECT REVERSE(&#39;大家早上好&#39;) --反转 好上早家大</code></pre><h4 id="时间与日期函数"><a href="#时间与日期函数" class="headerlink" title="时间与日期函数"></a>时间与日期函数</h4><pre><code class="lang-sql">SELECT CURRENT_DATE() --获取当前日期SELECT CURDATE() --获取当前日期SELECT NOW() --获取当前时间SELECT LOCALTIME() --本地时间SELECT SYSDATE() --系统时间SELECT YEAR(NOW()) --当前年份SELECT MONTH(NOW()) --当前月份</code></pre><h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><pre><code class="lang-sql">SELECT SYSTEM_USER() -- 获取系统管理者SELECT USER()  --获取用户SELECT VERSION()  --获取版本</code></pre><h3 id="常用的聚合函数"><a href="#常用的聚合函数" class="headerlink" title="常用的聚合函数"></a>常用的聚合函数</h3><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>count()</code></td><td style="text-align:center">计数</td></tr><tr><td style="text-align:center"><code>sum()</code></td><td style="text-align:center">求和</td></tr><tr><td style="text-align:center"><code>avg()</code></td><td style="text-align:center">求平均值</td></tr><tr><td style="text-align:center"><code>max()</code></td><td style="text-align:center">求最大值</td></tr><tr><td style="text-align:center"><code>min()</code></td><td style="text-align:center">求最小值</td></tr></tbody></table></div><blockquote><p>具体参考MYSQL官方文档：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2Z1bmN0aW9uLXJlc29sdXRpb24uaHRtbA==">https://dev.mysql.com/doc/refman/8.0/en/function-resolution.html</span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置与管理DNS服务器</title>
      <link href="/my-blog/%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AE%A1%E7%90%86DNS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/my-blog/%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AE%A1%E7%90%86DNS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS服务器的配置与管理"><a href="#DNS服务器的配置与管理" class="headerlink" title="DNS服务器的配置与管理"></a>DNS服务器的配置与管理</h1><h2 id="1-初识DNS"><a href="#1-初识DNS" class="headerlink" title="1.初识DNS"></a>1.初识DNS</h2><ul><li>DNS(Domain Name System)域名系统，DNS服务器的作用就是 <strong>将域名转换成IP地址</strong></li><li>为客户机对域名的查询提供该域名的IP地址，便于用户记住网站的地址（把难记的IP地址转换成容易记住的域名，比如：<code>www.google.com</code>）</li></ul><h2 id="2-域名系统的结构"><a href="#2-域名系统的结构" class="headerlink" title="2.域名系统的结构"></a>2.域名系统的结构</h2><h3 id="2-1域名命名规则"><a href="#2-1域名命名规则" class="headerlink" title="2.1域名命名规则"></a>2.1域名命名规则</h3><ul><li>对于域名和主机名，只可以使用数字或字母以及<code>-</code>号组成，Windows服务器不区分字母大小写，UNIX服务器则相反</li></ul><h3 id="2-2层次结构"><a href="#2-2层次结构" class="headerlink" title="2.2层次结构"></a>2.2层次结构</h3><p><img data-src="https://i.loli.net/2020/10/29/l417MRnUW8Kcbgq.png" alt="domainarch.png"></p><h4 id="2-2-1-根域"><a href="#2-2-1-根域" class="headerlink" title="2.2.1 根域"></a>2.2.1 根域</h4><ul><li>根域名服务器不保存任何网址，用<code>.</code>来表示</li></ul><h4 id="2-2-2顶级域"><a href="#2-2-2顶级域" class="headerlink" title="2.2.2顶级域"></a>2.2.2顶级域</h4><ul><li>“一域之下，万域之上”，顶级域存在于根域之下，顶级域的数量是确定的，一般分为机构域和地理域<br>|域名|解释|<br>|—-|——|<br>|com|商业机构|<br>|edu|教育机构|<br>|gov|政府机构|<br>|net|网络服务机构|<br>|org|非盈利性组织|<br>|mil|军事部门|<br>|cn、us、hk等|国家或地区|</li></ul><h4 id="2-2-3子域"><a href="#2-2-3子域" class="headerlink" title="2.2.3子域"></a>2.2.3子域</h4><ul><li>除了根域和顶级域以外，其他的域都称为子域</li><li>一个与可以有许多子域</li><li>例如:<code>www.xxx.edu.com</code> edu是com的子域，而xxx也可以称为edu的子域，所有说子域只是相对的</li></ul><h2 id="3-根域名服务器的数量"><a href="#3-根域名服务器的数量" class="headerlink" title="3.根域名服务器的数量"></a>3.根域名服务器的数量</h2><ul><li>对于IPv4来说，全球一共有13台，一台主根服务器，位于美国，其他12台均为辅根服务器(9台在美国，1台在日本，欧洲2台)</li><li>所有根服务器有ICANN(互联网名称与数字地址分配地址分配机构)统一管理</li><li>对于IPv6，全球25台</li></ul><h2 id="4-DNS实验"><a href="#4-DNS实验" class="headerlink" title="4.DNS实验"></a>4.DNS实验</h2><h3 id="4-1安装DNS服务器"><a href="#4-1安装DNS服务器" class="headerlink" title="4.1安装DNS服务器"></a>4.1安装DNS服务器</h3><ul><li>该实验基于Windows Server2008 R2版本的网络操作系统</li><li>首先在VMware虚拟机上安装好Windows Server2008 R2系统</li><li><p>为该系统配置IP及子网掩码</p><p><img data-src="https://i.loli.net/2020/10/29/DmdZLzkpTB24Pyb.png" alt="shiyan2.png"></p><p><img data-src="https://i.loli.net/2020/10/29/Xi8SAZyjqB1peK3.png" alt="shiyan3.png"></p><p><img data-src="https://i.loli.net/2020/10/29/IXpbYJmVO3N1W2j.png" alt="shiyan4.png"></p></li><li><p>进入该系统后， <strong>选择服务器角色</strong>， <strong>勾选DNS服务器</strong></p></li><li><p>DNS服务器安装完成！</p><p> <img data-src="https://i.loli.net/2020/10/29/3yMbtwPDK8SWdYC.png" alt="shiyan1.png"></p></li></ul><h3 id="4-2创建正向主要区域"><a href="#4-2创建正向主要区域" class="headerlink" title="4.2创建正向主要区域"></a>4.2创建正向主要区域</h3><ul><li><p>首先打开DNS管理器，右键选中正向查找区域</p><p><img data-src="https://i.loli.net/2020/10/29/IEFmRiCkc3vBZNg.png" alt="shiyan5.png"></p></li><li><p>选择新建区域</p><p><img data-src="https://i.loli.net/2020/10/29/Pk5no72i6hC4lA1.png" alt="shiyan6.png"></p></li><li><p>选择主要区域</p><p><img data-src="https://i.loli.net/2020/10/29/uqwFcBtsDX7VhNk.png" alt="shiyan7.png"></p></li><li><p>输入区域名称</p><p><img data-src="https://i.loli.net/2020/10/29/pBntJED63kTFilP.png" alt="shiyan8.png"></p></li><li><p>创建完成</p><p><img data-src="https://i.loli.net/2020/10/29/3sLBWSliApq5Pwg.png" alt="shiyan9.png"></p></li></ul><h3 id="4-3基于IP地址，发布FTP站点"><a href="#4-3基于IP地址，发布FTP站点" class="headerlink" title="4.3基于IP地址，发布FTP站点"></a>4.3基于IP地址，发布FTP站点</h3><ul><li><p>进入我的电脑，在硬盘下新建文件夹ftp</p><p><img data-src="https://i.loli.net/2020/10/29/5fs6zkWBKOEAMP8.png" alt="shiyan10.png"></p></li><li><p>在该文件夹下创建几个文档文件</p><p><img data-src="https://i.loli.net/2020/10/29/nDifdzgXUQCoLHS.png" alt="shiyan11.png"></p></li><li><p>进入DNS管理器，在创建好的正向主要区域下右键选择新建主机,并输入本机的IP地址</p><p><img data-src="https://i.loli.net/2020/10/29/EQNRm4SehZK2PnW.png" alt="shiyan12.png"></p></li><li><p>然后进入IIS管理器</p><p><img data-src="https://i.loli.net/2020/10/29/u5ab3x4iPDzEeOq.png" alt="shiyan13.png"></p></li><li><p>在网络文件夹中点击右键新建FTP站点,名称为ftp，路径即之前在硬盘下创建的ftp文件夹的绝对路径</p><p>  <img data-src="https://i.loli.net/2020/10/29/yMfbtx9JLzXSEjW.png" alt="shiyan14.png"></p></li><li><p>配置FTP站点</p><p>  <img data-src="https://i.loli.net/2020/10/29/ILfi8VXmW1kw45o.png" alt="shiyan15.png"></p><p>  <img data-src="https://i.loli.net/2020/10/29/taS4cHZ5RDJb3Lv.png" alt="shiyan16.png"></p></li><li><p>打开IE浏览器，输入网址<code>ftp://192.168.200.107</code>,访问成功，实验完成！</p><p>  <img data-src="https://i.loli.net/2020/10/29/gKyWNBlEb1jC4eV.png" alt="shiyan17.png"></p></li></ul><h3 id="4-4基于域名发布FTP站点"><a href="#4-4基于域名发布FTP站点" class="headerlink" title="4.4基于域名发布FTP站点"></a>4.4基于域名发布FTP站点</h3><ul><li>该实验可基于上面4.3的ftp文件夹来做</li><li><p>一样的创建好FTP站点，不过此时要启用虚拟主机名<code>ftp.peterpan.com</code></p><p> <img data-src="https://i.loli.net/2020/10/29/iaSMQvWNgo8t1yp.png" alt="shiyan18.png"></p></li><li><p>直接在IE浏览器中输入<code>ftp://ftp.peterpan.com</code></p><p>  <img data-src="https://i.loli.net/2020/10/29/EkNwFOvcPqCATVm.png" alt="shiyan19.png"></p></li><li>实验完成！</li></ul><h3 id="4-5多个IP地址发布多个FTP站点"><a href="#4-5多个IP地址发布多个FTP站点" class="headerlink" title="4.5多个IP地址发布多个FTP站点"></a>4.5多个IP地址发布多个FTP站点</h3><ul><li><p>在硬盘下创建文件夹<code>myftp</code></p><p>  <img data-src="https://i.loli.net/2020/10/29/VSLWq98XkxnhZJe.png" alt="shiyan20.png"></p></li><li><p>在<code>myftp</code>下创建三个文件夹</p><p>  <img data-src="https://s3.ax1x.com/2021/01/09/sMKYuj.png" alt="shiyan21.png"></p></li><li><p>在每个子文件夹中新建三个文本文档文件</p><p>  <img data-src="https://s3.ax1x.com/2021/01/09/sMKw5V.png" alt="shiyan22.png"></p></li><li><p>打开网络连接，在已有的IP地址中，点击高级，添加两个IP地址</p><p>  <img data-src="https://s3.ax1x.com/2021/01/09/sMK4PK.png" alt="shiyan23.png"></p></li><li><p>添加IP地址<code>192.168.200.108</code></p><p>  <img data-src="https://s3.ax1x.com/2021/01/09/sMKoxe.png" alt="shiyan24.png"></p></li><li><p>添加IP地址<code>192.168.200.109</code></p><p>  <img data-src="https://s3.ax1x.com/2021/01/09/sMK7KH.png" alt="shiyan25.png"></p></li><li><p>参考实验4.3的实验步骤,添加三个ftp站点(ftp站点配置与4.3实验相同)</p><ul><li>其中ftp1，对应107主机</li><li>其中ftp2，对应108主机</li><li><p>其中ftp3，对应109主机</p><p><img data-src="https://s3.ax1x.com/2021/01/09/sMKLVI.png" alt="shiyan26.png"></p></li></ul></li><li><p>在IE浏览器中分别输入</p><ul><li><code>ftp://192.168.200.107</code> </li><li><code>ftp://192.168.200.108</code> </li><li><p><code>ftp://192.168.200.109</code></p><p><img data-src="https://s3.ax1x.com/2021/01/09/sMKvPf.png" alt="shiyan27.png"></p><p><img data-src="https://s3.ax1x.com/2021/01/09/sMMCrj.png" alt="shiyan28.png"></p><p><img data-src="https://s3.ax1x.com/2021/01/09/sMMkaq.png" alt="shiyan29.png"></p></li></ul></li><li><p>实验完成！！！</p></li></ul><h3 id="4-6基于端口发布FTP站点"><a href="#4-6基于端口发布FTP站点" class="headerlink" title="4.6基于端口发布FTP站点"></a>4.6基于端口发布FTP站点</h3><ul><li>在4.5的基础上，选择一个ftp站点</li><li><p>点击绑定，修改端口号为2222</p><p><img data-src="https://s3.ax1x.com/2021/01/09/sMMAI0.png" alt="shiyan30.png"> </p><p><img data-src="https://s3.ax1x.com/2021/01/09/sMMZGT.png" alt="shiyan31.png"></p></li><li><p>在IE浏览器中输入<code>ftp://192.168.200.107:2222</code></p><p><img data-src="https://s3.ax1x.com/2021/01/09/sMMmzF.png" alt="shiyan32.png"></p></li><li><p>访问成功，实验完成！！！</p></li></ul><h3 id="4-7创建虚拟目录"><a href="#4-7创建虚拟目录" class="headerlink" title="4.7创建虚拟目录"></a>4.7创建虚拟目录</h3><ul><li>在4.4的基础上，选择创建好的ftp站点</li><li>找到该站点在本机的位置(绝对路径)</li><li>在该路径下在新建一个名为<code>img</code>的文件夹</li><li><p>回到IIS管理器，选中之前选择好的站点，点击右键添加虚拟目录,别名<code>img</code>，物理路径即img文件夹的绝对路径</p><p>  <img data-src="https://s3.ax1x.com/2021/01/09/sMMML9.png" alt="shiyan33.png"></p><p>  <img data-src="https://s3.ax1x.com/2021/01/09/sMMGi6.png" alt="shiyan34.png"></p></li><li><p>在IE浏览器中，输入<code>ftp://ftp.peterpan.com/img</code></p><p>  <img data-src="https://i.loli.net/2020/10/29/wikF78Ls59A1Ucj.png" alt="shiyan35.png"></p></li><li><p>访问成功，实验完成！！！</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE小结</title>
      <link href="/my-blog/Java/JavaSE%E5%B0%8F%E7%BB%93/"/>
      <url>/my-blog/Java/JavaSE%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="语言背景"><a href="#语言背景" class="headerlink" title="语言背景"></a>语言背景</h2><ul><li>Java于1995年诞生，拥有跨平台、面向对象、泛型编程的特性，广泛应用于企业级Web引用开发和移动应用开发</li><li>Java有三个版本<ul><li>JavaSE(标准版)</li><li>JavaEE(企业版)</li><li>JavaME(微型版)</li></ul></li><li>2006年发布Hadoop</li><li>JDK：java开发工具包，里面包含了各种用于java程序开发的基本工具包</li><li>JRE：java运行环境</li></ul><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释： <code>//</code></li><li>多行注释： <code>/**/</code></li><li>文档注释： <code>/** */</code></li></ul><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>标识符即关键字，如： <code>public</code>、<code>finally</code>等</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p><strong>基本数据类型</strong></p><ul><li><strong>整型</strong><ul><li>byte</li><li>short</li><li>int</li><li>long</li></ul></li><li><strong>字符型</strong><ul><li>char</li></ul></li><li><strong>浮点型</strong><ul><li>double</li><li>int</li></ul></li><li><strong>布尔型</strong><ul><li>boolean</li></ul></li></ul></li><li><p><strong>引用数据类型</strong></p><ul><li>类</li><li>接口</li><li>数组</li></ul></li><li><strong>类型转换</strong><ul><li>自动转换(低转高)</li><li>强制转换(高转低)</li></ul></li></ul><h3 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h3><ul><li><code>type varName [=value];</code></li><li>作用域<ul><li>类变量</li><li>实例变量</li><li>局部变量</li></ul></li><li><p>常量</p><ul><li><code>final MIN_B = 10;</code></li></ul></li><li><p>命名规范</p><ul><li>见名知意</li><li>驼峰命名法</li><li>类命名首字母大写</li><li>常量：&nbsp;大写+下划线</li><li>不使用驼峰命名法</li></ul></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li><strong>算术运算符</strong><ul><li><code>+,-,*,/,%,++,--</code>&nbsp;(加、减、乘、除、取余数、自增、自减)</li></ul></li><li><strong>赋值运算符</strong><ul><li><code>=</code></li></ul></li><li><strong>关系运算符</strong><ul><li><code>&gt;,&lt;,=&gt;,&lt;=,==,!=</code>&nbsp;<code>instance of</code>&nbsp;(大于、小于、大于等于、小于等于、等于、不等于、判断是否为类的实例化对象)</li></ul></li><li><strong>逻辑运算符</strong><ul><li><code>&amp;&amp;,||,!</code>&nbsp;(与、或、非)</li></ul></li><li><strong>位运算符</strong><ul><li><code>&amp;,|,^,~,&gt;&gt;,&lt;&lt;,&gt;&gt;&gt;</code>&nbsp;(位与、位或、位异或、位非、左移、右移、无符号右移)</li></ul></li><li><strong>条件运算符</strong><ul><li><code>?:</code>&nbsp;(表达式 ？ 为真语句 ：为假语句)</li></ul></li><li><strong>扩展运算符</strong><ul><li><code>+=,-=,*=,/=</code>&nbsp;<ul><li><code>a+=2 === a=a+2</code></li><li><code>a*=2 === a==a*2</code></li><li><code>a-=2 === a=a-2</code></li><li><code>a/=2 === a=a/2</code></li></ul></li></ul></li></ul><h3 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h3><ul><li><strong>域名倒写</strong></li><li><strong>防止命名冲突</strong></li><li><code>package</code></li><li><code>import</code></li></ul><h3 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h3><ul><li><strong>JDK帮助文档</strong></li><li><strong>javadoc</strong><ul><li><code>@author</code></li><li><code>@version</code></li><li><code>@since</code></li><li><code>@param</code></li><li><code>@return</code></li><li><code>@thoows</code></li></ul></li></ul><pre><code class="lang-java">  public Class Welcome {    /**    * @author theMan    * @param args    * @since 1.0    * @throws 无异常抛出    */    public static void main(String[] args){      System.out.println(&quot;welcome&quot;);    }  }</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul><li><strong>Scanner</strong><ul><li>用户交互&nbsp;<code>System.in</code></li></ul></li><li><strong>顺序结构</strong><ul><li><code>if</code>单选择结构</li><li><code>if-else</code>多选择结构</li><li><code>switch</code>多选结构<ul><li>jdk支持了<code>String</code>类型</li><li><code>case</code>穿透现象</li><li><code>default</code>默认</li></ul></li></ul></li><li><strong>循环结构</strong><ul><li><code>while</code>避免死循环</li><li><code>do-while</code>先执行，后判断</li><li><code>for</code></li><li>增强for循环</li></ul></li><li><strong>特殊</strong><ul><li><code>break</code>跳出循环</li><li><code>continue</code>终止本次循环</li><li><code>return</code>结束方法运行</li></ul></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><strong>何为方法</strong><ul><li>修饰符 返回值 方法名(参数名){return 返回值;}</li></ul></li><li><strong>方法调用</strong><ul><li><code>类名.方法</code></li><li><code>对象.方法</code></li></ul></li><li><strong>方法重载</strong><ul><li>名字相同，但参数列表不同</li></ul></li><li><strong>命令行传参</strong><ul><li>给main方法传递参数</li></ul></li><li><strong>可变长参数</strong><ul><li><code>...</code></li><li>必须放在最后一个参数</li></ul></li><li><strong>递归</strong></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><strong>数组举例</strong><ul><li><code>new int[10]</code></li><li><code>{1,2,3}</code></li><li>同一数组内的数据必须相同类型</li></ul></li><li><strong>数组的使用</strong><ul><li>通过下标拿到值</li><li><code>ArrayIndexOfBounds</code></li><li>增强的for循环遍历</li></ul></li><li><strong>二维数组</strong><ul><li><code>new int[][]</code></li></ul></li><li><strong>Array工具类</strong></li><li><strong>排序算法</strong><ul><li>冒泡排序</li><li>选择排序</li><li>插入排序</li><li>快速排序</li><li>归并排序</li><li>希尔排序</li><li>堆排序</li><li>桶排序</li></ul></li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li><p><strong>何为面向对象</strong></p><ul><li>把相关的数据和方法组织为一个整体来看待，从更高的层次来进行系统建模，更贴近事物的自然运行模式。</li></ul></li><li><p><strong>类与对象</strong></p><ul><li>类是对象的抽象：即模板Class</li><li>对象是类的实例</li></ul></li><li><strong>构造方法</strong><ul><li>构造的重载<ul><li>默认为无参构造</li><li>如果手动定义了一个有参构造就必须再加一个无参构造</li><li>单例模式，需要构造器私有！</li></ul></li></ul></li><li><strong>new对象</strong><ul><li>栈存放引用</li><li>堆存放具体的对象</li></ul></li><li><strong>封装</strong><ul><li>属性私有，即：<code>get</code>、<code>set</code>方法</li></ul></li><li><p><strong>继承</strong></p><ul><li><code>extends</code></li><li><code>Object</code></li><li>子类拥有父类的全部属性</li><li>方法重写</li><li><code>this</code></li><li><code>super</code></li><li>Java是单继承，只可继承一个父类</li></ul></li><li><p><strong>多态</strong></p><ul><li>父类的引用指向子类的对象&nbsp; <code>Person person = new Student();</code></li><li><code>instance of</code>关键，如果匹配，可以进行类型之间的转换</li></ul></li><li><p><strong>修饰符</strong></p><ul><li><code>public</code></li><li><code>protected</code></li><li><code>private</code></li><li><code>static</code></li><li><code>final</code></li><li><code>abstract</code></li></ul></li><li><p><strong>接口</strong></p><ul><li><code>interface</code></li><li>约束：只能定义方法名</li><li>子类实现接口时，必须重写其方法</li><li>只有一个方法的接口叫做函数式接口，可使用<code>lamda</code>表达式进行简化</li><li>接口比抽象类更抽象</li><li>一个类可以实现多个接口</li></ul></li><li><p><strong>内部类</strong></p><ul><li>局部内部类</li><li>静态内部类</li><li>匿名内部类</li></ul></li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li><p><strong>Throwable</strong></p><ul><li>Exception<ul><li>运行时异常<ul><li><code>1/0</code></li><li><code>ClassNotFound</code></li><li><code>NullPoint</code></li><li><code>UnKonwnType</code></li><li><code>ArrayIndexOutOfBounds</code></li></ul></li><li>检查时异常</li></ul></li><li>Error<ul><li>AWT错误</li><li>JVM错误<ul><li><code>StackOverFlow</code></li><li><code>OutOfMemory</code></li></ul></li></ul></li></ul></li><li><p><strong>五个关键字</strong></p><ul><li><code>try{}</code></li><li><code>catch(){}</code></li><li><code>finally{}</code></li><li><code>throw</code>&nbsp;手动抛出异常</li><li><code>throws</code>&nbsp;方法抛出异常</li></ul></li><li><p><strong>自定义异常</strong></p><ul><li>继承<code>Exception</code>类即可</li></ul></li></ul><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><ul><li><strong>Object类</strong><ul><li><code>hashcode()</code></li><li><code>toString()</code></li><li><code>clone()</code></li><li><code>getClass()</code></li><li><code>notify()</code></li><li><code>wait()</code></li><li><code>equals()</code></li></ul></li><li><strong>Math类</strong><ul><li>常见的数学运算</li></ul></li><li><strong>Random类</strong><ul><li>生成随机数&nbsp;<code>UUID</code></li></ul></li><li><strong>File类</strong><ul><li>文件的增删改查</li></ul></li><li><strong>包装类</strong><ul><li>自动装箱</li><li>自动拆箱</li></ul></li><li><strong>Date类</strong><ul><li><code>Date</code></li><li><code>simpleDateFormat</code>:&nbsp;<code>yyyy-MM-dd HH:mm:ss</code></li><li><code>Calendar</code></li></ul></li><li><strong>String类</strong><ul><li>不可变性final,操作量较少</li></ul></li><li><strong>StringBuffer</strong><ul><li>可变长</li><li><code>append()</code></li><li>多线程数据量较大</li><li>效率低，安全</li></ul></li><li><strong>StringBuilder</strong><ul><li>可变长</li><li>单线程数据量较大</li><li>效率高，不安全</li></ul></li><li><code>String str = &quot;a&quot;+1 + 2</code></li><li><code>String str = &#39;a&#39; + 1 + 2</code></li><li><code>String str = 1+2+&#39;a&#39;</code></li></ul><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><ul><li><strong>List</strong><ul><li><code>ArrayList</code><ul><li><code>add()</code></li><li><code>remove()</code></li><li><code>contains()</code></li><li><code>size()</code></li></ul></li><li><code>LinkedList</code><ul><li><code>getFirst()</code></li><li><code>getLast()</code></li><li><code>removeFirst()</code></li><li><code>addFirst()</code></li></ul></li><li>iterator迭代器</li></ul></li><li><strong>Set</strong><ul><li><code>HashSet</code></li><li><code>TreeSet</code><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3></li><li><code>HashMap</code></li><li><code>TreeMap</code><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3></li></ul></li><li>约束，避免类型转换之间的问题</li></ul><h2 id="I-O流"><a href="#I-O流" class="headerlink" title="I/O流"></a>I/O流</h2><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><ul><li>输出：<code>OutputStream</code></li><li>输入：<code>InputStream</code></li></ul><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><ul><li><strong>Reader</strong></li><li><strong>Wirter</strong></li></ul><h3 id="节点流"><a href="#节点流" class="headerlink" title="节点流"></a>节点流</h3><ul><li><code>CharArrayReader</code>、<code>Wirter</code>、<code>inputstream</code>、<code>outputstream</code></li><li><code>StringReader</code>、<code>Writer</code></li><li><code>pipe</code>、<code>pipedOutputStream</code></li><li><code>File</code></li></ul><h3 id="处理流"><a href="#处理流" class="headerlink" title="处理流"></a>处理流</h3><ul><li><p><strong>buffer</strong></p><ul><li><code>bufferInputStream</code></li><li><code>bufferOutputStream</code></li><li><code>bufferReader</code></li><li><code>bufferWriter</code></li></ul></li><li><p><strong>data</strong></p><ul><li><code>DataInputStream</code></li><li><code>DataOutputStream</code></li></ul></li><li><strong>object流</strong></li><li><strong>转换流</strong><ul><li><code>InputStreamReader</code></li><li><code>OutputStreamWriter</code></li></ul></li><li><strong>Filter</strong><ul><li>四个</li></ul></li><li><strong>print</strong><ul><li><code>PrintWriter</code></li><li><code>PrintStream</code></li></ul></li></ul><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><ul><li><code>run()</code></li><li><code>Start()</code></li></ul><h3 id="线程创建的方式"><a href="#线程创建的方式" class="headerlink" title="线程创建的方式"></a>线程创建的方式</h3><ul><li><code>Thread</code></li><li><code>Runnable</code></li><li><code>Callable</code></li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><ul><li><code>new Thread(Runnable).start();</code></li></ul><h3 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h3><ul><li>函数式编程</li><li>避免内部类定义过多</li><li><code>new Thread(()-&gt;{System.out.printIn();}).start();</code></li></ul><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><ul><li><strong>新建态</strong></li><li><strong>就绪态</strong></li><li><strong>运行态</strong></li><li><strong>阻塞态</strong></li><li><strong>死亡态</strong></li></ul><h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><ul><li><code>sleep()</code></li><li><code>join()</code></li><li><code>yield()</code></li><li><code>isLive()</code></li><li><code>start()</code></li><li><code>setPriority()</code></li><li><code>interrupt()</code></li></ul><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><ul><li><strong>多个对象操作同一个资源，并发</strong></li><li><strong>对列+锁</strong></li><li><strong>Synchronized</strong><ul><li>同步方法</li><li>同步代码块（常用）</li><li>锁，第一个线程进来拿到锁，后面的就要排队了，直到这个线程释放锁，后面的线程才能拿到锁进去</li><li>死锁，两个人都抱着对方的锁<ul><li>互斥</li><li>请求与保持</li><li>不剥夺条件</li><li>循环等待条件</li></ul></li></ul></li><li><strong>Lock</strong><ul><li><code>ReentrantLock</code><ul><li><code>lock</code></li><li><code>trylock</code></li><li><code>unlock</code></li></ul></li></ul></li></ul><h3 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h3><ul><li>缓冲区：消息队列</li><li>标志位：红绿灯</li><li><code>wait()</code></li><li><code>notifyAll()</code></li></ul><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li><strong>池化技术</strong></li><li><strong>池的大小</strong></li><li><strong>最大连接数</strong></li><li><strong>保持时间</strong></li></ul><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><ul><li><strong>IP</strong></li><li><strong>端口</strong></li><li><strong>Socket编程</strong></li><li><strong>TCP</strong><ul><li>三次握手</li><li>四次挥手</li><li>面向连接</li></ul></li><li><strong>UDP</strong><ul><li>无连接</li><li>Packet</li></ul></li><li><strong>URL</strong></li><li><strong>初识Tomcat</strong></li><li><strong>聊天通信</strong></li><li><strong>文件上传</strong></li></ul><h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2><h3 id="AWT"><a href="#AWT" class="headerlink" title="AWT"></a>AWT</h3><ul><li><strong>Frame</strong></li><li><strong>监听事件</strong><ul><li>鼠标</li><li>键盘</li><li>窗口</li><li>动作事件</li></ul></li></ul><h3 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h3><ul><li><strong>文本框</strong></li><li><strong>标签</strong></li><li><strong>按钮</strong></li><li><strong>文本域</strong></li><li><strong>面板</strong></li><li><strong>布局方式</strong></li><li><strong>关闭窗口</strong></li><li><strong>列表</strong></li></ul><h2 id="注解和反射"><a href="#注解和反射" class="headerlink" title="注解和反射"></a>注解和反射</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul><li><strong>元注解</strong></li><li><strong>内置注解</strong></li><li><strong>自定义注解</strong></li><li><strong>反射读取注解</strong></li></ul><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><ul><li><strong>Class</strong><ul><li><code>newInstance()</code></li></ul></li><li><strong>类加载机制</strong></li><li><strong>Method</strong><ul><li><code>invoke(person1,&quot;kevin&quot;);</code></li><li>存在重载，需要些参数的类型</li></ul></li><li><strong>Field</strong><ul><li><code>set(person2,&quot;marvin&quot;);</code></li></ul></li><li><strong>Construct</strong><ul><li><code>newInstance()</code></li><li>获取的时候需要传递参数的class类型</li></ul></li><li><strong>破坏私有关键字</strong><ul><li><code>setAccessible(true);</code></li></ul></li><li><strong>性能分析</strong><ul><li>正常&gt;检测关闭的反射&gt;默认的反射</li></ul></li><li>反射获得注解、泛型</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程笔记总结</title>
      <link href="/my-blog/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/"/>
      <url>/my-blog/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA多线程笔记总结"><a href="#JAVA多线程笔记总结" class="headerlink" title="JAVA多线程笔记总结"></a>JAVA多线程笔记总结</h1><h2 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h2><ol><li><p><strong>进程与线程</strong></p><p>| 进程（process）                                              | 线程(Thread)                                                 |<br>| —————————————————————————————— | —————————————————————————————— |<br>| 进程是<strong>程序的一次执行</strong>，是系统进行资源<strong>分配和调度的一个独立单位</strong> | 线程作为资源<strong>调度</strong>的基本单位，<strong>是程序的执行单元，执行路径</strong> |</p></li></ol><ol><li><p><strong>线程的3个基本状态</strong></p><ol><li><p>执行</p></li><li><p>就绪</p></li><li><p>阻塞</p></li></ol></li></ol><ol><li><p><strong>线程的5种基本操作</strong></p><ol><li><p>创建</p></li><li><p>可运行</p></li><li><p>阻塞</p></li><li><p>调度</p></li><li><p>被终止</p></li></ol></li></ol><ol><li><p><strong>线程的两个基本类型</strong></p><ol><li><p><strong>用户级线程</strong> ：管理过程全部由用户程序完成，<strong>操作系统内核心只对进程进行管理。</strong></p></li><li><p><strong>系统级线程</strong>(核心级线程)：<strong>由操作系统内核进行管理</strong>。</p></li></ol></li></ol><ol><li><p><strong>何为多任务？</strong></p><p>生活中有很多例子，如：在开车时打电话吃零食；即一个对象同时进行多项任务。</p></li></ol><ol><li><p><strong>何为多线程？</strong></p><p>在打游戏时，游戏中出现的视频、音频、字幕、震动反馈等都是一个个的线程，在游戏这个应用程序下分支为多个线程，而游戏就是一个进程！</p></li></ol><h2 id="Java实现多线程"><a href="#Java实现多线程" class="headerlink" title="Java实现多线程"></a>Java实现多线程</h2><ul><li><strong>方法一：通过继承Thread类调用线程</strong> </li></ul><ol><li><p><strong>继承Thread类</strong> </p><pre><code class="lang-java">public class MyThread extends Thread {        //线程体    @Override//重写run方法    public void run() {        for (int x = 0; x &lt; 200; x++) {            System.out.println(x);        }    }}</code></pre></li></ol><ol><li><p><strong>start()方法启动线程</strong></p><pre><code class="lang-java">public static void main(String[] args) {        //main线程        //TextThread01该代码的类        //创建一个线程对象        TextThread01 textThread01 = new TextThread01();        //调用start()方法启动线程        textThread01.start();        for (int i = 0; i &lt; 2000; i++) {            System.out.println(&quot;打游戏  &quot;+i);        }    }</code></pre></li></ol><ul><li><strong>方法二：实现Runnable接口</strong> </li></ul><ol><li><p>实现Runnable接口</p><pre><code class="lang-java"> public class TextThread03 implements Runnable {    @Override    public void run() {        //run方法线程体        for (int i = 0; i &lt; 200; i++) {            System.out.println(&quot;正在敲代码---&quot;+i);        }    }</code></pre></li><li><p>在主线程下创建Runnable接口实现类对象 ，并使用new Thread(对象名).start();启动线程</p><pre><code class="lang-java">public static void main(String[] args) {        //创建Runnable接口实现类对象        TextThread03 thread03 = new TextThread03();  //启动方式一：//        Thread thread = new Thread();////        thread.start(); //启动方式二：        new Thread(thread03).start();    }</code></pre></li></ol><ul><li><strong>方式三：实现Callable接口，需要返回值类型</strong></li></ul><ol><li><p>实现callable接口，重写call方法</p><pre><code class="lang-java">public class Text_Callable implements Callable&lt;Boolean&gt; {//此处的返回值类型为布尔类型    private String url;//网络图片地址    private String name;    public Text_Callable(String url, String name) {        this.url = url;        this.name = name;    }    @Override    public Boolean call() {        WebDownloader webDownload = new WebDownloader();        webDownload.downloader(url, name);        System.out.println(&quot;下载了文件名为&quot; + name + &quot;的文件&quot;);        return  true;    }</code></pre></li><li><p>创建线程对象(在main方法中)</p><pre><code class="lang-java"> Text_Callable t1 = new Text_Callable(&quot;https://pic2.zhimg.com/80/v2-517bd06e7b6fdaec9b9a0b3df525fc29_1440w.jpg&quot;, &quot;1.jpg&quot;);        Text_Callable t2 = new Text_Callable(&quot;https://pic3.zhimg.com/80/v2-c9b19e6c66d08934922ed266d71fca5d_720w.jpg&quot;, &quot;2.jpg&quot;);        Text_Callable t3 = new Text_Callable(&quot;https://pic4.zhimg.com/80/v2-c5eeefcb0c6c9f86553ace622a7e8329_720w.jpg&quot;, &quot;3.jpg&quot;);</code></pre></li><li><p>创建执行服务：创建线程池 </p><pre><code class="lang-java">ExecutorService ser = Executors.newFixedThreadPool(3);</code></pre></li><li><p>配合future接口执行服务</p><pre><code class="lang-java\">Future&lt;Boolean&gt; r1 = ser.submit(t1);Future&lt;Boolean&gt; r2 = ser.submit(t2);Future&lt;Boolean&gt; r3 = ser.submit(t3);</code></pre></li><li><p>获取结果</p><pre><code class="lang-java">  boolean rs1 = r1.get();  boolean rs2 = r2.get();  boolean rs3 = r3.get();</code></pre><p>6.关闭服务</p><pre><code class="lang-java"> ser.shutdownNow();</code></pre></li></ol><h2 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h2><ul><li><strong>并行：</strong><pre><code>* 并行性是指**同一时刻**发生两个或多个事件   * 并行是在不同的实体上的多个事件</code></pre></li><li><strong>并发：</strong><pre><code>* 并发性是指**同一时间间隔内**发生两个或多个事件   * 并发是**同一实体**上的多个事件</code></pre></li></ul><h2 id="Thread类源码分析"><a href="#Thread类源码分析" class="headerlink" title="Thread类源码分析"></a>Thread类源码分析</h2><ol><li><p>设置线程名</p><pre><code class="lang-java">Thread.currentThread().getName()</code></pre></li><li><p>守护线程  </p><pre><code class="lang-java">thread.setDaemon(true);//默认为false，表示用户线程        thread.start();//启动守护线程        new Thread(you).start();//启动用户线程</code></pre></li><li><p>优先级线程</p><p>调用Thread.currentThread().getPriority()获得优先级线程的级别（int）</p><p>创建MyPriority实现runnable接口</p><pre><code class="lang-java">class MyPriority implements Runnable{    @Override    public void run() {        System.out.println(Thread.currentThread().getName()+&quot;---&gt;&quot;+Thread.currentThread().getPriority());    }}</code></pre><p>new一个MyPriority对象，创建线程</p><pre><code class="lang-java">MyPriority myPriority = new MyPriority();Thread t2 = new Thread(myPriority);</code></pre><p>先设置优先级再启动线程</p><pre><code class="lang-java">t2.setPriority(1);//线程优先级范围1-10        t2.start();</code></pre></li><li><p>线程生命周期</p><ul><li><p>线程休眠(Thread.sleep())</p><p>调用sleep方法会进入计时等待状态，等时间到了，<strong>进入的是就绪状态而并非是运行状态</strong>！</p><pre><code class="lang-java">//模拟延时           try {               Thread.sleep(200);           } catch (InterruptedException e) {               e.printStackTrace();           }</code></pre></li><li><p>线程礼让(Thread.yield())</p></li></ul></li></ol><ul><li><p>让当前执行的线程执行但不阻塞，若让CPU重新调度，不一定会礼让</p><p>  此时线程由<strong>运行态变为就绪态</strong></p><pre><code class="lang-java">  public class TextYield {      public static void main(String[] args) {          MyYield myYield = new MyYield();          new Thread(myYield,&quot;a&quot;).start();//线程a          new Thread(myYield,&quot;b&quot;).start();//线程b      }  }  class MyYield implements Runnable{      @Override      public void run() {          System.out.println(Thread.currentThread().getName()+&quot;线程开始执行&quot;);          Thread.yield();//线程礼让          System.out.println(Thread.currentThread().getName()+&quot;线程停止执行&quot;);      }  }</code></pre></li></ul><ul><li><p>线程霸占(Thread.join())</p><ul><li>java合并线程（即插队），其他线程阻塞，调用join方法，会等待该线程执行完毕后再执行别的线程</li></ul><pre><code class="lang-java">public class TextJoin implements Runnable {    @Override    public void run() {        for (int i = 0; i &lt; 200; i++) {            System.out.println(&quot;线程vip来了&quot;+i);        }    }    //vip线程霸占主线程    public static void main(String[] args) throws InterruptedException{        //main线程        TextJoin textJoin = new TextJoin();        Thread thread = new Thread(textJoin);        thread.start();        for (int i = 0; i &lt; 200; i++) {            if(i == 100){                thread.join();//插队            }            System.out.println(&quot;main&quot;+i);        }    }}</code></pre></li><li><p>interrupt方法</p></li></ul><ul><li><p>我们一般使用的是interrupt来<strong>请求终止线程</strong>~</p><ul><li>要注意的是：interrupt<strong>不会真正停止</strong>一个线程，它仅仅是给这个线程发了一个信号告诉它，它应该要结束了(明白这一点非常重要！)</li><li>也就是说：Java设计者实际上是<strong>想线程自己来终止</strong>，通过上面的<strong>信号</strong>，就可以判断处理什么业务了。</li><li>具体到底中断还是继续运行，应该<strong>由被通知的线程自己处理</strong></li></ul><pre><code class="lang-java">Thread t1 = new Thread( new Runnable(){    public void run(){        // 若未发生中断，就正常执行任务        while(!Thread.currentThread.isInterrupted()){            // 正常任务代码……        }        // 中断的处理代码……        doSomething();    }} ).start();</code></pre></li></ul><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><pre><code class="lang-java">public synchronized void method(int args){}</code></pre><ul><li><code>synchronized</code>方法都必须获得该方法的对象的锁才能执行，否则线程会出现阻塞</li><li>方法一旦执行就会独占该锁，指导该方法返回才释放锁</li></ul><h3 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h3><pre><code class="lang-java">synchronized (obj){}</code></pre><ul><li>obj称为同步监视器</li><li>obj可以是任何对象但推荐使用共享资源作为同步监视器</li></ul><h2 id="死锁（DeadLock）"><a href="#死锁（DeadLock）" class="headerlink" title="死锁（DeadLock）"></a>死锁（DeadLock）</h2><p>造成死锁的原因可以<strong>概括</strong>成三句话：</p><ul><li>当前线程<strong>拥有其他线程需要的</strong>资源</li><li>当前线程<strong>等待其他线程已拥有</strong>的资源</li><li><strong>都不放弃</strong>自己拥有的资源</li></ul><h3 id="1-1-锁顺序死锁"><a href="#1-1-锁顺序死锁" class="headerlink" title="1.1 锁顺序死锁"></a>1.1 锁顺序死锁</h3><pre><code class="lang-java"> Makeup(int choice,String girlname){        this.choice=choice;        this.girlname=girlname;    }    @Override    public void run() {        //化妆        try {            makeup();        } catch (InterruptedException e) {            e.printStackTrace();        }    }    //化妆：互相持有对方的锁，就是需要拿到对方的资源    private void makeup() throws InterruptedException {        if (choice == 0){            synchronized (lipstick){                System.out.println(this.girlname+&quot;获得口红的锁&quot;);                Thread.sleep(1000);                synchronized (mirror){                    System.out.println(this.girlname+&quot;获得镜子的锁&quot;);                }            }        }else {            synchronized (mirror){                System.out.println(this.girlname+&quot;获得镜子的锁&quot;);                Thread.sleep(2000);                synchronized (lipstick){                    System.out.println(this.girlname+&quot;获得口红的锁&quot;);                }            }        }    }</code></pre><h3 id="1-2-避免死锁的方法"><a href="#1-2-避免死锁的方法" class="headerlink" title="1.2 避免死锁的方法"></a>1.2 避免死锁的方法</h3><p>避免死锁可以概括成三种方法：</p><ul><li><strong>固定加锁的顺序</strong>(针对锁顺序死锁)</li><li><strong>开放调用</strong>(针对对象之间协作造成的死锁)</li><li><strong>使用定时锁</strong>—&gt;<code>tryLock()</code><ul><li>如果等待获取锁时间超时，则<strong>抛出异常而不是一直等待</strong>！</li></ul></li></ul><h3 id="1-3线程池"><a href="#1-3线程池" class="headerlink" title="1.3线程池"></a>1.3线程池</h3><p>线程池可以看做是<strong>线程的集合</strong>。在没有任务时线程处于空闲状态，当请求到来：线程池给这个请求分配一个空闲的线程，任务完成后回到线程池中等待下次任务<strong>(而不是销毁)</strong>。这样就<strong>实现了线程的重用</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String和Object解读</title>
      <link href="/my-blog/%E5%89%8D%E7%AB%AF/String%E5%92%8CObject%E8%A7%A3%E8%AF%BB/"/>
      <url>/my-blog/%E5%89%8D%E7%AB%AF/String%E5%92%8CObject%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="String和Object解读"><a href="#String和Object解读" class="headerlink" title="String和Object解读"></a>String和Object解读</h2><h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h3><ul><li>字符串可用单引号或双引号表示，即<br>```javaScript<br>var fomeName = “Turing”;<br>var NuseName = ‘Kavane’;<h4 id="字符字面量"><a href="#字符字面量" class="headerlink" title="字符字面量"></a>字符字面量</h4></li><li>一些特殊的字符字面量，可采用转义字符，表示非打印字符，此处规则与java的一致<h4 id="字符串特点"><a href="#字符串特点" class="headerlink" title="字符串特点"></a>字符串特点</h4></li><li>在ECMAScript中字符串是<strong>不可变的</strong>，要销毁掉原字符串，必须用另一个包含该原字符串的新字符串表示<pre><code class="lang-javaScript">  var older =&quot;Open&quot;;  older = older+&quot;Stack&quot;;</code></pre><h4 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h4></li><li>方法一：使用<code>toString()</code>方法<pre><code class="lang-javaScript">  var age = 18;  var ageAsString = age.toString();//字符串：&quot;18&quot;</code></pre></li><li><p>方法二：使用<code>String()</code>方法<br>  ```javaScript<br>  var info1 = true;<br>  var info2;<br>  var info3 = 10;</p><p>  alert(String(info1));//“true”<br>  alert(String(info2));//“undefined”<br>  alert(String(info3));//“10”</p></li></ul><h3 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h3><ul><li>ECMAScript中的对象其实就是一组数据和功能的集合。对象可以通过执行new操作符后跟要创建的对象类型的名称来创建</li><li>Object的每个实例都具有下列属性和方法。<ul><li><code>constructor</code>：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）就是Object()。</li><li><code>hasOwnProperty(propertyName)</code>：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名（propertyName）必须以字符串形式指定（例如：o.hasOwnProperty(“name”)）。</li><li><code>isPrototypeOf(object)</code>：用于检查传入的对象是否是当前对象的原型（第5章将讨论原型）。</li><li><code>propertyIsEnumerable(propertyName)</code>：用于检查给定的属性是否能够使用for-in语句（本章后面将会讨论）来枚举。与hasOwnProperty()方法一样，作为参数的属性名必须以字符串形式指定。</li><li><code>toLocaleString()</code>：返回对象的字符串表示，该字符串与执行环境的地区对应。</li><li><code>toString()</code>：返回对象的字符串表示。</li><li><code>valueOf()</code>：返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类与对象</title>
      <link href="/my-blog/Java/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
      <url>/my-blog/Java/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是类？"><a href="#什么是类？" class="headerlink" title="什么是类？"></a>什么是类？</h2><ul><li><strong>类</strong>在面向对象编程中是一种面向对象计算机编程语言的构造，是创建对象的蓝图，描述了所创建的对象共同的属性和方法。</li><li>类有接口和结构。接口描述了如何通过方法与类及其实例互操作，而结构描述了一个实例中数据如何划分为多个属性。</li><li>类是与某个层[注 1]的对象的最具体的类型。类还可以有运行时表示形式（元对象），它为操作与类相关的元数据提供了运行时支持。</li></ul><h2 id="回到现实来说，类究竟是什么？"><a href="#回到现实来说，类究竟是什么？" class="headerlink" title="回到现实来说，类究竟是什么？"></a>回到现实来说，类究竟是什么？</h2><ul><li>在日常生活中，类无处不在，它是一种事物的原型(arcgetype)。对所有的动物来说，可以称为是一个类型，我们简称为“动物类”。</li></ul><h2 id="面向对象是什么？"><a href="#面向对象是什么？" class="headerlink" title="面向对象是什么？"></a>面向对象是什么？</h2><ul><li><strong>面向对象程序设计</strong>（英语：Object-oriented programming，缩写：OOP）是种具有对象概念的程序编程典范，同时也是一种程序开发的抽象方针。</li><li>面向对象程序设计中的对<strong>每一个象都应该能够接受数据、处理数据并将数据传达给其它对象</strong>，因此它们都可以被看作一个小型的“机器”，即对象。目前已经被证实的是，面向对象程序设计推广了程序的灵活性和可维护性，并且在大型项目设计中广为应用。</li></ul><h2 id="在Java中把类和对象联系起来"><a href="#在Java中把类和对象联系起来" class="headerlink" title="在Java中把类和对象联系起来"></a>在Java中把类和对象联系起来</h2><ul><li>类（Class）：定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</li><li>对象：是类的实例。<ul><li><strong>总而言之，类是抽象的，而对象是具体的</strong></li></ul></li></ul><h2 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h2><ul><li>我们在使用编译器时，创建的每一个<code>.java</code>文件，实际上就是一个类，可以这样说，创建一个java文件，就意味着创建了一个类，而这个刚创建的类是抽象的，里面什么都没有，此时，需要你通过创建对象来把这个类给实例化。</li></ul><h2 id="使用对象的步骤"><a href="#使用对象的步骤" class="headerlink" title="使用对象的步骤"></a>使用对象的步骤</h2><ol><li><p>首先创建对象：</p><ul><li>语法：<ul><li>类名 &nbsp;对象名 &nbsp;= &nbsp;new &nbsp;类名();</li></ul></li><li>例如：<br><code>Car  sportCar = new Car();</code></li></ul></li><li><p>使用对象：</p><ul><li>引用对象的属性：对象名<code>.</code>属性<code>;</code>    </li><li>引用对象的方法：对象名<code>.</code>方法名（）<code>;</code></li><li>例如：<pre><code class="lang-java">phone.voice =5;phone.sendMessage();</code></pre></li></ul></li></ol><ul><li><strong>注意：一个java文件可以有多个类，但只能有一个<code>public</code>修饰的类</strong></li></ul><h2 id="成员变量与局部变量的区别"><a href="#成员变量与局部变量的区别" class="headerlink" title="成员变量与局部变量的区别"></a>成员变量与局部变量的区别</h2><ol><li>作用域不同<ul><li>局部变量的作用域仅限于定义它的方法中</li><li>成员变量的作用域在整个类的内部</li></ul></li><li>初始值不同<ul><li>Java会给成员变量一个初始值</li><li>但不会给局部变量赋予初始值</li></ul></li><li>在同一个方法中，不允许有同名的局部变量</li><li>在不同的方法中，可以有同名的局部变量</li><li>两类变量同名时，局部变量具有更高的优先级</li></ol><h2 id="什么是构造方法？"><a href="#什么是构造方法？" class="headerlink" title="什么是构造方法？"></a>什么是构造方法？</h2><ul><li><strong>定义：</strong>构造器跟一般的实例方法十分相似；但是与其它方法不同，构造器没有返回类型，不会被继承，且不会有范围修饰符。构造器的函数名称一般与它所属的类的名称相同。</li><li><strong>特性：</strong><ol><li>使用<code>new</code>+构造方法，创建一个新的对象</li><li>构造方法是定义在JAVA类的一个用来初始化对象的方法<ul><li>构造方法与类同名且没有返回值</li></ul></li><li>当没有指定构造方法时，系统会自动添加无参的构造方法</li><li>当有指定构造方法，无论是有参、无参的构造方法，都不会自动添加无参的构造方法</li><li>构造方法的重载：方法名相同，但参数不同的多个方法，调用时会自动根据不同的参数选择相应的方法 </li></ol></li></ul><h2 id="面向对象的内存分析"><a href="#面向对象的内存分析" class="headerlink" title="面向对象的内存分析"></a>面向对象的内存分析</h2><ul><li>在Java虚拟机中的内存区域划分<ul><li>栈（stack）</li><li>堆（heap）</li><li>方法区（methodarea）实际存在于堆之中</li></ul></li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul><li>描述方法执行的内存模型</li><li>方法被调用创建一个栈帧</li><li>栈属于<strong>线程私有</strong>，不能实现线程间共享</li><li>由系统自动分配，速度快（物理上是连续的内存空间）</li></ul><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><ul><li>用于存储创建好的对象和数组</li><li>JVM只有一个堆，<strong>所有线程共享</strong></li><li>物理上不是连续的内存空间，存在着速度慢的问题，但存储更加灵活！</li></ul><h3 id="方法区（静态区）"><a href="#方法区（静态区）" class="headerlink" title="方法区（静态区）"></a>方法区（静态区）</h3><ul><li>用于存放程序中永远不变或唯一的内容<ul><li>例如：类信息、class对象、静态变量等</li></ul></li></ul><h2 id="静态方法（用static修饰方法）"><a href="#静态方法（用static修饰方法）" class="headerlink" title="静态方法（用static修饰方法）"></a>静态方法（用static修饰方法）</h2><ul><li>静态方法中可以直接调用同类中的静态成员，但不能直接调用非静态方法</li><li>在普通成员方法中，则可以直接访问同类的非静态变量和静态变量</li><li>静态方法中不能直接调用非静态方法，需要通过对象来访问非静态方法</li></ul><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><ul><li><p>定义：</p><ul><li>Java中被<code>static</code>修饰的成员成为静态成员或类成员。它属于整个类所有，而不是归某个对象所有，即被类的所有对象所共享静态成员可以使用类名直接访问，也可以使用对象名进行访问</li></ul></li><li><p>注意：</p><ul><li><code>static</code>修饰的成员变量和方法，从属于类！！！</li><li><p>普通变量和方法从属于对象！！！</p><p><img data-src="https://i.loli.net/2020/10/22/xipTHVwdOJFGBcK.png" alt="methodstatic.png"></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何学习前端</title>
      <link href="/my-blog/%E5%89%8D%E7%AB%AF/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E5%89%8D%E7%AB%AF/"/>
      <url>/my-blog/%E5%89%8D%E7%AB%AF/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E5%89%8D%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="阶段一"><a href="#阶段一" class="headerlink" title="阶段一"></a>阶段一</h2><ul><li>学习HTML5和CSS<ul><li>菜鸟网站（H5学习基本的标签，CSS掌握基本属性，灵活布局节点）</li></ul></li><li>学习Javascript<ul><li>基本语法<ul><li>数据类型、操作符、变量、函数声明、DOM编程</li></ul></li><li>推荐书籍<ul><li>Javascript高级程序设计、JavaScript DOM编程艺术</li></ul></li></ul></li><li>学习三大件时，切记不要跳步，学好DOM编程、CSS、JS基础，再学习使用框架（如jQuery、Vue、React、Bootstrap、Typescript）</li></ul><h2 id="阶段二"><a href="#阶段二" class="headerlink" title="阶段二"></a>阶段二</h2><ul><li>提升开发环境<ul><li>本地安装npm 、node.js(了解package.json)</li></ul></li><li>初学者先用node.js作为辅助工具，然后学习Webpack打包工具<ul><li>Webpack使用官方文档（初学学到开发就可以了，后面的可以粗略浏览一下，需要使用到再回过头来看，因为后边相对比较困难，而且不一定用到），并配合阮一峰es6教程学习</li></ul></li><li>学习框架<ul><li>工具包<ul><li>Vue<ul><li>建议学习官方中文文档</li><li>Vue + Vue-router-Vuex</li></ul></li><li>React<ul><li>官方文档</li><li>React + React-dom + React-router + Redux</li><li>Ant Design 、 Element</li></ul></li><li>Angular</li></ul></li></ul></li></ul><h2 id="阶段三"><a href="#阶段三" class="headerlink" title="阶段三"></a>阶段三</h2><ul><li><p>回归之前所学的知识</p><ul><li>通过写博客</li><li>回看官方文档</li><li>Webpack  与   Rollup.js</li></ul></li><li><p>新知识</p><ul><li>redux</li><li>mobx</li></ul></li></ul><h2 id="阶段四"><a href="#阶段四" class="headerlink" title="阶段四"></a>阶段四</h2><ul><li>抽象思维</li><li>视野</li><li>影响力人脉 </li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于MySQL的一些基本使用</title>
      <link href="/my-blog/MySQL/%E5%85%B3%E4%BA%8EMySQL%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/my-blog/MySQL/%E5%85%B3%E4%BA%8EMySQL%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL数据库软件"><a href="#MySQL数据库软件" class="headerlink" title="MySQL数据库软件"></a>MySQL数据库软件</h2><h3 id="关于配置（conf）"><a href="#关于配置（conf）" class="headerlink" title="关于配置（conf）"></a>关于配置（conf）</h3><ul><li>MySQL服务的启动与停止<ul><li>手动通过应用程序启动</li><li>或者通过cmd配置命令启动<ul><li>cmd  -&gt; services.msc -&gt;MySQL</li></ul></li><li>或者cmd管理员模式启动<ul><li>net stop MySQL</li><li>net start MySQL</li></ul></li></ul></li></ul><h3 id="关于登录与退出"><a href="#关于登录与退出" class="headerlink" title="关于登录与退出"></a>关于登录与退出</h3><ul><li><p>一般的MySQL版本：</p><ul><li>登录命令<ul><li>cmd中，在mysql安装目录下输入：<code>mysql -uroot -p密码</code></li><li>然后根据提示输入密码（为此前安装时设置的密码）</li></ul></li><li>退出：<ul><li>直接输入<code>exit</code>或者<code>quit</code>即可</li></ul></li></ul></li><li><p>如果是MySQL8.0版本的：</p><ul><li>在特定的SQL Commands line client 窗口中直接输入密码登录</li></ul></li></ul><h3 id="关于目录结构"><a href="#关于目录结构" class="headerlink" title="关于目录结构"></a>关于目录结构</h3><ul><li>MySQL安装目录<!-- ![Mysql_dir.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizq3tu941j30pl0h4jrp.jpg) --></li></ul><p><img data-src="https://i.loli.net/2020/10/26/cB35g8iFSYVZ2zw.png" alt="Mysql_dir.png"></p><ul><li><strong>bin</strong>：存放一些二进制文件以及一些exe文件，服务类和基础类的</li><li><strong>data</strong>：存放日志文件、数据文件的</li><li><strong>share</strong>：存放MySQL一些错误数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语句</title>
      <link href="/my-blog/Java/Java%E8%AF%AD%E5%8F%A5/"/>
      <url>/my-blog/Java/Java%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-输入语句"><a href="#Java-输入语句" class="headerlink" title="Java 输入语句"></a>Java 输入语句</h2><h3 id="1-1-使用Scanner类"><a href="#1-1-使用Scanner类" class="headerlink" title="1.1 使用Scanner类"></a>1.1 使用Scanner类</h3><ul><li>步骤：<ul><li>使用<code>java.util</code>包，即<code>import java.util.*;</code></li><li>构造Scanner类对象，它属于标准输入流<code>System.in</code><ul><li>即：<pre><code class="lang-java">Scanner s = new Scanner(System.in);</code></pre></li></ul></li><li>常用的<code>next()</code>方法系列：<ul><li><code>next()</code> &nbsp;输入字符串（以空格作为分隔符）</li><li><code>nextInt()</code> &nbsp;输入整数</li><li><code>nextLine()</code> &nbsp;输入字符串</li><li><code>nextDouble()</code> &nbsp;输入双精度数</li></ul></li></ul></li></ul><h3 id="1-2-使用java-io-BufferReader和java-io-InputStreamReader"><a href="#1-2-使用java-io-BufferReader和java-io-InputStreamReader" class="headerlink" title="1.2 使用java.io.BufferReader和java.io.InputStreamReader"></a>1.2 使用java.io.BufferReader和java.io.InputStreamReader</h3><ul><li><ol><li>导入io包<pre><code class="lang-java">import java.io.*;</code></pre></li></ol></li><li><ol><li>构造<code>BufferReader</code>类对象<pre><code class="lang-java">Bufferreader br = new BufferReader(new InputStreamReader)(System.in);</code></pre></li></ol></li></ul><h2 id="Java输出语句"><a href="#Java输出语句" class="headerlink" title="Java输出语句"></a>Java输出语句</h2><ul><li>分类：<ul><li><code>System.out.println();</code>  换行打印</li><li><code>System.out.print();</code> 不换行打印</li><li><code>System.out.write(1121);</code> 字节输出 </li><li><code>System.out.printf(&quot;%+8.3f\n&quot;,3.14);</code> 按格式输出</li></ul></li></ul><h3 id="2-1-换行打印"><a href="#2-1-换行打印" class="headerlink" title="2.1 换行打印"></a>2.1 换行打印</h3><ul><li><code>System.out.println();</code> &nbsp;是最常见的输出语句，把（）里的内容转换为字符串输出，并且换行<ul><li>若输出的是一个基本数据类型，则转换为字符串</li><li>若输出的是对象，则会自动调用对象的<code>toString();</code>方法</li></ul></li></ul><h3 id="2-2-按格式输出"><a href="#2-2-按格式输出" class="headerlink" title="2.2 按格式输出"></a>2.2 按格式输出</h3><ul><li><code>System.out.printf(&quot;%+8.3f\n&quot;,3.14);</code> &nbsp;通过格式化文本和参数列表输出</li></ul><h2 id="Java条件语句"><a href="#Java条件语句" class="headerlink" title="Java条件语句"></a>Java条件语句</h2><h3 id="3-1-if语句"><a href="#3-1-if语句" class="headerlink" title="3.1 if语句"></a>3.1 if语句</h3><h4 id="3-1-1-最普通的写法："><a href="#3-1-1-最普通的写法：" class="headerlink" title="3.1.1 最普通的写法："></a>3.1.1 最普通的写法：</h4><pre><code class="lang-java">  if(条件表达式){      条件执行的语句;  }</code></pre><h4 id="3-1-2-if-else写法："><a href="#3-1-2-if-else写法：" class="headerlink" title="3.1.2 if....else写法："></a>3.1.2 <code>if....else</code>写法：</h4><pre><code class="lang-java">  if(条件表达式){      条件执行的语句;  } else{      执行语句;  }</code></pre><h4 id="3-1-3-多重if"><a href="#3-1-3-多重if" class="headerlink" title="3.1.3 多重if"></a>3.1.3 多重if</h4><pre><code class="lang-java">  if(条件1){      代码块1;  }else if(条件2){      代码块2;  }else if(条件3){      代码块3;  }</code></pre><h4 id="3-1-4-嵌套if"><a href="#3-1-4-嵌套if" class="headerlink" title="3.1.4 嵌套if"></a>3.1.4 嵌套if</h4><pre><code class="lang-java">  if(条件1){      if(条件2){          代码块1;      }else{          代码块2;      }  }else{      代码块3;  }</code></pre><h3 id="3-2-switch语句"><a href="#3-2-switch语句" class="headerlink" title="3.2 switch语句"></a>3.2 switch语句</h3><ul><li>语法：<pre><code class="lang-java">switch(表达式){    case 值1:      执行的代码块1;      break;    case 值2:      执行的代码块2;      break;     default:      默认的执行代码;   }</code></pre></li></ul><h3 id="3-3-while语句"><a href="#3-3-while语句" class="headerlink" title="3.3 while语句"></a>3.3 while语句</h3><h4 id="3-3-1-基本写法"><a href="#3-3-1-基本写法" class="headerlink" title="3.3.1 基本写法"></a>3.3.1 基本写法</h4><pre><code>```javawhile(判断条件){    循环语句;}```</code></pre><ul><li>先判断，后执行<h4 id="3-3-2-do-while"><a href="#3-3-2-do-while" class="headerlink" title="3.3.2 do-while"></a>3.3.2 do-while</h4><pre><code class="lang-java">do{   循环语句;}while(判断条件);</code></pre><ul><li>先执行，后判断</li></ul></li></ul><h3 id="3-4-for语句"><a href="#3-4-for语句" class="headerlink" title="3.4 for语句"></a>3.4 for语句</h3><ul><li>语法：<pre><code class="lang-java">for(循环变量初始化;循环条件;循环变量变化){    循环语句;}</code></pre><h3 id="3-5-braek语句"><a href="#3-5-braek语句" class="headerlink" title="3.5 braek语句"></a>3.5 braek语句</h3></li><li>语法：<pre><code class="lang-java">if(条件){    执行操作语句;    break;//退出此循环，执行循环外的代码}</code></pre><h3 id="3-6-continue语句"><a href="#3-6-continue语句" class="headerlink" title="3.6 continue语句"></a>3.6 continue语句</h3></li><li>语法：<pre><code class="lang-java">if(条件){    执行操作;    continue;//通过continue结束本次循环，进行下一次循环}</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的一些类</title>
      <link href="/my-blog/Java/Java%E7%9A%84%E4%B8%80%E4%BA%9B%E7%B1%BB/"/>
      <url>/my-blog/Java/Java%E7%9A%84%E4%B8%80%E4%BA%9B%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="Java的一些类"><a href="#Java的一些类" class="headerlink" title="Java的一些类"></a>Java的一些类</h2><h3 id="StringBuilder和StringBuffer的使用"><a href="#StringBuilder和StringBuffer的使用" class="headerlink" title="StringBuilder和StringBuffer的使用"></a>StringBuilder和StringBuffer的使用</h3><ul><li><p>这两个方法的基本解释：</p><ul><li><code>StringBuilder</code>:线程不安全，效率高</li><li><code>StringBuffer</code>:线程安全，效率低</li></ul></li><li><p>实例：</p><pre><code class="lang-java">StringBuilder s = new StringBuilder();//初始长度为16StringBuider s1 = new StringBuilder(32);//初始length=32 s.append();s.delete(int start,int end);</code></pre><h3 id="StringBuilder类的常用方法"><a href="#StringBuilder类的常用方法" class="headerlink" title="StringBuilder类的常用方法"></a>StringBuilder类的常用方法</h3><p>| 类名 | 方法名  | 解释 |<br>|:——:|:———:|:——:|<br>|StringBuilder|append(参数)|追加内容到当前<code>StringBuilder</code>对象的末尾|<br>|StringBuilder|insert(位置，参数)|将内容插入到<code>StringBuilder</code>对象的指定位置|<br>|String|toString()|将<code>StringBuilder</code>对象转换为<code>String</code>对象|<br>|int | length()|获取字符串长度|</p></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="一、子串"><a href="#一、子串" class="headerlink" title="一、子串"></a>一、子串</h4><ul><li>通过<code>String</code>类中的<code>substring</code>方法从一个字符串中提取一个子串</li><li>例如：<pre><code class="lang-java">String s = &quot;Hello&quot;;String t = s.substring(0,3);//substring方法用来计算子串的长度，（0，3）表示要复制从0-3的字符，即H、e、l</code></pre><h4 id="二、拼接"><a href="#二、拼接" class="headerlink" title="二、拼接"></a>二、拼接</h4></li><li>通过使用<code>+</code>实现</li><li>常用方法：<pre><code class="lang-java">  String player = &quot;vango&quot;;  String project = &quot;sunflower&quot;;  String message = player + project;</code></pre></li><li>字符串与一个非字符串的值进行拼接，后者变成字符串</li><li>可以与输出语句一起使用：<ul><li><code>System.out.println(&quot;result:&quot;+answer);</code></li></ul></li><li>多个字符串放在一起，使用<code>join</code>静态方法<pre><code class="lang-java">String all = String.join(&quot;/&quot;,&quot;S&quot;,&quot;M&quot;,&quot;L&quot;);//打印结果： all = “S/M/L”;</code></pre></li></ul><h4 id="三、不可变字符串"><a href="#三、不可变字符串" class="headerlink" title="三、不可变字符串"></a>三、不可变字符串</h4><ul><li><code>String</code>类没有通过修改字符串的方法，修改方法为：提取加拼接<ul><li>例如：<pre><code class="lang-java">String s = &quot;Hello&quot;;s = s.substring(0,3)+&quot;p!&quot;;//  此时 s= help!</code></pre></li></ul></li></ul><h4 id="四、检查字符串是否相等"><a href="#四、检查字符串是否相等" class="headerlink" title="四、检查字符串是否相等"></a>四、检查字符串是否相等</h4><ul><li>方法：<code>s.equals(t)</code><ul><li>s和t都为字符串，该方法的逻辑是：若s=t ,则输出<code>true</code>，否则，输出<code>false</code></li><li>s可为值，也可以为名称</li></ul></li></ul><h4 id="五、空串和NUll串"><a href="#五、空串和NUll串" class="headerlink" title="五、空串和NUll串"></a>五、空串和NUll串</h4><ul><li>空串就是长度为0的字符串,占用内存</li><li>null是空引用，表示一个对象的值，没有分配内存，调用null的字符串的方法会抛出空指针异常。</li><li><p>空串的表示:</p><pre><code class="lang-java">if(str.length()== 0 ){} //或者if(str.equals(&quot;&quot;)){}</code></pre></li><li><p>null串表示：</p><pre><code class="lang-java">if(str == null){}</code></pre></li><li><p>既不是空串，也不是null：</p><pre><code class="lang-java">if(str != null &amp;&amp;str.length()){}</code></pre></li></ul><h4 id="六、注意的点"><a href="#六、注意的点" class="headerlink" title="六、注意的点"></a>六、注意的点</h4><ul><li>字符串<code>str</code>中字符的索引从0开始，范围从0到<code>str.length()</code>-1</li><li>使用<code>indexOf</code>进行字符或字符串查找时，如果匹配返回位置索引，如果没有匹配结果，返回-1</li><li>使用<code>substring(beginIndex,endIndex)</code>进行字符串提取时，包括<code>beginIndex</code>位置的字符，不包括<code>endIndex</code>位置的字符</li></ul><h3 id="重写与重载（-Override和-Overload）"><a href="#重写与重载（-Override和-Overload）" class="headerlink" title="重写与重载（@Override和@Overload）"></a>重写与重载（@Override和@Overload）</h3><ul><li>重写———存在于继承体系中，子类实现父类方法声明的一致相同方法<ul><li>访问权限：子类方法<code>&gt;=</code>父类方法</li><li>返回类型：之类方法的返回类型为父类方法返回类型或子类型</li></ul></li><li>重载———存在于同一个类，方法存在且方法名相同，但参数类型、个数、顺序至少一个不同<ul><li>只有返回值不同的,不叫重载!!!</li></ul></li></ul><h3 id="Java包装类（Wrapper-Class）"><a href="#Java包装类（Wrapper-Class）" class="headerlink" title="Java包装类（Wrapper Class）"></a>Java包装类（Wrapper Class）</h3><ul><li><p>包装类就是讲基本类型数据转化为对象，即八种基本类型对应八种包装类<br><img data-src="https://i.loli.net/2020/10/22/RkB5PiTptcb4SWd.png" alt="wrapperclass.png"></p></li><li><p><strong>自动装箱与自动拆箱</strong></p><ul><li><strong>自动装箱（auto-boxing）</strong><ul><li>基本类型自动封装到它相同的包装类里<pre><code class="lang-java">Integer i = 100;//本质上，编译器编译时为我们提供了以下代码：Integer i = nwe Integer(100);</code></pre></li></ul></li><li><strong>自动拆箱（unboxing）</strong><ul><li>包装类对象自动转换为基本类型<pre><code class="lang-java">int a = new Integer(100);//本质上：int a = new integer(100).intValue();</code></pre></li></ul></li><li>特别的：<br>```java<br>Integer d1 = -129;<br>Integer d2 = -129;<br>System.out.println(d1==d2);<br>//输出的是false，因为在[-128,127]之间的数，按照基本类型处理</li></ul></li></ul><h3 id="Java中基本类型和字符串之间的转换"><a href="#Java中基本类型和字符串之间的转换" class="headerlink" title="Java中基本类型和字符串之间的转换"></a>Java中基本类型和字符串之间的转换</h3><ul><li><p>基本类型转字符串</p><p><img data-src="https://i.loli.net/2020/10/22/uWZvGMkjOQDiBJa.png" alt="switch001.png"></p></li><li>实例：<pre><code class="lang-java">int c = 10;String str1 = Integer.toString(c);String str2 = String.valueOf(c);String str3 = c+ &quot; &quot;;</code></pre></li><li><p>字符串转基本类型</p><p><img data-src="https://i.loli.net/2020/10/22/BWrCxUR4ckYzKqi.png" alt="switch002.png"></p></li><li>实例：<pre><code class="lang-java">String str = &quot;8&quot;;int d = Integer.parseInt(str);int e = Integer.valueOf(str);</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git与github的基本了解</title>
      <link href="/my-blog/git/git%E4%B8%8Egithub%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BA%86%E8%A7%A3/"/>
      <url>/my-blog/git/git%E4%B8%8Egithub%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[ <!-- 图片文件在博客目录 --><h2 id="git的基本概述"><a href="#git的基本概述" class="headerlink" title="git的基本概述"></a>git的基本概述</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><p><strong>git（分布式版本控制系统）</strong></p></li><li><p><strong>git</strong> &nbsp;是目前世界上最先进的分布式版本控制系统（没有之一）！</p></li><li><p><strong>Linus</strong> &nbsp;花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p></li><li><p><strong>Git</strong> &nbsp;迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p></li><li><p>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p></li></ul><h3 id="集中式和分布式"><a href="#集中式和分布式" class="headerlink" title="集中式和分布式"></a>集中式和分布式</h3><ul><li><p>Linux旗下的CVS和SVN都是集中式的版本控制系统，但git是分布式的版本控制系统</p></li><li><p><strong>何为集中式版本控制系统？</strong></p><ul><li><p>版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p><!-- ![image-20200619205612791.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizt4sfy8aj30lq0gk77a.jpg) --><p><img data-src="https://i.loli.net/2020/10/26/ZE9hXMW3YsPwJdL.jpg" alt="gitfunbu.jpg"></p></li></ul><h3 id="何为分布式版本控制系统？"><a href="#何为分布式版本控制系统？" class="headerlink" title="何为分布式版本控制系统？"></a>何为分布式版本控制系统？</h3></li></ul><ul><li>分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</li></ul><!-- ![image-20200619210019521.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizt5wmg7wj30m60gfdj7.jpg) --><p><img data-src="https://i.loli.net/2020/10/26/CRZxh47WeIM9byv.jpg" alt="gitfenbu2.jpg"></p><ul><li><p>集中式VS分布式</p><p> |                  |                        集中式（SVN）                         |                        分布式（Git）                         |<br> | :———————: | :—————————————————————————————: | :—————————————————————————————: |<br> | 是否有中央服务器 | 有。开发人员需要从中央服务器获得最新版本的项目然后在本地开发，开发完推送给中央服务器。因此脱离服务器开发者是几乎无法工作的 |      没有中央服务器，开发人员本地都有 Local Repository       |<br> |     网络依赖     | 必须要联网才能工作，而且对网络的依赖性较强，如果推送的文件比较大而且网络状况欠佳，则提交文件的速度会受到很大的限制 | 分布式在没有网络的情况下也可以执行<code>commit</code>、查看版本提交记录、以及分支操作，在有网络的情况下执行<code>push</code> 到 <code>Remote Repository</code>。 |<br> |   文件存储格式   |                  按照原始文件存储，体积较大                  |                 按照元数据方式存储，体积很小                 |<br> |   是否有版本号   |                              有                              |                             没有                             |<br> |  分支操作的影响  |         创建新的分支则所有的人都会拥有和你一样的分支         |   分支操作不会影响其他开发人员    |<br> |       提交       |   提交的文件会直接记录到中央版本库   |       提交是本地操作，需要执行push操作才会到主要版本库       |</p></li></ul><h2 id="git的三种数据状态"><a href="#git的三种数据状态" class="headerlink" title="git的三种数据状态"></a>git的三种数据状态</h2><hr><h3 id="暂存态"><a href="#暂存态" class="headerlink" title="暂存态"></a>暂存态</h3><ul><li>git传输文件实际上是进行数据的传输，每个用户机都存在一个数据的暂存区（temp），当用户机没有网络时，可以在本地把要上传到本地数据库的文件数据先放到暂存区（temp），待网络通畅时git会自动提交数据到指定的本地数据库（仓库）。此状态为——已暂存（staged）状态</li></ul><h3 id="提交态"><a href="#提交态" class="headerlink" title="提交态"></a>提交态</h3><ul><li>当文件安全的保存到本地数据库时，此状态为——已提交（commit）状态</li></ul><h3 id="修改态"><a href="#修改态" class="headerlink" title="修改态"></a>修改态</h3><ul><li>若文件只是进行更改内容，但尚未保存到数据库中，那么此状态就为——已修改（modify）状态</li></ul><h2 id="git的工作原理"><a href="#git的工作原理" class="headerlink" title="git的工作原理"></a>git的工作原理</h2><hr><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><ul><li><strong>git</strong> &nbsp;的工作原理不同于集中式版本控制系统（CVCS），git赋予每个用户机上一个本地数据库，此数据库可同步到服务器的数据库中，当用户对文件做每一次的修改时，会把该文件的所有版本文件保存到本地数据库（即克隆文件），这样做的好处是，当没有网络时，也可以对文件的版本进行控制，而且要修改时，把修改后的文件进行标记，待网络通畅后会把被标记的文件提交到数据库中，供其他开发者使用。</li></ul><h2 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h2><h3 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h3><ol><li>将尚未进行版本控制的本地目录转换为 Git 仓库</li><li>从其它服务器 <strong>克隆</strong> 一个已存在的 Git 仓库</li></ol><h3 id="在已存在的目录中初始化仓库"><a href="#在已存在的目录中初始化仓库" class="headerlink" title="在已存在的目录中初始化仓库"></a>在已存在的目录中初始化仓库</h3><ul><li><p>第一步：打开<code>git bash</code></p></li><li><p>第二步：输入进入目录的命令</p><pre><code class="lang-bash"> $cd /f/gitproject</code></pre></li><li><p>第三步：初始化仓库</p><pre><code class="lang-bash"> $git init</code></pre></li></ul><p>此步骤会在已创建的目录下生成一个.git的子目录（该目录为隐藏文件）</p><h3 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h3><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><ul><li><p>方法一：在创建的<code>gitproject</code>目录下直接右键创建一个文件（例如：helloworld.java）</p></li><li><p>方法二：在创建的<code>gitproject</code>目录下右键<code>git bash here</code> ，使用命令创建</p><pre><code class="lang-bash"> $touch helloworld.java  //创建文件 $git status //查看文件状态</code></pre></li><li><p>方法三：直接打开<code>git bash</code> ，用Linux命令切换到<code>gitproject</code>目录下，输入方法二的命令即可！</p><h4 id="把文件放入暂存区"><a href="#把文件放入暂存区" class="headerlink" title="把文件放入暂存区"></a>把文件放入暂存区</h4></li><li><p>通过Linux命令</p><pre><code class="lang-bash"> $git add helloworld.java</code></pre></li><li><p>此时再输入 git status 查看状态</p><h4 id="把文件提交到仓库"><a href="#把文件提交到仓库" class="headerlink" title="把文件提交到仓库"></a>把文件提交到仓库</h4><pre><code class="lang-bash"> $git commit -m&quot;new file helloworld.java&quot;</code></pre><p> (-m为message)</p><h4 id="查看是否已提交"><a href="#查看是否已提交" class="headerlink" title="查看是否已提交"></a>查看是否已提交</h4><pre><code class="lang-bash"> $git status</code></pre><p> 如出现下图所示则提交成功</p> <!-- ![image-20200620142410488.png](http://ww1.sinaimg.cn/large/007uxMgDgy1giztadgl3fj30dq08lwew.jpg) --><p> <img data-src="https://i.loli.net/2020/10/26/Vhz9NZ3Tpyo8Onj.jpg" alt="gitcmd.jpg"></p></li></ul><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><ul><li>命令</li></ul><pre><code class="lang-bash">$git clone &lt;url&gt;</code></pre><h3 id="查看当前文件状态"><a href="#查看当前文件状态" class="headerlink" title="查看当前文件状态"></a>查看当前文件状态</h3><ul><li>命令<pre><code class="lang-bash">$git status</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git、github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet和Tomcat</title>
      <link href="/my-blog/network/Servlet%E5%92%8CTomcat/"/>
      <url>/my-blog/network/Servlet%E5%92%8CTomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-何为Tomcat？"><a href="#第一章-何为Tomcat？" class="headerlink" title="第一章 何为Tomcat？"></a>第一章 何为Tomcat？</h2><h3 id="Tomcat概述"><a href="#Tomcat概述" class="headerlink" title="Tomcat概述"></a>Tomcat概述</h3><ul><li>简而言之，Tomcat简单的说就是一个运行JAVA的网络服务器，<strong>底层是Socket的一个程序，它也是JSP和Serlvet的一个容器。</strong></li><li>通过Tomcat可以使别人访问到自己的网页的一个程序</li></ul><h3 id="Tomcat目录解读"><a href="#Tomcat目录解读" class="headerlink" title="Tomcat目录解读"></a>Tomcat目录解读</h3><!-- ![tomcat_dir.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizs61ddsfj30pk0bawfw.jpg) --><p><img data-src="https://i.loli.net/2020/10/26/XARbpWP4JFDHvY8.jpg" alt="tomcat_dir.png"></p><ul><li><strong>各个文件的解读</strong></li></ul><ol><li><strong>bin</strong>：启动和关闭tomcat的bat文件</li><li><strong>conf</strong>：配置文件<ul><li><strong>server.xml</strong>该文件用于配置server相关的信息，比如tomcat启动的端口号，配置主机(Host)</li><li><strong>web.xml</strong>文件配置与web应用（web应用相当于一个web站点）</li><li><strong>tomcat-user.xml</strong>配置用户名密码和相关权限.</li></ul></li><li><strong>lib</strong>：该目录放置运行tomcat运行需要的jar包</li><li><strong>logs</strong>：存放日志，当我们需要查看日志的时候，可以查询信息</li><li><strong>webapps</strong>：放置我们的web应用</li><li><strong>work工作目录</strong>：该目录用于存放jsp被访问后生成对应的server文件和.class文件 </li></ol><hr><h2 id="第二章-Servlet"><a href="#第二章-Servlet" class="headerlink" title="第二章 Servlet"></a>第二章 Servlet</h2><h3 id="简述-java-servlet"><a href="#简述-java-servlet" class="headerlink" title="简述 java servlet"></a>简述 java servlet</h3><ul><li><p>Servlet本质上就是一个java接口，在该接口中包含五个方法，分别是：</p><ul><li>初始化</li><li>获取配置</li><li>服务</li><li>获取信息</li><li><p>销毁</p><pre><code class="lang-java">public interface Servlet {public void init(ServletConfig config) throws ServletException;public ServletConfig getServletConfig();public void service(ServletRequest req, ServletResponse res)        throws ServletException, IOException;public String getServletInfo();public void destroy();}</code></pre><h3 id="Servlet有什么作用"><a href="#Servlet有什么作用" class="headerlink" title="Servlet有什么作用"></a>Servlet有什么作用</h3></li></ul></li><li>在网上实现聊天、发帖等交互功能</li></ul><h3 id="浅谈HTTP协议"><a href="#浅谈HTTP协议" class="headerlink" title="浅谈HTTP协议"></a>浅谈HTTP协议</h3><ul><li><p><strong>何为HTTP协议</strong></p><ul><li><strong>超文本传输协议（HTTP，HyperText Transfer Protocol)</strong> ~~~~是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。它是TCP/IP协议的一个应用层协议</li><li>简单来说，HTTP协议就是客户端和服务器交互的一种通迅的格式。</li></ul></li><li><p><strong>HTTP请求</strong></p><ul><li><p>浏览器向服务器请求某个web资源时，称之为浏览器向服务器发送了一个http请求。</p></li><li><p>一个完整http请求应该包含三个部分：</p><ol><li><strong>请求行</strong>——-描述客户端client的请求方式、请求资源名称以及HTTP版本号</li><li><strong>多个消息头</strong>——-描述客户端请求哪台主机、以及客户端的环境信息</li><li><strong>一个空行</strong></li></ol></li></ul><hr><ul><li><p><strong>请求行</strong></p><ul><li><strong>请求行中的GET称之为请求方式</strong>,请求方式有：<code>POST,GET,HEAD,OPTIONS,DELETE,TRACE,PUT</code></li><li><strong>常用的方法</strong>：<strong>POST、GET</strong></li><li><p>一般来说，当我们点击超链接，通过地址栏访问都是get请求方式。通过表单提交的数据一般是post方式。</p></li><li><p>可以简单理解GET方式用来查询数据,POST方式用来提交数据，get的提交速度比post快</p></li><li><p><strong>GET方式：在URL地址后附带的参数是有限制的，其数据容量通常不能超过1K</strong>。</p></li><li><p><strong>POST方式：可以在请求的实体内容中向服务器发送数据，传送的数据量无限制</strong>。</p></li></ul></li></ul><hr><ul><li><p><strong>HTTP响应</strong></p><ul><li><p>一个HTTP响应代表着服务器向浏览器回送数据</p></li><li><p>一个完整的HTTP响应应该包含四个部分:</p><ol><li>一个状态行</li><li>多个消息头</li><li>一个空行</li><li>实体内容</li></ol></li><li><p><strong>状态行</strong></p><ul><li>格式：HTTP版本号　状态码　原因叙述</li><li>状态行：HTTP/1.1 200 OK</li><li><p>状态码用于表示服务器对请求的处理结果，它是一个三位的十进制数。响应状态码分为5类</p><!-- ![servletzt.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizs7b2xu7j30m806iwha.jpg) --><p><img data-src="https://i.loli.net/2020/10/26/FoCInYbJ6SvKXmV.png" alt="servletzt.png"></p></li></ul></li></ul></li></ul></li></ul><hr><h3 id="JavaWeb目录"><a href="#JavaWeb目录" class="headerlink" title="JavaWeb目录"></a>JavaWeb目录</h3><!-- ![webdir.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizs7w9yl1j30w00i0q3a.jpg) --><p><img data-src="https://i.loli.net/2020/10/26/IVYlJMZNU8shmjb.png" alt="webdir.png"></p><ul><li>WEB-INF目录下的资源是不能直接被浏览器访问的</li><li>web.xml文件是web程序的主要配置文件</li><li>所有的classes文件都放在classes目录下</li><li>jar文件放在lib目录下</li></ul><hr><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><ol><li><strong>加载Servlet</strong>。当Tomcat第一次访问Servlet的时候，<strong>Tomcat会负责创建Servlet的实例</strong></li><li><strong>初始化</strong>。当Servlet被实例化后，Tomcat会调用init()方法初始化这个对象</li><li><strong>处理服务</strong>。当浏览器访问Servlet的时候，Servlet 会调用service()方法处理请求</li><li><strong>销毁</strong>。当Tomcat关闭时或者检测到Servlet要从Tomcat删除的时候会自动调用destroy()方法，让该实例释放掉所占的资源。一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁</li><li><strong>卸载</strong>。当Servlet调用完destroy()方法后，等待垃圾回收。如果有需要再次使用这个Servlet，会重新调用init()方法进行初始化操作。</li></ol><ul><li><strong>总结：只要访问Servlet，service()就会被调用。init()只有第一次访问Servlet的时候才会被调用。<br>destroy()只有在Tomcat关闭的时候才会被调用。</strong></li></ul><hr><h3 id="编写一个简单的servlet请求"><a href="#编写一个简单的servlet请求" class="headerlink" title="编写一个简单的servlet请求"></a>编写一个简单的servlet请求</h3><pre><code class="lang-java">import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;@WebServlet(name = &quot;Servlet&quot;)public class Servlet extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        super.doPost(request,response);        response.setContentType(&quot;text/html;charset=UTF-8&quot;);        PrintWriter out = response.getWriter();        out.println(&quot;hello world,servlet&quot;);        out.close();    }}</code></pre><hr><h3 id="Servlet的调用图"><a href="#Servlet的调用图" class="headerlink" title="Servlet的调用图"></a>Servlet的调用图</h3><!-- ![servlet01.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizs8khnchj313g0n0dkr.jpg) --><p><img data-src="https://i.loli.net/2020/10/26/u4EhXdURHD7Kn2T.png" alt="servlet01.png"></p><h3 id="Servlet细节"><a href="#Servlet细节" class="headerlink" title="Servlet细节"></a>Servlet细节</h3><ul><li><strong>一个已经注册的Servlet可以被多次映射</strong><ul><li>同一个Servlet可以被映射到多个URL中</li></ul></li><li><strong>Servlet映射的URL可以使用通配符</strong><ul><li>通配符的两种格式<ul><li>*.扩展名</li><li>正斜杠/开头并以/*结尾<ul><li>其中*.扩展名的优先级最低</li></ul></li></ul></li></ul></li></ul><h3 id="Servlet是单例的"><a href="#Servlet是单例的" class="headerlink" title="Servlet是单例的"></a>Servlet是单例的</h3><hr><h3 id="为什么Servlet是单例的？"><a href="#为什么Servlet是单例的？" class="headerlink" title="为什么Servlet是单例的？"></a>为什么Servlet是单例的？</h3><ul><li><strong>浏览器多次对Servlet的请求</strong>，一般情况下，服务器只创建一个Servlet对象，也就是说，<strong>Servlet对象一旦创建类</strong>，<strong>就会驻留在内存中，后续的请求做服务，直到服务器关闭</strong></li></ul><h3 id="每次访问请求对象和响应对象都是新的"><a href="#每次访问请求对象和响应对象都是新的" class="headerlink" title="每次访问请求对象和响应对象都是新的"></a>每次访问请求对象和响应对象都是新的</h3><ul><li><strong>对于每次访问要求，</strong>Servlet引擎都会<strong>创建一个新的HttpServletRequest请求对象和一个新的HttpServletResponse响应对象</strong>，然后将这两个对象<strong>作为参数传递给它调用的Servlet的service()方法，service方法再跟进请求方式分别调用doXxx方法</strong></li></ul><h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><ul><li><p><strong>当多个用户访问Servlet的时候，服务器会为每个用户创建一个线程，当多个用户并发Servlet共享资源的时候就会出现线程安全问题</strong></p><ul><li><p>如果一个变量需要多个用户分享，则应当在访问该变量的时候，加入同步机制：</p><pre><code class="lang-java">synchronized(对象名){}</code></pre></li><li>如果一个变量不需要共享,则直接在<code>doGet()</code>或者<code>doPost()</code> 定义，这样不会存在线程安全问题</li></ul></li></ul><hr><h3 id="ServletConfig对象"><a href="#ServletConfig对象" class="headerlink" title="ServletConfig对象"></a>ServletConfig对象</h3><h4 id="何为ServletConfig对象"><a href="#何为ServletConfig对象" class="headerlink" title="何为ServletConfig对象"></a>何为ServletConfig对象</h4><hr><h2 id="gt-通过此对象可以读取Web-xml中配置的初始化参数"><a href="#gt-通过此对象可以读取Web-xml中配置的初始化参数" class="headerlink" title="&gt; 通过此对象可以读取Web.xml中配置的初始化参数"></a>&gt; 通过此对象可以读取Web.xml中配置的初始化参数</h2><ul><li>作用：<ul><li>大大提高程序的灵活性</li><li>当需要修改时，只需更改配置文件Web.xml即可</li></ul></li></ul><h3 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h3><h4 id="何为ServletContext对象"><a href="#何为ServletContext对象" class="headerlink" title="何为ServletContext对象"></a>何为ServletContext对象</h4><hr><h2 id="gt-当Tomcat启动的时候，就会创建一个ServletContext对象，它代表着当前Web站点"><a href="#gt-当Tomcat启动的时候，就会创建一个ServletContext对象，它代表着当前Web站点" class="headerlink" title="&gt; 当Tomcat启动的时候，就会创建一个ServletContext对象，它代表着当前Web站点"></a>&gt; 当Tomcat启动的时候，就会创建一个ServletContext对象，它代表着当前Web站点</h2><ul><li>作用：<ul><li>ServletContext代表当前Web站点，那么<strong>所有Servlet都共享一个ServletContext对象</strong>，因此<strong>Servlet之间可以通过ServletContext实现通讯</strong></li><li>ServletConfig获取的是配置单个Servlet的参数信息，<strong>ServletContext可以获取的是配置整个Web站点的参数信息</strong></li><li><strong>利用ServletContext读取web站点的资源文件</strong></li><li><strong>实现Servlet转发</strong></li></ul></li></ul><h2 id="第三章-request和response"><a href="#第三章-request和response" class="headerlink" title="第三章 request和response"></a>第三章 request和response</h2><h3 id="request、response对象"><a href="#request、response对象" class="headerlink" title="request、response对象"></a>request、response对象</h3><hr><h2 id="gt-nbsp-Tomcat收到客户端的HTTP请求，会针对每一次请求，分别创建一个代表请求的-request对象和代表响应的response对象"><a href="#gt-nbsp-Tomcat收到客户端的HTTP请求，会针对每一次请求，分别创建一个代表请求的-request对象和代表响应的response对象" class="headerlink" title="&gt;&nbsp;Tomcat收到客户端的HTTP请求，会针对每一次请求，分别创建一个代表请求的**request对象和代表响应的response对象"></a>&gt;&nbsp;Tomcat收到客户端的HTTP请求，会针对每一次请求，分别创建一个代表请求的**request对象和代表响应的response对象</h2><ul><li>我们在获取浏览器传输过来的数据时，通过使用request对象即可</li><li>如果要向浏览器输出数据，则需要使用response对象</li></ul><h3 id="什么是HttpServletResponse对象？"><a href="#什么是HttpServletResponse对象？" class="headerlink" title="什么是HttpServletResponse对象？"></a>什么是HttpServletResponse对象？</h3><ul><li>HTTP响应由<strong>状态行、实体内容、消息头和一个空行组成</strong>。HttpServletResponse对象就封装了HTTP响应的信息</li></ul><h4 id="调用getOutputStream-方法向浏览器输出数据"><a href="#调用getOutputStream-方法向浏览器输出数据" class="headerlink" title="调用getOutputStream()方法向浏览器输出数据"></a>调用getOutputStream()方法向浏览器输出数据</h4><ul><li><p>代码：</p><pre><code class="lang-java">  //获取ServletOutputStream对象  ServletOutputStream ServletOutputStream= response。getOutputStream();  //使用meta标签和http消息头，告诉浏览器回送数据的编码和格式  servletOutputStream.write(&quot;&lt;meta http-equiv=&#39;content-type&#39; content=&#39;text/html;charset=UTF-8&#39;&gt;&quot;.getBytes());  servletOutputStream.write(&quot;我是吴亦凡&quot;.getBytes(&quot;UTF-8&quot;));</code></pre></li></ul><h4 id="调用getWriter-方法向浏览器输出数据"><a href="#调用getWriter-方法向浏览器输出数据" class="headerlink" title="调用getWriter()方法向浏览器输出数据"></a>调用getWriter()方法向浏览器输出数据</h4><ul><li><p>代码：</p><pre><code class="lang-java">  //设置浏览器用UTF-8编码显示数据  response.setContentType(&quot;text/html;charset=UTF-8&quot;);  //获取到printwriter对象  PrintWriter printwriter =response.getWriter();  printWriter.write(&quot;完成finish&quot;);</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多态</title>
      <link href="/my-blog/Java/Java%E5%A4%9A%E6%80%81/"/>
      <url>/my-blog/Java/Java%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>多态，是面向对象的程序设计语言最核心的特征。多态，意味着一个对象有着多重特征，可以在特定的情况下，表现不同的状态，从而对应着不同的属性和方法。</li></ul><h2 id="多态的作用"><a href="#多态的作用" class="headerlink" title="多态的作用"></a>多态的作用</h2><ul><li>消除类型之间的耦合关系</li></ul><h2 id="主要的特点"><a href="#主要的特点" class="headerlink" title="主要的特点"></a>主要的特点</h2><ul><li>多态是方法的多态，二不是属性的多态</li><li>多态存在的三个必要条件 <ul><li>要有继承；</li><li>要有重写；</li><li>父类引用指向子类对象。 </li></ul></li><li>用该父类引用调用子类重写的方法</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><ul><li><pre><code class="lang-java">public class TextPlay{    public static void main(String[] args){        Animal a = new Animal();        animalCry(a);        Dog d = new Dog();    }    static void animalCry(Animal a){        a.shout();   //父类引用子类对象    }}class Animal{    public void shout(){        System.out.println(&quot;叫&quot;);    }}class Dog extends Animal{  //继承父类    public void shout(){        System.out.println(&quot;汪汪汪&quot;);//方法重写    }}</code></pre></li></ul><h2 id="多态的分类"><a href="#多态的分类" class="headerlink" title="多态的分类"></a>多态的分类</h2><ul><li><strong>引用多态</strong><ul><li>父类的引用可以指向本类的对象</li><li>父类的引用可以指向子类的对象</li></ul></li><li><strong>方法多态</strong><ul><li>创建本类对象时，调用的方法为本类方法</li><li>创建子类对象时，调用方法为子类重写的方法或者继承的方法  </li></ul></li></ul><h2 id="对象的转换（ClassCastException）"><a href="#对象的转换（ClassCastException）" class="headerlink" title="对象的转换（ClassCastException）"></a>对象的转换（ClassCastException）</h2><ul><li>代码演示<pre><code class="lang-java"> Animal d = new Dog();//自动向上转型 Dog d2 = (Dog)d;//强制向下转型 //在Dog类中加上看门的方法，新建一个cat类，则 animalCry(new Cat()); Dog d2 = (Dog)d; Animal c = new Cat(); Dog d3 = (Dog) c; //Cat强转Dog，编译未报错，但实际上不能转换 d3.door();</code></pre></li><li>总而言之，子类转向父类没有风险，而父类转向子类会存在风险</li><li>解决方法：我们可以使用<code>instance of</code>运算符，来解决引用对象的类型，避免类型转换的安全性问题<ul><li>例如：<br>```java<br>Dog dog = new Dog();<br>Animal animal = new Dog ;//向上类型转换<br>if(Animal instance of Dog){<br>  Dog dog2 = (Dog)Animal;<br>}else{<br>  System.out.println(“无法进行转换”);<br>}</li></ul></li></ul><h2 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类(abstract)"></a>抽象类(abstract)</h2><h3 id="基本了解"><a href="#基本了解" class="headerlink" title="基本了解"></a>基本了解</h3><ul><li><strong>抽象类</strong>，即只有方法声明，无方法体的一种类，它的出现避免了子类设计的随意性，并严格限制子类设计，为子类提供模板</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><p>在定义的类前使用<code>abstract</code>关键字修饰的即为抽象类</p><pre><code class="lang-java"> public abstract 类名(){ }</code></pre></li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>限制规定子类必须实现某些方法，但不关注实现细节</li></ul><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><ul><li><code>abstract</code>定义抽象类</li><li><code>abstract</code>定义抽象方法时，只是声明，而不需要实现</li><li>包含抽象方法的类是抽象类</li><li>抽象类可以包含普通方法，也可以没有抽象方法</li><li>抽象类不能直接创建，可以定义引用变量                    </li></ul><h3 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h3><ol><li>有抽象方法的类能定义抽象类</li><li>抽象类不能实例化，并且不能用<code>new</code>来实例化抽象类</li><li>抽象类可汗属性、方法、构造方法，但构造方法不能用来<code>new</code>实例，只能用来被子类调用</li><li><strong>抽象类只能用来被继承</strong></li><li><strong>抽象方法必须被子类实现</strong></li></ol><h2 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口(Interface)"></a>接口(Interface)</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>类是一种具体实现体，而接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部数据，也不关心这些类里方法的实现细节，它值规定这些类里必须提供某些方法</li><li>接口的出现，实现了程序设计中设计与实现的分离，可以说是抽象类的延伸</li></ul><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p>修饰符 <code>interface</code> 接口名 <code>extends</code> 父接口1，父接口2{</p><p>}</p><ul><li>修饰符一般建议使用<code>public</code>，不能使用<code>private</code>和<code>protected</code>修饰接口</li></ul></li><li>实际代码演示：<pre><code class="lang-java">  //方法必须公有化  public interface flyable{      void fly();//这里只能含有常量，抽象方法  }  class plane implements flyable{      //可以实现一个或多个接口      public void fly(){          System.out.println(&quot;飞机飞起来了&quot;);      }  }</code></pre><h3 id="注意的点-1"><a href="#注意的点-1" class="headerlink" title="注意的点"></a>注意的点</h3></li><li>接口在使用过程中，还经常与匿名内部类配合使用</li><li>匿名内部类就是没有名字的内部类</li><li>多用于关注实现而不关注实现类名称</li><li>接口支持多继承</li><li>接口的字段默认都是<code>static</code>和<code>final</code>                                </li></ul><h2 id="回调的实现（callback）"><a href="#回调的实现（callback）" class="headerlink" title="回调的实现（callback）"></a>回调的实现（callback）</h2><ul><li>多态的扩展</li><li>可以指出某个特定事件发生时应该采取得到动作</li></ul><h2 id="内部类（Inner）"><a href="#内部类（Inner）" class="headerlink" title="内部类（Inner）"></a>内部类（Inner）</h2><ul><li>特点：<ul><li>只能让外部类直接访问，不可在同包中的其他类直接访问</li><li>可访问外部类私有属性，但外部类不能访问内部类的内部属性</li></ul></li><li>使用场景：<ul><li>只为所在外部类通过服务的情况下优先使用</li></ul></li><li>分类<ul><li>成员内部类<ul><li>静态</li><li>非静态</li></ul></li><li>匿名内部类（只用一次的类，也称局部内部类 ）</li></ul></li></ul><h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><h3 id="何为异常-Excpetion"><a href="#何为异常-Excpetion" class="headerlink" title="何为异常(Excpetion)"></a>何为异常(Excpetion)</h3><ul><li>异常就是程序中的一些错误，有些异常是可以避免错误的，例如一些IDE可以提示你报错的代码语法错误。<h3 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h3></li><li><strong>检查性异常</strong> ： 常见的有用户错误或问题引起的异常</li><li><strong>运行时异常</strong> ： 运行时异常是可以避免的异常，但在编译时常被忽略</li><li><strong>错误</strong> ： 错误不是异常，而是脱离程序员控制的问题，错误在代码中常被忽略<h3 id="关于异常"><a href="#关于异常" class="headerlink" title="关于异常"></a>关于异常</h3></li><li>在Exception分支中有一个重要的子类 <code>RuntimeException</code>(运行时异常)<ul><li><code>ArrayIndexOutOfBoundsException</code> 数组下标越界</li><li><code>NullPointerException</code> 空指针异常</li><li><code>ArithmeicException</code> 算术异常</li><li><code>MissingResourceException</code> 丢失资源</li><li><code>ClassNotFoundException</code>找不到类异常</li></ul></li><li>这些异常都是不检查异常，程序中可选择捕获异常，也可以不处理<h3 id="Error与Exception的区别"><a href="#Error与Exception的区别" class="headerlink" title="Error与Exception的区别"></a>Error与Exception的区别</h3></li><li><code>Error</code>通常是灾难性的致命错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机(JVM)一般会选择终止线程</li><li><code>Exception</code>通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组</title>
      <link href="/my-blog/Java/Java%E6%95%B0%E7%BB%84/"/>
      <url>/my-blog/Java/Java%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="数组的基本使用"><a href="#数组的基本使用" class="headerlink" title="数组的基本使用"></a>数组的基本使用</h2><ul><li>什么是数组？形如<code>int[]score ={79,9,2,45};</code>称作数组</li></ul><h3 id="1-1-声明数组"><a href="#1-1-声明数组" class="headerlink" title="1.1 声明数组"></a>1.1 声明数组</h3><ul><li>语法：<ul><li>数据类型 &nbsp;<code>[]</code>&nbsp;数组名 </li><li>或者：数据类型 &nbsp;数组名[]</li></ul></li><li>例如：<pre><code class="lang-java">int[] scores;//最好采用这种写法double height[]; //不推荐这种写法</code></pre></li><li><strong>注意！</strong><ul><li><strong>在声明数组的同时不能指定数组长度,以下为错误写法</strong><pre><code class="lang-java">int[] arr = new int[4]{95,16,77,25};</code></pre><h3 id="1-2-分配空间"><a href="#1-2-分配空间" class="headerlink" title="1.2 分配空间"></a>1.2 分配空间</h3></li></ul></li><li>语法：<ul><li>数组名 &nbsp; <code>=</code> &nbsp;数据类型<code>[</code>数组长度<code>]</code></li></ul></li></ul><h3 id="1-3-赋值"><a href="#1-3-赋值" class="headerlink" title="1.3 赋值"></a>1.3 赋值</h3><ul><li>数组从0开始计算（一位数组按顺序排列数字）<ul><li>语法：<pre><code class="lang-java">score[0] = 92;//score数组的一号元素的数值为92score[1] = 98;</code></pre><h2 id="使用循环操作打印Java数组"><a href="#使用循环操作打印Java数组" class="headerlink" title="使用循环操作打印Java数组"></a>使用循环操作打印Java数组</h2></li></ul></li><li>代码演示：<pre><code class="lang-java">int[] scores ={88,82,99,86,95};for(int i =0;i&lt;score.length;i++){    System.out.println(scores[i]);}</code></pre><ul><li>数组名<code>.length</code>为获取数组的长度</li></ul></li></ul><h2 id="使用Arrays类按顺序打印Java数组"><a href="#使用Arrays类按顺序打印Java数组" class="headerlink" title="使用Arrays类按顺序打印Java数组"></a>使用Arrays类按顺序打印Java数组</h2><ul><li>首先导入<code>Arrays</code>类<pre><code class="lang-java">import java.utol.Arrays;</code></pre></li><li>然后排序<pre><code class="lang-java">Arrays.sort(数组名);</code></pre></li><li>整体演示<pre><code class="lang-java">//定义一个整型数组int[] score ={75,88,91,64,73};//使用Arrays类的sort()方法对数组进行排序Arrays.sort(score);</code></pre><h2 id="将数组转换为字符串"><a href="#将数组转换为字符串" class="headerlink" title="将数组转换为字符串"></a>将数组转换为字符串</h2></li><li>语法：<pre><code class="lang-java">Array.toString(数组名);</code></pre></li><li>例如：<pre><code class="lang-java">System.out.println(Array.toString(scores));</code></pre></li></ul><h2 id="使用for-each遍历数组"><a href="#使用for-each遍历数组" class="headerlink" title="使用for-each遍历数组"></a>使用for-each遍历数组</h2><ul><li>语法：<pre><code class="lang-java">for(元素类型 元素变量  : 遍历对象){    执行的代码;}</code></pre></li><li>例如<pre><code class="lang-java">//对一维数组而言int arr[] = {2, 3, 1};for (int x : arr) { System.out.println(x); //逐个输出数组元素的值 //对List数组来说//创建List并添加元素 List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;1&quot;); list.add(&quot;3&quot;); list.add(&quot;4&quot;); //利用froeach语句输出集合元素 System.out.println(&quot;----2----froeach语句输出集合元素&quot;); for (String x : list) { System.out.println(x); }</code></pre></li></ul><h2 id="Java中使用二维数组"><a href="#Java中使用二维数组" class="headerlink" title="Java中使用二维数组"></a>Java中使用二维数组</h2><ol><li>声明数组并分配空间<ul><li>数据类型 &nbsp;<code>[][]</code> 数组名 <code>=</code> <code>new</code> 数据类型 <code>[</code>行的个数<code>]``[</code>列的个数<code>]</code>;</li><li>例如：<pre><code class="lang-java">int [][] nums = new int[5][6];</code></pre></li></ul></li><li>赋值<ul><li>数组名<code>[</code>行索引<code>]``[</code>列索引<code>]</code> = 值;</li></ul></li><li>处理数组</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java封装</title>
      <link href="/my-blog/Java/Java%E5%B0%81%E8%A3%85/"/>
      <url>/my-blog/Java/Java%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="封装的需求"><a href="#封装的需求" class="headerlink" title="封装的需求"></a>封装的需求</h2><ul><li>程序设计在追求“高内聚，低耦合”的特点<ul><li>所谓“高内聚”，即是封装代码细节，提高可维护性</li><li>所谓“低耦合”，即是简化外部调用，便于使用者使用</li></ul></li><li>这样一来，提高了代码的安全性和复用性<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2></li><li>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来<strong>实现对隐藏信息的操作和访问</strong></li></ul><h2 id="封装的好处"><a href="#封装的好处" class="headerlink" title="封装的好处"></a>封装的好处</h2><ul><li>a.只能通过规定的方法访问数据</li><li>b.隐藏类的实例细节，方便修改和实现</li><li>c.适当的封装，可以将对象使用接口的程序实现部分隐藏起来，不让用户看到，同时确保用户无法任意更改对象内部的重要资料，增强代码安全性</li></ul><p><img data-src="https://i.loli.net/2020/10/22/In3jwPMrUOl6L2s.png" alt="fengzhuangstep.png"></p><h2 id="Java的访问修饰符"><a href="#Java的访问修饰符" class="headerlink" title="Java的访问修饰符"></a>Java的访问修饰符</h2><ul><li>java的访问修饰符包括<code>private</code>、<code>default</code>、<code>protected</code>、<code>public</code><br>| 访问修饰符 | 本类  |  同包   |  子类  |  所有类|<br>| :———-:| :———-:| :———-:| :———-:| :———-:|<br>|private| √||||<br>|default|√|√|||<br>|protected|√|√|√||<br>|public|√|√|√|√|</li><li>对属性一律<code>private</code>私有化</li><li>普通类使用<code>public</code></li></ul><h2 id="This关键字"><a href="#This关键字" class="headerlink" title="This关键字"></a>This关键字</h2><blockquote><p>This 也被成为创建好对象的地址,但不可用于静态方法</p><ul><li>使用语法：<pre><code class="lang-java">public class TextThis{   int a,b,c;   TextThis(int a,int b){      this.a=a;      this.b=b;   }}</code></pre><ul><li><code>this.</code>属性名，表示操作当前对象的属性</li><li><code>this.</code>方法，表示调用当前对象的方法</li><li>我们在封装对象的属性时，经常会用到<code>this</code>关键字</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法</title>
      <link href="/my-blog/Java/Java%E6%96%B9%E6%B3%95/"/>
      <url>/my-blog/Java/Java%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>语法：<br>访问修饰符 返回值类型 方法名(参数列表){<pre><code>方法体</code></pre>}</li><li><strong>访问修饰符：</strong>方法运行被访问的权限范围，通常可以设置为<code>public</code>,<code>protected</code>,<code>private</code>,甚至可以省略</li><li><strong>返回值类型：</strong>方法返回值的类型，如果方法不返回任何值，则返回值类型指定为<code>void</code>;如果方法具有返回值，则需要指定返回值类型，并且在方法体中使用<code>return</code>语句返回值</li><li><strong>方法名：</strong>定义方法的名字，必须使用合法的标识符</li><li><strong>参数列表：</strong>可以有多个，多个参数之间用逗号隔开，每个参数由参数类型和参数名组成，此时方法分成四类<ul><li><strong>无参无返回值的方法</strong></li><li><strong>无参有返回值的方法</strong></li><li><strong>有参无返回值的方法</strong></li><li><strong>有参有返回值的方法</strong></li></ul></li></ul><h3 id="1-1-无参无返回值方法的使用"><a href="#1-1-无参无返回值方法的使用" class="headerlink" title="1.1 无参无返回值方法的使用"></a>1.1 无参无返回值方法的使用</h3><ul><li>第一步：定义方法（即概述中的语法）</li><li>第二步：调用方法<ul><li>先创建类的对象，再通过对象名<code>.</code>方法名<code>(``)</code>;实现</li><li>例如：<pre><code class="lang-java">public class Person{    Person teacher = new Person();    public void teach{        System.out.println(&quot;teaching.....&quot;);    }    teacher.teach();}</code></pre></li></ul></li></ul><h3 id="1-2-无参有返回值方法的使用"><a href="#1-2-无参有返回值方法的使用" class="headerlink" title="1.2 无参有返回值方法的使用"></a>1.2 无参有返回值方法的使用</h3><ul><li><p>例如：</p><p><img data-src="https://i.loli.net/2020/10/22/9lLHstn56icf8jG.png" alt="methodreturn.png"></p></li><li><p>重点：</p><ul><li><ol><li>如果方法的返回类型为<code>void</code>，则方法中不能使用<code>return</code>返回</li></ol></li><li><ol><li>方法的返回值最多只能有一个，不能返回多个值</li></ol></li><li><ol><li>方法返回值的类型必须兼容</li></ol></li></ul></li></ul><h3 id="1-3-有参无返回值方法的使用"><a href="#1-3-有参无返回值方法的使用" class="headerlink" title="1.3 有参无返回值方法的使用"></a>1.3 有参无返回值方法的使用</h3><ul><li><p>语法：</p><ul><li>对象名<code>.</code>方法名<code>(</code>实参1,实参2,….<code>)</code></li></ul></li><li><p><strong>注意</strong></p><ul><li>调用带参方法时，必须保证实参的数量，类型，数据顺序与形参一一对应</li><li>调用方法时，实参不需要知道数据类型</li><li>方法的参数可以是基本类型，也可以是引用类型（即String，数组）</li><li>当方法参数有多个时，使用逗号分隔</li></ul></li></ul><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><ul><li><strong>概念理解：</strong>如果同一个类包含了两个或两个以上方法名相同，方法参数的个数、顺序或类型不同的方法<ul><li>判断依据<ol><li>必须是在同一个类中</li><li>方法名相同</li><li>方法参数的个数、顺序或类型不同</li><li>与方法的修饰符或返回值没有关系 </li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java继承</title>
      <link href="/my-blog/Java/Java%E7%BB%A7%E6%89%BF/"/>
      <url>/my-blog/Java/Java%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="关于继承"><a href="#关于继承" class="headerlink" title="关于继承"></a>关于继承</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>继承是类与类的一种关系，是一种“is a”的关系</li><li>继承可以使得子类具有父类别的各种属性和方法，而<strong>不需要再次编写相同的代码</strong>。在令子类别继承父类别的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能。</li></ul><h3 id="继承的特性"><a href="#继承的特性" class="headerlink" title="继承的特性"></a>继承的特性</h3><ul><li>Java只有单继承，即只有一个父类</li><li>没有调用<code>extend</code>，则父类为<code>java.lang</code></li><li>使用<code>instance of</code>判断对象类型</li></ul><h3 id="超类、子类"><a href="#超类、子类" class="headerlink" title="超类、子类"></a>超类、子类</h3><ul><li>对于java中继承的某些知识，在这里需要给读者插补一点类的基本知识，让文章更具有可读性</li></ul><h4 id="超类"><a href="#超类" class="headerlink" title="超类"></a>超类</h4><ul><li>超类，也称父类，Java只允许一个class继承自一个类，因此，一个类有且仅有一个父类。只有<code>Object</code>类特殊，它没有父类，所有它是所有类的父类。</li></ul><h4 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h4><ul><li>子类就是继承父类的所有方法，在此基础上在实现子类自己的一些方法</li></ul><h3 id="继承的优点"><a href="#继承的优点" class="headerlink" title="继承的优点"></a>继承的优点</h3><ol><li>子类拥有父类的属性和方法</li><li>实现代码复用</li></ol><h3 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h3><pre><code class="lang-java">Class Student extends Person{}//student就是子类，Person就是父类</code></pre><h3 id="继承的初始化顺序"><a href="#继承的初始化顺序" class="headerlink" title="继承的初始化顺序"></a>继承的初始化顺序</h3><ul><li>初始化父类在初始化子类</li><li>先执行初始化对象中的属性，再执行构造方法中的初始化</li><li><img data-src="https://i.loli.net/2020/10/22/DFxfgikLnOCmu2E.png" alt="initialstep.png"></li></ul><h2 id="方法的重写-override"><a href="#方法的重写-override" class="headerlink" title="方法的重写(override)"></a>方法的重写(override)</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>如果子类对继承父类的方法不满意，是可以重写父类继承的方法的，当调用方法时会优先调用子类的方法</li><li>使用规则：<ul><li><code>@override</code>的注释下的方法即为重写的方法，其本质是覆盖父类的方法</li></ul></li></ul><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><ul><li><strong>返回值类型、方法名、参数类型与个数这三者必须与父类继承的方法相同，这样才叫做方法的重写</strong></li><li><strong>子类访问权限大于父类访问权限</strong></li></ul><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><ul><li><code>final</code>,即“最终的”</li><li><code>final</code>可以修饰类、方法、属性和变量<ul><li><code>final</code>修饰类，则该类<strong>不允许被继承</strong></li><li><code>final</code>修饰方法，则该方法<strong>不允许被覆盖（重写）</strong></li><li><code>final</code>修饰属性，则该类的属性不会进行隐式的初始化（类的初始化属性必须有值）或在构造方法中赋值</li><li><code>final</code>修饰变量，则该变量的值<strong>只能赋一次值</strong>，即为常量</li></ul></li></ul><h2 id="Super关键字"><a href="#Super关键字" class="headerlink" title="Super关键字"></a>Super关键字</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><ul><li><code>super</code>关键字是指示编译器调用超类方法的特殊关键字</li><li>直接父类对象的引用，通过<code>super</code>来访问父类中被子类覆盖的方法或属性</li><li>在对象内部使用，可以代表父类对象</li></ul><h3 id="使用语法-1"><a href="#使用语法-1" class="headerlink" title="使用语法"></a>使用语法</h3><ul><li>对父类属性的访问<pre><code class="lang-java">super.age;//age是父类的一个属性</code></pre></li><li>对父类方法的访问<pre><code class="lang-java">super.eat();</code></pre></li><li>调用父类<code>toString</code>方法<pre><code class="lang-java">super.toString();//默认父类为object类//输出格式为：全路径@全限定名Hashcode</code></pre></li><li><strong>特殊使用法！！！</strong><pre><code class="lang-java">super(变量1，变量2)</code></pre><ul><li>这样使用会使父类的私有域进行初始化，也称调用超类的构造器  </li></ul></li></ul><h3 id="super应用"><a href="#super应用" class="headerlink" title="super应用"></a>super应用</h3><ul><li>子类在构造过程中必须调用其父类的构造方法</li><li>如果子类的构造方法中没有显示调用父类的构造方法，则系统默认调用父类无参的构造方法</li><li>如果显示的调用构造方法，必须在子类的构造方法的<strong>第一行</strong></li><li>如果子类构造方法中既没有显式调用父类的构造方法，二父类又没有无参的构造方法，则编译出错</li></ul><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><ul><li><code>Object</code>类是所有类的父类，如果一个类没有使用<code>extends</code>关键字来明确标识继承另一个类，那么这个类默认继承<code>object</code>类</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li><code>toString()</code>方法<ul><li>在<code>Object</code>类中定义<code>toString()</code>方法的时候放的对象时哈希码（即对象地址字符串）</li></ul></li><li><code>equals()</code>方法<ul><li>比较的是对象的引用是否执行同一块内存地址</li><li>一般情况下比较两个对象时比较它的值是否一致，所有要进行重写<code>@Override</code> </li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的Stream流</title>
      <link href="/my-blog/Java/Java%E7%9A%84Stream%E6%B5%81/"/>
      <url>/my-blog/Java/Java%E7%9A%84Stream%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-简单体验一下Stream流"><a href="#第一章-简单体验一下Stream流" class="headerlink" title="第一章 简单体验一下Stream流"></a>第一章 简单体验一下Stream流</h2><ul><li>我们使用Stream流的方式，可以用来遍历集合，对集合中的数据进行过滤等，Stream流是在jdk1.8之后出现 </li><li>代码示例<pre><code class="lang-java">public class DemoTextStream{  public static void main(String[] args){      // 创建一个list集合，用来存储姓名      List&lt;String&gt; list = new ArrayList&lt;&gt;();      list.add(&quot;李冰冰&quot;);      list.add(&quot;彭于晏&quot;);      list.add(&quot;李易峰&quot;);      list.add(&quot;李沁&quot;);      list.add(&quot;王思聪&quot;);      // 对List集合的元素进行过滤，只要以张开头的元素，存储到一个新的集合中      // 对listA集合进行过滤，只要姓名长度为三的人      // 遍历集合      list.Stream()              .filter(name-&gt;name.startsWith(&quot;李&quot;))              .filter(name-&gt;name.length()==3)              .foreach(name-&gt;System.out.println(name));  }}</code></pre><h3 id="流式思想的概述"><a href="#流式思想的概述" class="headerlink" title="流式思想的概述"></a>流式思想的概述</h3><blockquote><p>对于流式思想，可以<strong>把它想象成工厂的“流水线”</strong>。通过一系列的加工、过滤得到最后的产品</p></blockquote></li></ul><hr><h3 id="何为Stream"><a href="#何为Stream" class="headerlink" title="何为Stream"></a>何为Stream</h3><ul><li><strong>Stream流实际上是一个来自数据源的元素队列</strong></li><li><strong>Java中的Stream并不会存储元素，而是按需计算</strong></li><li><strong>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。</strong></li></ul><hr><h2 id="第二章-获取Stream流的方式"><a href="#第二章-获取Stream流的方式" class="headerlink" title="第二章 获取Stream流的方式"></a>第二章 获取Stream流的方式</h2><h2 id="java-util-stream-Stream-lt-T-gt-是java中新加入的最常用的流接口"><a href="#java-util-stream-Stream-lt-T-gt-是java中新加入的最常用的流接口" class="headerlink" title="- java.util.stream.Stream&lt;T&gt;是java中新加入的最常用的流接口"></a>- <code>java.util.stream.Stream&lt;T&gt;</code>是java中新加入的<strong>最常用的流接口</strong></h2><ul><li><p><strong>获取流的两种方式</strong></p><ul><li><strong>所有的collection集合都可以通过stream默认方法获取流</strong></li><li><p><strong>Stream接口的静态方法of可以获取数组对应的流</strong><code>static&lt;T&gt; Stream&lt;T&gt; of(T...values)</code>参数是一个<strong>可变参数</strong>，可以通过这个方法传递一个数组</p><ul><li><p>代码演示：</p><pre><code class="lang-java">public class DemoMethodAcq{  public static void main(String[] args){      //把集合转换为Stream流      List&lt;String&gt; list = new Arraylist&lt;String&gt;();      Stream&lt;String&gt; str = list.stream();      Set&lt;String&gt; set = new HashSet&lt;&gt;();      Stream&lt;String&gt; stream2 = set.stream();      Map&lt;String,String&gt; map = new HashMap&lt;&gt;();      //获取键，存储到一个Set集合中      Set&lt;String&gt; keyset =map.keyset();      Stream&lt;String&gt; Stream3 = keyset.stream();      //获取值，存储到一个Collection集合中      Collection&lt;String&gt; values = map.values();      Stream&lt;String&gt; stream4 = values.stream();      //获取键值对      Set&lt;Map.Entry&lt;String,String&gt;&gt; entries = map.entries();      Stream&lt;Map.Entry&lt;String,String&gt;&gt; stream5 = entries.stream();      //把数组转换为Stream流      Stream&lt;Integer&gt; stream6 = Stream.of(1,2,3,4,5);      //可变参数可以传递数组      Integer[] arr = {1,2,3,4,5};      Stream&lt;Integer&gt; stream7 = Stream.of(arr);      String[] arr2 ={&quot;a&quot;,&quot;bb&quot;,&quot;ccc&quot;};      Stream&lt;String&gt; stream8 = Stream.of(arr2);  }}</code></pre></li></ul></li></ul></li></ul><hr><h2 id="第三章-Stream流的常用方法"><a href="#第三章-Stream流的常用方法" class="headerlink" title="第三章 Stream流的常用方法"></a>第三章 Stream流的常用方法</h2><blockquote><p>流模型的操作被分为两种方法：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.<strong>延迟方法</strong>:&nbsp;&nbsp;&nbsp;返回值类型仍然是<code>Stream</code>接口自身类型的方法，因此支持链式调用（除了延时方法其他均为终结方法）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.<strong>终结方法</strong>:&nbsp;&nbsp;&nbsp;返回值类型不在是<code>Stream</code>接口自身类型的方法，因此不在支持类似<code>StringBuilder</code>那样的链式调用（终结方法包括<code>count</code>和<code>forEach</code>方法）</p><h3 id="1、forEach方法（逐一处理）"><a href="#1、forEach方法（逐一处理）" class="headerlink" title="1、forEach方法（逐一处理）"></a>1、forEach方法（逐一处理）</h3><ul><li>首先，此方法<strong>非for循环的for-each循环方法</strong></li><li>其标准格式为：<pre><code class="lang-java">void forEach(Consumer&lt;? suoer T&gt; action);</code></pre></li></ul><hr><ul><li><strong>forEach方法是通过接收一个Consumer接口函数，会使每一个流元素交给该函数处理</strong></li><li>可以简记为：<ul><li>forEach是用来遍历流数据的</li><li>它是一个终结方法，遍历之后就不能继续调用Stream流中的其他方法</li></ul></li><li>代码演示：<pre><code class="lang-java">public class Demo_forEach{    public static void main(String[] args){        //获取一个Stream流        Stream&lt;String&gt; stream = Stream.of(&quot;张三&quot;，&quot;李四&quot;，&quot;w王五&quot;，&quot;赵六&quot;);        //使用Stream流中的方法forEach对Stream流中的数据进行遍历        stream.forEach((String name)-&gt; {            System.out.println(name);        });        /* 简写可以这样：         stream.forEach(name-&gt;             System.out.println(name)        );        */    }}</code></pre><h3 id="2、filter方法（过滤）"><a href="#2、filter方法（过滤）" class="headerlink" title="2、filter方法（过滤）"></a>2、filter方法（过滤）</h3></li><li><strong>使用<code>filter</code>方法可以将一个流转换成另一个字节流</strong><pre><code class="lang-java">Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);</code></pre><ul><li>此接口接收一个<code>Predicate</code>函数式接口参数作为筛选条件,即：<pre><code class="lang-java">boolean test(T t);</code></pre><ul><li>该方法是Predicate接口中的一个抽象方法<pre><code class="lang-java">public class Demo_filter{public static void main(String[] args){    //创建一个Stream流    Stream&lt;String&gt; stream = Stream.of(&quot;李冰冰&quot;,&quot;李易峰&quot;,&quot;彭于晏&quot;,&quot;李沁&quot;,&quot;王思聪&quot;);    //对Stream流中的元素进行过滤，筛选出姓“李”的人    Stream&lt;String&gt; stream2 = stream.filter((String name)-&gt;{        return name.startWith(&quot;李&quot;);    });    //遍历stream2    stream.forEach(name-&gt; System.out.println(name));}}</code></pre></li></ul></li><li><strong>Stream流属于管道流，只能被消费一次</strong></li><li><strong>第一次Stream流调用完毕后，数据会流到下一个Stream上</strong></li><li><strong>此时第一个Stream流消费完毕，就会关闭</strong></li></ul></li></ul></blockquote><h3 id="3、map方法（映射）"><a href="#3、map方法（映射）" class="headerlink" title="3、map方法（映射）"></a>3、map方法（映射）</h3><ul><li><strong>map方法</strong>是将流中的元素映射到另一个流中，可以使用map方法<pre><code class="lang-java">&lt;R&gt; Stream&lt;R&gt; map{Function&lt;? super T,? extends R&gt; mapper};</code></pre><ul><li>该接口需要一个<code>Function</code>的函数式接口参数</li><li>使用的是Function接口的抽象方法：<br><code>R apply(T t);</code></li></ul></li></ul><hr><ul><li>代码演示：<pre><code class="lang-java">public class Demo_map{    public static void main(String[] args){        //获取一个String类型的Stream流        Stream&lt;String&gt; stream = Stream.of(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;);        //使用map方法，把字符串类型的整数，转换（映射）到Integer类型的整数        Stream&lt;Integer&gt; stream2 = stream.map((String s)-&gt;{            return Integer.parseInt(s);        });        //遍历stream2        stream2.forEach(i-&gt; System.out.println(i));    }}</code></pre><h3 id="4、count方法（统计个数）"><a href="#4、count方法（统计个数）" class="headerlink" title="4、count方法（统计个数）"></a>4、count方法（统计个数）</h3></li><li>Stream流通过<code>count</code>方法来对流中的元素进行统计，即：<pre><code class="lang-java">long count();</code></pre></li><li><strong>count方法是一个终结方法，返回值是一个Long类型的整数，不能再继续调用Stream流中的其他方法</strong></li><li><p>代码示例：</p><pre><code class="lang-java">import java.util.stream.Stream;public class Demo_count{    public static void main(String[] args){        Stream&lt;String&gt; stream = Stream.of(&quot;李冰冰&quot;,&quot;李易峰&quot;,&quot;王思聪&quot;);        Stream&lt;String&gt; result = stream.filter(s-&gt; s.startWith(&quot;李&quot;));        System.out.println(result.count());//输出为2    }}</code></pre><h3 id="5、limit方法（截取使用前几个）"><a href="#5、limit方法（截取使用前几个）" class="headerlink" title="5、limit方法（截取使用前几个）"></a>5、limit方法（截取使用前几个）</h3></li><li><pre><code class="lang-limit```方法可以对流进行截取，只取用前n个，即：">```javaStream&lt;T&gt; limit(long maxSize);</code></pre><ul><li>参数是一个Long类型，如果集合当前长度大于参数则进行截取，否则不操作</li><li><strong>limit方法是一个延迟方法，返回的是一个新的流，可以调用Stream流的其他方法</strong></li><li>代码展示：<pre><code class="lang-java">public class Demo_limit{  public static void main(String[] args){      //获取一个Stream流      String[] arr = {&quot;李冰冰&quot;,&quot;李易峰&quot;,&quot;王思聪&quot;};      Stream&lt;String&gt; stream = Stream.of(arr);      //使用Limit对Stream流中的元素进行截取，只要前2个元素      Stream&lt;String&gt; stream2 =stream.limit(2);      //遍历stream2      stream2.forEach(name-&gt; System.out.println(name));  }}</code></pre><h3 id="6、skip方法（跳过前几个）"><a href="#6、skip方法（跳过前几个）" class="headerlink" title="6、skip方法（跳过前几个）"></a>6、skip方法（跳过前几个）</h3></li></ul></li><li>如果需要跳过前几个元素，可以使用<code>skip</code>方法进行截取流，即：<pre><code class="lang-java">Stream&lt;T&gt; skip(long n);</code></pre><ul><li>若要跳过的元素个数n大于流中元素的个数，则会截取流，得到一个长度为0的空流（新流）</li><li>代码展示：<pre><code class="lang-java"> public class Demo_limit{        public static void main(String[] args){        //获取一个Stream流        String[] arr = {&quot;李冰冰&quot;,&quot;李易峰&quot;,&quot;王思聪&quot;};        Stream&lt;String&gt; stream = Stream.of(arr);        //使用skip跳过前2个元素        Stream&lt;String&gt; stream2 =stream.skip(2);        //遍历stream2        stream2.forEach(name-&gt; System.out.println(name));    }}</code></pre><h3 id="7、concat方法（组合）"><a href="#7、concat方法（组合）" class="headerlink" title="7、concat方法（组合）"></a>7、concat方法（组合）</h3></li></ul></li><li><p>如果有两个流，需要合并为一个流，则需要使用<code>concat</code>静态方法，即：</p><pre><code class="lang-java">static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b);</code></pre><blockquote><p>备注：这是一个静态方法，与<code>java.lang.String</code>当中的<code>concat</code>方法不同</p><ul><li>代码展示：<br>```java<br>import java.util.stream.Stream;</li></ul></blockquote><p>public class Demo_concat{</p><pre><code>public static void main(String[] args){    Stream&lt;String&gt; streamA = Stream.of(&quot;李冰冰&quot;);    Stream&lt;String&gt; streamB = Stream.of(&quot;李易峰&quot;);    Stream&lt;String&gt; result = Stream.concat(streamA,streamB);}</code></pre><p>}<br>```</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络编程</title>
      <link href="/my-blog/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/my-blog/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><hr><ul><li>计算机之间通过传输介质、通信设施和网络通信协议互联，实现资源共享和数据传输。而我们的网络编程就是<strong>使用程序使互联网的两个（或多个）计算机之间进行数据传输。</strong>当然java语言，为了实现两个计算机之间的数据传输，提供了一系列的接口，使得开发人员可以方便的实现。</li></ul><h2 id="2、OSI与TCP-IP模型"><a href="#2、OSI与TCP-IP模型" class="headerlink" title="2、OSI与TCP/IP模型"></a>2、OSI与TCP/IP模型</h2><hr><h3 id="模型对比"><a href="#模型对比" class="headerlink" title="模型对比"></a>模型对比</h3><p><img data-src="http://ww1.sinaimg.cn/large/007uxMgDgy1gizstyuicoj30m80h0gne.jpg" alt="image-20200623105550900.png"></p><ul><li>TCP/IP支持跨层封装 ；但OSI不支持</li><li>TCP/IP仅仅支持IP网络协议 ；OSI支持多种网络层协议</li><li>TCP是面向连接的可靠的传输协议</li><li>UDP是非面向连接的不可靠的传输协议</li></ul><h3 id="TCP-IP模型中的协议剖析"><a href="#TCP-IP模型中的协议剖析" class="headerlink" title="TCP/IP模型中的协议剖析"></a>TCP/IP模型中的协议剖析</h3><p><img data-src="http://ww1.sinaimg.cn/large/007uxMgDgy1gizsusacczj30ta0gbtab.jpg" alt="image-20200623110038567.png"></p><ul><li><p><strong>该模型中几个主要的协议术语及其作用</strong></p><ul><li><p><strong>TCP（传输控制协议）</strong>：通过使用一个校验码检验数据是否发生错误，在接收和转发中都使用计算校验和，并同时对数据进行加密</p></li><li><p><strong>UDP（用户数据报协议）</strong>：UDP使用底层的互联网协议来传送报文，同IP一样提供不可靠的无连接数据包传输服务。它不提供报文到达确认、排序、及流量控制等功能</p></li><li><p><strong>FTP（文件传输协议）</strong>：让用户连接上一个远程计算机（这些计算机上运行着FTP服务器程序）察看远程计算机有哪些文件，然后把文件从远程计算机上拷到本地计算机，或把本地计算机的文件送到远程计算机去。</p></li><li><p><strong>SMTP（邮件消息传输协议）</strong>：SMTP是一种提供可靠且有效电子邮件传输的协议。它是建立在FTP文件传输服务上的一种邮件服务，主要用于传输系统之间的邮件信息并提供来信有关的通知。</p><blockquote><p> SMTP重要的特性之一是它能跨越网络传输邮件，也即“SMTP邮件中继”。使用SMTP，可实现相同网络上处理机之间的邮件传输，也可以通过中继器或网关实现某处理机与其它网络之间的邮件传输。具有域名服务系统(DNS)功能的邮件交换服务器还可以用来识别出传输邮件的下一跳IP地址。</p></blockquote></li></ul></li></ul><h2 id="3、IP"><a href="#3、IP" class="headerlink" title="3、IP"></a>3、IP</h2><hr><ul><li><strong>IP（网际协议）</strong> ：提高网络可扩展性，为主机提供一种无连接的数据传输服务</li><li>唯一定位一台网络上的计算机</li><li><code>127.0.0.1</code>为本机地址<code>localhost</code></li></ul><h2 id="4、端口（port）"><a href="#4、端口（port）" class="headerlink" title="4、端口（port）"></a>4、端口（port）</h2><hr><ul><li><p>端口表示计算机的一个程序的进程</p><ul><li><p>不同的进程有不同的端口号，并且端口号不能重复（单个协议下）</p></li><li><p>端口号范围限制为 0 ~ 65535</p></li><li><p>端口分类</p><ul><li><p>公有端口 0 ~ 1023</p><ul><li>HTTP ：80</li><li>HTTPS ：443</li><li>FTP ： 21</li><li>Telnet ：23</li></ul></li><li><p>程序注册端口： 1024 ~ 49151 分配用户或程序</p><ul><li>Tomcat ：8080</li><li>MySQL ：3306</li><li>Oracle ：1521</li></ul></li><li><p>动态私有 49152 ~ 65535</p><pre><code class="lang-bash"> netstat -ano #查看所有端口 netstat -ano|findstr &quot;8080&quot; # 查看指定端口 tasklist|findstr &quot;8696&quot; # 查看指定端口的进程 ctrl + shift +ESC # 调用任务管理器</code></pre></li></ul></li></ul></li></ul><h2 id="5、TCP实现聊天"><a href="#5、TCP实现聊天" class="headerlink" title="5、TCP实现聊天"></a>5、TCP实现聊天</h2><hr><ul><li><p><strong>客户端（Client）</strong></p><ol><li><p>获取服务端的地址与端口号</p></li><li><p>连接服务器端口，建立socket连接</p></li><li><p>发送信息（IO流）</p></li><li><p>关闭资源</p><pre><code class="lang-java">Socket socket = null;OutputStream os = null;        try {            //首先要知道服务端的地址和端口号            InetAddress serverIp = InetAddress.getByName(&quot;127.0.0.1&quot;);            int port = 9999;            //建立socket连接            socket = new Socket(serverIp,9999);            //发送信息            os = socket.getOutputStream();            os.write(&quot;我们已经成为好友，可以开始聊天&quot;.getBytes());        } catch (Exception e) {            e.printStackTrace();        }finally {            if (os != null){                try {                    os.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            if (socket != null){                try {                    socket.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }</code></pre></li></ol></li></ul><ul><li><p><strong>服务端（Server）</strong></p><ol><li><p>建立socket服务器端口</p></li><li><p>调用端口的accept方法,等待用户端连接</p></li><li><p>读取用户信息（IO流）的inputStream</p></li><li><p>建立管道流，把数据从字节流转换为字符流</p></li><li><p>关闭资源</p><pre><code class="lang-java">    ServerSocket serverSocket = null;     Socket socket = null;      InputStream is = null;        ByteArrayOutputStream baos = null;        try {            //给一个服务端的地址             serverSocket = new ServerSocket(9999);            //等待客户端接入             socket = serverSocket.accept();            //读取客户端信息             is = socket.getInputStream();            //管道流             baos = new ByteArrayOutputStream();            byte[] buffer = new byte[1024];            int len;            while ((len=is.read(buffer))!= -1){                baos.write(buffer,0,len);            }            System.out.println(baos.toString());        } catch (IOException e) {            e.printStackTrace();        }finally {            //关闭资源            if(baos !=null){                try {                    baos.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            if (is !=null){                try {                    is.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            if (socket != null){                try {                    socket.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            if (serverSocket != null){                try {                    serverSocket.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }</code></pre></li></ol></li></ul><h2 id="6、TCP实现文件上传"><a href="#6、TCP实现文件上传" class="headerlink" title="6、TCP实现文件上传"></a>6、TCP实现文件上传</h2><hr><ul><li><p><strong>服务端（Server）</strong></p><pre><code class="lang-java"> public static void main(String[] args) throws Exception {         //创建服务         ServerSocket serverSocket = new ServerSocket(9000);         //监听客户端连接         Socket socket = serverSocket.accept();         //获取输入流         InputStream is = socket.getInputStream();         //此处写文件路径最好使用绝对路径，否则会报错         File file = new File(&quot;G://IDEA_Project/FIST/src/receive.jpg&quot;);         //文件输出         FileOutputStream fos = new FileOutputStream(file);         byte[] buffer = new byte[1024];         int len;         while ((len = is.read(buffer))!=-1){             fos.write(buffer,0,len);         }         //通知客户端接收完毕         OutputStream os = socket.getOutputStream();         os.write(&quot;服务端接收完毕，你可以断开连接&quot;.getBytes());         //关闭资源 (后创建先关闭原则)         fos.close();         is.close();         socket.close();         serverSocket.close();     }</code></pre></li></ul><ul><li><p><strong>客户端（client）</strong></p><pre><code class="lang-java"> public static void main(String[] args) throws Exception {         //创建一个socket连接         Socket socket = new Socket(InetAddress.getByName(&quot;127.0.0.1&quot;), 9000);         //建立一个输出流         OutputStream os = socket.getOutputStream();         //此处写文件路径最好使用绝对路径，否则会报错         File file = new File(&quot;G://IDEA_Project/FIST/src/lld.jpg&quot;);         //读取文件         FileInputStream fis = new FileInputStream(file);         //写入文件         byte[] buffer = new byte[1024];         int len;         while ((len= fis.read(buffer)) !=-1){             os.write(buffer,0,len);         }         //通知服务器，我已经结束啦         socket.shutdownOutput();         //确认服务端接收完毕，才断开连接         InputStream is = socket.getInputStream();         ByteArrayOutputStream baos = new ByteArrayOutputStream();         byte[] buffer2 =new byte[1024];         int len2;         while ((len2 = is.read(buffer2)) != -1){             baos.write(buffer2,0,len2);         }         System.out.println(baos.toString());         //关闭资源 (后创建先关闭原则)         baos.close();         is.close();         fis.close();         os.close();         socket.close();     }</code></pre></li></ul><h2 id="7、UDP实现消息的发送"><a href="#7、UDP实现消息的发送" class="headerlink" title="7、UDP实现消息的发送"></a>7、UDP实现消息的发送</h2><hr><ul><li><p><strong>客户端</strong></p><pre><code class="lang-java"> public static void main(String[] args) throws Exception {         //建立一个socket         DatagramSocket socket = new DatagramSocket();         //建立数据包         String msg = &quot;Hello,Server!&quot;;         //发送目的地         InetAddress localhost = InetAddress.getByName(&quot;localhost&quot;);         int port =9090;         //数据，数据长度的起始，目的地信息         DatagramPacket packet = new DatagramPacket(msg.getBytes(), 0, msg.getBytes().length, localhost, port);         //发送包         socket.send(packet);         //关闭流         socket.close();     }</code></pre></li></ul><ul><li><p><strong>服务端</strong></p><pre><code class="lang-java"> public static void main(String[] args) throws Exception {         //开放端口         DatagramSocket socket = new DatagramSocket(9090);         //接收数据包         byte[] buffer = new byte[1024];         DatagramPacket packet = new DatagramPacket(buffer, 0, buffer.length);         //接收包         socket.receive(packet);         //打印输出目的端地址及数据内容         System.out.println(packet.getAddress().getHostName());         System.out.println(new String(packet.getData(), 0, packet.getLength()));         //关闭流         socket.close();     }</code></pre></li></ul><h2 id="8、UDP实现循环发送"><a href="#8、UDP实现循环发送" class="headerlink" title="8、UDP实现循环发送"></a>8、UDP实现循环发送</h2><hr><ul><li><p><strong>Sender端</strong></p><p> ```java<br>  public static void main(String[] args) throws Exception {</p><pre><code>     //建立端口     DatagramSocket socket = new DatagramSocket(8888);     //数据,通过控制台输入数据     BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));</code></pre></li></ul><pre><code>       while (true){           String data =  reader.readLine();           byte[] datas = data.getBytes();           DatagramPacket packet = new DatagramPacket(datas,0,datas.length,new InetSocketAddress(&quot;localhost&quot;,6666));           socket.send(packet);           if (data.equals(&quot;bye&quot;)){               break;           }       }       socket.close();   }</code></pre><pre><code>+ **Receive端**   ```java   public static void main(String[] args) throws Exception {           DatagramSocket socket = new DatagramSocket(6666);           while (true){               byte[] container = new byte[1024];               DatagramPacket packet = new DatagramPacket(container, 0, container.length);               //阻塞式接收               socket.receive(packet);               byte[] data = packet.getData();               String receiveData = new String(data, 0, data.length);               System.out.println(receiveData);               if (receiveData.equals(&quot;bye&quot;)){                   break;               }           }           //关闭流           socket.close();       }</code></pre><ul><li>实际示例：<ul><li>在线咨询：通信双方既是发送方，也是接收方</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
