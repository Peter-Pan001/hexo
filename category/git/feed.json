{
    "version": "https://jsonfeed.org/version/1",
    "title": "理 想 净 土 • All posts by \"git\" category",
    "description": "不必匆忙，不必火花四溅，不必成为别人，只需成为自己",
    "home_page_url": "https://peter-pan001.github.io/my-blog",
    "items": [
        {
            "id": "https://peter-pan001.github.io/my-blog/git/git%E4%B8%8Egithub%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BA%86%E8%A7%A3/",
            "url": "https://peter-pan001.github.io/my-blog/git/git%E4%B8%8Egithub%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BA%86%E8%A7%A3/",
            "title": "git与github的基本了解",
            "date_published": "2020-10-25T12:32:42.000Z",
            "content_html": " <!-- 图片文件在博客目录 -->\n<h2 id=\"git的基本概述\"><a class=\"markdownIt-Anchor\" href=\"#git的基本概述\">#</a> git 的基本概述</h2>\n<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<ul>\n<li>\n<p><strong>git（分布式版本控制系统）</strong></p>\n</li>\n<li>\n<p><strong>git</strong>  是目前世界上最先进的分布式版本控制系统（没有之一）！</p>\n</li>\n<li>\n<p><strong>Linus</strong>  花了两周时间自己用 C 写了一个分布式版本控制系统，这就是 Git！一个月之内，Linux 系统的源码已经由 Git 管理了！牛是怎么定义的呢？大家可以体会一下。</p>\n</li>\n<li>\n<p><strong>Git</strong>  迅速成为最流行的分布式版本控制系统，尤其是 2008 年，GitHub 网站上线了，它为开源项目免费提供 Git 存储，无数开源项目开始迁移至 GitHub，包括 jQuery，PHP，Ruby 等等。</p>\n</li>\n<li>\n<p>历史就是这么偶然，如果不是当年 BitMover 公司威胁 Linux 社区，可能现在我们就没有免费而超级好用的 Git 了。</p>\n</li>\n</ul>\n<h3 id=\"集中式和分布式\"><a class=\"markdownIt-Anchor\" href=\"#集中式和分布式\">#</a> 集中式和分布式</h3>\n<ul>\n<li>\n<p>Linux 旗下的 CVS 和 SVN 都是集中式的版本控制系统，但 git 是分布式的版本控制系统</p>\n</li>\n<li>\n<p><strong>何为集中式版本控制系统？</strong></p>\n<ul>\n<li>版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</li>\n</ul>\n <!-- ![image-20200619205612791.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizt4sfy8aj30lq0gk77a.jpg) -->\n<p><img data-src=\"https://i.loli.net/2020/10/26/ZE9hXMW3YsPwJdL.jpg\" alt=\"gitfunbu.jpg\"></p>\n</li>\n</ul>\n<h3 id=\"何为分布式版本控制系统\"><a class=\"markdownIt-Anchor\" href=\"#何为分布式版本控制系统\">#</a> 何为分布式版本控制系统？</h3>\n<ul>\n<li>分布式版本控制系统根本没有 “中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件 A，你的同事也在他的电脑上改了文件 A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</li>\n</ul>\n<!-- ![image-20200619210019521.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizt5wmg7wj30m60gfdj7.jpg) -->\n<p><img data-src=\"https://i.loli.net/2020/10/26/CRZxh47WeIM9byv.jpg\" alt=\"gitfenbu2.jpg\"></p>\n<ul>\n<li>\n<p>集中式 VS 分布式</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">集中式（SVN）</th>\n<th style=\"text-align:center\">分布式（Git）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">是否有中央服务器</td>\n<td style=\"text-align:center\">有。开发人员需要从中央服务器获得最新版本的项目然后在本地开发，开发完推送给中央服务器。因此脱离服务器开发者是几乎无法工作的</td>\n<td style=\"text-align:center\">没有中央服务器，开发人员本地都有 Local Repository</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">网络依赖</td>\n<td style=\"text-align:center\">必须要联网才能工作，而且对网络的依赖性较强，如果推送的文件比较大而且网络状况欠佳，则提交文件的速度会受到很大的限制</td>\n<td style=\"text-align:center\">分布式在没有网络的情况下也可以执行 <code>commit</code> 、查看版本提交记录、以及分支操作，在有网络的情况下执行 <code>push</code>  到  <code>Remote Repository</code> 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">文件存储格式</td>\n<td style=\"text-align:center\">按照原始文件存储，体积较大</td>\n<td style=\"text-align:center\">按照元数据方式存储，体积很小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">是否有版本号</td>\n<td style=\"text-align:center\">有</td>\n<td style=\"text-align:center\">没有</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">分支操作的影响</td>\n<td style=\"text-align:center\">创建新的分支则所有的人都会拥有和你一样的分支</td>\n<td style=\"text-align:center\">分支操作不会影响其他开发人员</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">提交</td>\n<td style=\"text-align:center\">提交的文件会直接记录到中央版本库</td>\n<td style=\"text-align:center\">提交是本地操作，需要执行 push 操作才会到主要版本库</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h2 id=\"git的三种数据状态\"><a class=\"markdownIt-Anchor\" href=\"#git的三种数据状态\">#</a> git 的三种数据状态</h2>\n<hr>\n<h3 id=\"暂存态\"><a class=\"markdownIt-Anchor\" href=\"#暂存态\">#</a> 暂存态</h3>\n<ul>\n<li>git 传输文件实际上是进行数据的传输，每个用户机都存在一个数据的暂存区（temp），当用户机没有网络时，可以在本地把要上传到本地数据库的文件数据先放到暂存区（temp），待网络通畅时 git 会自动提交数据到指定的本地数据库（仓库）。此状态为 ---- 已暂存（staged）状态</li>\n</ul>\n<h3 id=\"提交态\"><a class=\"markdownIt-Anchor\" href=\"#提交态\">#</a> 提交态</h3>\n<ul>\n<li>当文件安全的保存到本地数据库时，此状态为 ---- 已提交（commit）状态</li>\n</ul>\n<h3 id=\"修改态\"><a class=\"markdownIt-Anchor\" href=\"#修改态\">#</a> 修改态</h3>\n<ul>\n<li>若文件只是进行更改内容，但尚未保存到数据库中，那么此状态就为 ---- 已修改（modify）状态</li>\n</ul>\n<h2 id=\"git的工作原理\"><a class=\"markdownIt-Anchor\" href=\"#git的工作原理\">#</a> git 的工作原理</h2>\n<hr>\n<h3 id=\"核心\"><a class=\"markdownIt-Anchor\" href=\"#核心\">#</a> 核心</h3>\n<ul>\n<li><strong>git</strong>  的工作原理不同于集中式版本控制系统（CVCS），git 赋予每个用户机上一个本地数据库，此数据库可同步到服务器的数据库中，当用户对文件做每一次的修改时，会把该文件的所有版本文件保存到本地数据库（即克隆文件），这样做的好处是，当没有网络时，也可以对文件的版本进行控制，而且要修改时，把修改后的文件进行标记，待网络通畅后会把被标记的文件提交到数据库中，供其他开发者使用。</li>\n</ul>\n<h2 id=\"获取git仓库\"><a class=\"markdownIt-Anchor\" href=\"#获取git仓库\">#</a> 获取 Git 仓库</h2>\n<h3 id=\"获取方式\"><a class=\"markdownIt-Anchor\" href=\"#获取方式\">#</a> 获取方式</h3>\n<ol>\n<li>将尚未进行版本控制的本地目录转换为 Git 仓库</li>\n<li>从其它服务器 <strong>克隆</strong> 一个已存在的 Git 仓库</li>\n</ol>\n<h3 id=\"在已存在的目录中初始化仓库\"><a class=\"markdownIt-Anchor\" href=\"#在已存在的目录中初始化仓库\">#</a> 在已存在的目录中初始化仓库</h3>\n<ul>\n<li>\n<p>第一步：打开 <code>git bash</code></p>\n</li>\n<li>\n<p>第二步：输入进入目录的命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$cd</span> /f/gitproject</pre></td></tr></table></figure></li>\n<li>\n<p>第三步：初始化仓库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$git</span> init</pre></td></tr></table></figure></li>\n</ul>\n<p>此步骤会在已创建的目录下生成一个.git 的子目录（该目录为隐藏文件）</p>\n<h3 id=\"添加文件\"><a class=\"markdownIt-Anchor\" href=\"#添加文件\">#</a> 添加文件</h3>\n<h4 id=\"创建文件\"><a class=\"markdownIt-Anchor\" href=\"#创建文件\">#</a> 创建文件</h4>\n<ul>\n<li>\n<p>方法一：在创建的 <code>gitproject</code>  目录下直接右键创建一个文件（例如：helloworld.java）</p>\n</li>\n<li>\n<p>方法二：在创建的 <code>gitproject</code>  目录下右键 <code>git bash here</code>  ，使用命令创建</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$touch</span> helloworld.java  //创建文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$git</span> status //查看文件状态</pre></td></tr></table></figure></li>\n<li>\n<p>方法三：直接打开 <code>git bash</code>  ，用 Linux 命令切换到 <code>gitproject</code>  目录下，输入方法二的命令即可！</p>\n<h4 id=\"把文件放入暂存区\"><a class=\"markdownIt-Anchor\" href=\"#把文件放入暂存区\">#</a> 把文件放入暂存区</h4>\n</li>\n<li>\n<p>通过 Linux 命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$git</span> <span class=\"token function\">add</span> helloworld.java</pre></td></tr></table></figure></li>\n<li>\n<p>此时再输入 git status 查看状态</p>\n<h4 id=\"把文件提交到仓库\"><a class=\"markdownIt-Anchor\" href=\"#把文件提交到仓库\">#</a> 把文件提交到仓库</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$git</span> commit -m<span class=\"token string\">\"new file helloworld.java\"</span></pre></td></tr></table></figure><p>(-m 为 message)</p>\n<h4 id=\"查看是否已提交\"><a class=\"markdownIt-Anchor\" href=\"#查看是否已提交\">#</a> 查看是否已提交</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$git</span> status</pre></td></tr></table></figure><p>如出现下图所示则提交成功</p>\n <!-- ![image-20200620142410488.png](http://ww1.sinaimg.cn/large/007uxMgDgy1giztadgl3fj30dq08lwew.jpg) -->\n<p><img data-src=\"https://i.loli.net/2020/10/26/Vhz9NZ3Tpyo8Onj.jpg\" alt=\"gitcmd.jpg\"></p>\n</li>\n</ul>\n<h3 id=\"克隆仓库\"><a class=\"markdownIt-Anchor\" href=\"#克隆仓库\">#</a> 克隆仓库</h3>\n<ul>\n<li>命令</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$git</span> clone <span class=\"token operator\">&lt;</span>url<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"查看当前文件状态\"><a class=\"markdownIt-Anchor\" href=\"#查看当前文件状态\">#</a> 查看当前文件状态</h3>\n<ul>\n<li>命令</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$git</span> status</pre></td></tr></table></figure>",
            "tags": [
                "git、github"
            ]
        }
    ]
}