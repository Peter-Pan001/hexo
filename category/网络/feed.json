{
    "version": "https://jsonfeed.org/version/1",
    "title": "理 想 净 土 • All posts by \"网络\" category",
    "description": "不必匆忙，不必火花四溅，不必成为别人，只需成为自己",
    "home_page_url": "https://peter-pan001.github.io/my-blog",
    "items": [
        {
            "id": "https://peter-pan001.github.io/my-blog/network/Servlet%E5%92%8CTomcat",
            "url": "https://peter-pan001.github.io/my-blog/network/Servlet%E5%92%8CTomcat",
            "title": "Servlet和Tomcat",
            "date_published": "2020-10-25T12:29:30.000Z",
            "content_html": "<h2 id=\"第一章-何为tomcat\"><a class=\"markdownIt-Anchor\" href=\"#第一章-何为tomcat\">#</a> 第一章 何为 Tomcat？</h2>\n<h3 id=\"tomcat概述\"><a class=\"markdownIt-Anchor\" href=\"#tomcat概述\">#</a> Tomcat 概述</h3>\n<ul>\n<li>简而言之，Tomcat 简单的说就是一个运行 JAVA 的网络服务器，<strong>底层是 Socket 的一个程序，它也是 JSP 和 Serlvet 的一个容器。</strong></li>\n<li>通过 Tomcat 可以使别人访问到自己的网页的一个程序</li>\n</ul>\n<h3 id=\"tomcat目录解读\"><a class=\"markdownIt-Anchor\" href=\"#tomcat目录解读\">#</a> Tomcat 目录解读</h3>\n<!-- ![tomcat_dir.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizs61ddsfj30pk0bawfw.jpg) -->\n<p><img data-src=\"https://i.loli.net/2020/10/26/XARbpWP4JFDHvY8.jpg\" alt=\"tomcat_dir.png\"></p>\n<ul>\n<li><strong>各个文件的解读</strong></li>\n</ul>\n<ol>\n<li><strong>bin</strong>：启动和关闭 tomcat 的 bat 文件</li>\n<li><strong>conf</strong>：配置文件\n<ul>\n<li><strong>server.xml</strong> 该文件用于配置 server 相关的信息，比如 tomcat 启动的端口号，配置主机 (Host)</li>\n<li><strong>web.xml</strong> 文件配置与 web 应用（web 应用相当于一个 web 站点）</li>\n<li><strong>tomcat-user.xml</strong> 配置用户名密码和相关权限.</li>\n</ul>\n</li>\n<li><strong>lib</strong>：该目录放置运行 tomcat 运行需要的 jar 包</li>\n<li><strong>logs</strong>：存放日志，当我们需要查看日志的时候，可以查询信息</li>\n<li><strong>webapps</strong>：放置我们的 web 应用</li>\n<li><strong>work 工作目录</strong>：该目录用于存放 jsp 被访问后生成对应的 server 文件和.class 文件</li>\n</ol>\n<hr>\n<h2 id=\"第二章-servlet\"><a class=\"markdownIt-Anchor\" href=\"#第二章-servlet\">#</a> 第二章 Servlet</h2>\n<h3 id=\"简述-java-servlet\"><a class=\"markdownIt-Anchor\" href=\"#简述-java-servlet\">#</a> 简述 java servlet</h3>\n<ul>\n<li>Servlet 本质上就是一个 java 接口，在该接口中包含五个方法，分别是：\n<ul>\n<li>初始化</li>\n<li>获取配置</li>\n<li>服务</li>\n<li>获取信息</li>\n<li>销毁</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Servlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletConfig</span> config<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ServletConfig</span> <span class=\"token function\">getServletConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getServletInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"servlet有什么作用\"><a class=\"markdownIt-Anchor\" href=\"#servlet有什么作用\">#</a> Servlet 有什么作用</h3>\n<ul>\n<li>在网上实现聊天、发帖等交互功能</li>\n</ul>\n<h3 id=\"浅谈http协议\"><a class=\"markdownIt-Anchor\" href=\"#浅谈http协议\">#</a> 浅谈 HTTP 协议</h3>\n<ul>\n<li>\n<p><strong>何为 HTTP 协议</strong></p>\n<ul>\n<li><strong>超文本传输协议（HTTP，HyperText Transfer Protocol)</strong> ~~~~ 是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。它是 TCP/IP 协议的一个应用层协议</li>\n<li>简单来说，HTTP 协议就是客户端和服务器交互的一种通迅的格式。</li>\n</ul>\n</li>\n<li>\n<p><strong>HTTP 请求</strong></p>\n<ul>\n<li>\n<p>浏览器向服务器请求某个 web 资源时，称之为浏览器向服务器发送了一个 http 请求。</p>\n</li>\n<li>\n<p>一个完整 http 请求应该包含三个部分：</p>\n<ol>\n<li><strong>请求行</strong> ----- 描述客户端 client 的请求方式、请求资源名称以及 HTTP 版本号</li>\n<li><strong>多个消息头</strong> ----- 描述客户端请求哪台主机、以及客户端的环境信息</li>\n<li><strong>一个空行</strong></li>\n</ol>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>请求行</strong>\n<ul>\n<li>\n<p><strong>请求行中的 GET 称之为请求方式</strong>，请求方式有： <code>POST,GET,HEAD,OPTIONS,DELETE,TRACE,PUT</code></p>\n</li>\n<li>\n<p><strong>常用的方法</strong>：<strong>POST、GET</strong></p>\n</li>\n<li>\n<p>一般来说，当我们点击超链接，通过地址栏访问都是 get 请求方式。通过表单提交的数据一般是 post 方式。</p>\n</li>\n<li>\n<p>可以简单理解 GET 方式用来查询数据，POST 方式用来提交数据，get 的提交速度比 post 快</p>\n</li>\n<li>\n<p><strong>GET 方式：在 URL 地址后附带的参数是有限制的，其数据容量通常不能超过 1K</strong>。</p>\n</li>\n<li>\n<p><strong>POST 方式：可以在请求的实体内容中向服务器发送数据，传送的数据量无限制</strong>。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>HTTP 响应</strong>\n<ul>\n<li>\n<p>一个 HTTP 响应代表着服务器向浏览器回送数据</p>\n</li>\n<li>\n<p>一个完整的 HTTP 响应应该包含四个部分:</p>\n<ol>\n<li>一个状态行</li>\n<li>多个消息头</li>\n<li>一个空行</li>\n<li>实体内容</li>\n</ol>\n</li>\n<li>\n<p><strong>状态行</strong></p>\n<ul>\n<li>格式：HTTP 版本号　状态码　原因叙述</li>\n<li>状态行：HTTP/1.1 200 OK</li>\n<li>状态码用于表示服务器对请求的处理结果，它是一个三位的十进制数。响应状态码分为 5 类</li>\n</ul>\n  <!-- ![servletzt.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizs7b2xu7j30m806iwha.jpg) -->\n<p><img data-src=\"https://i.loli.net/2020/10/26/FoCInYbJ6SvKXmV.png\" alt=\"servletzt.png\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"javaweb目录\"><a class=\"markdownIt-Anchor\" href=\"#javaweb目录\">#</a> JavaWeb 目录</h3>\n<!-- ![webdir.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizs7w9yl1j30w00i0q3a.jpg) -->\n<p><img data-src=\"https://i.loli.net/2020/10/26/IVYlJMZNU8shmjb.png\" alt=\"webdir.png\"></p>\n<ul>\n<li>WEB-INF 目录下的资源是不能直接被浏览器访问的</li>\n<li>web.xml 文件是 web 程序的主要配置文件</li>\n<li>所有的 classes 文件都放在 classes 目录下</li>\n<li>jar 文件放在 lib 目录下</li>\n</ul>\n<hr>\n<h3 id=\"servlet生命周期\"><a class=\"markdownIt-Anchor\" href=\"#servlet生命周期\">#</a> Servlet 生命周期</h3>\n<ol>\n<li><strong>加载 Servlet</strong>。当 Tomcat 第一次访问 Servlet 的时候，<strong>Tomcat 会负责创建 Servlet 的实例</strong></li>\n<li><strong>初始化</strong>。当 Servlet 被实例化后，Tomcat 会调用 init () 方法初始化这个对象</li>\n<li><strong>处理服务</strong>。当浏览器访问 Servlet 的时候，Servlet 会调用 service () 方法处理请求</li>\n<li><strong>销毁</strong>。当 Tomcat 关闭时或者检测到 Servlet 要从 Tomcat 删除的时候会自动调用 destroy () 方法，让该实例释放掉所占的资源。一个 Servlet 如果长时间不被使用的话，也会被 Tomcat 自动销毁</li>\n<li><strong>卸载</strong>。当 Servlet 调用完 destroy () 方法后，等待垃圾回收。如果有需要再次使用这个 Servlet，会重新调用 init () 方法进行初始化操作。</li>\n</ol>\n<ul>\n<li><strong>总结：只要访问 Servlet，service () 就会被调用。init () 只有第一次访问 Servlet 的时候才会被调用。<br>\ndestroy () 只有在 Tomcat 关闭的时候才会被调用。</strong></li>\n</ul>\n<hr>\n<h3 id=\"编写一个简单的servlet请求\"><a class=\"markdownIt-Anchor\" href=\"#编写一个简单的servlet请求\">#</a> 编写一个简单的 servlet 请求</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrintWriter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Servlet\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Servlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world,servlet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<h3 id=\"servlet的调用图\"><a class=\"markdownIt-Anchor\" href=\"#servlet的调用图\">#</a> Servlet 的调用图</h3>\n<!-- ![servlet01.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizs8khnchj313g0n0dkr.jpg) -->\n<p><img data-src=\"https://i.loli.net/2020/10/26/u4EhXdURHD7Kn2T.png\" alt=\"servlet01.png\"></p>\n<h3 id=\"servlet细节\"><a class=\"markdownIt-Anchor\" href=\"#servlet细节\">#</a> Servlet 细节</h3>\n<ul>\n<li><strong>一个已经注册的 Servlet 可以被多次映射</strong>\n<ul>\n<li>同一个 Servlet 可以被映射到多个 URL 中</li>\n</ul>\n</li>\n<li><strong>Servlet 映射的 URL 可以使用通配符</strong>\n<ul>\n<li>通配符的两种格式\n<ul>\n<li>*. 扩展名</li>\n<li>正斜杠 / 开头并以 /* 结尾\n<ul>\n<li>其中 *. 扩展名的优先级最低</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"servlet是单例的\"><a class=\"markdownIt-Anchor\" href=\"#servlet是单例的\">#</a> Servlet 是单例的</h3>\n<hr>\n<h3 id=\"为什么servlet是单例的\"><a class=\"markdownIt-Anchor\" href=\"#为什么servlet是单例的\">#</a> 为什么 Servlet 是单例的？</h3>\n<ul>\n<li><strong>浏览器多次对 Servlet 的请求</strong>，一般情况下，服务器只创建一个 Servlet 对象，也就是说，<strong>Servlet 对象一旦创建类</strong>，<strong>就会驻留在内存中，后续的请求做服务，直到服务器关闭</strong></li>\n</ul>\n<h3 id=\"每次访问请求对象和响应对象都是新的\"><a class=\"markdownIt-Anchor\" href=\"#每次访问请求对象和响应对象都是新的\">#</a> 每次访问请求对象和响应对象都是新的</h3>\n<ul>\n<li><strong>对于每次访问要求，<strong>Servlet 引擎都会</strong>创建一个新的 HttpServletRequest 请求对象和一个新的 HttpServletResponse 响应对象</strong>，然后将这两个对象<strong>作为参数传递给它调用的 Servlet 的 service () 方法，service 方法再跟进请求方式分别调用 doXxx 方法</strong></li>\n</ul>\n<h3 id=\"线程安全问题\"><a class=\"markdownIt-Anchor\" href=\"#线程安全问题\">#</a> 线程安全问题</h3>\n<ul>\n<li><strong>当多个用户访问 Servlet 的时候，服务器会为每个用户创建一个线程，当多个用户并发 Servlet 共享资源的时候就会出现线程安全问题</strong>\n<ul>\n<li>如果一个变量需要多个用户分享，则应当在访问该变量的时候，加入同步机制：<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>对象名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>如果一个变量不需要共享，则直接在 <code>doGet()</code>  或者 <code>doPost()</code>  定义，这样不会存在线程安全问题</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"servletconfig对象\"><a class=\"markdownIt-Anchor\" href=\"#servletconfig对象\">#</a> ServletConfig 对象</h3>\n<h4 id=\"何为servletconfig对象\"><a class=\"markdownIt-Anchor\" href=\"#何为servletconfig对象\">#</a> 何为 ServletConfig 对象</h4>\n<hr>\n<blockquote>\n<p>通过此对象可以读取 Web.xml 中配置的初始化参数</p>\n</blockquote>\n<hr>\n<ul>\n<li>作用：\n<ul>\n<li>大大提高程序的灵活性</li>\n<li>当需要修改时，只需更改配置文件 Web.xml 即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"servletcontext对象\"><a class=\"markdownIt-Anchor\" href=\"#servletcontext对象\">#</a> ServletContext 对象</h3>\n<h4 id=\"何为servletcontext对象\"><a class=\"markdownIt-Anchor\" href=\"#何为servletcontext对象\">#</a> 何为 ServletContext 对象</h4>\n<hr>\n<blockquote>\n<p>当 Tomcat 启动的时候，就会创建一个 ServletContext 对象，它代表着当前 Web 站点</p>\n</blockquote>\n<hr>\n<ul>\n<li>作用：\n<ul>\n<li>ServletContext 代表当前 Web 站点，那么<strong>所有 Servlet 都共享一个 ServletContext 对象</strong>，因此<strong> Servlet 之间可以通过 ServletContext 实现通讯</strong></li>\n<li>ServletConfig 获取的是配置单个 Servlet 的参数信息，<strong>ServletContext 可以获取的是配置整个 Web 站点的参数信息</strong></li>\n<li><strong>利用 ServletContext 读取 web 站点的资源文件</strong></li>\n<li><strong>实现 Servlet 转发</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-request和response\"><a class=\"markdownIt-Anchor\" href=\"#第三章-request和response\">#</a> 第三章 request 和 response</h2>\n<h3 id=\"request-response对象\"><a class=\"markdownIt-Anchor\" href=\"#request-response对象\">#</a> request、response 对象</h3>\n<hr>\n<blockquote>\n<p> Tomcat 收到客户端的 HTTP 请求，会针对每一次请求，分别创建一个代表请求的 **request 对象和代表响应的 response 对象</p>\n</blockquote>\n<hr>\n<ul>\n<li>我们在获取浏览器传输过来的数据时，通过使用 request 对象即可</li>\n<li>如果要向浏览器输出数据，则需要使用 response 对象</li>\n</ul>\n<h3 id=\"什么是httpservletresponse对象\"><a class=\"markdownIt-Anchor\" href=\"#什么是httpservletresponse对象\">#</a> 什么是 HttpServletResponse 对象？</h3>\n<ul>\n<li>HTTP 响应由<strong>状态行、实体内容、消息头和一个空行组成</strong>。HttpServletResponse 对象就封装了 HTTP 响应的信息</li>\n</ul>\n<h4 id=\"调用getoutputstream方法向浏览器输出数据\"><a class=\"markdownIt-Anchor\" href=\"#调用getoutputstream方法向浏览器输出数据\">#</a> 调用 getOutputStream () 方法向浏览器输出数据</h4>\n<ul>\n<li>代码：<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取 ServletOutputStream 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">ServletOutputStream</span> <span class=\"token class-name\">ServletOutputStream</span><span class=\"token operator\">=</span> response。<span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 使用 meta 标签和 http 消息头，告诉浏览器回送数据的编码和格式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  servletOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;meta http-equiv='content-type' content='text/html;charset=UTF-8'>\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  servletOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是吴亦凡\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"调用getwriter方法向浏览器输出数据\"><a class=\"markdownIt-Anchor\" href=\"#调用getwriter方法向浏览器输出数据\">#</a> 调用 getWriter () 方法向浏览器输出数据</h4>\n<ul>\n<li>代码：<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置浏览器用 UTF-8 编码显示数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获取到 printwriter 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">PrintWriter</span> printwriter <span class=\"token operator\">=</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>printWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"完成finish\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "network"
            ]
        }
    ]
}