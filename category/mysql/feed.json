{
    "version": "https://jsonfeed.org/version/1",
    "title": "理 想 净 土 • All posts by \"mysql\" category",
    "description": "不必匆忙，不必火花四溅，不必成为别人，只需成为自己",
    "home_page_url": "https://peter-pan001.github.io/my-blog",
    "items": [
        {
            "id": "https://peter-pan001.github.io/my-blog/MySQL/MySQL%E8%BF%9B%E9%98%B6/",
            "url": "https://peter-pan001.github.io/my-blog/MySQL/MySQL%E8%BF%9B%E9%98%B6/",
            "title": "MySQL进阶",
            "date_published": "2021-01-18T08:57:59.000Z",
            "content_html": "<h2 id=\"事务-transaction\"><a href=\"#事务-transaction\" class=\"headerlink\" title=\"事务(transaction)\"></a>事务(transaction)</h2><h3 id=\"何为事务？\"><a href=\"#何为事务？\" class=\"headerlink\" title=\"何为事务？\"></a>何为事务？</h3><ul>\n<li>一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。在计算机术语中，事务通常就是指数据库事务。</li>\n</ul>\n<h3 id=\"事务在数据库的作用\"><a href=\"#事务在数据库的作用\" class=\"headerlink\" title=\"事务在数据库的作用\"></a>事务在数据库的作用</h3><ul>\n<li>一个数据库事务通常包含对数据库进行读或写的一个操作序列。它的存在包含有以下两个目的：<ul>\n<li>==1、为数据库操作提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。==</li>\n<li>==2、当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。==</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"事务的四大原则\"><a href=\"#事务的四大原则\" class=\"headerlink\" title=\"事务的四大原则\"></a>事务的四大原则</h3><h4 id=\"原子性-Atomicity\"><a href=\"#原子性-Atomicity\" class=\"headerlink\" title=\"原子性(Atomicity)\"></a>原子性(Atomicity)</h4><ul>\n<li>原子性保证将每个事务视为一个单独的“单元”，它==要么完全成功，要么完全失败==：如果构成事务的任何语句未能完成，则整个事务都会失败，并且数据库将保持不变。</li>\n<li>例如：用户A给用户B进行银行转账，数据库要确保这一事务的两个操作都成功：这两个操作即A成功转账给B，B成功收到A的转账。两个操作缺少一个就失败，这两个操作可看成一个事务。</li>\n</ul>\n<h4 id=\"一致性-Consistency\"><a href=\"#一致性-Consistency\" class=\"headerlink\" title=\"一致性(Consistency)\"></a>一致性(Consistency)</h4><ul>\n<li>事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。</li>\n<li>例如：用户A给用户B转账前与转账后，双方的总资产保持不变，即转账事务前后的一致性。</li>\n</ul>\n<h4 id=\"隔离性-Isolation\"><a href=\"#隔离性-Isolation\" class=\"headerlink\" title=\"隔离性(Isolation)\"></a>隔离性(Isolation)</h4><ul>\n<li>多个事务并发时，一个事务不会影响到另一个事务。</li>\n<li>例如：用户B同时受到用户A与C的银行转账，此时当两个转账操作结束后，B的总金额为其原金额加上A与C转给其的金额总数。即A转账B和C转账B两个事务相互隔离，当A、C没有确认提交之前，两者转账的钱具有隔离性。</li>\n</ul>\n<h4 id=\"持久性-Durability\"><a href=\"#持久性-Durability\" class=\"headerlink\" title=\"持久性(Durability)\"></a>持久性(Durability)</h4><ul>\n<li>一个事务一旦提交，他对数据库的修改应该永久保存在数据库中。</li>\n<li>例如：当A把钱转账到B账户上时，双方的账户金额在数据库中就会永久保存。</li>\n</ul>\n<h3 id=\"隔离的一些问题\"><a href=\"#隔离的一些问题\" class=\"headerlink\" title=\"隔离的一些问题\"></a>隔离的一些问题</h3><h4 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h4><ul>\n<li><strong>指一个事务读取了另一个事务未提交的数据</strong></li>\n</ul>\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><ul>\n<li><strong>在一个事务内读取表中的某一行数据，多次读取结果不同（不一定是错误，只是场合不对）</strong></li>\n</ul>\n<h4 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h4><ul>\n<li><strong>指在一个事务内读到了别的事务插入的数据，导致前后读取不一致</strong></li>\n</ul>\n<h3 id=\"事务的使用\"><a href=\"#事务的使用\" class=\"headerlink\" title=\"事务的使用\"></a>事务的使用</h3><pre><code class=\"lang-sql\">-- 在默认状态下MySQL是开启事务自动提交的\nSET autocommit = 0 --关闭\nSET autocommit = 1 --开启\n\n-- 手动处理事务\nSET autocommit = 0 --关闭自动提交\n\n-- 事务开启\nSTART TRANSACTION --标记一个事务的开始，从这里为一个事务内的SQL\n\nINSERT .....\n\n-- 提交：持久化,即成功\nCOMMIT\n\n-- 回滚：回到原来的样子,即失败\nROLLBACK\n\n--事务结束\nSET autocommit = 1 --开启\n</code></pre>\n<h2 id=\"索引-Index\"><a href=\"#索引-Index\" class=\"headerlink\" title=\"索引(Index)\"></a>索引(Index)</h2><h3 id=\"何为索引？\"><a href=\"#何为索引？\" class=\"headerlink\" title=\"何为索引？\"></a>何为索引？</h3><ul>\n<li><strong>索引是存储引擎用于快速找到记录的一种数据结构.</strong></li>\n<li>最常见的例子为==书本的目录==，我们在一本很厚的书中，需要通过目录找到需要的知识，可以快速精确定位到第几页中，不必一页一页的查找，提高查询效率</li>\n</ul>\n<h3 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h3><ul>\n<li><strong>主键索引</strong><ul>\n<li>PRIMARY KEY,主键不可重复，一个表只有一列可作为主键</li>\n</ul>\n</li>\n<li><strong>唯一索引</strong><ul>\n<li>UNIQUE KEY，唯一索引的使用可以重复，但不可出现相同字段的唯一索引</li>\n</ul>\n</li>\n<li><strong>常规索引</strong><ul>\n<li>INDEX/KEY</li>\n</ul>\n</li>\n<li><strong>全文索引</strong><ul>\n<li>FULLTEXT，只有在<code>MyISAM</code>数据库引擎下才有，可快速定位数据</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><pre><code class=\"lang-sql\">-- 索引的使用\n-- 1.再创建表的时候给字段增加索引\n-- 2.创建完毕后，增加索引\n\n-- 显示索引的索引信息\nSHOW INDEX FROM student\n\n-- 增加一个全文索引\nALTER TABLE school.student ADD FULLTEXT INDEX `studentName` (`studentName`);\n\n-- EXPLAIN 分析sql执行情况\nEXPLAIN SELECT * FROM student; --非全文索引\n</code></pre>\n<h3 id=\"索引原则\"><a href=\"#索引原则\" class=\"headerlink\" title=\"索引原则\"></a>索引原则</h3><ul>\n<li><strong>索引并不是越多越好</strong></li>\n<li><strong>不要对进程变得数据加索引</strong></li>\n<li><strong>小数据量的表不需要加索引</strong></li>\n<li><strong>素养一把加在常用来查询的字段上</strong></li>\n</ul>\n<h3 id=\"索引背后的数据结构\"><a href=\"#索引背后的数据结构\" class=\"headerlink\" title=\"索引背后的数据结构\"></a>索引背后的数据结构</h3><blockquote>\n<p>参考文档：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY29kaW5nbGFicy5vcmcvYXJ0aWNsZXMvdGhlb3J5LW9mLW15c3FsLWluZGV4Lmh0bWw=\">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</span></p>\n</blockquote>\n<h2 id=\"权限管理与备份\"><a href=\"#权限管理与备份\" class=\"headerlink\" title=\"权限管理与备份\"></a>权限管理与备份</h2><h3 id=\"权限管理的作用\"><a href=\"#权限管理的作用\" class=\"headerlink\" title=\"权限管理的作用\"></a>权限管理的作用</h3><ol>\n<li>可以限制用户访问哪些库、哪些表</li>\n<li>可以限制用户对哪些表执行SELECT、CREATE、DELETE、DELETE、ALTER等操作</li>\n<li>可以限制用户登录的IP或域名</li>\n<li>可以限制用户自己的权限是否可以授权给别的用户</li>\n</ol>\n<h3 id=\"MYSQL连接权限\"><a href=\"#MYSQL连接权限\" class=\"headerlink\" title=\"MYSQL连接权限\"></a>MYSQL连接权限</h3><ul>\n<li><strong>主要依据：</strong><ul>\n<li>你从哪里来？ host</li>\n<li>你是谁？ user</li>\n<li>你的密码是多少？ password</li>\n</ul>\n</li>\n<li>通过用户提供的这三个信息，存储MySQL库中的user表中</li>\n</ul>\n<h3 id=\"MySQL执行权限的检查顺序\"><a href=\"#MySQL执行权限的检查顺序\" class=\"headerlink\" title=\"MySQL执行权限的检查顺序\"></a>MySQL执行权限的检查顺序</h3><p><img data-src=\"https://s3.ax1x.com/2021/01/20/sR4ytA.png\" alt=\"quanxian\"></p>\n<h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><h4 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h4><ul>\n<li><p><strong>有两种方式创建MySQL授权用户</strong></p>\n<ul>\n<li><p>==方法一、通过insert语句直接操作MySQL系统权限表==</p>\n</li>\n<li><p>==方法二、执行create user/grant命令（推荐）==</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"创建语法\"><a href=\"#创建语法\" class=\"headerlink\" title=\"创建语法\"></a>创建语法</h4><pre><code class=\"lang-sql\">create user [用户名]@[访问地址] identified by [密码]\n</code></pre>\n<h4 id=\"授权语法\"><a href=\"#授权语法\" class=\"headerlink\" title=\"授权语法\"></a>授权语法</h4><pre><code class=\"lang-sql\">grant [权限1,权限2,权限3] on *.* to user@&#39;host&#39; identified by &#39;password&#39;\n</code></pre>\n<blockquote>\n<p>详细资料参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNjU2MDA4\">https://cloud.tencent.com/developer/article/1656008</span></p>\n</blockquote>\n<h2 id=\"数据库规范\"><a href=\"#数据库规范\" class=\"headerlink\" title=\"数据库规范\"></a>数据库规范</h2><h3 id=\"三大范式\"><a href=\"#三大范式\" class=\"headerlink\" title=\"三大范式\"></a>三大范式</h3><h4 id=\"第一范式-1NF\"><a href=\"#第一范式-1NF\" class=\"headerlink\" title=\"第一范式(1NF)\"></a>第一范式(1NF)</h4><ul>\n<li>原子性，保证每一列不再可分<h4 id=\"第二范式-2NF\"><a href=\"#第二范式-2NF\" class=\"headerlink\" title=\"第二范式(2NF)\"></a>第二范式(2NF)</h4></li>\n<li>必要前提：==满足第一范式==</li>\n<li>每张表只描述一件事情</li>\n</ul>\n<h4 id=\"第三范式-3NF\"><a href=\"#第三范式-3NF\" class=\"headerlink\" title=\"第三范式(3NF)\"></a>第三范式(3NF)</h4><ul>\n<li>必要前提： ==满足第一、第二范式==</li>\n<li>第三范式需要确保数据表中的每一列数据和主键直接相关，而==不能间接相关==</li>\n</ul>\n<h3 id=\"规范与性能的问题\"><a href=\"#规范与性能的问题\" class=\"headerlink\" title=\"规范与性能的问题\"></a>规范与性能的问题</h3><ul>\n<li><strong>关联查询的表不可超过三张</strong><ul>\n<li>考虑商业化的需求和目标</li>\n<li>适当考虑规范性</li>\n<li>故意给某些表增加一些冗余的字段</li>\n<li>故意增加一些计算列</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"JDBC-重点\"><a href=\"#JDBC-重点\" class=\"headerlink\" title=\"JDBC (重点)\"></a>JDBC (重点)</h2><h3 id=\"数据库驱动\"><a href=\"#数据库驱动\" class=\"headerlink\" title=\"数据库驱动\"></a>数据库驱动</h3><ul>\n<li>图解：<br><img data-src=\"https://s3.ax1x.com/2021/01/20/sf8EGt.png\" alt=\"qudong\"></li>\n</ul>\n<h3 id=\"Java数据库连接（JDBC）\"><a href=\"#Java数据库连接（JDBC）\" class=\"headerlink\" title=\"Java数据库连接（JDBC）\"></a>Java数据库连接（JDBC）</h3><ul>\n<li>Java数据库连接（JDBC）是Java编程语言的应用程序编程接口（API），它定义了客户端如何访问数据库。==它是用于Java数据库连接的基于Java的数据访问技术==。它是Oracle Corporation的Java Standard Edition平台的一部分。它提供了查询和更新数据库中数据的方法，并且面向关系数据库。</li>\n</ul>\n<h3 id=\"编程步骤\"><a href=\"#编程步骤\" class=\"headerlink\" title=\"编程步骤\"></a>编程步骤</h3><ol>\n<li><strong>加载驱动程序</strong><pre><code class=\"lang-java\">Class.forName(driverClass)\n//加载MySql驱动\nClass.forName(&quot;com.mysql.jdbc.Driver&quot;)\n//加载Oracle驱动\nClass.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;)\n</code></pre>\n</li>\n<li><p><strong>获得数据库连接</strong></p>\n<pre><code class=\"lang-java\">DriverManager.getConnection(&quot;jdbc:mysql://127.0.0.1:3306/abc&quot;, &quot;root&quot;, &quot;root&quot;);\n</code></pre>\n</li>\n<li><p><strong>创建Statement\\PreparedStatement对象：</strong></p>\n<pre><code class=\"lang-java\">conn.createStatement();\nconn.prepareStatement(sql);\n</code></pre>\n</li>\n</ol>\n<ul>\n<li><strong>总结：</strong><ul>\n<li>加载驱动</li>\n<li>连接数据库<code>DriverManager</code></li>\n<li>获得执行sql对象 <code>statement</code></li>\n<li>获得返回的结果集</li>\n<li>释放连接</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"主要java代码\"><a href=\"#主要java代码\" class=\"headerlink\" title=\"主要java代码\"></a>主要java代码</h3><h4 id=\"DriverManager\"><a href=\"#DriverManager\" class=\"headerlink\" title=\"DriverManager\"></a>DriverManager</h4><pre><code class=\"lang-java\">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());\nClass.forName(&quot;com.mysql.jdbc.Driver&quot;);\nConnection connection = DriverManager.getConnection(url,username,password);\n\n// connection 代表数据库\n// 数据库设置自动提交\nconnection.setAutoCommit();\n// 事务提交\nconnection.commit();\n//事务回滚\nconnection.rollback();\n</code></pre>\n<h4 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h4><pre><code class=\"lang-java\">String url = &quot;jdbc:mysql://localhost:3306/jdbcstudy......&quot;//按照实际的数据库url填写\n// 3306为mysql数据库的端口号\n</code></pre>\n<h4 id=\"statement执行SQL的对象-PrepareStatement执行SQL的对象\"><a href=\"#statement执行SQL的对象-PrepareStatement执行SQL的对象\" class=\"headerlink\" title=\"statement执行SQL的对象 PrepareStatement执行SQL的对象\"></a>statement执行SQL的对象 PrepareStatement执行SQL的对象</h4><pre><code class=\"lang-java\">String sql = &quot;SELECT * FROM users&quot;; //编写SQL\n\nstatement.executeQuery();//查询潮州返回的结果集ResultSet\nstatement.execute(); //执行任何SQL\nstatement.executeUpdate(); //为增删改使用\n</code></pre>\n<h4 id=\"ResultSet-查询的结果集，封装了所有查询结果\"><a href=\"#ResultSet-查询的结果集，封装了所有查询结果\" class=\"headerlink\" title=\"ResultSet 查询的结果集，封装了所有查询结果\"></a>ResultSet 查询的结果集，封装了所有查询结果</h4><ul>\n<li><p>获得指定的数据类型</p>\n<pre><code class=\"lang-java\">resultSet.getObject(); //在不知道列类型的情况下使用\n//以下为指导列类型使用\nresultSet.getString();\nresultSet.getInt();\nresultSet.getDate();\n</code></pre>\n</li>\n<li><p>遍历<br>```java<br>resultSet.beforeFirst(); //移到最前面<br>resultSet.afterLast(); //移到最后面<br>resultSet.next(); //移到下一个数据<br>resultSet.previous(); //移到前一行<br>resultSet.absoulute(row); //移动到指定行</p>\n</li>\n</ul>\n<h4 id=\"释放资源\"><a href=\"#释放资源\" class=\"headerlink\" title=\"释放资源\"></a>释放资源</h4><pre><code class=\"lang-java\">resultSet.close();\nstatement.close();\nconnection.close();\n</code></pre>\n<h3 id=\"statement对象\"><a href=\"#statement对象\" class=\"headerlink\" title=\"statement对象\"></a>statement对象</h3><blockquote>\n<p>参考资料：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vRWFzb25KaW0vcC82OTk0MDE0Lmh0bWw=\">https://www.cnblogs.com/EasonJim/p/6994014.html</span></p>\n</blockquote>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://peter-pan001.github.io/my-blog/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/",
            "url": "https://peter-pan001.github.io/my-blog/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/",
            "title": "MySQL数据库",
            "date_published": "2021-01-12T02:48:03.000Z",
            "content_html": "<h2 id=\"认识数据库\"><a href=\"#认识数据库\" class=\"headerlink\" title=\"认识数据库\"></a>认识数据库</h2><ul>\n<li>数据库(DataBase),即数据存储的仓库，一个数据库由多个表空间组成</li>\n<li>用户可在数据库中对库中的表进行增删改查的操作</li>\n</ul>\n<h2 id=\"数据库管理系统（DBMS）\"><a href=\"#数据库管理系统（DBMS）\" class=\"headerlink\" title=\"数据库管理系统（DBMS）\"></a>数据库管理系统（DBMS）</h2><ul>\n<li>具有管理数据库的一种软件系统，==具有存储、截取、安全保障、数据备份==等功能</li>\n</ul>\n<h2 id=\"数据库分类\"><a href=\"#数据库分类\" class=\"headerlink\" title=\"数据库分类\"></a>数据库分类</h2><h3 id=\"什么是关系模式\"><a href=\"#什么是关系模式\" class=\"headerlink\" title=\"什么是关系模式\"></a>什么是关系模式</h3><ul>\n<li>关系的描述称为关系模式（Relation Schema）它可以形式化地表示为：<ul>\n<li>R（U，D，dom，F）</li>\n</ul>\n</li>\n<li>==其中R为关系名，U为组成该关系的属性名集合，D为属性组U中属性所来自的域，dom为属性向域的映象集合，F为属性间数据的依赖关系集合。==</li>\n<li>通常简记为：<ul>\n<li>R(U)或R(A1，A2，…,An)</li>\n<li>其中R为关系名，U为属性名集合，A1，A2，…,An为各属性名。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"什么是关系模型\"><a href=\"#什么是关系模型\" class=\"headerlink\" title=\"什么是关系模型\"></a>什么是关系模型</h3><ul>\n<li>关系实际上就是关系模式在某一时刻的状态或内容。也就是说，关系模式是型，关系是它的值。关系模式是静态的、稳定的，而关系是动态的、随时间不断变化的，因为关系操作在不断地更新着数据库中的数据。但在实际当中，常常把关系模式和关系统称为关系，读者可以从上下文中加以区别。</li>\n</ul>\n<h3 id=\"关系型数据库\"><a href=\"#关系型数据库\" class=\"headerlink\" title=\"关系型数据库\"></a>关系型数据库</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><h2 id=\"采用了关系模型来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了数据库。\"><a href=\"#采用了关系模型来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了数据库。\" class=\"headerlink\" title=\"- ==采用了关系模型来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了数据库。==\"></a>- ==采用了关系模型来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了数据库。==</h2><ul>\n<li>MySQL</li>\n<li>Oracle</li>\n<li>SQL Server</li>\n<li>SQLite</li>\n<li>DB2</li>\n</ul>\n<h3 id=\"非关系型数据库\"><a href=\"#非关系型数据库\" class=\"headerlink\" title=\"非关系型数据库\"></a>非关系型数据库</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><h2 id=\"NoSQL，泛指非关系型的数据库。随着互联网web2-0网站的兴起，传统的关系数据库在处理web2-0网站，特别是超大规模和高并发的SNS类型的web2-0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。\"><a href=\"#NoSQL，泛指非关系型的数据库。随着互联网web2-0网站的兴起，传统的关系数据库在处理web2-0网站，特别是超大规模和高并发的SNS类型的web2-0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。\" class=\"headerlink\" title=\"- ==NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。==\"></a>- ==NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。==</h2><ul>\n<li>Redis</li>\n<li>MongoDB</li>\n</ul>\n<h2 id=\"关于MySQL\"><a href=\"#关于MySQL\" class=\"headerlink\" title=\"关于MySQL\"></a>关于MySQL</h2><ul>\n<li>原开发者为瑞典的MySQL AB公司，该公司于2008年被昇阳微系统（Sun Microsystems）收购。2009年，甲骨文公司（Oracle）收购昇阳微系统公司，MySQL成为Oracle旗下产品。</li>\n<li>==开源的数据库系统软件==</li>\n<li>==最好的RDBMS(Relational DataBase Manager System)关系型数据库管理系统==</li>\n<li>体积小，速度快，开发成本低等优点，多用于中小型网站的开发，大型网站用到集群</li>\n</ul>\n<h2 id=\"MySQL安装\"><a href=\"#MySQL安装\" class=\"headerlink\" title=\"MySQL安装\"></a>MySQL安装</h2><ul>\n<li>官网下载压缩包<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXlzcWwuY29tL2NuL2Rvd25sb2Fkcy8=\">https://www.mysql.com/cn/downloads/</span></p>\n</blockquote>\n</li>\n<li>解压</li>\n<li>把解压包放在电脑环境目录下</li>\n<li>配置环境变量</li>\n<li>新建MySQL配置文件<code>ini</code><pre><code class=\"lang-ini\">[mysqld]\n# 目录按个人的来\nbasedir=E:\\software\\mysql-5.02.11\\\ndatadir=E:\\software\\mysql-5.02.11\\data\\\nport=3306\nskip-grant-tables\n</code></pre>\n</li>\n<li>启动管理员运行，运行CMD命令<ul>\n<li>先把命令路径切换至mysql下的bin命令然后输入<code>mysqld -install</code></li>\n<li>再输入<code>mysqld --initialize-insecure --user=mysql</code>初始化数据文件</li>\n<li>然后再次启动mysql，用命令<code>mysql -u root -p</code>进入mysql管理界面</li>\n<li>进入界面更改root密码</li>\n<li><code>update mysql.user set authentication_string=password(&#39;123456&#39;) where user=&#39;root&#39; and Host = &#39;localhost&#39;;</code></li>\n<li>然后输入<code>flush privileges</code>刷新权限</li>\n</ul>\n</li>\n<li>修改<code>my.ini</code>文件删除最后一句<code>skip-grant-tables</code></li>\n<li>重启mysql即可使用<ul>\n<li><code>net stop mysql</code></li>\n<li><code>net start mysql</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据库使用\"><a href=\"#数据库使用\" class=\"headerlink\" title=\"数据库使用\"></a>数据库使用</h2><h3 id=\"使用命令行连接数据库\"><a href=\"#使用命令行连接数据库\" class=\"headerlink\" title=\"使用命令行连接数据库\"></a>使用命令行连接数据库</h3><pre><code class=\"lang-sql\">mysql -uroot -p123456 --连接数据库\nupdate mysql.user set authentication_string=password(&#39;123456&#39;) where user=&#39;root&#39; and Host = &#39;localhost&#39;; --修改用户密码\nflush privileges; --刷新权限\n\nshow databases; --查看所有数据库\n\nmysql&gt; use college --切换数据库+use关键字+数据库名\nDatabase changed\n\nshow tables; --查看数据库中所有的表\ndescribe student; --显示数据库中所有表信息\ncreate database stuRepo; --创建一个数据库\nexit; --退出连接\n</code></pre>\n<h3 id=\"操作数据库\"><a href=\"#操作数据库\" class=\"headerlink\" title=\"操作数据库\"></a>操作数据库</h3><ul>\n<li><strong>创库</strong><pre><code class=\"lang-sql\">CREATE DATABASE [IF NOT EXIST] stuRepo;\n</code></pre>\n</li>\n<li><strong>删库</strong><pre><code class=\"lang-sql\">DROP DATABASE [IF EXIST] stuRepo;\n</code></pre>\n</li>\n<li><strong>使用数据库</strong><pre><code class=\"lang-sql\">use &#39;stuRepo&#39;;\n</code></pre>\n</li>\n<li><strong>查看数据库</strong><pre><code class=\"lang-sql\">show Databases;\n</code></pre>\n</li>\n</ul>\n<h3 id=\"数据库的数据类型\"><a href=\"#数据库的数据类型\" class=\"headerlink\" title=\"数据库的数据类型\"></a>数据库的数据类型</h3><h4 id=\"数值型\"><a href=\"#数值型\" class=\"headerlink\" title=\"数值型\"></a>数值型</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">适用范围</th>\n<th style=\"text-align:center\">大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>tinyint</code></td>\n<td style=\"text-align:center\">极小的整数</td>\n<td style=\"text-align:center\">1字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>smallint</code></td>\n<td style=\"text-align:center\">较小的整数</td>\n<td style=\"text-align:center\">2字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>mediumint</code></td>\n<td style=\"text-align:center\">中等的整数</td>\n<td style=\"text-align:center\">3字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>int</code></td>\n<td style=\"text-align:center\">标准的整数</td>\n<td style=\"text-align:center\">4字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>bigint</code></td>\n<td style=\"text-align:center\">较大的整数</td>\n<td style=\"text-align:center\">8字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>float</code></td>\n<td style=\"text-align:center\">浮点数</td>\n<td style=\"text-align:center\">4字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>double</code></td>\n<td style=\"text-align:center\">双精度浮点数</td>\n<td style=\"text-align:center\">8字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>decimal</code></td>\n<td style=\"text-align:center\">字符串形式的浮点数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">解释</th>\n<th style=\"text-align:center\">数值范围</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>char</code></td>\n<td style=\"text-align:center\">字符串固定大小的</td>\n<td style=\"text-align:center\">0~255</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>varchar</code></td>\n<td style=\"text-align:center\">可变字符串</td>\n<td style=\"text-align:center\">0~65535</td>\n<td style=\"text-align:center\">最常用的变量如String</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>tinytext</code></td>\n<td style=\"text-align:center\">微型文本</td>\n<td style=\"text-align:center\">2^8-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>text</code></td>\n<td style=\"text-align:center\">文本串</td>\n<td style=\"text-align:center\">2^16-1</td>\n<td style=\"text-align:center\">存储大文本</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"时间日期型\"><a href=\"#时间日期型\" class=\"headerlink\" title=\"时间日期型\"></a>时间日期型</h4><ul>\n<li>出自<code>java.util.Date</code>包</li>\n<li>|类型|格式|解释|<br>|:——:|:——:|:——-:|<br>|<code>date</code>|YYYY-MM-DD|日期格式|<br>|<code>time</code>|HH:mm:ss|时间格式|<br>|<code>datatime</code>|YYYY-MM-DD HH:mm:ss|最常见的时间格式|<br>|<code>timestamp</code>|即时间戳|1970.1.1至今的毫秒数|<br>|<code>year</code>||年份表示|<h4 id=\"NULL\"><a href=\"#NULL\" class=\"headerlink\" title=\"NULL\"></a>NULL</h4></li>\n<li>无数值</li>\n<li>不可使用<code>NULL</code>进行运算，结果为<code>NULL</code></li>\n</ul>\n<h3 id=\"数据库字段属性\"><a href=\"#数据库字段属性\" class=\"headerlink\" title=\"数据库字段属性\"></a>数据库字段属性</h3><ul>\n<li><strong>Unsigned</strong><ul>\n<li>无符号的整数</li>\n<li>声明了该列不可为 <strong>负数</strong></li>\n</ul>\n</li>\n<li><strong>zerofill</strong><ul>\n<li>0填充的</li>\n<li>不足的位数，使用0来填充</li>\n</ul>\n</li>\n<li><strong>自增</strong>(AUTO_INCREMENT)<ul>\n<li>通常理解为自增，自动在上一条记录的属性上加1（默认）</li>\n<li>通常用来设计唯一的主键(如id、index等)，必须为整数类型</li>\n<li>可以自定义设计主键自增的起始值和步长</li>\n</ul>\n</li>\n<li><strong>非空</strong>(NOT_NULL)<ul>\n<li>若字段设置为非空，则不给该字段赋值，系统报错</li>\n<li>NULL，不填写默认为空</li>\n</ul>\n</li>\n<li><strong>默认</strong>(DEFAULT)<h2 id=\"表的操作\"><a href=\"#表的操作\" class=\"headerlink\" title=\"表的操作\"></a>表的操作</h2><h3 id=\"创表\"><a href=\"#创表\" class=\"headerlink\" title=\"创表\"></a>创表</h3><pre><code class=\"lang-sql\">--业务：创建一个school数据库\n--然后创建学生表，使用SQL语句创建\n--关键点：\n--使用英文的(),表名和字段名尽量使用``括起来\n--AUTO_INCREMENT自增\n--PRIMARY KEY 主键，一个表只有一个主键\nCREATE DATABASE IF NOT EXISTS `school`;\nuse `school`;\nCREATE TABLE IF NOT EXISTS `student` {\n`id` int(6) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,\n`name` VARCHAR(22) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,\n`pwd` VARCHAR(30) NOT NULL DEFAULT &#39;123&#39; COMMENT &#39;密码&#39;,\n`sex` VARCHAR(2) NOT NULL DEFAULT &#39;女&#39; COMMENT &#39;性别&#39;,\n`birthday` DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,\nPRIMARY KEY(`id`)\n}ENGINE=INNOOB DEFAULT CHARSET=UTF8\n</code></pre>\n<h4 id=\"标准格式\"><a href=\"#标准格式\" class=\"headerlink\" title=\"标准格式\"></a>标准格式</h4><pre><code class=\"lang-sql\">CREATE TABLE [IF NOT EXISTS] `表名`{\n`字段名1` 列类型 [属性] [索引] [注释],\n`字段名2` 列类型 [属性] [索引] [注释],\n...\n}[表类型] [字符集设置] [注释]\n</code></pre>\n<h3 id=\"查看库与表的语句\"><a href=\"#查看库与表的语句\" class=\"headerlink\" title=\"查看库与表的语句\"></a>查看库与表的语句</h3><pre><code class=\"lang-sql\">SHOW CREATE DATABASE school -- 查看创建数据库的语句\nSHOW CREATE TABLE student -- 查看student数据库中表的定义语句\nDESC student -- 显示表的结构\n</code></pre>\n<h3 id=\"数据表类型\"><a href=\"#数据表类型\" class=\"headerlink\" title=\"数据表类型\"></a>数据表类型</h3><h4 id=\"数据库引擎\"><a href=\"#数据库引擎\" class=\"headerlink\" title=\"数据库引擎\"></a>数据库引擎</h4></li>\n<li><strong>定义：</strong><ul>\n<li>==数据库引擎是用于存储、处理和保护数据的核心服务。利用数据库引擎可控制访问权限并快速处理事务，从而满足企业内大多数需要处理大量数据的应用程序的要求。 使用数据库引擎创建用于联机事务处理或联机分析处理数据的关系数据库。==</li>\n</ul>\n</li>\n<li>目前常用的（必记的）<ul>\n<li><code>INNODB</code> 默认使用</li>\n<li><code>MYISAM</code> 早期使用的</li>\n</ul>\n</li>\n<li><strong>两者区别</strong></li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"><code>MYISAM</code></th>\n<th style=\"text-align:center\"><code>INNODB</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">事务支持</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据行锁定</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">外键约束</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全文索引</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">表空间的大小</td>\n<td style=\"text-align:center\">较小</td>\n<td style=\"text-align:center\">较大，约为MYISAM的两倍</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><strong>使用特点</strong><ul>\n<li>对于<code>MYISAM</code>而言，可节约空间，高速运行</li>\n<li>对于<code>INNODB</code>而言，安全性高，可实现多表多用户操作</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>在物理环境中存在的位置<br>索引的数据库文件都存储在data文件目录下，一个文件夹对应一个数据库<br>本质上是文件的存储</p>\n</blockquote>\n<ul>\n<li><strong>两个数据库引擎在物理上的区别</strong><ul>\n<li><code>INNODB</code>在数据库表中只有一个<code>*.frm</code>文件，以及上级目录下的<code>ibdata1</code>文件</li>\n<li><code>MYISAM</code>对应文件<br>|文件后缀|解释|<br>|:—-:|:——:|<br>|<code>*.frm</code>|表结构定义文件|<br>|<code>*.MYD</code>|数据文件data|<br>|<code>*.MYI</code>|索引文件index|</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"编码问题\"><a href=\"#编码问题\" class=\"headerlink\" title=\"编码问题\"></a>编码问题</h3><ul>\n<li><strong>设置编码(创表的SQL语句中)</strong><pre><code class=\"lang-sql\">CHARSET=utf8\n</code></pre>\n</li>\n<li>不设置utf-8，==MYSQL默认编码为Latin1，且不支持中文==</li>\n<li>也可在<code>my.ini</code>配置文件中设置默认编码（但不推荐，因为非本机操作数据库会失效）<pre><code class=\"lang-ini\">character-set-server=utf8\n</code></pre>\n<h3 id=\"增加与删除表字段\"><a href=\"#增加与删除表字段\" class=\"headerlink\" title=\"增加与删除表字段\"></a>增加与删除表字段</h3><h4 id=\"修改表名称\"><a href=\"#修改表名称\" class=\"headerlink\" title=\"修改表名称\"></a>修改表名称</h4></li>\n<li><strong>举例：</strong><pre><code class=\"lang-sql\">ALTER TABLE person RENAME AS man\n</code></pre>\n</li>\n<li><strong>标准格式</strong><pre><code class=\"lang-sql\">ALTER TABLE [表名称]  RENAME AS [新表的名称]\n</code></pre>\n<h4 id=\"增加表字段\"><a href=\"#增加表字段\" class=\"headerlink\" title=\"增加表字段\"></a>增加表字段</h4></li>\n<li><strong>举例：</strong><pre><code class=\"lang-sql\">ALTER TABLE teacher ADD age INT(11)--增加teacher表的年龄字段\n</code></pre>\n</li>\n<li><strong>标准格式:</strong><pre><code class=\"lang-sql\">ALTER TABLE [表名称] ADD [字段名] [字段属性]\n</code></pre>\n</li>\n</ul>\n<h4 id=\"修改表字段-修改约束与重命名\"><a href=\"#修改表字段-修改约束与重命名\" class=\"headerlink\" title=\"修改表字段(修改约束与重命名)\"></a>修改表字段(修改约束与重命名)</h4><ul>\n<li><strong>举例：</strong><pre><code class=\"lang-sql\">ALTER TABLE JOB MODIFY salary int(12) --修改约束\n</code></pre>\n</li>\n<li><strong>标准格式：</strong><pre><code class=\"lang-sql\">ALTER TABLE [表名称] MODIFY [字段名] [字段属性]\n</code></pre>\n</li>\n<li><strong>举例：</strong><pre><code class=\"lang-sql\">ALTER TABLE JOB CHANGE salary salary1 int(12) --字段重命名 salary为原字段名\n</code></pre>\n<h4 id=\"删除表字段\"><a href=\"#删除表字段\" class=\"headerlink\" title=\"删除表字段\"></a>删除表字段</h4></li>\n<li><strong>举例：</strong><pre><code class=\"lang-sql\">ALTER TABLE JOB DROP salary1\n</code></pre>\n</li>\n<li><strong>标准格式：</strong><pre><code class=\"lang-sql\">ALTER TABLE [表名称] DROP [字段名]\n</code></pre>\n</li>\n</ul>\n<h4 id=\"删除表\"><a href=\"#删除表\" class=\"headerlink\" title=\"删除表\"></a>删除表</h4><ul>\n<li><strong>标准格式：</strong><pre><code class=\"lang-sql\">DROP TABLE IF EXISTS JOB\n</code></pre>\n</li>\n</ul>\n<h2 id=\"数据管理\"><a href=\"#数据管理\" class=\"headerlink\" title=\"数据管理\"></a>数据管理</h2><h3 id=\"外键-Foreign-key\"><a href=\"#外键-Foreign-key\" class=\"headerlink\" title=\"外键(Foreign key)\"></a>外键(Foreign key)</h3><pre><code class=\"lang-sql\">-- 为学生表的gradeid添加年级表的 gradeid外键\nCREATE DATABASE IF NOT EXISTS `school`;\nuse `school`;\nCREATE TABLE IF NOT EXISTS `student` {\n  `id` int(6) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,\n  `name` VARCHAR(22) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,\n  `pwd` VARCHAR(30) NOT NULL DEFAULT &#39;123&#39; COMMENT &#39;密码&#39;,\n  `sex` VARCHAR(2) NOT NULL DEFAULT &#39;女&#39; COMMENT &#39;性别&#39;,\n  `gradeid` int(15) NOT NULL COMMENT &#39;年级&#39;,\n  `birthday` DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,\n  PRIMARY KEY(`id`)\n}ENGINE=INNOOB DEFAULT CHARSET=UTF8\n--添加外键\nALTER TABLE `student`\nADD CONSTRAINT `FK_gradeid` FOREIGN KEY(`gradeid`) REFERENCES `grade`(`gradeid`);\n</code></pre>\n<ul>\n<li><strong>标准格式：</strong><pre><code class=\"lang-sql\">ALTER TABLE 表名  ADD CONSTRAINT 约束名 FOREIGN KEY(作为外键的列) REFERENCES 引用的表名(引用的表的字段);\n</code></pre>\n<ul>\n<li>==不建议使用外键约束，而是在应用层进行代码的约束==</li>\n<li>==外键约束对后期程序的开发有很大的影响，对<code>update</code>和<code>delete</code>操作都会有更大的麻烦==</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"DML-数据管理语言\"><a href=\"#DML-数据管理语言\" class=\"headerlink\" title=\"DML 数据管理语言\"></a>DML 数据管理语言</h3><h4 id=\"添加insert\"><a href=\"#添加insert\" class=\"headerlink\" title=\"添加insert\"></a>添加insert</h4><pre><code class=\"lang-sql\">insert into `表名`(`字段名1`,`字段名2`,`字段名3`)values(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;)\n</code></pre>\n<ul>\n<li>==左边字段的个数与右边值的个数要相同，并且数据类型要一一对应==</li>\n</ul>\n<h4 id=\"修改update\"><a href=\"#修改update\" class=\"headerlink\" title=\"修改update\"></a>修改update</h4><pre><code class=\"lang-sql\">update `表名` set `列名1` = `值1`,`列名2` = `值2` where 条件\n</code></pre>\n<ul>\n<li>==没有where子句后的条件，会默认修改所有列==</li>\n<li>==value既可以是一个值，也可以是一个变量==</li>\n</ul>\n<h4 id=\"删除delete\"><a href=\"#删除delete\" class=\"headerlink\" title=\"删除delete\"></a>删除delete</h4><pre><code class=\"lang-sql\">delete from 表名 where 条件\n--where子句可写可不写，按照实际要求决定，where实际上相当于一个删除的约束\n--不写where则会删除整个表的数据\n</code></pre>\n<h4 id=\"清空truncate\"><a href=\"#清空truncate\" class=\"headerlink\" title=\"清空truncate\"></a>清空truncate</h4><ul>\n<li><strong>只是清空表里的数据，表的结构和字段不会改变</strong></li>\n</ul>\n<pre><code class=\"lang-sql\">--清空JOB表\ntruncate `JOB`\n</code></pre>\n<h4 id=\"delete与truncate的区别\"><a href=\"#delete与truncate的区别\" class=\"headerlink\" title=\"delete与truncate的区别\"></a>delete与truncate的区别</h4><ul>\n<li>==都可删除数据，但都不影响表结构==</li>\n<li>==不同点：==<ul>\n<li><code>truncate</code> 重新设置自增列，计时器会归零 不会影响事务</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"DQL数据查询语言\"><a href=\"#DQL数据查询语言\" class=\"headerlink\" title=\"DQL数据查询语言\"></a>DQL数据查询语言</h3><ul>\n<li><p>数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE子句组成的查询块：</p>\n<ul>\n<li><p>SELECT &lt;字段名表&gt;</p>\n</li>\n<li><p>FROM &lt;表或视图名&gt;</p>\n</li>\n<li><p>WHERE &lt;查询条件&gt;</p>\n<h4 id=\"指定查询字段\"><a href=\"#指定查询字段\" class=\"headerlink\" title=\"指定查询字段\"></a>指定查询字段</h4><p>```sql<br>— 查询全部学生<br>select * from student</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>— 查询指定字段<br>select <code>id</code>,<code>name</code> from student</p>\n<p>— 别名，为某个表或字段起一个别名<br>select <code>employeeName</code> AS 员工姓名 from employee AS e</p>\n<p>— 函数 Concat（a,b）<br>select CONCAT(‘员工姓名：’,employeeName) as 新列名 from employee<br>— 输出的格式会为 员工姓名：张三</p>\n<pre><code>\n#### 去重distinct\n- 筛选出表中重复的数据，只显示一个\n```sql\nselect distinct `employeeNo` from employee\n</code></pre><h4 id=\"Where条件子句\"><a href=\"#Where条件子句\" class=\"headerlink\" title=\"Where条件子句\"></a>Where条件子句</h4><ul>\n<li>作用：为了筛选出需要的数据，即添加条件</li>\n<li>==通过逻辑运算符配合使用！！！==<br>|运算符|语法|描述|<br>|:—-:|:—-:|:——:|<br>|<code>and</code>&nbsp;<code>&amp;&amp;</code>| a&nbsp;<code>and</code>&nbsp;b&nbsp;&nbsp;a<code>&amp;&amp;</code>b|逻辑与，两个都为真，结果为真|<br>|<code>or</code>&nbsp;<code>||</code>|a&nbsp;<code>or</code>&nbsp;b&nbsp;&nbsp;a&nbsp;<code>||</code>&nbsp;b|逻辑或，其中一个为真，则结果为真|<br>|<code>not</code>&nbsp;<code>!</code>|<code>not</code>&nbsp;a&nbsp;&nbsp;<code>!</code>&nbsp;a|逻辑非，真为假，假为真|</li>\n</ul>\n<h4 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h4><ul>\n<li><p>在 MySQL 中，LIKE 关键字主要用于搜索匹配字段中的指定内容。其语法格式如下：</p>\n<ul>\n<li><code>[NOT] LIKE  &#39;字符串&#39;</code></li>\n</ul>\n</li>\n<li><p>其中：</p>\n<ul>\n<li><p><code>NOT</code> ：可选参数，字段中的内容与指定的字符串不匹配时满足条件。<br>字符串：指定用来匹配的字符串。“字符串”可以是一个很完整的字符串，也可以包含通配符。</p>\n</li>\n<li><p><code>LIKE</code>&nbsp; 关键字支持百分号“%”和下划线“_”通配符。</p>\n</li>\n</ul>\n</li>\n<li>==通配符是一种特殊语句，主要用来模糊查询。当不知道真正字符或者懒得输入完整名称时，可以使用通配符来代替一个或多个真正的字符。==</li>\n<li><strong>模糊查询通常会使用到比较运算符</strong><br>|运算符|语法|描述|<br>|:——:|:——:|:——:|<br>|<code>IS NULL</code>|a&nbsp;is&nbsp;null|如果操作符为<code>NULL</code>,则结果为真|<br>|<code>IS NOT NULL</code>|a&nbsp;is&nbsp;not&nbsp;null|如果操作符不为<code>NULL</code>,则结果为真|<br>|<code>BETWEEN</code>|a&nbsp;between&nbsp;b&nbsp;and&nbsp;c|若a在b与c之间，则结果为真|<br>|<code>LIKE</code>|a&nbsp;like&nbsp;b|如果a匹配b，则结果为真|<br>|<code>IN</code>|a&nbsp;in&nbsp;(a1,a2,a3…)|假设a在a1，或a2…其中的某一个值中，则结果为真|</li>\n<li><p><strong>模糊查询的SQL语句实例</strong></p>\n<pre><code class=\"lang-sql\">-- 查询姓刘的同学\n-- like结婚 %（岱庙0到任意个字符） _（代表一个字符）\nSELECT `studentId`,`name` FROM `student`\nWHERE `name` LIKE &#39;刘%&#39;\n\n-- 查询姓刘的同学，姓后面为一个字的\nSELECT `studentId`,`name` FROM `student`\nWHERE `name` LIKE &#39;刘_&#39;\n\n-- 查询姓刘的同学，姓后面为两个字的\nSELECT `studentId`,`name` FROM `student`\nWHERE `name` LIKE &#39;刘__&#39;\n\n-- 查询名字中间为欣字的同学 %欣%\nSELECT `studentId`,`name` FROM `student`\nWHERE `name` LIKE &#39;%欣%&#39;\n\n-- 查询1001、1002、1003号学员\nSELECT `studentId`,`name` FROM `student`\nWHERE `studentId` IN (1001,1002,1003)\n\n-- 查询地址为空的学生 null\nSELECT `studentId`,`name` FROM `student`\nWHERE `address`=&#39;&#39; OR `address` IS NULL\n\n-- 查询有出生日期的同学 not null\nSELECT `studentId`,`name` FROM `student`\nWHERE `birthday` IS NOT NULL\n</code></pre>\n</li>\n</ul>\n<h4 id=\"联表查询（重要！）\"><a href=\"#联表查询（重要！）\" class=\"headerlink\" title=\"联表查询（重要！）\"></a>联表查询（重要！）</h4><ul>\n<li><strong>联表查询的种类</strong></li>\n</ul>\n<p><img data-src=\"https://s3.ax1x.com/2021/01/18/syrWa4.jpg\" alt=\"joinlist\"></p>\n<ul>\n<li><code>inner join</code> <strong>内连接</strong> ，两个表中都匹配时返回行</li>\n<li><p><code>left join</code> <strong>左连接</strong> ，即使左侧表中没有匹配项，也返回左侧表中的所有行。</p>\n</li>\n<li><p><code>RIGHT JOIN</code> <strong>右连接</strong> ， 即使左侧表中没有匹配项，也返回右侧表中的所有行。</p>\n</li>\n<li><p><code>FULL JOIN</code> <strong>全连接</strong>， 它合并了左右外部联接的结果。</p>\n</li>\n<li><p>==联接的表将包含两个表中的所有记录，并为任一侧缺少的匹配项填充NULL。==</p>\n</li>\n<li><p><code>SELF JOIN</code> <strong>自连接</strong>， 用于将一个表连接到自身，就好像该表是两个表一样，在SQL语句中临时重命名至少一个表。</p>\n</li>\n<li><p><code>CARTESIAN JOIN</code> <strong>笛卡尔连接</strong> 从两个或多个联接表中返回记录集的笛卡尔积。</p>\n</li>\n<li><p><strong>联表图解</strong></p>\n</li>\n</ul>\n<p><img data-src=\"https://s3.ax1x.com/2021/01/18/sysNS1.png\" alt=\"joindetails\"></p>\n<ul>\n<li><p><strong>代码示例：</strong></p>\n<pre><code class=\"lang-sql\">-- inner join\nSELECT s.studentId ,studentName,subNo,stuRes FROM student AS s \nINNER JOIN result AS r \nON s.studentId = r.studentId\n\n--right join\nSELECT s.studentId ,studentName,subNo,stuRes FROM student AS s \nRIGHT JOIN result AS r \nON s.studentId = r.studentId  \n\n--left join\nSELECT s.studentId ,studentName,subNo,stuRes FROM student AS s \nLEFT JOIN result AS r \nON s.studentId = r.studentId\n</code></pre>\n</li>\n</ul>\n<h4 id=\"分页和排序\"><a href=\"#分页和排序\" class=\"headerlink\" title=\"分页和排序\"></a>分页和排序</h4><ul>\n<li><strong>排序：</strong><pre><code class=\"lang-sql\">-- 排序： 升序ASC，降序DESC\n-- ORDER BY 通过字段排序\n-- 查询的结构根据成绩降序\nSELECT s.`studentId`,`name`,`subName`,`subRes` FROM \nstudent s\nINNER JOIN `result` r\nON s.`studentId` = r.`studentId`\nINNER JOIN `subject` sub\nON r.`subId` = sub.`subId`\nWHERE `subName` = `数据库`\nORDER BY subRes ASC\n</code></pre>\n</li>\n<li><p><strong>分页：</strong></p>\n<pre><code class=\"lang-sql\">-- 分页的目的：让用户观看更加舒服，也减轻数据库的压力，无需一次性输出所有数据\n-- 分页的效果：在一个网页中显示部分数据，给数据分页显示\n-- 语法：limit 起始值,页面大小\n-- 例如：limit 0,3 即从第一个数据到第四个数据\nSELECT s.`studentId`,`name`,`subName`,`subRes` FROM \nstudent s\nINNER JOIN `result` r\nON s.`studentId` = r.`studentId`\nINNER JOIN `subject` sub\nON r.`subId` = sub.`subId`\nWHERE `subName` = `数据库`\nORDER BY subRes ASC\nLIMIT 0,8\n\n-- 第一页 limit 0,5 (1-1)*5\n-- 第二页 limit 5,5 (2-1)*5\n-- 第n 页 limit     (n-1)*pagesize,pagesize\n-- pageSize:页面大小\n-- (n-1)*pageSize:起始值\n-- n：当前值\n-- 数据总数/页面大小 =总页数\n</code></pre>\n</li>\n</ul>\n<h4 id=\"分组和过滤\"><a href=\"#分组和过滤\" class=\"headerlink\" title=\"分组和过滤\"></a>分组和过滤</h4><pre><code class=\"lang-sql\">ORDER BY()\nHAVING()\n</code></pre>\n<h4 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h4><ul>\n<li>子查询是<font color=red>将一个查询语句嵌套在另一个查询语句中；</font></li>\n<li>在特定情况下，一个查询语句的条件需要另一个查询语句来获取，==内层查询（inner query）语句==的查询结果，可以为==外层查询（outer query）语句==提供查询条件。</li>\n<li><strong>代码示例</strong><pre><code class=\"lang-sql\">SELECT DISTINCT s.`studentId`,`name`\nFROM student s\nINNER JOIN result r\nON r.studentId = s.studentId\nWHERE `studentRes`&gt;=80 AND `subId` =(\n  SELECT subId FROM `subject`\n  WHERE `subName` =&#39;高数&#39;\n)\n</code></pre>\n</li>\n</ul>\n<h3 id=\"MySQL常用函数\"><a href=\"#MySQL常用函数\" class=\"headerlink\" title=\"MySQL常用函数\"></a>MySQL常用函数</h3><h4 id=\"数学运算\"><a href=\"#数学运算\" class=\"headerlink\" title=\"数学运算\"></a>数学运算</h4><pre><code class=\"lang-sql\">SELECT ABS(-10) --绝对值\nSELECT CEILING(8.4) --向上取整\nSELECT FLOOR(8.4) --向下取整\nSELECT RAND() --返回一个0~1内的随机数\nSELECT SIGN(10) --判断一个数的符号  负数返回-1 正数返回1\n</code></pre>\n<h4 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h4><pre><code class=\"lang-sql\">SELECT CHAR_LENGTH(&#39;adhsakdajsx&#39;) --求字符串长度\nSELECT CONCAT(&#39;We&#39;,&#39;are&#39;,&#39;family&#39;) --拼接字符串 Wearefamily\nSELECT INSERT(&#39;这是一个美好的故事&#39;,5,6,7,&#39;动人的&#39;) --查询，从某个位置开始替换长度 这是一个动人的故事\nSELECT LOWER(&#39;PETERPAN&#39;) --小写字母\nSELECT UPPER(&#39;peterpan&#39;) --大写字母\nSELECT INSTR(&#39;peterpan&#39;,&#39;e&#39;) --返回第一个出现的子串的索引\nSELECT REPLACE(&#39;未上岸&#39;,&#39;未&#39;,&#39;已&#39;) --替换出现指定的字符串 已上岸\nSELECT SUBSTR(&#39;只要努力就能成功&#39;,3,8) --返回指定的子字符串 努力就能成功\nSELECT REVERSE(&#39;大家早上好&#39;) --反转 好上早家大\n</code></pre>\n<h4 id=\"时间与日期函数\"><a href=\"#时间与日期函数\" class=\"headerlink\" title=\"时间与日期函数\"></a>时间与日期函数</h4><pre><code class=\"lang-sql\">SELECT CURRENT_DATE() --获取当前日期\nSELECT CURDATE() --获取当前日期\nSELECT NOW() --获取当前时间\nSELECT LOCALTIME() --本地时间\nSELECT SYSDATE() --系统时间\n\nSELECT YEAR(NOW()) --当前年份\nSELECT MONTH(NOW()) --当前月份\n</code></pre>\n<h4 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h4><pre><code class=\"lang-sql\">SELECT SYSTEM_USER() -- 获取系统管理者\nSELECT USER()  --获取用户\nSELECT VERSION()  --获取版本\n</code></pre>\n<h3 id=\"常用的聚合函数\"><a href=\"#常用的聚合函数\" class=\"headerlink\" title=\"常用的聚合函数\"></a>常用的聚合函数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>count()</code></td>\n<td style=\"text-align:center\">计数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>sum()</code></td>\n<td style=\"text-align:center\">求和</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>avg()</code></td>\n<td style=\"text-align:center\">求平均值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>max()</code></td>\n<td style=\"text-align:center\">求最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>min()</code></td>\n<td style=\"text-align:center\">求最小值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>具体参考MYSQL官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2Z1bmN0aW9uLXJlc29sdXRpb24uaHRtbA==\">https://dev.mysql.com/doc/refman/8.0/en/function-resolution.html</span></p>\n</blockquote>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://peter-pan001.github.io/my-blog/MySQL/%E5%85%B3%E4%BA%8EMySQL%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
            "url": "https://peter-pan001.github.io/my-blog/MySQL/%E5%85%B3%E4%BA%8EMySQL%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
            "title": "关于MySQL的一些基本使用",
            "date_published": "2020-10-25T13:09:50.000Z",
            "content_html": "<h2 id=\"MySQL数据库软件\"><a href=\"#MySQL数据库软件\" class=\"headerlink\" title=\"MySQL数据库软件\"></a>MySQL数据库软件</h2><h3 id=\"关于配置（conf）\"><a href=\"#关于配置（conf）\" class=\"headerlink\" title=\"关于配置（conf）\"></a>关于配置（conf）</h3><ul>\n<li>MySQL服务的启动与停止<ul>\n<li>手动通过应用程序启动</li>\n<li>或者通过cmd配置命令启动<ul>\n<li>cmd  -&gt; services.msc -&gt;MySQL</li>\n</ul>\n</li>\n<li>或者cmd管理员模式启动<ul>\n<li>net stop MySQL</li>\n<li>net start MySQL</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关于登录与退出\"><a href=\"#关于登录与退出\" class=\"headerlink\" title=\"关于登录与退出\"></a>关于登录与退出</h3><ul>\n<li><p>一般的MySQL版本：</p>\n<ul>\n<li>登录命令<ul>\n<li>cmd中，在mysql安装目录下输入：<code>mysql -uroot -p密码</code></li>\n<li>然后根据提示输入密码（为此前安装时设置的密码）</li>\n</ul>\n</li>\n<li>退出：<ul>\n<li>直接输入<code>exit</code>或者<code>quit</code>即可</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>如果是MySQL8.0版本的：</p>\n<ul>\n<li>在特定的SQL Commands line client 窗口中直接输入密码登录</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关于目录结构\"><a href=\"#关于目录结构\" class=\"headerlink\" title=\"关于目录结构\"></a>关于目录结构</h3><ul>\n<li>MySQL安装目录<!-- ![Mysql_dir.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizq3tu941j30pl0h4jrp.jpg) -->\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/10/26/cB35g8iFSYVZ2zw.png\" alt=\"Mysql_dir.png\"></p>\n<ul>\n<li><strong>bin</strong>：存放一些二进制文件以及一些exe文件，服务类和基础类的</li>\n<li><strong>data</strong>：存放日志文件、数据文件的</li>\n<li><strong>share</strong>：存放MySQL一些错误数据</li>\n</ul>\n",
            "tags": [
                "MySQL"
            ]
        }
    ]
}