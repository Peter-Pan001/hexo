<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://peter-pan001.github.io/my-blog</id>
    <title>理 想 净 土 • Posts by &#34;mysql&#34; category</title>
    <link href="https://peter-pan001.github.io/my-blog" />
    <updated>2021-01-18T08:57:59.000Z</updated>
    <category term="Java" />
    <category term="linux" />
    <category term="Linux" />
    <category term="network" />
    <category term="MySQL" />
    <category term="云计算" />
    <category term="git、github" />
    <category term="前端" />
    <category term="JavaScript" />
    <category term="html" />
    <category term="css" />
    <category term="算法与数据结构" />
    <category term="数据分析" />
    <category term="软考网络工程师" />
    <entry>
        <id>https://peter-pan001.github.io/my-blog/MySQL/MySQL%E8%BF%9B%E9%98%B6/</id>
        <title>MySQL进阶</title>
        <link rel="alternate" href="https://peter-pan001.github.io/my-blog/MySQL/MySQL%E8%BF%9B%E9%98%B6/"/>
        <content type="html">&lt;h2 id=&#34;事务-transaction&#34;&gt;&lt;a href=&#34;#事务-transaction&#34; class=&#34;headerlink&#34; title=&#34;事务(transaction)&#34;&gt;&lt;/a&gt;事务(transaction)&lt;/h2&gt;&lt;h3 id=&#34;何为事务？&#34;&gt;&lt;a href=&#34;#何为事务？&#34; class=&#34;headerlink&#34; title=&#34;何为事务？&#34;&gt;&lt;/a&gt;何为事务？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。在计算机术语中，事务通常就是指数据库事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事务在数据库的作用&#34;&gt;&lt;a href=&#34;#事务在数据库的作用&#34; class=&#34;headerlink&#34; title=&#34;事务在数据库的作用&#34;&gt;&lt;/a&gt;事务在数据库的作用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个数据库事务通常包含对数据库进行读或写的一个操作序列。它的存在包含有以下两个目的：&lt;ul&gt;
&lt;li&gt;==1、为数据库操作提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。==&lt;/li&gt;
&lt;li&gt;==2、当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事务的四大原则&#34;&gt;&lt;a href=&#34;#事务的四大原则&#34; class=&#34;headerlink&#34; title=&#34;事务的四大原则&#34;&gt;&lt;/a&gt;事务的四大原则&lt;/h3&gt;&lt;h4 id=&#34;原子性-Atomicity&#34;&gt;&lt;a href=&#34;#原子性-Atomicity&#34; class=&#34;headerlink&#34; title=&#34;原子性(Atomicity)&#34;&gt;&lt;/a&gt;原子性(Atomicity)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;原子性保证将每个事务视为一个单独的“单元”，它==要么完全成功，要么完全失败==：如果构成事务的任何语句未能完成，则整个事务都会失败，并且数据库将保持不变。&lt;/li&gt;
&lt;li&gt;例如：用户A给用户B进行银行转账，数据库要确保这一事务的两个操作都成功：这两个操作即A成功转账给B，B成功收到A的转账。两个操作缺少一个就失败，这两个操作可看成一个事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;一致性-Consistency&#34;&gt;&lt;a href=&#34;#一致性-Consistency&#34; class=&#34;headerlink&#34; title=&#34;一致性(Consistency)&#34;&gt;&lt;/a&gt;一致性(Consistency)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。&lt;/li&gt;
&lt;li&gt;例如：用户A给用户B转账前与转账后，双方的总资产保持不变，即转账事务前后的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;隔离性-Isolation&#34;&gt;&lt;a href=&#34;#隔离性-Isolation&#34; class=&#34;headerlink&#34; title=&#34;隔离性(Isolation)&#34;&gt;&lt;/a&gt;隔离性(Isolation)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;多个事务并发时，一个事务不会影响到另一个事务。&lt;/li&gt;
&lt;li&gt;例如：用户B同时受到用户A与C的银行转账，此时当两个转账操作结束后，B的总金额为其原金额加上A与C转给其的金额总数。即A转账B和C转账B两个事务相互隔离，当A、C没有确认提交之前，两者转账的钱具有隔离性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;持久性-Durability&#34;&gt;&lt;a href=&#34;#持久性-Durability&#34; class=&#34;headerlink&#34; title=&#34;持久性(Durability)&#34;&gt;&lt;/a&gt;持久性(Durability)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;一个事务一旦提交，他对数据库的修改应该永久保存在数据库中。&lt;/li&gt;
&lt;li&gt;例如：当A把钱转账到B账户上时，双方的账户金额在数据库中就会永久保存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;隔离的一些问题&#34;&gt;&lt;a href=&#34;#隔离的一些问题&#34; class=&#34;headerlink&#34; title=&#34;隔离的一些问题&#34;&gt;&lt;/a&gt;隔离的一些问题&lt;/h3&gt;&lt;h4 id=&#34;脏读&#34;&gt;&lt;a href=&#34;#脏读&#34; class=&#34;headerlink&#34; title=&#34;脏读&#34;&gt;&lt;/a&gt;脏读&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;指一个事务读取了另一个事务未提交的数据&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;不可重复读&#34;&gt;&lt;a href=&#34;#不可重复读&#34; class=&#34;headerlink&#34; title=&#34;不可重复读&#34;&gt;&lt;/a&gt;不可重复读&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在一个事务内读取表中的某一行数据，多次读取结果不同（不一定是错误，只是场合不对）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;幻读&#34;&gt;&lt;a href=&#34;#幻读&#34; class=&#34;headerlink&#34; title=&#34;幻读&#34;&gt;&lt;/a&gt;幻读&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;指在一个事务内读到了别的事务插入的数据，导致前后读取不一致&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事务的使用&#34;&gt;&lt;a href=&#34;#事务的使用&#34; class=&#34;headerlink&#34; title=&#34;事务的使用&#34;&gt;&lt;/a&gt;事务的使用&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;-- 在默认状态下MySQL是开启事务自动提交的
SET autocommit = 0 --关闭
SET autocommit = 1 --开启

-- 手动处理事务
SET autocommit = 0 --关闭自动提交

-- 事务开启
START TRANSACTION --标记一个事务的开始，从这里为一个事务内的SQL

INSERT .....

-- 提交：持久化,即成功
COMMIT

-- 回滚：回到原来的样子,即失败
ROLLBACK

--事务结束
SET autocommit = 1 --开启
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;索引-Index&#34;&gt;&lt;a href=&#34;#索引-Index&#34; class=&#34;headerlink&#34; title=&#34;索引(Index)&#34;&gt;&lt;/a&gt;索引(Index)&lt;/h2&gt;&lt;h3 id=&#34;何为索引？&#34;&gt;&lt;a href=&#34;#何为索引？&#34; class=&#34;headerlink&#34; title=&#34;何为索引？&#34;&gt;&lt;/a&gt;何为索引？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;索引是存储引擎用于快速找到记录的一种数据结构.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;最常见的例子为==书本的目录==，我们在一本很厚的书中，需要通过目录找到需要的知识，可以快速精确定位到第几页中，不必一页一页的查找，提高查询效率&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;索引分类&#34;&gt;&lt;a href=&#34;#索引分类&#34; class=&#34;headerlink&#34; title=&#34;索引分类&#34;&gt;&lt;/a&gt;索引分类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主键索引&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;PRIMARY KEY,主键不可重复，一个表只有一列可作为主键&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;唯一索引&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;UNIQUE KEY，唯一索引的使用可以重复，但不可出现相同字段的唯一索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常规索引&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;INDEX/KEY&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全文索引&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;FULLTEXT，只有在&lt;code&gt;MyISAM&lt;/code&gt;数据库引擎下才有，可快速定位数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本语法&#34;&gt;&lt;a href=&#34;#基本语法&#34; class=&#34;headerlink&#34; title=&#34;基本语法&#34;&gt;&lt;/a&gt;基本语法&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;-- 索引的使用
-- 1.再创建表的时候给字段增加索引
-- 2.创建完毕后，增加索引

-- 显示索引的索引信息
SHOW INDEX FROM student

-- 增加一个全文索引
ALTER TABLE school.student ADD FULLTEXT INDEX `studentName` (`studentName`);

-- EXPLAIN 分析sql执行情况
EXPLAIN SELECT * FROM student; --非全文索引
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;索引原则&#34;&gt;&lt;a href=&#34;#索引原则&#34; class=&#34;headerlink&#34; title=&#34;索引原则&#34;&gt;&lt;/a&gt;索引原则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;索引并不是越多越好&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要对进程变得数据加索引&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;小数据量的表不需要加索引&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;素养一把加在常用来查询的字段上&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;索引背后的数据结构&#34;&gt;&lt;a href=&#34;#索引背后的数据结构&#34; class=&#34;headerlink&#34; title=&#34;索引背后的数据结构&#34;&gt;&lt;/a&gt;索引背后的数据结构&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;参考文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cuY29kaW5nbGFicy5vcmcvYXJ0aWNsZXMvdGhlb3J5LW9mLW15c3FsLWluZGV4Lmh0bWw=&#34;&gt;http://blog.codinglabs.org/articles/theory-of-mysql-index.html&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;权限管理与备份&#34;&gt;&lt;a href=&#34;#权限管理与备份&#34; class=&#34;headerlink&#34; title=&#34;权限管理与备份&#34;&gt;&lt;/a&gt;权限管理与备份&lt;/h2&gt;&lt;h3 id=&#34;权限管理的作用&#34;&gt;&lt;a href=&#34;#权限管理的作用&#34; class=&#34;headerlink&#34; title=&#34;权限管理的作用&#34;&gt;&lt;/a&gt;权限管理的作用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;可以限制用户访问哪些库、哪些表&lt;/li&gt;
&lt;li&gt;可以限制用户对哪些表执行SELECT、CREATE、DELETE、DELETE、ALTER等操作&lt;/li&gt;
&lt;li&gt;可以限制用户登录的IP或域名&lt;/li&gt;
&lt;li&gt;可以限制用户自己的权限是否可以授权给别的用户&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;MYSQL连接权限&#34;&gt;&lt;a href=&#34;#MYSQL连接权限&#34; class=&#34;headerlink&#34; title=&#34;MYSQL连接权限&#34;&gt;&lt;/a&gt;MYSQL连接权限&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主要依据：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;你从哪里来？ host&lt;/li&gt;
&lt;li&gt;你是谁？ user&lt;/li&gt;
&lt;li&gt;你的密码是多少？ password&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过用户提供的这三个信息，存储MySQL库中的user表中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;MySQL执行权限的检查顺序&#34;&gt;&lt;a href=&#34;#MySQL执行权限的检查顺序&#34; class=&#34;headerlink&#34; title=&#34;MySQL执行权限的检查顺序&#34;&gt;&lt;/a&gt;MySQL执行权限的检查顺序&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;https://s3.ax1x.com/2021/01/20/sR4ytA.png&#34; alt=&#34;quanxian&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;用户管理&#34;&gt;&lt;a href=&#34;#用户管理&#34; class=&#34;headerlink&#34; title=&#34;用户管理&#34;&gt;&lt;/a&gt;用户管理&lt;/h3&gt;&lt;h4 id=&#34;创建用户&#34;&gt;&lt;a href=&#34;#创建用户&#34; class=&#34;headerlink&#34; title=&#34;创建用户&#34;&gt;&lt;/a&gt;创建用户&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;有两种方式创建MySQL授权用户&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;==方法一、通过insert语句直接操作MySQL系统权限表==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;==方法二、执行create user/grant命令（推荐）==&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;创建语法&#34;&gt;&lt;a href=&#34;#创建语法&#34; class=&#34;headerlink&#34; title=&#34;创建语法&#34;&gt;&lt;/a&gt;创建语法&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;create user [用户名]@[访问地址] identified by [密码]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;授权语法&#34;&gt;&lt;a href=&#34;#授权语法&#34; class=&#34;headerlink&#34; title=&#34;授权语法&#34;&gt;&lt;/a&gt;授权语法&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;grant [权限1,权限2,权限3] on *.* to user@&amp;#39;host&amp;#39; identified by &amp;#39;password&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;详细资料参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNjU2MDA4&#34;&gt;https://cloud.tencent.com/developer/article/1656008&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数据库规范&#34;&gt;&lt;a href=&#34;#数据库规范&#34; class=&#34;headerlink&#34; title=&#34;数据库规范&#34;&gt;&lt;/a&gt;数据库规范&lt;/h2&gt;&lt;h3 id=&#34;三大范式&#34;&gt;&lt;a href=&#34;#三大范式&#34; class=&#34;headerlink&#34; title=&#34;三大范式&#34;&gt;&lt;/a&gt;三大范式&lt;/h3&gt;&lt;h4 id=&#34;第一范式-1NF&#34;&gt;&lt;a href=&#34;#第一范式-1NF&#34; class=&#34;headerlink&#34; title=&#34;第一范式(1NF)&#34;&gt;&lt;/a&gt;第一范式(1NF)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;原子性，保证每一列不再可分&lt;h4 id=&#34;第二范式-2NF&#34;&gt;&lt;a href=&#34;#第二范式-2NF&#34; class=&#34;headerlink&#34; title=&#34;第二范式(2NF)&#34;&gt;&lt;/a&gt;第二范式(2NF)&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;必要前提：==满足第一范式==&lt;/li&gt;
&lt;li&gt;每张表只描述一件事情&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;第三范式-3NF&#34;&gt;&lt;a href=&#34;#第三范式-3NF&#34; class=&#34;headerlink&#34; title=&#34;第三范式(3NF)&#34;&gt;&lt;/a&gt;第三范式(3NF)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;必要前提： ==满足第一、第二范式==&lt;/li&gt;
&lt;li&gt;第三范式需要确保数据表中的每一列数据和主键直接相关，而==不能间接相关==&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;规范与性能的问题&#34;&gt;&lt;a href=&#34;#规范与性能的问题&#34; class=&#34;headerlink&#34; title=&#34;规范与性能的问题&#34;&gt;&lt;/a&gt;规范与性能的问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关联查询的表不可超过三张&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;考虑商业化的需求和目标&lt;/li&gt;
&lt;li&gt;适当考虑规范性&lt;/li&gt;
&lt;li&gt;故意给某些表增加一些冗余的字段&lt;/li&gt;
&lt;li&gt;故意增加一些计算列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;JDBC-重点&#34;&gt;&lt;a href=&#34;#JDBC-重点&#34; class=&#34;headerlink&#34; title=&#34;JDBC (重点)&#34;&gt;&lt;/a&gt;JDBC (重点)&lt;/h2&gt;&lt;h3 id=&#34;数据库驱动&#34;&gt;&lt;a href=&#34;#数据库驱动&#34; class=&#34;headerlink&#34; title=&#34;数据库驱动&#34;&gt;&lt;/a&gt;数据库驱动&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;图解：&lt;br&gt;&lt;img data-src=&#34;https://s3.ax1x.com/2021/01/20/sf8EGt.png&#34; alt=&#34;qudong&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Java数据库连接（JDBC）&#34;&gt;&lt;a href=&#34;#Java数据库连接（JDBC）&#34; class=&#34;headerlink&#34; title=&#34;Java数据库连接（JDBC）&#34;&gt;&lt;/a&gt;Java数据库连接（JDBC）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Java数据库连接（JDBC）是Java编程语言的应用程序编程接口（API），它定义了客户端如何访问数据库。==它是用于Java数据库连接的基于Java的数据访问技术==。它是Oracle Corporation的Java Standard Edition平台的一部分。它提供了查询和更新数据库中数据的方法，并且面向关系数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;编程步骤&#34;&gt;&lt;a href=&#34;#编程步骤&#34; class=&#34;headerlink&#34; title=&#34;编程步骤&#34;&gt;&lt;/a&gt;编程步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;加载驱动程序&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Class.forName(driverClass)
//加载MySql驱动
Class.forName(&amp;quot;com.mysql.jdbc.Driver&amp;quot;)
//加载Oracle驱动
Class.forName(&amp;quot;oracle.jdbc.driver.OracleDriver&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;获得数据库连接&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;DriverManager.getConnection(&amp;quot;jdbc:mysql://127.0.0.1:3306/abc&amp;quot;, &amp;quot;root&amp;quot;, &amp;quot;root&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;创建Statement\PreparedStatement对象：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;conn.createStatement();
conn.prepareStatement(sql);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;加载驱动&lt;/li&gt;
&lt;li&gt;连接数据库&lt;code&gt;DriverManager&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获得执行sql对象 &lt;code&gt;statement&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获得返回的结果集&lt;/li&gt;
&lt;li&gt;释放连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;主要java代码&#34;&gt;&lt;a href=&#34;#主要java代码&#34; class=&#34;headerlink&#34; title=&#34;主要java代码&#34;&gt;&lt;/a&gt;主要java代码&lt;/h3&gt;&lt;h4 id=&#34;DriverManager&#34;&gt;&lt;a href=&#34;#DriverManager&#34; class=&#34;headerlink&#34; title=&#34;DriverManager&#34;&gt;&lt;/a&gt;DriverManager&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;//DriverManager.registerDriver(new com.mysql.jdbc.Driver());
Class.forName(&amp;quot;com.mysql.jdbc.Driver&amp;quot;);
Connection connection = DriverManager.getConnection(url,username,password);

// connection 代表数据库
// 数据库设置自动提交
connection.setAutoCommit();
// 事务提交
connection.commit();
//事务回滚
connection.rollback();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;URL&#34;&gt;&lt;a href=&#34;#URL&#34; class=&#34;headerlink&#34; title=&#34;URL&#34;&gt;&lt;/a&gt;URL&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;String url = &amp;quot;jdbc:mysql://localhost:3306/jdbcstudy......&amp;quot;//按照实际的数据库url填写
// 3306为mysql数据库的端口号
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;statement执行SQL的对象-PrepareStatement执行SQL的对象&#34;&gt;&lt;a href=&#34;#statement执行SQL的对象-PrepareStatement执行SQL的对象&#34; class=&#34;headerlink&#34; title=&#34;statement执行SQL的对象 PrepareStatement执行SQL的对象&#34;&gt;&lt;/a&gt;statement执行SQL的对象 PrepareStatement执行SQL的对象&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;String sql = &amp;quot;SELECT * FROM users&amp;quot;; //编写SQL

statement.executeQuery();//查询潮州返回的结果集ResultSet
statement.execute(); //执行任何SQL
statement.executeUpdate(); //为增删改使用
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ResultSet-查询的结果集，封装了所有查询结果&#34;&gt;&lt;a href=&#34;#ResultSet-查询的结果集，封装了所有查询结果&#34; class=&#34;headerlink&#34; title=&#34;ResultSet 查询的结果集，封装了所有查询结果&#34;&gt;&lt;/a&gt;ResultSet 查询的结果集，封装了所有查询结果&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;获得指定的数据类型&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;resultSet.getObject(); //在不知道列类型的情况下使用
//以下为指导列类型使用
resultSet.getString();
resultSet.getInt();
resultSet.getDate();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历&lt;br&gt;```java&lt;br&gt;resultSet.beforeFirst(); //移到最前面&lt;br&gt;resultSet.afterLast(); //移到最后面&lt;br&gt;resultSet.next(); //移到下一个数据&lt;br&gt;resultSet.previous(); //移到前一行&lt;br&gt;resultSet.absoulute(row); //移动到指定行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;释放资源&#34;&gt;&lt;a href=&#34;#释放资源&#34; class=&#34;headerlink&#34; title=&#34;释放资源&#34;&gt;&lt;/a&gt;释放资源&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;resultSet.close();
statement.close();
connection.close();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;statement对象&#34;&gt;&lt;a href=&#34;#statement对象&#34; class=&#34;headerlink&#34; title=&#34;statement对象&#34;&gt;&lt;/a&gt;statement对象&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vRWFzb25KaW0vcC82OTk0MDE0Lmh0bWw=&#34;&gt;https://www.cnblogs.com/EasonJim/p/6994014.html&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="MySQL" />
        <updated>2021-01-18T08:57:59.000Z</updated>
    </entry>
    <entry>
        <id>https://peter-pan001.github.io/my-blog/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</id>
        <title>MySQL数据库</title>
        <link rel="alternate" href="https://peter-pan001.github.io/my-blog/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
        <content type="html">&lt;h2 id=&#34;认识数据库&#34;&gt;&lt;a href=&#34;#认识数据库&#34; class=&#34;headerlink&#34; title=&#34;认识数据库&#34;&gt;&lt;/a&gt;认识数据库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据库(DataBase),即数据存储的仓库，一个数据库由多个表空间组成&lt;/li&gt;
&lt;li&gt;用户可在数据库中对库中的表进行增删改查的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库管理系统（DBMS）&#34;&gt;&lt;a href=&#34;#数据库管理系统（DBMS）&#34; class=&#34;headerlink&#34; title=&#34;数据库管理系统（DBMS）&#34;&gt;&lt;/a&gt;数据库管理系统（DBMS）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;具有管理数据库的一种软件系统，==具有存储、截取、安全保障、数据备份==等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库分类&#34;&gt;&lt;a href=&#34;#数据库分类&#34; class=&#34;headerlink&#34; title=&#34;数据库分类&#34;&gt;&lt;/a&gt;数据库分类&lt;/h2&gt;&lt;h3 id=&#34;什么是关系模式&#34;&gt;&lt;a href=&#34;#什么是关系模式&#34; class=&#34;headerlink&#34; title=&#34;什么是关系模式&#34;&gt;&lt;/a&gt;什么是关系模式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;关系的描述称为关系模式（Relation Schema）它可以形式化地表示为：&lt;ul&gt;
&lt;li&gt;R（U，D，dom，F）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;==其中R为关系名，U为组成该关系的属性名集合，D为属性组U中属性所来自的域，dom为属性向域的映象集合，F为属性间数据的依赖关系集合。==&lt;/li&gt;
&lt;li&gt;通常简记为：&lt;ul&gt;
&lt;li&gt;R(U)或R(A1，A2，…,An)&lt;/li&gt;
&lt;li&gt;其中R为关系名，U为属性名集合，A1，A2，…,An为各属性名。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;什么是关系模型&#34;&gt;&lt;a href=&#34;#什么是关系模型&#34; class=&#34;headerlink&#34; title=&#34;什么是关系模型&#34;&gt;&lt;/a&gt;什么是关系模型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;关系实际上就是关系模式在某一时刻的状态或内容。也就是说，关系模式是型，关系是它的值。关系模式是静态的、稳定的，而关系是动态的、随时间不断变化的，因为关系操作在不断地更新着数据库中的数据。但在实际当中，常常把关系模式和关系统称为关系，读者可以从上下文中加以区别。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关系型数据库&#34;&gt;&lt;a href=&#34;#关系型数据库&#34; class=&#34;headerlink&#34; title=&#34;关系型数据库&#34;&gt;&lt;/a&gt;关系型数据库&lt;/h3&gt;&lt;h4 id=&#34;定义&#34;&gt;&lt;a href=&#34;#定义&#34; class=&#34;headerlink&#34; title=&#34;定义&#34;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;h2 id=&#34;采用了关系模型来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了数据库。&#34;&gt;&lt;a href=&#34;#采用了关系模型来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了数据库。&#34; class=&#34;headerlink&#34; title=&#34;- ==采用了关系模型来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了数据库。==&#34;&gt;&lt;/a&gt;- ==采用了关系模型来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了数据库。==&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;li&gt;DB2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;非关系型数据库&#34;&gt;&lt;a href=&#34;#非关系型数据库&#34; class=&#34;headerlink&#34; title=&#34;非关系型数据库&#34;&gt;&lt;/a&gt;非关系型数据库&lt;/h3&gt;&lt;h4 id=&#34;定义-1&#34;&gt;&lt;a href=&#34;#定义-1&#34; class=&#34;headerlink&#34; title=&#34;定义&#34;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;h2 id=&#34;NoSQL，泛指非关系型的数据库。随着互联网web2-0网站的兴起，传统的关系数据库在处理web2-0网站，特别是超大规模和高并发的SNS类型的web2-0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。&#34;&gt;&lt;a href=&#34;#NoSQL，泛指非关系型的数据库。随着互联网web2-0网站的兴起，传统的关系数据库在处理web2-0网站，特别是超大规模和高并发的SNS类型的web2-0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。&#34; class=&#34;headerlink&#34; title=&#34;- ==NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。==&#34;&gt;&lt;/a&gt;- ==NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。==&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关于MySQL&#34;&gt;&lt;a href=&#34;#关于MySQL&#34; class=&#34;headerlink&#34; title=&#34;关于MySQL&#34;&gt;&lt;/a&gt;关于MySQL&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原开发者为瑞典的MySQL AB公司，该公司于2008年被昇阳微系统（Sun Microsystems）收购。2009年，甲骨文公司（Oracle）收购昇阳微系统公司，MySQL成为Oracle旗下产品。&lt;/li&gt;
&lt;li&gt;==开源的数据库系统软件==&lt;/li&gt;
&lt;li&gt;==最好的RDBMS(Relational DataBase Manager System)关系型数据库管理系统==&lt;/li&gt;
&lt;li&gt;体积小，速度快，开发成本低等优点，多用于中小型网站的开发，大型网站用到集群&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;MySQL安装&#34;&gt;&lt;a href=&#34;#MySQL安装&#34; class=&#34;headerlink&#34; title=&#34;MySQL安装&#34;&gt;&lt;/a&gt;MySQL安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官网下载压缩包&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubXlzcWwuY29tL2NuL2Rvd25sb2Fkcy8=&#34;&gt;https://www.mysql.com/cn/downloads/&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;解压&lt;/li&gt;
&lt;li&gt;把解压包放在电脑环境目录下&lt;/li&gt;
&lt;li&gt;配置环境变量&lt;/li&gt;
&lt;li&gt;新建MySQL配置文件&lt;code&gt;ini&lt;/code&gt;&lt;pre&gt;&lt;code class=&#34;lang-ini&#34;&gt;[mysqld]
# 目录按个人的来
basedir=E:\software\mysql-5.02.11\
datadir=E:\software\mysql-5.02.11\data\
port=3306
skip-grant-tables
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;启动管理员运行，运行CMD命令&lt;ul&gt;
&lt;li&gt;先把命令路径切换至mysql下的bin命令然后输入&lt;code&gt;mysqld -install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再输入&lt;code&gt;mysqld --initialize-insecure --user=mysql&lt;/code&gt;初始化数据文件&lt;/li&gt;
&lt;li&gt;然后再次启动mysql，用命令&lt;code&gt;mysql -u root -p&lt;/code&gt;进入mysql管理界面&lt;/li&gt;
&lt;li&gt;进入界面更改root密码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update mysql.user set authentication_string=password(&amp;#39;123456&amp;#39;) where user=&amp;#39;root&amp;#39; and Host = &amp;#39;localhost&amp;#39;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后输入&lt;code&gt;flush privileges&lt;/code&gt;刷新权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改&lt;code&gt;my.ini&lt;/code&gt;文件删除最后一句&lt;code&gt;skip-grant-tables&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启mysql即可使用&lt;ul&gt;
&lt;li&gt;&lt;code&gt;net stop mysql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net start mysql&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库使用&#34;&gt;&lt;a href=&#34;#数据库使用&#34; class=&#34;headerlink&#34; title=&#34;数据库使用&#34;&gt;&lt;/a&gt;数据库使用&lt;/h2&gt;&lt;h3 id=&#34;使用命令行连接数据库&#34;&gt;&lt;a href=&#34;#使用命令行连接数据库&#34; class=&#34;headerlink&#34; title=&#34;使用命令行连接数据库&#34;&gt;&lt;/a&gt;使用命令行连接数据库&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;mysql -uroot -p123456 --连接数据库
update mysql.user set authentication_string=password(&amp;#39;123456&amp;#39;) where user=&amp;#39;root&amp;#39; and Host = &amp;#39;localhost&amp;#39;; --修改用户密码
flush privileges; --刷新权限

show databases; --查看所有数据库

mysql&amp;gt; use college --切换数据库+use关键字+数据库名
Database changed

show tables; --查看数据库中所有的表
describe student; --显示数据库中所有表信息
create database stuRepo; --创建一个数据库
exit; --退出连接
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;操作数据库&#34;&gt;&lt;a href=&#34;#操作数据库&#34; class=&#34;headerlink&#34; title=&#34;操作数据库&#34;&gt;&lt;/a&gt;操作数据库&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创库&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;CREATE DATABASE [IF NOT EXIST] stuRepo;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删库&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;DROP DATABASE [IF EXIST] stuRepo;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用数据库&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;use &amp;#39;stuRepo&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查看数据库&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;show Databases;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据库的数据类型&#34;&gt;&lt;a href=&#34;#数据库的数据类型&#34; class=&#34;headerlink&#34; title=&#34;数据库的数据类型&#34;&gt;&lt;/a&gt;数据库的数据类型&lt;/h3&gt;&lt;h4 id=&#34;数值型&#34;&gt;&lt;a href=&#34;#数值型&#34; class=&#34;headerlink&#34; title=&#34;数值型&#34;&gt;&lt;/a&gt;数值型&lt;/h4&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;适用范围&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;大小&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;tinyint&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;极小的整数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;smallint&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;较小的整数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;mediumint&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中等的整数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;标准的整数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;bigint&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;较大的整数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;浮点数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;双精度浮点数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;字符串形式的浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;字符串&#34;&gt;&lt;a href=&#34;#字符串&#34; class=&#34;headerlink&#34; title=&#34;字符串&#34;&gt;&lt;/a&gt;字符串&lt;/h4&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;解释&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数值范围&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;字符串固定大小的&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0~255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;varchar&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可变字符串&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0~65535&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;最常用的变量如String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;tinytext&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;微型文本&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2^8-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;文本串&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2^16-1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;存储大文本&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;时间日期型&#34;&gt;&lt;a href=&#34;#时间日期型&#34; class=&#34;headerlink&#34; title=&#34;时间日期型&#34;&gt;&lt;/a&gt;时间日期型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;出自&lt;code&gt;java.util.Date&lt;/code&gt;包&lt;/li&gt;
&lt;li&gt;|类型|格式|解释|&lt;br&gt;|:——:|:——:|:——-:|&lt;br&gt;|&lt;code&gt;date&lt;/code&gt;|YYYY-MM-DD|日期格式|&lt;br&gt;|&lt;code&gt;time&lt;/code&gt;|HH:mm:ss|时间格式|&lt;br&gt;|&lt;code&gt;datatime&lt;/code&gt;|YYYY-MM-DD HH:mm:ss|最常见的时间格式|&lt;br&gt;|&lt;code&gt;timestamp&lt;/code&gt;|即时间戳|1970.1.1至今的毫秒数|&lt;br&gt;|&lt;code&gt;year&lt;/code&gt;||年份表示|&lt;h4 id=&#34;NULL&#34;&gt;&lt;a href=&#34;#NULL&#34; class=&#34;headerlink&#34; title=&#34;NULL&#34;&gt;&lt;/a&gt;NULL&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;无数值&lt;/li&gt;
&lt;li&gt;不可使用&lt;code&gt;NULL&lt;/code&gt;进行运算，结果为&lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据库字段属性&#34;&gt;&lt;a href=&#34;#数据库字段属性&#34; class=&#34;headerlink&#34; title=&#34;数据库字段属性&#34;&gt;&lt;/a&gt;数据库字段属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unsigned&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;无符号的整数&lt;/li&gt;
&lt;li&gt;声明了该列不可为 &lt;strong&gt;负数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;zerofill&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;0填充的&lt;/li&gt;
&lt;li&gt;不足的位数，使用0来填充&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自增&lt;/strong&gt;(AUTO_INCREMENT)&lt;ul&gt;
&lt;li&gt;通常理解为自增，自动在上一条记录的属性上加1（默认）&lt;/li&gt;
&lt;li&gt;通常用来设计唯一的主键(如id、index等)，必须为整数类型&lt;/li&gt;
&lt;li&gt;可以自定义设计主键自增的起始值和步长&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非空&lt;/strong&gt;(NOT_NULL)&lt;ul&gt;
&lt;li&gt;若字段设置为非空，则不给该字段赋值，系统报错&lt;/li&gt;
&lt;li&gt;NULL，不填写默认为空&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;默认&lt;/strong&gt;(DEFAULT)&lt;h2 id=&#34;表的操作&#34;&gt;&lt;a href=&#34;#表的操作&#34; class=&#34;headerlink&#34; title=&#34;表的操作&#34;&gt;&lt;/a&gt;表的操作&lt;/h2&gt;&lt;h3 id=&#34;创表&#34;&gt;&lt;a href=&#34;#创表&#34; class=&#34;headerlink&#34; title=&#34;创表&#34;&gt;&lt;/a&gt;创表&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;--业务：创建一个school数据库
--然后创建学生表，使用SQL语句创建
--关键点：
--使用英文的(),表名和字段名尽量使用``括起来
--AUTO_INCREMENT自增
--PRIMARY KEY 主键，一个表只有一个主键
CREATE DATABASE IF NOT EXISTS `school`;
use `school`;
CREATE TABLE IF NOT EXISTS `student` {
`id` int(6) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;学号&amp;#39;,
`name` VARCHAR(22) NOT NULL DEFAULT &amp;#39;匿名&amp;#39; COMMENT &amp;#39;姓名&amp;#39;,
`pwd` VARCHAR(30) NOT NULL DEFAULT &amp;#39;123&amp;#39; COMMENT &amp;#39;密码&amp;#39;,
`sex` VARCHAR(2) NOT NULL DEFAULT &amp;#39;女&amp;#39; COMMENT &amp;#39;性别&amp;#39;,
`birthday` DATETIME DEFAULT NULL COMMENT &amp;#39;出生日期&amp;#39;,
PRIMARY KEY(`id`)
}ENGINE=INNOOB DEFAULT CHARSET=UTF8
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;标准格式&#34;&gt;&lt;a href=&#34;#标准格式&#34; class=&#34;headerlink&#34; title=&#34;标准格式&#34;&gt;&lt;/a&gt;标准格式&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;CREATE TABLE [IF NOT EXISTS] `表名`{
`字段名1` 列类型 [属性] [索引] [注释],
`字段名2` 列类型 [属性] [索引] [注释],
...
}[表类型] [字符集设置] [注释]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;查看库与表的语句&#34;&gt;&lt;a href=&#34;#查看库与表的语句&#34; class=&#34;headerlink&#34; title=&#34;查看库与表的语句&#34;&gt;&lt;/a&gt;查看库与表的语句&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;SHOW CREATE DATABASE school -- 查看创建数据库的语句
SHOW CREATE TABLE student -- 查看student数据库中表的定义语句
DESC student -- 显示表的结构
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数据表类型&#34;&gt;&lt;a href=&#34;#数据表类型&#34; class=&#34;headerlink&#34; title=&#34;数据表类型&#34;&gt;&lt;/a&gt;数据表类型&lt;/h3&gt;&lt;h4 id=&#34;数据库引擎&#34;&gt;&lt;a href=&#34;#数据库引擎&#34; class=&#34;headerlink&#34; title=&#34;数据库引擎&#34;&gt;&lt;/a&gt;数据库引擎&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;==数据库引擎是用于存储、处理和保护数据的核心服务。利用数据库引擎可控制访问权限并快速处理事务，从而满足企业内大多数需要处理大量数据的应用程序的要求。 使用数据库引擎创建用于联机事务处理或联机分析处理数据的关系数据库。==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目前常用的（必记的）&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INNODB&lt;/code&gt; 默认使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MYISAM&lt;/code&gt; 早期使用的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;两者区别&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;MYISAM&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;INNODB&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;事务支持&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不支持&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据行锁定&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不支持&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外键约束&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不支持&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;全文索引&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;支持&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;表空间的大小&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;较小&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;较大，约为MYISAM的两倍&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用特点&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;对于&lt;code&gt;MYISAM&lt;/code&gt;而言，可节约空间，高速运行&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;INNODB&lt;/code&gt;而言，安全性高，可实现多表多用户操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在物理环境中存在的位置&lt;br&gt;索引的数据库文件都存储在data文件目录下，一个文件夹对应一个数据库&lt;br&gt;本质上是文件的存储&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;两个数据库引擎在物理上的区别&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INNODB&lt;/code&gt;在数据库表中只有一个&lt;code&gt;*.frm&lt;/code&gt;文件，以及上级目录下的&lt;code&gt;ibdata1&lt;/code&gt;文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MYISAM&lt;/code&gt;对应文件&lt;br&gt;|文件后缀|解释|&lt;br&gt;|:—-:|:——:|&lt;br&gt;|&lt;code&gt;*.frm&lt;/code&gt;|表结构定义文件|&lt;br&gt;|&lt;code&gt;*.MYD&lt;/code&gt;|数据文件data|&lt;br&gt;|&lt;code&gt;*.MYI&lt;/code&gt;|索引文件index|&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;编码问题&#34;&gt;&lt;a href=&#34;#编码问题&#34; class=&#34;headerlink&#34; title=&#34;编码问题&#34;&gt;&lt;/a&gt;编码问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;设置编码(创表的SQL语句中)&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;CHARSET=utf8
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;不设置utf-8，==MYSQL默认编码为Latin1，且不支持中文==&lt;/li&gt;
&lt;li&gt;也可在&lt;code&gt;my.ini&lt;/code&gt;配置文件中设置默认编码（但不推荐，因为非本机操作数据库会失效）&lt;pre&gt;&lt;code class=&#34;lang-ini&#34;&gt;character-set-server=utf8
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;增加与删除表字段&#34;&gt;&lt;a href=&#34;#增加与删除表字段&#34; class=&#34;headerlink&#34; title=&#34;增加与删除表字段&#34;&gt;&lt;/a&gt;增加与删除表字段&lt;/h3&gt;&lt;h4 id=&#34;修改表名称&#34;&gt;&lt;a href=&#34;#修改表名称&#34; class=&#34;headerlink&#34; title=&#34;修改表名称&#34;&gt;&lt;/a&gt;修改表名称&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;举例：&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;ALTER TABLE person RENAME AS man
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标准格式&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;ALTER TABLE [表名称]  RENAME AS [新表的名称]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;增加表字段&#34;&gt;&lt;a href=&#34;#增加表字段&#34; class=&#34;headerlink&#34; title=&#34;增加表字段&#34;&gt;&lt;/a&gt;增加表字段&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;举例：&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;ALTER TABLE teacher ADD age INT(11)--增加teacher表的年龄字段
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标准格式:&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;ALTER TABLE [表名称] ADD [字段名] [字段属性]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;修改表字段-修改约束与重命名&#34;&gt;&lt;a href=&#34;#修改表字段-修改约束与重命名&#34; class=&#34;headerlink&#34; title=&#34;修改表字段(修改约束与重命名)&#34;&gt;&lt;/a&gt;修改表字段(修改约束与重命名)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;举例：&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;ALTER TABLE JOB MODIFY salary int(12) --修改约束
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标准格式：&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;ALTER TABLE [表名称] MODIFY [字段名] [字段属性]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;举例：&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;ALTER TABLE JOB CHANGE salary salary1 int(12) --字段重命名 salary为原字段名
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;删除表字段&#34;&gt;&lt;a href=&#34;#删除表字段&#34; class=&#34;headerlink&#34; title=&#34;删除表字段&#34;&gt;&lt;/a&gt;删除表字段&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;举例：&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;ALTER TABLE JOB DROP salary1
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标准格式：&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;ALTER TABLE [表名称] DROP [字段名]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;删除表&#34;&gt;&lt;a href=&#34;#删除表&#34; class=&#34;headerlink&#34; title=&#34;删除表&#34;&gt;&lt;/a&gt;删除表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;标准格式：&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;DROP TABLE IF EXISTS JOB
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据管理&#34;&gt;&lt;a href=&#34;#数据管理&#34; class=&#34;headerlink&#34; title=&#34;数据管理&#34;&gt;&lt;/a&gt;数据管理&lt;/h2&gt;&lt;h3 id=&#34;外键-Foreign-key&#34;&gt;&lt;a href=&#34;#外键-Foreign-key&#34; class=&#34;headerlink&#34; title=&#34;外键(Foreign key)&#34;&gt;&lt;/a&gt;外键(Foreign key)&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;-- 为学生表的gradeid添加年级表的 gradeid外键
CREATE DATABASE IF NOT EXISTS `school`;
use `school`;
CREATE TABLE IF NOT EXISTS `student` {
  `id` int(6) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;学号&amp;#39;,
  `name` VARCHAR(22) NOT NULL DEFAULT &amp;#39;匿名&amp;#39; COMMENT &amp;#39;姓名&amp;#39;,
  `pwd` VARCHAR(30) NOT NULL DEFAULT &amp;#39;123&amp;#39; COMMENT &amp;#39;密码&amp;#39;,
  `sex` VARCHAR(2) NOT NULL DEFAULT &amp;#39;女&amp;#39; COMMENT &amp;#39;性别&amp;#39;,
  `gradeid` int(15) NOT NULL COMMENT &amp;#39;年级&amp;#39;,
  `birthday` DATETIME DEFAULT NULL COMMENT &amp;#39;出生日期&amp;#39;,
  PRIMARY KEY(`id`)
}ENGINE=INNOOB DEFAULT CHARSET=UTF8
--添加外键
ALTER TABLE `student`
ADD CONSTRAINT `FK_gradeid` FOREIGN KEY(`gradeid`) REFERENCES `grade`(`gradeid`);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;标准格式：&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;ALTER TABLE 表名  ADD CONSTRAINT 约束名 FOREIGN KEY(作为外键的列) REFERENCES 引用的表名(引用的表的字段);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;==不建议使用外键约束，而是在应用层进行代码的约束==&lt;/li&gt;
&lt;li&gt;==外键约束对后期程序的开发有很大的影响，对&lt;code&gt;update&lt;/code&gt;和&lt;code&gt;delete&lt;/code&gt;操作都会有更大的麻烦==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;DML-数据管理语言&#34;&gt;&lt;a href=&#34;#DML-数据管理语言&#34; class=&#34;headerlink&#34; title=&#34;DML 数据管理语言&#34;&gt;&lt;/a&gt;DML 数据管理语言&lt;/h3&gt;&lt;h4 id=&#34;添加insert&#34;&gt;&lt;a href=&#34;#添加insert&#34; class=&#34;headerlink&#34; title=&#34;添加insert&#34;&gt;&lt;/a&gt;添加insert&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;insert into `表名`(`字段名1`,`字段名2`,`字段名3`)values(&amp;#39;值1&amp;#39;,&amp;#39;值2&amp;#39;,&amp;#39;值3&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;==左边字段的个数与右边值的个数要相同，并且数据类型要一一对应==&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;修改update&#34;&gt;&lt;a href=&#34;#修改update&#34; class=&#34;headerlink&#34; title=&#34;修改update&#34;&gt;&lt;/a&gt;修改update&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;update `表名` set `列名1` = `值1`,`列名2` = `值2` where 条件
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;==没有where子句后的条件，会默认修改所有列==&lt;/li&gt;
&lt;li&gt;==value既可以是一个值，也可以是一个变量==&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;删除delete&#34;&gt;&lt;a href=&#34;#删除delete&#34; class=&#34;headerlink&#34; title=&#34;删除delete&#34;&gt;&lt;/a&gt;删除delete&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;delete from 表名 where 条件
--where子句可写可不写，按照实际要求决定，where实际上相当于一个删除的约束
--不写where则会删除整个表的数据
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;清空truncate&#34;&gt;&lt;a href=&#34;#清空truncate&#34; class=&#34;headerlink&#34; title=&#34;清空truncate&#34;&gt;&lt;/a&gt;清空truncate&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;只是清空表里的数据，表的结构和字段不会改变&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;--清空JOB表
truncate `JOB`
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;delete与truncate的区别&#34;&gt;&lt;a href=&#34;#delete与truncate的区别&#34; class=&#34;headerlink&#34; title=&#34;delete与truncate的区别&#34;&gt;&lt;/a&gt;delete与truncate的区别&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;==都可删除数据，但都不影响表结构==&lt;/li&gt;
&lt;li&gt;==不同点：==&lt;ul&gt;
&lt;li&gt;&lt;code&gt;truncate&lt;/code&gt; 重新设置自增列，计时器会归零 不会影响事务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;DQL数据查询语言&#34;&gt;&lt;a href=&#34;#DQL数据查询语言&#34; class=&#34;headerlink&#34; title=&#34;DQL数据查询语言&#34;&gt;&lt;/a&gt;DQL数据查询语言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE子句组成的查询块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SELECT &amp;lt;字段名表&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FROM &amp;lt;表或视图名&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WHERE &amp;lt;查询条件&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;指定查询字段&#34;&gt;&lt;a href=&#34;#指定查询字段&#34; class=&#34;headerlink&#34; title=&#34;指定查询字段&#34;&gt;&lt;/a&gt;指定查询字段&lt;/h4&gt;&lt;p&gt;```sql&lt;br&gt;— 查询全部学生&lt;br&gt;select * from student&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;— 查询指定字段&lt;br&gt;select &lt;code&gt;id&lt;/code&gt;,&lt;code&gt;name&lt;/code&gt; from student&lt;/p&gt;
&lt;p&gt;— 别名，为某个表或字段起一个别名&lt;br&gt;select &lt;code&gt;employeeName&lt;/code&gt; AS 员工姓名 from employee AS e&lt;/p&gt;
&lt;p&gt;— 函数 Concat（a,b）&lt;br&gt;select CONCAT(‘员工姓名：’,employeeName) as 新列名 from employee&lt;br&gt;— 输出的格式会为 员工姓名：张三&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#### 去重distinct
- 筛选出表中重复的数据，只显示一个
```sql
select distinct `employeeNo` from employee
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;Where条件子句&#34;&gt;&lt;a href=&#34;#Where条件子句&#34; class=&#34;headerlink&#34; title=&#34;Where条件子句&#34;&gt;&lt;/a&gt;Where条件子句&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;作用：为了筛选出需要的数据，即添加条件&lt;/li&gt;
&lt;li&gt;==通过逻辑运算符配合使用！！！==&lt;br&gt;|运算符|语法|描述|&lt;br&gt;|:—-:|:—-:|:——:|&lt;br&gt;|&lt;code&gt;and&lt;/code&gt;&amp;nbsp;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;| a&amp;nbsp;&lt;code&gt;and&lt;/code&gt;&amp;nbsp;b&amp;nbsp;&amp;nbsp;a&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;b|逻辑与，两个都为真，结果为真|&lt;br&gt;|&lt;code&gt;or&lt;/code&gt;&amp;nbsp;&lt;code&gt;||&lt;/code&gt;|a&amp;nbsp;&lt;code&gt;or&lt;/code&gt;&amp;nbsp;b&amp;nbsp;&amp;nbsp;a&amp;nbsp;&lt;code&gt;||&lt;/code&gt;&amp;nbsp;b|逻辑或，其中一个为真，则结果为真|&lt;br&gt;|&lt;code&gt;not&lt;/code&gt;&amp;nbsp;&lt;code&gt;!&lt;/code&gt;|&lt;code&gt;not&lt;/code&gt;&amp;nbsp;a&amp;nbsp;&amp;nbsp;&lt;code&gt;!&lt;/code&gt;&amp;nbsp;a|逻辑非，真为假，假为真|&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;模糊查询&#34;&gt;&lt;a href=&#34;#模糊查询&#34; class=&#34;headerlink&#34; title=&#34;模糊查询&#34;&gt;&lt;/a&gt;模糊查询&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 MySQL 中，LIKE 关键字主要用于搜索匹配字段中的指定内容。其语法格式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[NOT] LIKE  &amp;#39;字符串&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;NOT&lt;/code&gt; ：可选参数，字段中的内容与指定的字符串不匹配时满足条件。&lt;br&gt;字符串：指定用来匹配的字符串。“字符串”可以是一个很完整的字符串，也可以包含通配符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;LIKE&lt;/code&gt;&amp;nbsp; 关键字支持百分号“%”和下划线“_”通配符。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;==通配符是一种特殊语句，主要用来模糊查询。当不知道真正字符或者懒得输入完整名称时，可以使用通配符来代替一个或多个真正的字符。==&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模糊查询通常会使用到比较运算符&lt;/strong&gt;&lt;br&gt;|运算符|语法|描述|&lt;br&gt;|:——:|:——:|:——:|&lt;br&gt;|&lt;code&gt;IS NULL&lt;/code&gt;|a&amp;nbsp;is&amp;nbsp;null|如果操作符为&lt;code&gt;NULL&lt;/code&gt;,则结果为真|&lt;br&gt;|&lt;code&gt;IS NOT NULL&lt;/code&gt;|a&amp;nbsp;is&amp;nbsp;not&amp;nbsp;null|如果操作符不为&lt;code&gt;NULL&lt;/code&gt;,则结果为真|&lt;br&gt;|&lt;code&gt;BETWEEN&lt;/code&gt;|a&amp;nbsp;between&amp;nbsp;b&amp;nbsp;and&amp;nbsp;c|若a在b与c之间，则结果为真|&lt;br&gt;|&lt;code&gt;LIKE&lt;/code&gt;|a&amp;nbsp;like&amp;nbsp;b|如果a匹配b，则结果为真|&lt;br&gt;|&lt;code&gt;IN&lt;/code&gt;|a&amp;nbsp;in&amp;nbsp;(a1,a2,a3…)|假设a在a1，或a2…其中的某一个值中，则结果为真|&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;模糊查询的SQL语句实例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;-- 查询姓刘的同学
-- like结婚 %（岱庙0到任意个字符） _（代表一个字符）
SELECT `studentId`,`name` FROM `student`
WHERE `name` LIKE &amp;#39;刘%&amp;#39;

-- 查询姓刘的同学，姓后面为一个字的
SELECT `studentId`,`name` FROM `student`
WHERE `name` LIKE &amp;#39;刘_&amp;#39;

-- 查询姓刘的同学，姓后面为两个字的
SELECT `studentId`,`name` FROM `student`
WHERE `name` LIKE &amp;#39;刘__&amp;#39;

-- 查询名字中间为欣字的同学 %欣%
SELECT `studentId`,`name` FROM `student`
WHERE `name` LIKE &amp;#39;%欣%&amp;#39;

-- 查询1001、1002、1003号学员
SELECT `studentId`,`name` FROM `student`
WHERE `studentId` IN (1001,1002,1003)

-- 查询地址为空的学生 null
SELECT `studentId`,`name` FROM `student`
WHERE `address`=&amp;#39;&amp;#39; OR `address` IS NULL

-- 查询有出生日期的同学 not null
SELECT `studentId`,`name` FROM `student`
WHERE `birthday` IS NOT NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;联表查询（重要！）&#34;&gt;&lt;a href=&#34;#联表查询（重要！）&#34; class=&#34;headerlink&#34; title=&#34;联表查询（重要！）&#34;&gt;&lt;/a&gt;联表查询（重要！）&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;联表查询的种类&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.ax1x.com/2021/01/18/syrWa4.jpg&#34; alt=&#34;joinlist&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inner join&lt;/code&gt; &lt;strong&gt;内连接&lt;/strong&gt; ，两个表中都匹配时返回行&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;left join&lt;/code&gt; &lt;strong&gt;左连接&lt;/strong&gt; ，即使左侧表中没有匹配项，也返回左侧表中的所有行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;RIGHT JOIN&lt;/code&gt; &lt;strong&gt;右连接&lt;/strong&gt; ， 即使左侧表中没有匹配项，也返回右侧表中的所有行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;FULL JOIN&lt;/code&gt; &lt;strong&gt;全连接&lt;/strong&gt;， 它合并了左右外部联接的结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;==联接的表将包含两个表中的所有记录，并为任一侧缺少的匹配项填充NULL。==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SELF JOIN&lt;/code&gt; &lt;strong&gt;自连接&lt;/strong&gt;， 用于将一个表连接到自身，就好像该表是两个表一样，在SQL语句中临时重命名至少一个表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;CARTESIAN JOIN&lt;/code&gt; &lt;strong&gt;笛卡尔连接&lt;/strong&gt; 从两个或多个联接表中返回记录集的笛卡尔积。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;联表图解&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.ax1x.com/2021/01/18/sysNS1.png&#34; alt=&#34;joindetails&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;代码示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;-- inner join
SELECT s.studentId ,studentName,subNo,stuRes FROM student AS s 
INNER JOIN result AS r 
ON s.studentId = r.studentId

--right join
SELECT s.studentId ,studentName,subNo,stuRes FROM student AS s 
RIGHT JOIN result AS r 
ON s.studentId = r.studentId  

--left join
SELECT s.studentId ,studentName,subNo,stuRes FROM student AS s 
LEFT JOIN result AS r 
ON s.studentId = r.studentId
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分页和排序&#34;&gt;&lt;a href=&#34;#分页和排序&#34; class=&#34;headerlink&#34; title=&#34;分页和排序&#34;&gt;&lt;/a&gt;分页和排序&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;排序：&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;-- 排序： 升序ASC，降序DESC
-- ORDER BY 通过字段排序
-- 查询的结构根据成绩降序
SELECT s.`studentId`,`name`,`subName`,`subRes` FROM 
student s
INNER JOIN `result` r
ON s.`studentId` = r.`studentId`
INNER JOIN `subject` sub
ON r.`subId` = sub.`subId`
WHERE `subName` = `数据库`
ORDER BY subRes ASC
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;分页：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;-- 分页的目的：让用户观看更加舒服，也减轻数据库的压力，无需一次性输出所有数据
-- 分页的效果：在一个网页中显示部分数据，给数据分页显示
-- 语法：limit 起始值,页面大小
-- 例如：limit 0,3 即从第一个数据到第四个数据
SELECT s.`studentId`,`name`,`subName`,`subRes` FROM 
student s
INNER JOIN `result` r
ON s.`studentId` = r.`studentId`
INNER JOIN `subject` sub
ON r.`subId` = sub.`subId`
WHERE `subName` = `数据库`
ORDER BY subRes ASC
LIMIT 0,8

-- 第一页 limit 0,5 (1-1)*5
-- 第二页 limit 5,5 (2-1)*5
-- 第n 页 limit     (n-1)*pagesize,pagesize
-- pageSize:页面大小
-- (n-1)*pageSize:起始值
-- n：当前值
-- 数据总数/页面大小 =总页数
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分组和过滤&#34;&gt;&lt;a href=&#34;#分组和过滤&#34; class=&#34;headerlink&#34; title=&#34;分组和过滤&#34;&gt;&lt;/a&gt;分组和过滤&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;ORDER BY()
HAVING()
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;子查询&#34;&gt;&lt;a href=&#34;#子查询&#34; class=&#34;headerlink&#34; title=&#34;子查询&#34;&gt;&lt;/a&gt;子查询&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;子查询是&lt;font color=red&gt;将一个查询语句嵌套在另一个查询语句中；&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;在特定情况下，一个查询语句的条件需要另一个查询语句来获取，==内层查询（inner query）语句==的查询结果，可以为==外层查询（outer query）语句==提供查询条件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码示例&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;SELECT DISTINCT s.`studentId`,`name`
FROM student s
INNER JOIN result r
ON r.studentId = s.studentId
WHERE `studentRes`&amp;gt;=80 AND `subId` =(
  SELECT subId FROM `subject`
  WHERE `subName` =&amp;#39;高数&amp;#39;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;MySQL常用函数&#34;&gt;&lt;a href=&#34;#MySQL常用函数&#34; class=&#34;headerlink&#34; title=&#34;MySQL常用函数&#34;&gt;&lt;/a&gt;MySQL常用函数&lt;/h3&gt;&lt;h4 id=&#34;数学运算&#34;&gt;&lt;a href=&#34;#数学运算&#34; class=&#34;headerlink&#34; title=&#34;数学运算&#34;&gt;&lt;/a&gt;数学运算&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;SELECT ABS(-10) --绝对值
SELECT CEILING(8.4) --向上取整
SELECT FLOOR(8.4) --向下取整
SELECT RAND() --返回一个0~1内的随机数
SELECT SIGN(10) --判断一个数的符号  负数返回-1 正数返回1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;字符串函数&#34;&gt;&lt;a href=&#34;#字符串函数&#34; class=&#34;headerlink&#34; title=&#34;字符串函数&#34;&gt;&lt;/a&gt;字符串函数&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;SELECT CHAR_LENGTH(&amp;#39;adhsakdajsx&amp;#39;) --求字符串长度
SELECT CONCAT(&amp;#39;We&amp;#39;,&amp;#39;are&amp;#39;,&amp;#39;family&amp;#39;) --拼接字符串 Wearefamily
SELECT INSERT(&amp;#39;这是一个美好的故事&amp;#39;,5,6,7,&amp;#39;动人的&amp;#39;) --查询，从某个位置开始替换长度 这是一个动人的故事
SELECT LOWER(&amp;#39;PETERPAN&amp;#39;) --小写字母
SELECT UPPER(&amp;#39;peterpan&amp;#39;) --大写字母
SELECT INSTR(&amp;#39;peterpan&amp;#39;,&amp;#39;e&amp;#39;) --返回第一个出现的子串的索引
SELECT REPLACE(&amp;#39;未上岸&amp;#39;,&amp;#39;未&amp;#39;,&amp;#39;已&amp;#39;) --替换出现指定的字符串 已上岸
SELECT SUBSTR(&amp;#39;只要努力就能成功&amp;#39;,3,8) --返回指定的子字符串 努力就能成功
SELECT REVERSE(&amp;#39;大家早上好&amp;#39;) --反转 好上早家大
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;时间与日期函数&#34;&gt;&lt;a href=&#34;#时间与日期函数&#34; class=&#34;headerlink&#34; title=&#34;时间与日期函数&#34;&gt;&lt;/a&gt;时间与日期函数&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;SELECT CURRENT_DATE() --获取当前日期
SELECT CURDATE() --获取当前日期
SELECT NOW() --获取当前时间
SELECT LOCALTIME() --本地时间
SELECT SYSDATE() --系统时间

SELECT YEAR(NOW()) --当前年份
SELECT MONTH(NOW()) --当前月份
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;系统&#34;&gt;&lt;a href=&#34;#系统&#34; class=&#34;headerlink&#34; title=&#34;系统&#34;&gt;&lt;/a&gt;系统&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-sql&#34;&gt;SELECT SYSTEM_USER() -- 获取系统管理者
SELECT USER()  --获取用户
SELECT VERSION()  --获取版本
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;常用的聚合函数&#34;&gt;&lt;a href=&#34;#常用的聚合函数&#34; class=&#34;headerlink&#34; title=&#34;常用的聚合函数&#34;&gt;&lt;/a&gt;常用的聚合函数&lt;/h3&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;函数&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;计数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;sum()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;求和&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;avg()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;求平均值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;求最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;求最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;具体参考MYSQL官方文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2Z1bmN0aW9uLXJlc29sdXRpb24uaHRtbA==&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/function-resolution.html&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="MySQL" />
        <updated>2021-01-12T02:48:03.000Z</updated>
    </entry>
    <entry>
        <id>https://peter-pan001.github.io/my-blog/MySQL/%E5%85%B3%E4%BA%8EMySQL%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
        <title>关于MySQL的一些基本使用</title>
        <link rel="alternate" href="https://peter-pan001.github.io/my-blog/MySQL/%E5%85%B3%E4%BA%8EMySQL%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
        <content type="html">&lt;h2 id=&#34;MySQL数据库软件&#34;&gt;&lt;a href=&#34;#MySQL数据库软件&#34; class=&#34;headerlink&#34; title=&#34;MySQL数据库软件&#34;&gt;&lt;/a&gt;MySQL数据库软件&lt;/h2&gt;&lt;h3 id=&#34;关于配置（conf）&#34;&gt;&lt;a href=&#34;#关于配置（conf）&#34; class=&#34;headerlink&#34; title=&#34;关于配置（conf）&#34;&gt;&lt;/a&gt;关于配置（conf）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MySQL服务的启动与停止&lt;ul&gt;
&lt;li&gt;手动通过应用程序启动&lt;/li&gt;
&lt;li&gt;或者通过cmd配置命令启动&lt;ul&gt;
&lt;li&gt;cmd  -&amp;gt; services.msc -&amp;gt;MySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;或者cmd管理员模式启动&lt;ul&gt;
&lt;li&gt;net stop MySQL&lt;/li&gt;
&lt;li&gt;net start MySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于登录与退出&#34;&gt;&lt;a href=&#34;#关于登录与退出&#34; class=&#34;headerlink&#34; title=&#34;关于登录与退出&#34;&gt;&lt;/a&gt;关于登录与退出&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一般的MySQL版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登录命令&lt;ul&gt;
&lt;li&gt;cmd中，在mysql安装目录下输入：&lt;code&gt;mysql -uroot -p密码&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后根据提示输入密码（为此前安装时设置的密码）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;退出：&lt;ul&gt;
&lt;li&gt;直接输入&lt;code&gt;exit&lt;/code&gt;或者&lt;code&gt;quit&lt;/code&gt;即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果是MySQL8.0版本的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在特定的SQL Commands line client 窗口中直接输入密码登录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于目录结构&#34;&gt;&lt;a href=&#34;#关于目录结构&#34; class=&#34;headerlink&#34; title=&#34;关于目录结构&#34;&gt;&lt;/a&gt;关于目录结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MySQL安装目录&lt;!-- ![Mysql_dir.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizq3tu941j30pl0h4jrp.jpg) --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2020/10/26/cB35g8iFSYVZ2zw.png&#34; alt=&#34;Mysql_dir.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bin&lt;/strong&gt;：存放一些二进制文件以及一些exe文件，服务类和基础类的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;：存放日志文件、数据文件的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;share&lt;/strong&gt;：存放MySQL一些错误数据&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="MySQL" />
        <updated>2020-10-25T13:09:50.000Z</updated>
    </entry>
</feed>
