<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>理 想 净 土 • Posts by &#34;linux&#34; category</title>
        <link>https://peter-pan001.github.io/my-blog</link>
        <description>不必匆忙，不必火花四溅，不必成为别人，只需成为自己</description>
        <language>zh-CN</language>
        <pubDate>Sun, 09 Jan 2022 20:36:45 +0800</pubDate>
        <lastBuildDate>Sun, 09 Jan 2022 20:36:45 +0800</lastBuildDate>
        <category>Java</category>
        <category>linux</category>
        <category>Linux</category>
        <category>network</category>
        <category>MySQL</category>
        <category>云计算</category>
        <category>git、github</category>
        <category>前端</category>
        <category>JavaScript</category>
        <category>html</category>
        <category>css</category>
        <category>算法与数据结构</category>
        <category>数据分析</category>
        <category>软考网络工程师</category>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Linux/%E7%9B%AE%E5%BD%95%E4%B8%8E%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</guid>
            <title>目录与文件管理</title>
            <link>https://peter-pan001.github.io/my-blog/Linux/%E7%9B%AE%E5%BD%95%E4%B8%8E%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</link>
            <category>Linux</category>
            <pubDate>Sun, 09 Jan 2022 20:36:45 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;目录与路径&#34;&gt;&lt;a href=&#34;#目录与路径&#34; class=&#34;headerlink&#34; title=&#34;目录与路径&#34;&gt;&lt;/a&gt;目录与路径&lt;/h1&gt;&lt;h2 id=&#34;相对路径、绝对路径&#34;&gt;&lt;a href=&#34;#相对路径、绝对路径&#34; class=&#34;headerlink&#34; title=&#34;相对路径、绝对路径&#34;&gt;&lt;/a&gt;相对路径、绝对路径&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;绝对路径：路径的写法“一定由根目录 / 写起”，例如： /usr/share/doc 这个目录。&lt;/li&gt;
&lt;li&gt;相对路径：路径的写法“不是由 / 写起”，例如由 /usr/share/doc 要到 /usr/share/man 下面时，可以写成： &lt;code&gt;cd ../man&lt;/code&gt;这就是相对路径的写法啦！相对路径意指“相对于目前工作目录的路径！”&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目录相关操作&#34;&gt;&lt;a href=&#34;#目录相关操作&#34; class=&#34;headerlink&#34; title=&#34;目录相关操作&#34;&gt;&lt;/a&gt;目录相关操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cd&lt;/code&gt;：变换目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt;：显示目前的目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir&lt;/code&gt;：创建一个新的目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rmdir&lt;/code&gt;：删除一个空的目录&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cd-变换目录&#34;&gt;&lt;a href=&#34;#cd-变换目录&#34; class=&#34;headerlink&#34; title=&#34;cd 变换目录&#34;&gt;&lt;/a&gt;cd 变换目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd ..&lt;/code&gt;：回到上一层目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd ~&lt;/code&gt;：回到主目录&lt;br&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7kcYin.png&#34; alt=&#34;cd&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pwd-显示当前所在目录&#34;&gt;&lt;a href=&#34;#pwd-显示当前所在目录&#34; class=&#34;headerlink&#34; title=&#34;pwd 显示当前所在目录&#34;&gt;&lt;/a&gt;pwd 显示当前所在目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pwd&lt;/code&gt;是Print Working Directory的缩写，也就是显示目前所在目录的指令&lt;br&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7kgEOU.png&#34; alt=&#34;pwd&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mkdir-创建新目录&#34;&gt;&lt;a href=&#34;#mkdir-创建新目录&#34; class=&#34;headerlink&#34; title=&#34;mkdir 创建新目录&#34;&gt;&lt;/a&gt;mkdir 创建新目录&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注意使用该命令后带不带&lt;code&gt;-p&lt;/code&gt;的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7kcXy8.png&#34; alt=&#34;mkdir&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;rmdir-删除空目录&#34;&gt;&lt;a href=&#34;#rmdir-删除空目录&#34; class=&#34;headerlink&#34; title=&#34;rmdir 删除空目录&#34;&gt;&lt;/a&gt;rmdir 删除空目录&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注意使用该命令后带不带&lt;code&gt;-p&lt;/code&gt;的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7kgZmF.png&#34; alt=&#34;rmdir&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;可执行文件路径的变量：-PATH&#34;&gt;&lt;a href=&#34;#可执行文件路径的变量：-PATH&#34; class=&#34;headerlink&#34; title=&#34;可执行文件路径的变量： $PATH&#34;&gt;&lt;/a&gt;可执行文件路径的变量： $PATH&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7kgMf1.png&#34; alt=&#34;path&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PATH（一定是大写）这个变量的内容是由一堆目录所组成的，每个目录中间用冒号（:）来隔&lt;br&gt;开， 每个目录是有“顺序”之分的。仔细看一下上面的输出，你可以发现到无论是root还是dmtsai都有 /bin 或 /usr/bin 这个目录在PATH变量内，所以当然就能够在任何地方执行ls来找到/bin/ls可执行文件啰！因为 /bin 在 CentOS 7 当中，就是链接到 /usr/bin 去的！ 所以这两个目录内容会一模一样&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;文件与目录管理&#34;&gt;&lt;a href=&#34;#文件与目录管理&#34; class=&#34;headerlink&#34; title=&#34;文件与目录管理&#34;&gt;&lt;/a&gt;文件与目录管理&lt;/h1&gt;&lt;h2 id=&#34;ls-审查目录与文件&#34;&gt;&lt;a href=&#34;#ls-审查目录与文件&#34; class=&#34;headerlink&#34; title=&#34;ls 审查目录与文件&#34;&gt;&lt;/a&gt;ls 审查目录与文件&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7kglSx.png&#34; alt=&#34;ls&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;cp、rm、mv-复制、删除与移动&#34;&gt;&lt;a href=&#34;#cp、rm、mv-复制、删除与移动&#34; class=&#34;headerlink&#34; title=&#34;cp、rm、mv 复制、删除与移动&#34;&gt;&lt;/a&gt;cp、rm、mv 复制、删除与移动&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;cp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7kgJmD.png&#34; alt=&#34;cp&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7kgY0e.png&#34; alt=&#34;cpa&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;rm&lt;br&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7kgv1x.png&#34; alt=&#34;rm&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mv&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7k2pnO.png&#34; alt=&#34;mv&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;取得路径的文件名称与目录名称&#34;&gt;&lt;a href=&#34;#取得路径的文件名称与目录名称&#34; class=&#34;headerlink&#34; title=&#34;取得路径的文件名称与目录名称&#34;&gt;&lt;/a&gt;取得路径的文件名称与目录名称&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basename&lt;/code&gt;与&lt;code&gt;dirname&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7k2ZgP.png&#34; alt=&#34;basename&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;文件内容查阅&#34;&gt;&lt;a href=&#34;#文件内容查阅&#34; class=&#34;headerlink&#34; title=&#34;文件内容查阅&#34;&gt;&lt;/a&gt;文件内容查阅&lt;/h1&gt;&lt;h2 id=&#34;直接查视&#34;&gt;&lt;a href=&#34;#直接查视&#34; class=&#34;headerlink&#34; title=&#34;直接查视&#34;&gt;&lt;/a&gt;直接查视&lt;/h2&gt;&lt;h3 id=&#34;cat&#34;&gt;&lt;a href=&#34;#cat&#34; class=&#34;headerlink&#34; title=&#34;cat&#34;&gt;&lt;/a&gt;cat&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat&lt;/code&gt; 由第一行开始显示文件内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/10/7AjYee.png&#34; alt=&#34;cat&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;tac&#34;&gt;&lt;a href=&#34;#tac&#34; class=&#34;headerlink&#34; title=&#34;tac&#34;&gt;&lt;/a&gt;tac&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tac&lt;/code&gt; 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/10/7AjwWt.png&#34; alt=&#34;tac&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;nl&#34;&gt;&lt;a href=&#34;#nl&#34; class=&#34;headerlink&#34; title=&#34;nl&#34;&gt;&lt;/a&gt;nl&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nl&lt;/code&gt; 显示的时候，顺道输出行号！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/10/7AjBSP.png&#34; alt=&#34;nl&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;可翻页查视&#34;&gt;&lt;a href=&#34;#可翻页查视&#34; class=&#34;headerlink&#34; title=&#34;可翻页查视&#34;&gt;&lt;/a&gt;可翻页查视&lt;/h2&gt;&lt;h3 id=&#34;more&#34;&gt;&lt;a href=&#34;#more&#34; class=&#34;headerlink&#34; title=&#34;more&#34;&gt;&lt;/a&gt;more&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;more&lt;/code&gt; 一页一页的显示文件内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/10/7AjsOS.png&#34; alt=&#34;morea&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/10/7AjWYn.png&#34; alt=&#34;moreb&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;less&#34;&gt;&lt;a href=&#34;#less&#34; class=&#34;headerlink&#34; title=&#34;less&#34;&gt;&lt;/a&gt;less&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;less&lt;/code&gt; 与&lt;code&gt;more&lt;/code&gt; 类似，但是比 more 更好的是，他可以往前翻页！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据截取&#34;&gt;&lt;a href=&#34;#数据截取&#34; class=&#34;headerlink&#34; title=&#34;数据截取&#34;&gt;&lt;/a&gt;数据截取&lt;/h2&gt;&lt;h3 id=&#34;head&#34;&gt;&lt;a href=&#34;#head&#34; class=&#34;headerlink&#34; title=&#34;head&#34;&gt;&lt;/a&gt;head&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;head&lt;/code&gt; 只看头几行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/10/7AjfWq.png&#34; alt=&#34;head&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;tail&#34;&gt;&lt;a href=&#34;#tail&#34; class=&#34;headerlink&#34; title=&#34;tail&#34;&gt;&lt;/a&gt;tail&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tail&lt;/code&gt; 只看尾巴几行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/10/7AjIyT.png&#34; alt=&#34;tail&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;非纯文本文件-od&#34;&gt;&lt;a href=&#34;#非纯文本文件-od&#34; class=&#34;headerlink&#34; title=&#34;非纯文本文件: od&#34;&gt;&lt;/a&gt;非纯文本文件: od&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;od&lt;/code&gt; 以二进制的方式读取文件内容！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/10/7AjbTJ.png&#34; alt=&#34;od&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改文件时间或创建新文件-touch&#34;&gt;&lt;a href=&#34;#修改文件时间或创建新文件-touch&#34; class=&#34;headerlink&#34; title=&#34;修改文件时间或创建新文件:touch&#34;&gt;&lt;/a&gt;修改文件时间或创建新文件:touch&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;[root@study ~]# touch [-acdmt] 文件&lt;br&gt;   选项与参数：&lt;br&gt;   -a ：仅修订 access time；&lt;br&gt;   -c ：仅修改文件的时间，若该文件不存在则不创建新文件；&lt;br&gt;   -d ：后面可以接欲修订的日期而不用目前的日期，也可以使用 —date=”日期或时间”&lt;br&gt;   -m ：仅修改 mtime ；&lt;br&gt;   -t ：后面可以接欲修订的时间而不用目前的时间，格式为[YYYYMMDDhhmm]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;指令与文件的搜寻&#34;&gt;&lt;a href=&#34;#指令与文件的搜寻&#34; class=&#34;headerlink&#34; title=&#34;指令与文件的搜寻&#34;&gt;&lt;/a&gt;指令与文件的搜寻&lt;/h1&gt;&lt;h2 id=&#34;指令文件名的搜寻&#34;&gt;&lt;a href=&#34;#指令文件名的搜寻&#34; class=&#34;headerlink&#34; title=&#34;指令文件名的搜寻&#34;&gt;&lt;/a&gt;指令文件名的搜寻&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;which&lt;/code&gt;（寻找“可执行文件”）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[root@study ~]# which [-a] command&lt;br&gt;选项或参数：&lt;br&gt;-a ：将所有由 PATH 目录中可以找到的指令均列出，而不止第一个被找到的指令名称&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;文件文件名的搜寻&#34;&gt;&lt;a href=&#34;#文件文件名的搜寻&#34; class=&#34;headerlink&#34; title=&#34;文件文件名的搜寻&#34;&gt;&lt;/a&gt;文件文件名的搜寻&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;whereis&lt;/code&gt; （由一些特定的目录中寻找文件文件名）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[root@study ~]# whereis [-bmsu] 文件或目录名&lt;br&gt;选项与参数：&lt;br&gt;-l :可以列出 whereis 会去查询的几个主要目录而已&lt;br&gt;-b :只找 binary 格式的文件&lt;br&gt;-m :只找在说明文档 manual 路径下的文件&lt;br&gt;-s :只找 source 来源文件&lt;br&gt;-u :搜寻不在上述三个项目当中的其他特殊文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;locate / updatedb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[root@study ~]# locate [-ir] keyword&lt;br&gt;选项与参数：&lt;br&gt;-i ：忽略大小写的差异；&lt;br&gt;-c ：不输出文件名，仅计算找到的文件数量&lt;br&gt;-l ：仅输出几行的意思，例如输出五行则是 -l 5&lt;br&gt;-S ：输出 locate 所使用的数据库文件的相关信息，包括该数据库纪录的文件/目录数量等&lt;br&gt;-r ：后面可接正则表达式的显示方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[root@study ~]# find [PATH] [option] [action]&lt;br&gt;选项与参数：&lt;br&gt;1. 与时间有关的选项：共有 -atime, -ctime 与 -mtime ，以 -mtime 说明&lt;br&gt;-mtime n ：n 为数字，意义为在 n 天之前的“一天之内”被更动过内容的文件；&lt;br&gt;-mtime +n ：列出在 n 天之前（不含 n 天本身）被更动过内容的文件文件名；&lt;br&gt;-mtime -n ：列出在 n 天之内（含 n 天本身）被更动过内容的文件文件名。&lt;br&gt;-newer file ：file 为一个存在的文件，列出比 file 还要新的文件文件名&lt;br&gt;2. 与使用者或群组名称有关的参数：&lt;br&gt;-uid n ：n 为数字，这个数字是使用者的帐号 ID，亦即 UID ，这个 UID 是记录在&lt;br&gt;/etc/passwd 里面与帐号名称对应的数字。这方面我们会在第四篇介绍。&lt;br&gt;-gid n ：n 为数字，这个数字是群组名称的 ID，亦即 GID，这个 GID 记录在&lt;br&gt;/etc/group，相关的介绍我们会第四篇说明～&lt;br&gt;-user name ：name 为使用者帐号名称喔！例如 dmtsai&lt;br&gt;-group name：name 为群组名称喔，例如 users ；&lt;br&gt;-nouser ：寻找文件的拥有者不存在 /etc/passwd 的人！&lt;br&gt;-nogroup ：寻找文件的拥有群组不存在于 /etc/group 的文件！&lt;br&gt;当你自行安装软件时，很可能该软件的属性当中并没有文件拥有者，&lt;br&gt;这是可能的！在这个时候，就可以使用 -nouser 与 -nogroup 搜寻&lt;br&gt;3. 与文件权限及名称有关的参数：&lt;br&gt;-name filename：搜寻文件名称为 filename 的文件；&lt;br&gt;-size [+-]SIZE：搜寻比 SIZE 还要大（+）或小（-）的文件。这个 SIZE 的规格有：&lt;br&gt;c: 代表 Byte， k: 代表 1024Bytes。所以，要找比 50KB&lt;br&gt;还要大的文件，就是“ -size +50k ”&lt;br&gt;-type TYPE ：搜寻文件的类型为 TYPE 的，类型主要有：一般正规文件 （f）, 设备文件 （b, c）,&lt;br&gt;目录 （d）, 链接文件 （l）, socket （s）, 及 FIFO （p） 等属性。&lt;br&gt;-perm mode ：搜寻文件权限“刚好等于” mode 的文件，这个 mode 为类似 chmod&lt;br&gt;的属性值，举例来说， -rwsr-xr-x 的属性为 4755 ！&lt;br&gt;-perm -mode ：搜寻文件权限“必须要全部囊括 mode 的权限”的文件，举例来说，&lt;br&gt;我们要搜寻 -rwxr—r— ，亦即 0744 的文件，使用 -perm -0744，&lt;br&gt;当一个文件的权限为 -rwsr-xr-x ，亦即 4755 时，也会被列出来，&lt;br&gt;因为 -rwsr-xr-x 的属性已经囊括了 -rwxr—r— 的属性了。&lt;br&gt;-perm /mode ：搜寻文件权限“包含任一 mode 的权限”的文件，举例来说，我们搜寻&lt;br&gt;-rwxr-xr-x ，亦即 -perm /755 时，但一个文件属性为 -rw———-&lt;br&gt;也会被列出来，因为他有 -rw…. 的属性存在！&lt;br&gt;4. 额外可进行的动作：&lt;br&gt;-exec command ：command 为其他指令，-exec 后面可再接额外的指令来处理搜寻到的结果。&lt;br&gt;-print ：将结果打印到屏幕上，这个动作是默认动作！&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/</guid>
            <title>文件权限与目录管理</title>
            <link>https://peter-pan001.github.io/my-blog/Linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/</link>
            <category>Linux</category>
            <pubDate>Sun, 09 Jan 2022 14:09:06 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;使用者和群组&#34;&gt;&lt;a href=&#34;#使用者和群组&#34; class=&#34;headerlink&#34; title=&#34;使用者和群组&#34;&gt;&lt;/a&gt;使用者和群组&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用者&lt;/strong&gt;。就是文件的拥有者，通过对文件权限的授予来划分使用者的类别，一些使用者对文件只有读或写的权限，而对于管理员则对文件既有只读和只写还有读写的权限，通过权限划分使用者，能让系统运行更为安全高效，对于某些用户起到隐私隔离的效果&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;群组&lt;/strong&gt;。即在同一个Group中的所有用户共享其文件，而每个组之间又相互独立，即各组的权限共享范围不一，所以当设置该用户在群组内的文件权限时，同一群组下的其他用户即可对该文件进行操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其他人&lt;/strong&gt;。即others，是Linux系统中除了文件的拥有者、群组以外的用户称为others&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;文件权限&#34;&gt;&lt;a href=&#34;#文件权限&#34; class=&#34;headerlink&#34; title=&#34;文件权限&#34;&gt;&lt;/a&gt;文件权限&lt;/h1&gt;&lt;h2 id=&#34;Linux-文件属性&#34;&gt;&lt;a href=&#34;#Linux-文件属性&#34; class=&#34;headerlink&#34; title=&#34;Linux 文件属性&#34;&gt;&lt;/a&gt;Linux 文件属性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过在root用户下，终端执行&lt;code&gt;su -al&lt;/code&gt;，显示以下文件信息：&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7FtNsP.png&#34; alt=&#34;docfile&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一列为文件类型权限&lt;/li&gt;
&lt;li&gt;第二列的数字为该文件的连接数，目录树就是通过该数字把文件链接起来的&lt;/li&gt;
&lt;li&gt;第三列为文件的拥有者&lt;/li&gt;
&lt;li&gt;第四列为文件所在群组&lt;/li&gt;
&lt;li&gt;第五列为文件最后更改时间&lt;/li&gt;
&lt;li&gt;第六列为文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;文件类型与属性图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7FtdZ8.png&#34; alt=&#34;quanxian&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;关于第一个字符含义：&lt;/p&gt;
&lt;p&gt; ​    当为&lt;code&gt;[ d ]&lt;/code&gt;则是目录，例如上表文件名为&lt;code&gt;.config&lt;/code&gt;的那一行； &lt;/p&gt;
&lt;p&gt; ​    当为&lt;code&gt;[ - ]&lt;/code&gt;则是文件，例如上表文件名为&lt;code&gt;initial-setup-ks.cfg&lt;/code&gt;那一行； &lt;/p&gt;
&lt;p&gt; ​    若是&lt;code&gt;[ l ]&lt;/code&gt;则表示为链接文件（link file）；&lt;/p&gt;
&lt;p&gt; ​    若是&lt;code&gt;[ b ]&lt;/code&gt;则表示为设备文件里面的可供储存的周边设备（可随机存取设备）； &lt;/p&gt;
&lt;p&gt; ​    若是&lt;code&gt;[ c ]&lt;/code&gt;则表示为设备文件里面的序列埠设备，例如键盘、鼠标（一次性读取设 备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于第2、3、4个字符含义（三个一组来解释）：&lt;/p&gt;
&lt;p&gt; ​    以三个为一组，且均为&lt;code&gt;rwx&lt;/code&gt;的三个参数的组合。其中，&lt;code&gt;[ r ]&lt;/code&gt;代表可读 、&lt;code&gt;[ w ]&lt;/code&gt;代表可写、&lt;code&gt;[ x ]&lt;/code&gt;代表可执行。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号&lt;code&gt;[ - ]&lt;/code&gt;而已。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后面5-7和8-10的含义与2、3、4一致，只是一个表示文件所在群的权限，一个是others的权限&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;改变文件属性权限&#34;&gt;&lt;a href=&#34;#改变文件属性权限&#34; class=&#34;headerlink&#34; title=&#34;改变文件属性权限&#34;&gt;&lt;/a&gt;改变文件属性权限&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chgrp&lt;/code&gt; ：改变文件所属群组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chown&lt;/code&gt; ：改变文件拥有者&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod&lt;/code&gt; ：改变文件的权限, SUID, SGID, SBIT等等的特性&lt;/li&gt;
&lt;li&gt;改变所属群组, &lt;code&gt;chgrp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;改变所属群组-chgrp&#34;&gt;&lt;a href=&#34;#改变所属群组-chgrp&#34; class=&#34;headerlink&#34; title=&#34;改变所属群组 chgrp&#34;&gt;&lt;/a&gt;改变所属群组 chgrp&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;例如： &lt;code&gt;chgrp users initial-setup-ks.cfg&lt;/code&gt; 第二位为群组名 第三位为文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7FtsRs.png&#34; alt=&#34;chgrpa&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7Ftyzn.png&#34; alt=&#34;chgrpb&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;改变文件拥有者-chown&#34;&gt;&lt;a href=&#34;#改变文件拥有者-chown&#34; class=&#34;headerlink&#34; title=&#34;改变文件拥有者 chown&#34;&gt;&lt;/a&gt;改变文件拥有者 chown&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;例如： &lt;code&gt;chown bin initial-setup-ks.cfg&lt;/code&gt; 第二位为文件拥有者名 第三位为文件名&lt;br&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7FtWZT.png&#34; alt=&#34;chowna&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;改变文件权限-chmod&#34;&gt;&lt;a href=&#34;#改变文件权限-chmod&#34; class=&#34;headerlink&#34; title=&#34;改变文件权限 chmod&#34;&gt;&lt;/a&gt;改变文件权限 chmod&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;例如： &lt;code&gt;chown 777 .bashrc&lt;/code&gt; 第二位的三个数字分别代表(owner/group/others)的只读、只写、读写权限 第三位为文件名&lt;/li&gt;
&lt;li&gt;关于权限位数：&lt;ul&gt;
&lt;li&gt;rwx，其中r=4（read），w=2（write），x=1（execute）&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;owner = rwx = 4+2+1 = 7 &amp;gt; group = rwx = 4+2+1 = 7 &amp;gt; others= —- = 0+0+0 = 0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7FtTzR.png&#34; alt=&#34;chmoda&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也可以用字符改变各种使用者&lt;ul&gt;
&lt;li&gt;u 代表user&lt;/li&gt;
&lt;li&gt;g 代表group&lt;/li&gt;
&lt;li&gt;o 代表others&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例如： &lt;code&gt;[root@study ~]# chmod u=rwx,go=rx .bashrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;目录文件权限意义&#34;&gt;&lt;a href=&#34;#目录文件权限意义&#34; class=&#34;headerlink&#34; title=&#34;目录文件权限意义&#34;&gt;&lt;/a&gt;目录文件权限意义&lt;/h3&gt;&lt;h4 id=&#34;对文件而言&#34;&gt;&lt;a href=&#34;#对文件而言&#34; class=&#34;headerlink&#34; title=&#34;对文件而言&#34;&gt;&lt;/a&gt;对文件而言&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;r （read）：可读取此一文件的实际内容，如读取文本文件的文字内容等&lt;/li&gt;
&lt;li&gt;w （write）：可以编辑、新增或者是修改该文件的内容（但不含删除该文件）&lt;/li&gt;
&lt;li&gt;x （execute）：该文件具有可以被系统执行的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对目录而言&#34;&gt;&lt;a href=&#34;#对目录而言&#34; class=&#34;headerlink&#34; title=&#34;对目录而言&#34;&gt;&lt;/a&gt;对目录而言&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;r （read contents in directory）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示具有读取目录结构清单的权限，所以当你具有读取（r）一个目录的权限时，表示你可以查询该目录下的文件名数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;w （modify contents of directory）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示可以创建新的文件与目录；删除已经存在的文件与目录（不论该文件的权限为何！）将已存在的文件或目录进行更名；搬移该目录内的文件、目录位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;x （access directory）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目录不可以被执行，目录的x代表的是使用者能否进入该目录成为工作目录的用途！所谓的工作目录（work directory）就是你目前所在的目录啦！举例来说，当你登陆Linux时，你所在的主文件夹就是你当下的工作目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Linux文件种类&#34;&gt;&lt;a href=&#34;#Linux文件种类&#34; class=&#34;headerlink&#34; title=&#34;Linux文件种类&#34;&gt;&lt;/a&gt;Linux文件种类&lt;/h3&gt;&lt;h4 id=&#34;正规文件&#34;&gt;&lt;a href=&#34;#正规文件&#34; class=&#34;headerlink&#34; title=&#34;正规文件&#34;&gt;&lt;/a&gt;正规文件&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;即是一般我们在进行存取的类型的文件，在由 &lt;code&gt;ls -al&lt;/code&gt; 所显示出来的属性方面，第一个字符为[ - ]，例如 [-rwxrwxrwx ]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;纯文本文件ASCII&lt;/li&gt;
&lt;li&gt;二进制文件binary&lt;/li&gt;
&lt;li&gt;数据格式文件data&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;目录directory&#34;&gt;&lt;a href=&#34;#目录directory&#34; class=&#34;headerlink&#34; title=&#34;目录directory&#34;&gt;&lt;/a&gt;目录directory&lt;/h4&gt;&lt;h4 id=&#34;链接文件link-file&#34;&gt;&lt;a href=&#34;#链接文件link-file&#34; class=&#34;headerlink&#34; title=&#34;链接文件link file&#34;&gt;&lt;/a&gt;链接文件link file&lt;/h4&gt;&lt;h4 id=&#34;设备与设备文件device&#34;&gt;&lt;a href=&#34;#设备与设备文件device&#34; class=&#34;headerlink&#34; title=&#34;设备与设备文件device&#34;&gt;&lt;/a&gt;设备与设备文件device&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;区块block&lt;/li&gt;
&lt;li&gt;字符character&lt;h4 id=&#34;数据接口文件socket&#34;&gt;&lt;a href=&#34;#数据接口文件socket&#34; class=&#34;headerlink&#34; title=&#34;数据接口文件socket&#34;&gt;&lt;/a&gt;数据接口文件socket&lt;/h4&gt;&lt;h4 id=&#34;数据输送档&#34;&gt;&lt;a href=&#34;#数据输送档&#34; class=&#34;headerlink&#34; title=&#34;数据输送档&#34;&gt;&lt;/a&gt;数据输送档&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Linux扩展名&#34;&gt;&lt;a href=&#34;#Linux扩展名&#34; class=&#34;headerlink&#34; title=&#34;Linux扩展名&#34;&gt;&lt;/a&gt;Linux扩展名&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*.sh&lt;/code&gt; ： 脚本或批处理文件 （scripts），因为批处理文件为使用shell写成的，所以扩展名就编成 &lt;code&gt;.sh&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Z, .tar, .tar.gz, .zip, *.tgz&lt;/code&gt;： 经过打包的压缩文件。这是因为压缩软件分别为 &lt;code&gt;gunzip, tar&lt;/code&gt;等等的，由于不同的压缩软件，而取其相关的扩展名！&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.html, .php&lt;/code&gt;：网页相关文件，分别代表 HTML 语法与 PHP 语法的网页文件！ .html 的文件可使用网页浏览器来直接打开，至于 &lt;code&gt;.php&lt;/code&gt; 的文件， 则可以通过 client 端的浏览器来server 端浏览，以得到运算后的网页结果！&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Linux-目录配置&#34;&gt;&lt;a href=&#34;#Linux-目录配置&#34; class=&#34;headerlink&#34; title=&#34;Linux 目录配置&#34;&gt;&lt;/a&gt;Linux 目录配置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基本的三层目录&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; （root, 根目录）：与开机系统有关；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr&lt;/code&gt; （unix software resource）：与软件安装/执行有关；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var&lt;/code&gt;（variable）：与系统运行过程有关。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所有的Linux目录配置都是基于FHS的，即文件系统继承标准Filesystem Hierarchy Standard&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第一部分FHS（必须要存在的！！）&#34;&gt;&lt;a href=&#34;#第一部分FHS（必须要存在的！！）&#34; class=&#34;headerlink&#34; title=&#34;第一部分FHS（必须要存在的！！）&#34;&gt;&lt;/a&gt;第一部分FHS（必须要存在的！！）&lt;/h2&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;目录&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;放置内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;/bin&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统有很多 ==放置可执行文件的目录== ，但/bin比较特殊。因为/bin放置的是在单人维护模式下还能够被操作的指令。 在/bin下面的指令可以被root与一般帐号所使用，主要有：cat, chmod, chown, date, mv, mkdir, cp, bash等等常用的指令。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;/boot&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;这个目录主要在 ==放置开机会使用到的文件== ，包括Linux核心文件以及开机菜单与开机所需配置文件等等。 Linux kernel常用的文件名为：vmlinuz，如果使用的是grub2这个开机管理程序， 则还会存在/boot/grub2/这个目录喔！&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;/dev&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;在Linux系统上，任何设备与周边设备都是以文件的型态存在于这个目录当中的。 比如重要的文件有/dev/null, /dev/zero, /dev/tty, /dev/loop, /dev/sd等等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;/etc&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;==系统主要的配置文件== 几乎都放置在这个目录内，例如人员的帐号密码档、各种服务的启始档等等。一般来说，这个目录下的各文件属性是可以让一般使用者查阅的， 但是只有root有权力修改。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;/lib&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统的函数库非常的多，而/lib放置的则是在 ==开机时会用到的函数库== ， 以及在/bin或/sbin下面的指令会调用的函数库而已。 什么是函数库呢？你可以将他想成是“外挂”，某些指令必须要有这些“外挂”才能够顺利完成程序的执行之意。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;/mnt&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果你想要 ==暂时挂载某些额外的设备== ，一般建议你可以放置到这个目录中。在古早时候，这个目录的用途与/media相同啦！只是有了/media之后，这个目录就用来暂时挂载用了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;/opt&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;这个是 ==给第三方协力软件放置的目录== 。什么是第三方协力软件啊？ 举例来说，KDE这个桌面管理系统是一个独立的计划，不过他可以安装到Linux系统中，因此KDE的软件就建议放置到此目录下了。 不过，以前的Linux系统中，我们还是习惯放置在/usr/local目录下呢！&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/srv&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;srv可以视为“service”的缩写，是一些网络服务启动之后，这些服务所需要取用的数据目录。 常见的服务例如WWW, FTP等等。举例来说，WWW服务器需要的网页数据就可以放置在/srv/www/里面。 不过，系统的服务数据如果尚未要提供给网际网络任何人浏览的话，默认还是建议放置到 /var/lib下面即可。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/tmp&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;这是让一般使用者或者是 ==正在执行的程序暂时放置文件== 的地方。 这个目录是任何人都能够存取的，所以你需要定期的清理一下。当然，重要数据不可放置在此目录啊！ 因为FHS甚至建议在开机时，应该要将/tmp下的数据都删除唷！&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/home&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;这是 ==系统默认的使用者主文件夹== （home directory）。在你新增一个一般使用者帐号时， 默认的使用者主文件夹都会规范到这里来。比较重要的是，主文件夹有两种代号喔：~：代表目前这个使用者的主文件夹 ~dmtsai ：则代表 dmtsai 的主文件夹！&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/root&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;==系统管理员（root）的主文件夹== 。之所以放在这里，是因为如果进入单人维护模式而仅挂载根目录时， 该目录就能够拥有root的主文件夹，所以我们会希望root的主文件夹与根目录放置在同一个分区中。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;usr-的意义与内容：&#34;&gt;&lt;a href=&#34;#usr-的意义与内容：&#34; class=&#34;headerlink&#34; title=&#34;/usr 的意义与内容：&#34;&gt;&lt;/a&gt;/usr 的意义与内容：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;/usr里面放置的数据属于可分享的与不可变动的（shareable,static）， 如果你知道如何通过网络进行分区的挂载，那么/usr确实可以分享给区域网络内的其他主机来使用喔！其实usr是Unix Software Resource的缩写， 也就是“Unix操作系统软件资源”所放置的目录，而不是使用者的数据啦！这点要注意。 FHS建议所有软件开发者，应该将他们的数据合理的分别放置到这个目录下的次目录，而不要自行创建该软件自己独立的目录。因为是所有系统默认的软件（distribution发布者提供的软件）都会放置到/usr下面，因此这个目录有点类似Windows 系统的&lt;code&gt;C:\Windows\ （当中的一部份） + C:\Programfiles\&lt;/code&gt;这两个目录的综合体，系统刚安装完毕时，这个目录会占用最多的硬盘容量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;var-的意义与内容：&#34;&gt;&lt;a href=&#34;#var-的意义与内容：&#34; class=&#34;headerlink&#34; title=&#34;/var 的意义与内容：&#34;&gt;&lt;/a&gt;/var 的意义与内容：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如果/usr是安装时会占用较大硬盘容量的目录，那么/var就是在系统运行后才会渐渐占用硬盘容量的目录。 因为/var目录主要针对常态性变动的文件，包括高速缓存（cache）、登录文件（log file）以及某些软件运行所产生的文件， 包括程序文件（lock file, run file），或者例如MySQL数据库的文件等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目录树&#34;&gt;&lt;a href=&#34;#目录树&#34; class=&#34;headerlink&#34; title=&#34;目录树&#34;&gt;&lt;/a&gt;目录树&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;目录树的启始点为根目录 （/, root）；&lt;/li&gt;
&lt;li&gt;每一个目录不止能使用本地端的 partition 的文件系统，也可以使用网络上的 filesystem。举例来说， 可以利用 Network File System （NFS） 服务器挂载某特定目录等。&lt;/li&gt;
&lt;li&gt;每一个文件在此目录树中的文件名（包含完整路径）都是独一无二的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7Ftbsx.png&#34; alt=&#34;directorytree&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绝对路径、相对路径&#34;&gt;&lt;a href=&#34;#绝对路径、相对路径&#34; class=&#34;headerlink&#34; title=&#34;绝对路径、相对路径&#34;&gt;&lt;/a&gt;绝对路径、相对路径&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;绝对路径：由根目录（/）开始写起的文件名或目录名称， 例如 &lt;code&gt;/home/dmtsai/.bashrc&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;相对路径：相对于目前路径的文件名写法。 例如 &lt;code&gt;./home/dmtsai&lt;/code&gt; 或&lt;code&gt;../../home/dmtsai/&lt;/code&gt;等等。反正开头不是 / 就属于相对路径的写法&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Linux/%E6%9B%B4%E6%8D%A2%E6%B8%85%E5%8D%8E%E6%BA%90/</guid>
            <title>更换清华源</title>
            <link>https://peter-pan001.github.io/my-blog/Linux/%E6%9B%B4%E6%8D%A2%E6%B8%85%E5%8D%8E%E6%BA%90/</link>
            <category>Linux</category>
            <pubDate>Sun, 09 Jan 2022 14:08:20 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;具体步骤&#34;&gt;&lt;a href=&#34;#具体步骤&#34; class=&#34;headerlink&#34; title=&#34;具体步骤&#34;&gt;&lt;/a&gt;具体步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rm -rf /etc/yum.repos.d/*&lt;/code&gt;，删除 /etc/yum.repos.d/的所有文件&lt;/li&gt;
&lt;li&gt;进入/etc/yum.repos.d：&lt;code&gt;cd /etc/yum.repos.d/&lt;/code&gt;,使用&lt;code&gt;ls&lt;/code&gt;查看该目录下所有文件，找到&lt;code&gt;CentOS-Base.repo&lt;/code&gt;文件，没有则用&lt;code&gt;touch&lt;/code&gt;创建文件&lt;/li&gt;
&lt;li&gt;进入CentOS-Base.repo：&lt;code&gt;vi CentOS-Base.repo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# CentOS-Base.repo
#
# The mirror system uses the connecting IP address of the client and the
# update status of each mirror to pick mirrors that are updated to and
# geographically close to the client.  You should use this for CentOS updates
# unless you are manually picking other mirrors.
#
# If the mirrorlist= does not work for you, as a fall back you can try the
# remarked out baseurl= line instead.
#
#

[base]
name=CentOS-$releasever - Base
baseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/os/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7

#released updates
[updates]
name=CentOS-$releasever - Updates
baseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/updates/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7

#additional packages that may be useful
[extras]
name=CentOS-$releasever - Extras
baseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/extras/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7

#additional packages that extend functionality of existing packages
[centosplus]
name=CentOS-$releasever - Plus
baseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/centosplus/$basearch/
gpgcheck=1
enabled=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;改为以上的url路径&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;yum clean all&lt;/code&gt;清理yum&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;yum makecache&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;yum update&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%8F%8Ayum%E6%BA%90%E9%97%AE%E9%A2%98/</guid>
            <title>网络配置及yum源问题</title>
            <link>https://peter-pan001.github.io/my-blog/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%8F%8Ayum%E6%BA%90%E9%97%AE%E9%A2%98/</link>
            <category>Linux</category>
            <pubDate>Sun, 09 Jan 2022 14:06:31 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;centOS7最小化安装后的网络配置&#34;&gt;&lt;a href=&#34;#centOS7最小化安装后的网络配置&#34; class=&#34;headerlink&#34; title=&#34;centOS7最小化安装后的网络配置&#34;&gt;&lt;/a&gt;centOS7最小化安装后的网络配置&lt;/h1&gt;&lt;h2 id=&#34;配置基本的网络信息&#34;&gt;&lt;a href=&#34;#配置基本的网络信息&#34; class=&#34;headerlink&#34; title=&#34;配置基本的网络信息&#34;&gt;&lt;/a&gt;配置基本的网络信息&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在安装程序的以太网配置中设置手动，添加如下信息&lt;ul&gt;
&lt;li&gt;ip地址&lt;/li&gt;
&lt;li&gt;子网掩码&lt;/li&gt;
&lt;li&gt;网关&lt;/li&gt;
&lt;li&gt;DNS服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设置本地localhost地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装net-tools&#34;&gt;&lt;a href=&#34;#安装net-tools&#34; class=&#34;headerlink&#34; title=&#34;安装net-tools&#34;&gt;&lt;/a&gt;安装net-tools&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;centOS 最小化安装默认没有yum 、ifconfig等常用命令，需要安装net-tools启用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;首先输入id与pwd登录终端&lt;/li&gt;
&lt;li&gt;终端输入以下命令：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd  /etc/sysconfig/network-scripts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vi ifcfg-ens33&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进入ifcfg配置文件后，将&lt;code&gt;ONBOOT=no&lt;/code&gt;改为&lt;code&gt;ONBOOT=yes&lt;/code&gt;，在把&lt;code&gt;BOOTPROTO&lt;/code&gt;设为&lt;code&gt;static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启网卡：&lt;code&gt;service network restart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;ip addr&lt;/code&gt;，查看网络信息&lt;/li&gt;
&lt;li&gt;然后在终端输入命令安装net-tools：&lt;code&gt;yum install net-tools&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;命令行安装VMware-tools&#34;&gt;&lt;a href=&#34;#命令行安装VMware-tools&#34; class=&#34;headerlink&#34; title=&#34;命令行安装VMware-tools&#34;&gt;&lt;/a&gt;命令行安装VMware-tools&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;若使用虚拟机学习linux，安装VMWare-tools来对虚拟机与主机之间的切换&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在虚拟机软件的界面点击虚拟机，找到安装VMware Tools并点击&lt;/li&gt;
&lt;li&gt;在终端输入&lt;code&gt;ls /dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;mkdir /mnt/cdrom&lt;/code&gt;在&lt;code&gt;/mnt&lt;/code&gt;目录下创建一个名为&lt;code&gt;cdrom&lt;/code&gt;的目录&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;mount -t iso9660 /dev/cdrom /mnt/cdrom&lt;/code&gt;将光盘挂载到&lt;code&gt;/mnt/cdrom&lt;/code&gt;目录&lt;/li&gt;
&lt;li&gt;输入“ls /mnt/cdrom/”查看内容，输入&lt;code&gt;cp /mnt/cdrom/VMwareTools-9.2.0-799703.tar.gz /root/vm.tar.gz&lt;/code&gt;,将名为“VMwareTools-9.2.0-799703.tar.gz”复制到/root目录下，并重新命名为vm.tar.gz。==(此时的版本后缀以本机为准)==&lt;/li&gt;
&lt;li&gt;在根目录下输入&lt;code&gt;ls&lt;/code&gt;查看文件，输入&lt;code&gt;tar -xzf vm.tar.gz&lt;/code&gt;将文件解压，输入“ls”查看文件，可发现新增目录“vmware-tools-distrib”&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;cd vmware-tools-distrib/&lt;/code&gt;进入名为“vmware-tools-distrib”的目录，输入&lt;code&gt;./vmware-install.pl&lt;/code&gt;尝试安装，出现错误“-bash: ./vmware-install.pl: /usr/bin/per: bad interpreter: No such file or directory”，表明未安装编译环境。&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;yum -y install perl gcc make kernel-headers kernel-devel&lt;/code&gt;开始安装。&lt;/li&gt;
&lt;li&gt;在“vmware-tools-distrib”目录下重新输入&lt;code&gt;./vmware-install.pl&lt;/code&gt;开始安装，一路上按回车键即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;遇到突然ping不通外网的问题&#34;&gt;&lt;a href=&#34;#遇到突然ping不通外网的问题&#34; class=&#34;headerlink&#34; title=&#34;遇到突然ping不通外网的问题&#34;&gt;&lt;/a&gt;遇到突然ping不通外网的问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;终端输入以下命令：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;systemctl restart NetworkManager&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;systemctl restart network&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip addr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重新&lt;code&gt;ping&lt;/code&gt;即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;出现yum源报错：File-contains-no-section-headers的解决方案&#34;&gt;&lt;a href=&#34;#出现yum源报错：File-contains-no-section-headers的解决方案&#34; class=&#34;headerlink&#34; title=&#34;出现yum源报错：File contains no section headers的解决方案&#34;&gt;&lt;/a&gt;出现yum源报错：File contains no section headers的解决方案&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;删除&lt;code&gt;yum.repos.d&lt;/code&gt;目录内的所有文件：&lt;code&gt;rm -f /etc/yum.repos.d/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载阿里镜像：&lt;code&gt;wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;清理缓存：&lt;code&gt;yum clean all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;验证：&lt;code&gt;sudo yum makecache&lt;/code&gt;，出现下图即为换源成功！&lt;br&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7FYDjx.png&#34; alt=&#34;linuxyum&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Linux/Linux%E5%BC%80%E7%AF%87/</guid>
            <title>Linux开篇</title>
            <link>https://peter-pan001.github.io/my-blog/Linux/Linux%E5%BC%80%E7%AF%87/</link>
            <category>Linux</category>
            <pubDate>Sun, 09 Jan 2022 14:01:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Linux是什么？&#34;&gt;&lt;a href=&#34;#Linux是什么？&#34; class=&#34;headerlink&#34; title=&#34;Linux是什么？&#34;&gt;&lt;/a&gt;Linux是什么？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一套操作系统OS&lt;/li&gt;
&lt;li&gt;处于计算机的核心与系统调用接口层&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;谁发明的？&#34;&gt;&lt;a href=&#34;#谁发明的？&#34; class=&#34;headerlink&#34; title=&#34;谁发明的？&#34;&gt;&lt;/a&gt;谁发明的？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Linus Torvalds（托瓦兹, 1969年出生）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;当前IT的角色定位&#34;&gt;&lt;a href=&#34;#当前IT的角色定位&#34; class=&#34;headerlink&#34; title=&#34;当前IT的角色定位&#34;&gt;&lt;/a&gt;当前IT的角色定位&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;企业环境&lt;ul&gt;
&lt;li&gt;充当网络服务器，得益于Linux的稳定性，并且Linux与各大硬件厂商的深度合作如，Dell、HP、IBM及VMware等&lt;/li&gt;
&lt;li&gt;关键服务的应用，如一些安全性可靠性高的操作，如充当金融账户接口任务&lt;/li&gt;
&lt;li&gt;高性能运算服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;个人环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;桌面电脑Desktop。日常收发邮件，处理办公任务等&lt;/li&gt;
&lt;li&gt;移动端。如手机&lt;/li&gt;
&lt;li&gt;嵌入式系统。一些微计算机控制器，如路由器、robot控制芯片，车机控制系统等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;云端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;云程序。硬件虚拟化，把实体主机变成逻辑上独立的虚拟硬件主机，实现一台实体机，多个OS同时运行&lt;/li&gt;
&lt;li&gt;端设备。树莓派&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Linux学习方向&#34;&gt;&lt;a href=&#34;#Linux学习方向&#34; class=&#34;headerlink&#34; title=&#34;Linux学习方向&#34;&gt;&lt;/a&gt;Linux学习方向&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;基本的计算机软硬件原理，计组，计网操作系统原理&lt;/li&gt;
&lt;li&gt;认识linux的结构，如何安装，使用&lt;code&gt;man page&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;了解Linux文件系统与磁盘管理&lt;/li&gt;
&lt;li&gt;学习Shell与Shell脚本&lt;/li&gt;
&lt;li&gt;熟悉Linux权限管理&lt;/li&gt;
&lt;li&gt;学会如何充当一位Linux系统管理员的角色，分析登录文件，模块管理，备份策略等&lt;/li&gt;
&lt;li&gt;学看源码&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Linux/LINUX%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</guid>
            <title>LINUX课程笔记</title>
            <link>https://peter-pan001.github.io/my-blog/Linux/LINUX%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</link>
            <category>linux</category>
            <pubDate>Fri, 18 Jun 2021 22:01:07 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Linux课程&#34;&gt;&lt;a href=&#34;#Linux课程&#34; class=&#34;headerlink&#34; title=&#34;Linux课程&#34;&gt;&lt;/a&gt;Linux课程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本篇文章基于《linux就该这么学》编写，仅包含学校课程学习内容，并未包括该书本的完整知识!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;重置ROOT管理员密码&#34;&gt;&lt;a href=&#34;#重置ROOT管理员密码&#34; class=&#34;headerlink&#34; title=&#34;重置ROOT管理员密码&#34;&gt;&lt;/a&gt;重置ROOT管理员密码&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;重启 Linux 系统主机并出现引导界面时，按下键盘上的&lt;code&gt;e 键&lt;/code&gt;进入内核编辑界面，如图所示&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7FJ3wD.png&#34; alt=&#34;yindao&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 linux16 参数这行的最后面追加&lt;code&gt;rd.break&lt;/code&gt;参数，然后按下 &lt;code&gt;Ctrl + X&lt;/code&gt; 组合键来运行修改过的内核程序,如图所示&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7FJwOf.png&#34; alt=&#34;neihe&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大约 30 秒过后，进入到系统的紧急求援模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/09/7FJ6Yj.png&#34; alt=&#34;jjqy&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;依次输入以下命令，等待系统重启操作完毕，然后就可以使用新密码 linuxprobe 来登录Linux系统了&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;lang-bash&#34;&gt;mount -o remount,rw /sysroot 
chroot /sysroot 
passwd 
touch /.autorelabel 
exit 
reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;查看帮助命令&#34;&gt;&lt;a href=&#34;#查看帮助命令&#34; class=&#34;headerlink&#34; title=&#34;查看帮助命令&#34;&gt;&lt;/a&gt;查看帮助命令&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;长格式&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;man --help
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;短格式&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;man -h
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;常用的系统工作命令&#34;&gt;&lt;a href=&#34;#常用的系统工作命令&#34; class=&#34;headerlink&#34; title=&#34;常用的系统工作命令&#34;&gt;&lt;/a&gt;常用的系统工作命令&lt;/h2&gt;&lt;h3 id=&#34;echo&#34;&gt;&lt;a href=&#34;#echo&#34; class=&#34;headerlink&#34; title=&#34;echo&#34;&gt;&lt;/a&gt;echo&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;echo&lt;/code&gt; 命令用于在终端输出字符串或变量提取后的值，格式为&lt;code&gt;echo [字符串 | $变量]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;例如我们使用$变量的方式提取变量 SHELL 的值，并将其输出到屏幕上：&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;[root@linuxprobe ~]# echo $SHELL 
/bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;或者直接在 &lt;code&gt;echo&lt;/code&gt; 后面加上要在命令行显示的字符信息:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;# echo welcome
welcome
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;date&#34;&gt;&lt;a href=&#34;#date&#34; class=&#34;headerlink&#34; title=&#34;date&#34;&gt;&lt;/a&gt;date&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt; 命令用于显示及设置系统的时间或日期，格式为 &lt;code&gt;date [选项] [+指定的格式]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;按照默认格式查看当前系统时间的 date 命令&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;[root@linuxprobe ~]# date 
Mon Aug 24 16:11:23 CST 2017
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;按照“年-月-日 小时:分钟:秒”的格式查看当前系统时间的 &lt;code&gt;date&lt;/code&gt; 命令&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;[root@linuxprobe ~]# date &amp;quot;+%Y-%m-%d %H:%M:%S&amp;quot; 
2017-08-24 16:29:12
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reboot&#34;&gt;&lt;a href=&#34;#reboot&#34; class=&#34;headerlink&#34; title=&#34;reboot&#34;&gt;&lt;/a&gt;reboot&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reboot&lt;/code&gt; 命令用于重启系统,默认只能使用 root 管理员来重启&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;[root@linuxprobe ~]# reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;poweroff&#34;&gt;&lt;a href=&#34;#poweroff&#34; class=&#34;headerlink&#34; title=&#34;poweroff&#34;&gt;&lt;/a&gt;poweroff&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poweroff&lt;/code&gt; 命令用于关闭系统,此默认只有 root 管理员才可以关闭电脑&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;[root@linuxprobe ~]# poweroff
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;wget&#34;&gt;&lt;a href=&#34;#wget&#34; class=&#34;headerlink&#34; title=&#34;wget&#34;&gt;&lt;/a&gt;wget&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;wget&lt;/code&gt; 命令用于在终端中下载网络文件，格式为 &lt;code&gt;wget [参数] 下载地址&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;命令参数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wget -b&lt;/code&gt; 后台下载模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget -P&lt;/code&gt; 下载到指定目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget -t&lt;/code&gt; 最大尝试次数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget -c&lt;/code&gt; 断点续传&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget -p&lt;/code&gt; 下载页面内所有资源，包括图片、视频等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget -r&lt;/code&gt; 递归下载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ps&#34;&gt;&lt;a href=&#34;#ps&#34; class=&#34;headerlink&#34; title=&#34;ps&#34;&gt;&lt;/a&gt;ps&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ps&lt;/code&gt;命令用于查看系统中的进程状态，格式为&lt;code&gt;ps [参数]&lt;/code&gt;(process status)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命令参数&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wget -a&lt;/code&gt; 显示所有进程（包括其他用户的进程）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget -u&lt;/code&gt; 用户以及其他详细信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget -x&lt;/code&gt; 显示没有控制终端的进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;top&#34;&gt;&lt;a href=&#34;#top&#34; class=&#34;headerlink&#34; title=&#34;top&#34;&gt;&lt;/a&gt;top&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;top&lt;/code&gt; 命令用于动态地监视进程活动与系统负载等信息，其格式为 &lt;code&gt;top&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pidof&#34;&gt;&lt;a href=&#34;#pidof&#34; class=&#34;headerlink&#34; title=&#34;pidof&#34;&gt;&lt;/a&gt;pidof&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pidof&lt;/code&gt; 命令用于查询某个指定服务进程的 PID 值，格式为 &lt;code&gt;pidof [参数] [服务名称]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;[root@linuxprobe ~]# pidof sshd 
2156
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;kill&#34;&gt;&lt;a href=&#34;#kill&#34; class=&#34;headerlink&#34; title=&#34;kill&#34;&gt;&lt;/a&gt;kill&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kill&lt;/code&gt;命令用于终止某个指定 PID 的服务进程，格式为&lt;code&gt;kill [参数] [进程 PID]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;killall&#34;&gt;&lt;a href=&#34;#killall&#34; class=&#34;headerlink&#34; title=&#34;killall&#34;&gt;&lt;/a&gt;killall&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;killall&lt;/code&gt; 命令用于终止某个指定名称的服务所对应的全部进程，格式为：&lt;code&gt;killall [参数] [进程名称]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;系统状态检测命令&#34;&gt;&lt;a href=&#34;#系统状态检测命令&#34; class=&#34;headerlink&#34; title=&#34;系统状态检测命令&#34;&gt;&lt;/a&gt;系统状态检测命令&lt;/h2&gt;&lt;h3 id=&#34;ifconfig&#34;&gt;&lt;a href=&#34;#ifconfig&#34; class=&#34;headerlink&#34; title=&#34;ifconfig&#34;&gt;&lt;/a&gt;ifconfig&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt; 命令用于获取网卡配置与网络状态等信息，格式为 &lt;code&gt;ifconfig [网络设备] [参数]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;ifconfig&lt;/code&gt; 命令来查看本机当前的网卡配置与网络状态等信息时，其实主要查看的就是网卡名称、inet 参数后面的 IP 地址、ether 参数后面的网卡物理地址（又称为 MAC 地址），以及 RX、TX 的接收数据包与发送数据包的个数及累计流量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;uname&#34;&gt;&lt;a href=&#34;#uname&#34; class=&#34;headerlink&#34; title=&#34;uname&#34;&gt;&lt;/a&gt;uname&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uname&lt;/code&gt; 命令用于查看系统内核与系统版本等信息，格式为&lt;code&gt;uname [-a]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在使用 &lt;code&gt;uname&lt;/code&gt; 命令时，一般会固定搭配上&lt;code&gt;-a&lt;/code&gt; 参数来完整地查看当前系统的内核名称、主机名、内核发行版本、节点名、系统时间、硬件名称、硬件平台、处理器类型以及操作系统名称等信息&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;[root@linuxprobe ~]# uname -a 
Linux linuxprobe.com 3.10.0-123.el7.x86_64 #1 SMP Mon May 5 11:16:57 EDT 2017 
x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;uptime&#34;&gt;&lt;a href=&#34;#uptime&#34; class=&#34;headerlink&#34; title=&#34;uptime&#34;&gt;&lt;/a&gt;uptime&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uptime&lt;/code&gt; 用于查看系统的负载信息，格式为 &lt;code&gt;uptime&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;[root@linuxprobe ~]# uptime 
22:49:55 up 10 min, 2 users, load average: 0.01, 0.19, 0.18
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;free&#34;&gt;&lt;a href=&#34;#free&#34; class=&#34;headerlink&#34; title=&#34;free&#34;&gt;&lt;/a&gt;free&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;free&lt;/code&gt; 用于显示当前系统中内存的使用量信息，格式为&lt;code&gt;free [-h]&lt;/code&gt;&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;[root@linuxprobe ~]# free -h
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;who&#34;&gt;&lt;a href=&#34;#who&#34; class=&#34;headerlink&#34; title=&#34;who&#34;&gt;&lt;/a&gt;who&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;who&lt;/code&gt; 用于查看当前登入主机的用户终端信息，格式为&lt;code&gt;who [参数]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;last&#34;&gt;&lt;a href=&#34;#last&#34; class=&#34;headerlink&#34; title=&#34;last&#34;&gt;&lt;/a&gt;last&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;last&lt;/code&gt; 命令用于查看所有系统的登录记录，格式为&lt;code&gt;last [参数]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;history&#34;&gt;&lt;a href=&#34;#history&#34; class=&#34;headerlink&#34; title=&#34;history&#34;&gt;&lt;/a&gt;history&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt; 命令用于显示历史执行过的命令，格式为&lt;code&gt;history [-c]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工作目录切换命令&#34;&gt;&lt;a href=&#34;#工作目录切换命令&#34; class=&#34;headerlink&#34; title=&#34;工作目录切换命令&#34;&gt;&lt;/a&gt;工作目录切换命令&lt;/h2&gt;&lt;h3 id=&#34;pwd&#34;&gt;&lt;a href=&#34;#pwd&#34; class=&#34;headerlink&#34; title=&#34;pwd&#34;&gt;&lt;/a&gt;pwd&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pwd&lt;/code&gt; 命令用于显示用户当前所处的目录。如果用户不知道自己当前所处的目录，就必须使用它。例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;[webber@localhost ~]$ pwd
/home/webber                  //webber用户当前所在的目录
[webber@localhost ~]$ su -        //从Webber用户切换到root用户
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cd&#34;&gt;&lt;a href=&#34;#cd&#34; class=&#34;headerlink&#34; title=&#34;cd&#34;&gt;&lt;/a&gt;cd&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; 命令用于切换工作路径，格式为&lt;code&gt;cd [目录名称]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;除了常见的切换目录方式，还可以使用&lt;code&gt;cd -&lt;/code&gt;命令返回到上一次所处的目录，使用&lt;code&gt;cd..&lt;/code&gt;命令进入上级目录，以及使用&lt;code&gt;cd ~&lt;/code&gt;命令切换到当前用户的家目录，亦或使用&lt;code&gt;cd ~username&lt;/code&gt;切换到其他用户的家目录&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;返回到上一次的目录&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;[root@linuxprobe bin]# cd - 
/etc 
[root@linuxprobe etc]#
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;快速切换到用户的家目录&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;lang-s&#34;&gt;[root@linuxprobe etc]# cd ~ 
[root@linuxprobe ~]#
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ls&#34;&gt;&lt;a href=&#34;#ls&#34; class=&#34;headerlink&#34; title=&#34;ls&#34;&gt;&lt;/a&gt;ls&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ls&lt;/code&gt; 命令用于显示目录中的文件信息，格式为&lt;code&gt;ls [选项] [文件]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
