{
    "version": "https://jsonfeed.org/version/1",
    "title": "理 想 净 土 • All posts by \"linux\" category",
    "description": "不必匆忙，不必火花四溅，不必成为别人，只需成为自己",
    "home_page_url": "https://peter-pan001.github.io/my-blog",
    "items": [
        {
            "id": "https://peter-pan001.github.io/my-blog/Linux/%E7%9B%AE%E5%BD%95%E4%B8%8E%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/",
            "url": "https://peter-pan001.github.io/my-blog/Linux/%E7%9B%AE%E5%BD%95%E4%B8%8E%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/",
            "title": "目录与文件管理",
            "date_published": "2022-01-09T12:36:45.000Z",
            "content_html": "<h1 id=\"目录与路径\"><a class=\"markdownIt-Anchor\" href=\"#目录与路径\">#</a> 目录与路径</h1>\n<h2 id=\"相对路径-绝对路径\"><a class=\"markdownIt-Anchor\" href=\"#相对路径-绝对路径\">#</a> 相对路径、绝对路径</h2>\n<ul>\n<li>绝对路径：路径的写法 “一定由根目录 / 写起”，例如： /usr/share/doc 这个目录。</li>\n<li>相对路径：路径的写法 “不是由 / 写起”，例如由 /usr/share/doc 要到 /usr/share/man 下面时，可以写成：  <code>cd ../man</code>  这就是相对路径的写法啦！相对路径意指 “相对于目前工作目录的路径！”</li>\n</ul>\n<h2 id=\"目录相关操作\"><a class=\"markdownIt-Anchor\" href=\"#目录相关操作\">#</a> 目录相关操作</h2>\n<ul>\n<li>\n<p><code>cd</code> ：变换目录</p>\n</li>\n<li>\n<p><code>pwd</code> ：显示目前的目录</p>\n</li>\n<li>\n<p><code>mkdir</code> ：创建一个新的目录</p>\n</li>\n<li>\n<p><code>rmdir</code> ：删除一个空的目录</p>\n</li>\n</ul>\n<h3 id=\"cd-变换目录\"><a class=\"markdownIt-Anchor\" href=\"#cd-变换目录\">#</a> cd 变换目录</h3>\n<ul>\n<li><code>cd ..</code> ：回到上一层目录</li>\n<li><code>cd ~</code> ：回到主目录<br>\n<img data-src=\"https://s4.ax1x.com/2022/01/09/7kcYin.png\" alt=\"cd\"></li>\n</ul>\n<h3 id=\"pwd-显示当前所在目录\"><a class=\"markdownIt-Anchor\" href=\"#pwd-显示当前所在目录\">#</a> pwd 显示当前所在目录</h3>\n<ul>\n<li><code>pwd</code>  是 Print Working Directory 的缩写，也就是显示目前所在目录的指令<br>\n<img data-src=\"https://s4.ax1x.com/2022/01/09/7kgEOU.png\" alt=\"pwd\"></li>\n</ul>\n<h3 id=\"mkdir-创建新目录\"><a class=\"markdownIt-Anchor\" href=\"#mkdir-创建新目录\">#</a> mkdir 创建新目录</h3>\n<blockquote>\n<p>注意使用该命令后带不带 <code>-p</code>  的区别</p>\n</blockquote>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7kcXy8.png\" alt=\"mkdir\"></p>\n<h3 id=\"rmdir-删除空目录\"><a class=\"markdownIt-Anchor\" href=\"#rmdir-删除空目录\">#</a> rmdir 删除空目录</h3>\n<blockquote>\n<p>注意使用该命令后带不带 <code>-p</code>  的区别</p>\n</blockquote>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7kgZmF.png\" alt=\"rmdir\"></p>\n<h2 id=\"可执行文件路径的变量-path\"><a class=\"markdownIt-Anchor\" href=\"#可执行文件路径的变量-path\">#</a> 可执行文件路径的变量： $PATH</h2>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7kgMf1.png\" alt=\"path\"></p>\n<ul>\n<li>PATH（一定是大写）这个变量的内容是由一堆目录所组成的，每个目录中间用冒号（:）来隔<br>\n开， 每个目录是有 “顺序” 之分的。仔细看一下上面的输出，你可以发现到无论是 root 还是 dmtsai 都有 /bin 或 /usr/bin 这个目录在 PATH 变量内，所以当然就能够在任何地方执行 ls 来找到 /bin/ls 可执行文件啰！因为 /bin 在 CentOS 7 当中，就是链接到 /usr/bin 去的！ 所以这两个目录内容会一模一样</li>\n</ul>\n<h1 id=\"文件与目录管理\"><a class=\"markdownIt-Anchor\" href=\"#文件与目录管理\">#</a> 文件与目录管理</h1>\n<h2 id=\"ls-审查目录与文件\"><a class=\"markdownIt-Anchor\" href=\"#ls-审查目录与文件\">#</a> ls 审查目录与文件</h2>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7kglSx.png\" alt=\"ls\"></p>\n<h2 id=\"cp-rm-mv-复制-删除与移动\"><a class=\"markdownIt-Anchor\" href=\"#cp-rm-mv-复制-删除与移动\">#</a> cp、rm、mv 复制、删除与移动</h2>\n<ul>\n<li>cp</li>\n</ul>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7kgJmD.png\" alt=\"cp\"><br>\n<img data-src=\"https://s4.ax1x.com/2022/01/09/7kgY0e.png\" alt=\"cpa\"></p>\n<ul>\n<li>\n<p>rm<br>\n<img data-src=\"https://s4.ax1x.com/2022/01/09/7kgv1x.png\" alt=\"rm\"></p>\n</li>\n<li>\n<p>mv</p>\n</li>\n</ul>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7k2pnO.png\" alt=\"mv\"></p>\n<h2 id=\"取得路径的文件名称与目录名称\"><a class=\"markdownIt-Anchor\" href=\"#取得路径的文件名称与目录名称\">#</a> 取得路径的文件名称与目录名称</h2>\n<ul>\n<li><code>basename</code>  与 <code>dirname</code></li>\n</ul>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7k2ZgP.png\" alt=\"basename\"></p>\n<h1 id=\"文件内容查阅\"><a class=\"markdownIt-Anchor\" href=\"#文件内容查阅\">#</a> 文件内容查阅</h1>\n<h2 id=\"直接查视\"><a class=\"markdownIt-Anchor\" href=\"#直接查视\">#</a> 直接查视</h2>\n<h3 id=\"cat\"><a class=\"markdownIt-Anchor\" href=\"#cat\">#</a> cat</h3>\n<ul>\n<li><code>cat</code>  由第一行开始显示文件内容</li>\n</ul>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/10/7AjYee.png\" alt=\"cat\"></p>\n<h3 id=\"tac\"><a class=\"markdownIt-Anchor\" href=\"#tac\">#</a> tac</h3>\n<ul>\n<li><code>tac</code>  从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>\n</ul>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/10/7AjwWt.png\" alt=\"tac\"></p>\n<h3 id=\"nl\"><a class=\"markdownIt-Anchor\" href=\"#nl\">#</a> nl</h3>\n<ul>\n<li><code>nl</code>  显示的时候，顺道输出行号！</li>\n</ul>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/10/7AjBSP.png\" alt=\"nl\"></p>\n<h2 id=\"可翻页查视\"><a class=\"markdownIt-Anchor\" href=\"#可翻页查视\">#</a> 可翻页查视</h2>\n<h3 id=\"more\"><a class=\"markdownIt-Anchor\" href=\"#more\">#</a> more</h3>\n<ul>\n<li><code>more</code>  一页一页的显示文件内容</li>\n</ul>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/10/7AjsOS.png\" alt=\"morea\"><br>\n<img data-src=\"https://s4.ax1x.com/2022/01/10/7AjWYn.png\" alt=\"moreb\"></p>\n<h3 id=\"less\"><a class=\"markdownIt-Anchor\" href=\"#less\">#</a> less</h3>\n<ul>\n<li><code>less</code>  与 <code>more</code>  类似，但是比 more 更好的是，他可以往前翻页！</li>\n</ul>\n<h2 id=\"数据截取\"><a class=\"markdownIt-Anchor\" href=\"#数据截取\">#</a> 数据截取</h2>\n<h3 id=\"head\"><a class=\"markdownIt-Anchor\" href=\"#head\">#</a> head</h3>\n<ul>\n<li><code>head</code>  只看头几行</li>\n</ul>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/10/7AjfWq.png\" alt=\"head\"></p>\n<h3 id=\"tail\"><a class=\"markdownIt-Anchor\" href=\"#tail\">#</a> tail</h3>\n<ul>\n<li><code>tail</code>  只看尾巴几行</li>\n</ul>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/10/7AjIyT.png\" alt=\"tail\"></p>\n<h2 id=\"非纯文本文件-od\"><a class=\"markdownIt-Anchor\" href=\"#非纯文本文件-od\">#</a> 非纯文本文件: od</h2>\n<ul>\n<li><code>od</code>  以二进制的方式读取文件内容！</li>\n</ul>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/10/7AjbTJ.png\" alt=\"od\"></p>\n<h2 id=\"修改文件时间或创建新文件touch\"><a class=\"markdownIt-Anchor\" href=\"#修改文件时间或创建新文件touch\">#</a> 修改文件时间或创建新文件:touch</h2>\n<blockquote>\n<p>[root@study ~]# touch [-acdmt] 文件<br>\n选项与参数：<br>\n-a ：仅修订 access time；<br>\n-c ：仅修改文件的时间，若该文件不存在则不创建新文件；<br>\n-d ：后面可以接欲修订的日期而不用目前的日期，也可以使用 --date=“日期或时间”<br>\n-m ：仅修改 mtime ；<br>\n-t ：后面可以接欲修订的时间而不用目前的时间，格式为 [YYYYMMDDhhmm]</p>\n</blockquote>\n<h1 id=\"指令与文件的搜寻\"><a class=\"markdownIt-Anchor\" href=\"#指令与文件的搜寻\">#</a> 指令与文件的搜寻</h1>\n<h2 id=\"指令文件名的搜寻\"><a class=\"markdownIt-Anchor\" href=\"#指令文件名的搜寻\">#</a> 指令文件名的搜寻</h2>\n<ul>\n<li><code>which</code> （寻找 “可执行文件”）</li>\n</ul>\n<blockquote>\n<p>[root@study ~]# which [-a] command<br>\n 选项或参数：<br>\n-a ：将所有由 PATH 目录中可以找到的指令均列出，而不止第一个被找到的指令名称</p>\n</blockquote>\n<h2 id=\"文件文件名的搜寻\"><a class=\"markdownIt-Anchor\" href=\"#文件文件名的搜寻\">#</a> 文件文件名的搜寻</h2>\n<ul>\n<li><code>whereis</code>  （由一些特定的目录中寻找文件文件名）</li>\n</ul>\n<blockquote>\n<p>[root@study ~]# whereis [-bmsu] 文件或目录名<br>\n选项与参数：<br>\n-l : 可以列出 whereis 会去查询的几个主要目录而已<br>\n - b : 只找 binary 格式的文件<br>\n - m : 只找在说明文档 manual 路径下的文件<br>\n - s : 只找 source 来源文件<br>\n - u : 搜寻不在上述三个项目当中的其他特殊文件</p>\n</blockquote>\n<ul>\n<li><code>locate / updatedb</code></li>\n</ul>\n<blockquote>\n<p>[root@study ~]# locate [-ir] keyword<br>\n 选项与参数：<br>\n-i ：忽略大小写的差异；<br>\n-c ：不输出文件名，仅计算找到的文件数量<br>\n - l ：仅输出几行的意思，例如输出五行则是 -l 5<br>\n-S ：输出 locate 所使用的数据库文件的相关信息，包括该数据库纪录的文件 / 目录数量等<br>\n - r ：后面可接正则表达式的显示方式</p>\n</blockquote>\n<ul>\n<li><code>find</code></li>\n</ul>\n<blockquote>\n<p>[root@study ~]# find [PATH] [option] [action]<br>\n 选项与参数：<br>\n1. 与时间有关的选项：共有 -atime, -ctime 与 -mtime ，以 -mtime 说明<br>\n - mtime n ：n 为数字，意义为在 n 天之前的 “一天之内” 被更动过内容的文件；<br>\n-mtime +n ：列出在 n 天之前（不含 n 天本身）被更动过内容的文件文件名；<br>\n-mtime -n ：列出在 n 天之内（含 n 天本身）被更动过内容的文件文件名。<br>\n-newer file ：file 为一个存在的文件，列出比 file 还要新的文件文件名<br>\n 2. 与使用者或群组名称有关的参数：<br>\n-uid n ：n 为数字，这个数字是使用者的帐号 ID，亦即 UID ，这个 UID 是记录在<br>\n /etc/passwd 里面与帐号名称对应的数字。这方面我们会在第四篇介绍。<br>\n-gid n ：n 为数字，这个数字是群组名称的 ID，亦即 GID，这个 GID 记录在<br>\n /etc/group，相关的介绍我们会第四篇说明～<br>\n-user name ：name 为使用者帐号名称喔！例如 dmtsai<br>\n-group name：name 为群组名称喔，例如 users ；<br>\n-nouser ：寻找文件的拥有者不存在 /etc/passwd 的人！<br>\n-nogroup ：寻找文件的拥有群组不存在于 /etc/group 的文件！<br>\n当你自行安装软件时，很可能该软件的属性当中并没有文件拥有者，<br>\n这是可能的！在这个时候，就可以使用 -nouser 与 -nogroup 搜寻<br>\n 3. 与文件权限及名称有关的参数：<br>\n-name filename：搜寻文件名称为 filename 的文件；<br>\n-size [±] SIZE：搜寻比 SIZE 还要大（+）或小（-）的文件。这个 SIZE 的规格有：<br>\nc: 代表 Byte， k: 代表 1024Bytes。所以，要找比 50KB<br>\n 还要大的文件，就是 “-size +50k”<br>\n-type TYPE ：搜寻文件的类型为 TYPE 的，类型主要有：一般正规文件 （f）, 设备文件 （b, c）,<br>\n 目录 （d）, 链接文件 （l）, socket （s）, 及 FIFO （p） 等属性。<br>\n-perm mode ：搜寻文件权限 “刚好等于” mode 的文件，这个 mode 为类似 chmod<br>\n 的属性值，举例来说， -rwsr-xr-x 的属性为 4755 ！<br>\n-perm -mode ：搜寻文件权限 “必须要全部囊括 mode 的权限” 的文件，举例来说，<br>\n我们要搜寻 -rwxr–r-- ，亦即 0744 的文件，使用 -perm -0744，<br>\n当一个文件的权限为 -rwsr-xr-x ，亦即 4755 时，也会被列出来，<br>\n因为 -rwsr-xr-x 的属性已经囊括了 -rwxr–r-- 的属性了。<br>\n-perm /mode ：搜寻文件权限 “包含任一 mode 的权限” 的文件，举例来说，我们搜寻<br>\n - rwxr-xr-x ，亦即 -perm /755 时，但一个文件属性为 -rw-------<br>\n 也会被列出来，因为他有 -rw… 的属性存在！<br>\n4. 额外可进行的动作：<br>\n-exec command ：command 为其他指令，-exec 后面可再接额外的指令来处理搜寻到的结果。<br>\n-print ：将结果打印到屏幕上，这个动作是默认动作！</p>\n</blockquote>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://peter-pan001.github.io/my-blog/Linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/",
            "url": "https://peter-pan001.github.io/my-blog/Linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/",
            "title": "文件权限与目录管理",
            "date_published": "2022-01-09T06:09:06.000Z",
            "content_html": "<h1 id=\"使用者和群组\"><a class=\"markdownIt-Anchor\" href=\"#使用者和群组\">#</a> 使用者和群组</h1>\n<ul>\n<li><strong>使用者</strong>。就是文件的拥有者，通过对文件权限的授予来划分使用者的类别，一些使用者对文件只有读或写的权限，而对于管理员则对文件既有只读和只写还有读写的权限，通过权限划分使用者，能让系统运行更为安全高效，对于某些用户起到隐私隔离的效果</li>\n<li><strong>群组</strong>。即在同一个 Group 中的所有用户共享其文件，而每个组之间又相互独立，即各组的权限共享范围不一，所以当设置该用户在群组内的文件权限时，同一群组下的其他用户即可对该文件进行操作</li>\n<li><strong>其他人</strong>。即 others，是 Linux 系统中除了文件的拥有者、群组以外的用户称为 others</li>\n</ul>\n<h1 id=\"文件权限\"><a class=\"markdownIt-Anchor\" href=\"#文件权限\">#</a> 文件权限</h1>\n<h2 id=\"linux-文件属性\"><a class=\"markdownIt-Anchor\" href=\"#linux-文件属性\">#</a> Linux 文件属性</h2>\n<ul>\n<li>\n<p>通过在 root 用户下，终端执行 <code>su -al</code> ，显示以下文件信息：</p>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7FtNsP.png\" alt=\"docfile\"></p>\n<ul>\n<li>第一列为文件类型权限</li>\n<li>第二列的数字为该文件的连接数，目录树就是通过该数字把文件链接起来的</li>\n<li>第三列为文件的拥有者</li>\n<li>第四列为文件所在群组</li>\n<li>第五列为文件最后更改时间</li>\n<li>第六列为文件名</li>\n</ul>\n</li>\n<li>\n<p><strong>文件类型与属性图</strong></p>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7FtdZ8.png\" alt=\"quanxian\"></p>\n<ul>\n<li>\n<p>关于第一个字符含义：</p>\n<p>​\t当为 <code>[ d ]</code>  则是目录，例如上表文件名为 <code>.config</code>  的那一行；</p>\n<p>​\t当为 <code>[ - ]</code>  则是文件，例如上表文件名为 <code>initial-setup-ks.cfg</code>  那一行；</p>\n<p>​\t若是 <code>[ l ]</code>  则表示为链接文件（link file）；</p>\n<p>​\t若是 <code>[ b ]</code>  则表示为设备文件里面的可供储存的周边设备（可随机存取设备）；</p>\n<p>​\t若是 <code>[ c ]</code>  则表示为设备文件里面的序列埠设备，例如键盘、鼠标（一次性读取设 备）</p>\n</li>\n<li>\n<p>关于第 2、3、4 个字符含义（三个一组来解释）：</p>\n<p>​\t以三个为一组，且均为 <code>rwx</code>  的三个参数的组合。其中， <code>[ r ]</code>  代表可读 、 <code>[ w ]</code>  代表可写、 <code>[ x ]</code>  代表可执行。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 <code>[ - ]</code>  而已。</p>\n</li>\n<li>\n<p>后面 5-7 和 8-10 的含义与 2、3、4 一致，只是一个表示文件所在群的权限，一个是 others 的权限</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"改变文件属性权限\"><a class=\"markdownIt-Anchor\" href=\"#改变文件属性权限\">#</a> 改变文件属性权限</h2>\n<ul>\n<li><code>chgrp</code>  ：改变文件所属群组</li>\n<li><code>chown</code>  ：改变文件拥有者</li>\n<li><code>chmod</code>  ：改变文件的权限，SUID, SGID, SBIT 等等的特性</li>\n<li>改变所属群组， <code>chgrp</code></li>\n</ul>\n<h3 id=\"改变所属群组-chgrp\"><a class=\"markdownIt-Anchor\" href=\"#改变所属群组-chgrp\">#</a> 改变所属群组 chgrp</h3>\n<ul>\n<li>例如：  <code>chgrp users initial-setup-ks.cfg</code>  第二位为群组名 第三位为文件名</li>\n</ul>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7FtsRs.png\" alt=\"chgrpa\"></p>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7Ftyzn.png\" alt=\"chgrpb\"></p>\n<h3 id=\"改变文件拥有者-chown\"><a class=\"markdownIt-Anchor\" href=\"#改变文件拥有者-chown\">#</a> 改变文件拥有者 chown</h3>\n<ul>\n<li>例如：  <code>chown bin initial-setup-ks.cfg</code>  第二位为文件拥有者名 第三位为文件名<br>\n<img data-src=\"https://s4.ax1x.com/2022/01/09/7FtWZT.png\" alt=\"chowna\"></li>\n</ul>\n<h3 id=\"改变文件权限-chmod\"><a class=\"markdownIt-Anchor\" href=\"#改变文件权限-chmod\">#</a> 改变文件权限 chmod</h3>\n<ul>\n<li>例如：  <code>chown 777 .bashrc</code>  第二位的三个数字分别代表 (owner/group/others) 的只读、只写、读写权限 第三位为文件名</li>\n<li>关于权限位数：\n<ul>\n<li>rwx，其中 r=4（read），w=2（write），x=1（execute）</li>\n<li>\n<blockquote>\n<p>owner = rwx = 4+2+1 = 7 &gt; group = rwx = 4+2+1 = 7 &gt; others= — = 0+0+0 = 0</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7FtTzR.png\" alt=\"chmoda\"></p>\n<ul>\n<li>也可以用字符改变各种使用者\n<ul>\n<li>u 代表 user</li>\n<li>g 代表 group</li>\n<li>o 代表 others</li>\n</ul>\n</li>\n<li>例如：  <code>[root@study ~]# chmod u=rwx,go=rx .bashrc</code></li>\n</ul>\n<h3 id=\"目录文件权限意义\"><a class=\"markdownIt-Anchor\" href=\"#目录文件权限意义\">#</a> 目录文件权限意义</h3>\n<h4 id=\"对文件而言\"><a class=\"markdownIt-Anchor\" href=\"#对文件而言\">#</a> 对文件而言</h4>\n<ul>\n<li>r （read）：可读取此一文件的实际内容，如读取文本文件的文字内容等</li>\n<li>w （write）：可以编辑、新增或者是修改该文件的内容（但不含删除该文件）</li>\n<li>x （execute）：该文件具有可以被系统执行的权限</li>\n</ul>\n<h4 id=\"对目录而言\"><a class=\"markdownIt-Anchor\" href=\"#对目录而言\">#</a> 对目录而言</h4>\n<ul>\n<li>\n<p>r （read contents in directory）</p>\n<ul>\n<li>表示具有读取目录结构清单的权限，所以当你具有读取（r）一个目录的权限时，表示你可以查询该目录下的文件名数据。</li>\n</ul>\n</li>\n<li>\n<p>w （modify contents of directory）</p>\n<ul>\n<li>表示可以创建新的文件与目录；删除已经存在的文件与目录（不论该文件的权限为何！）将已存在的文件或目录进行更名；搬移该目录内的文件、目录位置。</li>\n</ul>\n</li>\n<li>\n<p>x （access directory）</p>\n<ul>\n<li>目录不可以被执行，目录的 x 代表的是使用者能否进入该目录成为工作目录的用途！所谓的工作目录（work directory）就是你目前所在的目录啦！举例来说，当你登陆 Linux 时，你所在的主文件夹就是你当下的工作目录。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"linux文件种类\"><a class=\"markdownIt-Anchor\" href=\"#linux文件种类\">#</a> Linux 文件种类</h3>\n<h4 id=\"正规文件\"><a class=\"markdownIt-Anchor\" href=\"#正规文件\">#</a> 正规文件</h4>\n<blockquote>\n<p>即是一般我们在进行存取的类型的文件，在由  <code>ls -al</code>  所显示出来的属性方面，第一个字符为 [-]，例如 [-rwxrwxrwx ]</p>\n</blockquote>\n<ul>\n<li>纯文本文件 ASCII</li>\n<li>二进制文件 binary</li>\n<li>数据格式文件 data</li>\n</ul>\n<h4 id=\"目录directory\"><a class=\"markdownIt-Anchor\" href=\"#目录directory\">#</a> 目录 directory</h4>\n<h4 id=\"链接文件link-file\"><a class=\"markdownIt-Anchor\" href=\"#链接文件link-file\">#</a> 链接文件 link file</h4>\n<h4 id=\"设备与设备文件device\"><a class=\"markdownIt-Anchor\" href=\"#设备与设备文件device\">#</a> 设备与设备文件 device</h4>\n<ul>\n<li>区块 block</li>\n<li>字符 character</li>\n</ul>\n<h4 id=\"数据接口文件socket\"><a class=\"markdownIt-Anchor\" href=\"#数据接口文件socket\">#</a> 数据接口文件 socket</h4>\n<h4 id=\"数据输送档\"><a class=\"markdownIt-Anchor\" href=\"#数据输送档\">#</a> 数据输送档</h4>\n<h3 id=\"linux扩展名\"><a class=\"markdownIt-Anchor\" href=\"#linux扩展名\">#</a> Linux 扩展名</h3>\n<ul>\n<li><code>*.sh</code>  ： 脚本或批处理文件 （scripts），因为批处理文件为使用 shell 写成的，所以扩展名就编成  <code>.sh</code>  ；</li>\n<li><code>Z, .tar, .tar.gz, .zip, *.tgz</code> ： 经过打包的压缩文件。这是因为压缩软件分别为  <code>gunzip, tar</code>  等等的，由于不同的压缩软件，而取其相关的扩展名！</li>\n<li><code>.html, .php</code> ：网页相关文件，分别代表 HTML 语法与 PHP 语法的网页文件！ .html 的文件可使用网页浏览器来直接打开，至于  <code>.php</code>  的文件， 则可以通过 client 端的浏览器来 server 端浏览，以得到运算后的网页结果！</li>\n</ul>\n<h1 id=\"linux-目录配置\"><a class=\"markdownIt-Anchor\" href=\"#linux-目录配置\">#</a> Linux 目录配置</h1>\n<ul>\n<li>基本的三层目录\n<ul>\n<li><code>/</code>  （root, 根目录）：与开机系统有关；</li>\n<li><code>/usr</code>  （unix software resource）：与软件安装 / 执行有关；</li>\n<li><code>/var</code> （variable）：与系统运行过程有关。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>所有的 Linux 目录配置都是基于 FHS 的，即文件系统继承标准 Filesystem Hierarchy Standard</p>\n</blockquote>\n<h2 id=\"第一部分fhs必须要存在的\"><a class=\"markdownIt-Anchor\" href=\"#第一部分fhs必须要存在的\">#</a> 第一部分 FHS（必须要存在的！！）</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">目录</th>\n<th style=\"text-align:center\">放置内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>/bin</strong></td>\n<td style=\"text-align:center\">系统有很多 <mark>放置可执行文件的目录</mark> ，但 /bin 比较特殊。因为 /bin 放置的是在单人维护模式下还能够被操作的指令。 在 /bin 下面的指令可以被 root 与一般帐号所使用，主要有：cat, chmod, chown, date, mv, mkdir, cp, bash 等等常用的指令。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>/boot</strong></td>\n<td style=\"text-align:center\">这个目录主要在 <mark>放置开机会使用到的文件</mark> ，包括 Linux 核心文件以及开机菜单与开机所需配置文件等等。 Linux kernel 常用的文件名为：vmlinuz，如果使用的是 grub2 这个开机管理程序， 则还会存在 /boot/grub2 / 这个目录喔！</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>/dev</strong></td>\n<td style=\"text-align:center\">在 Linux 系统上，任何设备与周边设备都是以文件的型态存在于这个目录当中的。 比如重要的文件有 /dev/null, /dev/zero, /dev/tty, /dev/loop, /dev/sd 等等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>/etc</strong></td>\n<td style=\"text-align:center\"><mark>系统主要的配置文件</mark> 几乎都放置在这个目录内，例如人员的帐号密码档、各种服务的启始档等等。一般来说，这个目录下的各文件属性是可以让一般使用者查阅的， 但是只有 root 有权力修改。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>/lib</strong></td>\n<td style=\"text-align:center\">系统的函数库非常的多，而 /lib 放置的则是在 <mark>开机时会用到的函数库</mark> ， 以及在 /bin 或 /sbin 下面的指令会调用的函数库而已。 什么是函数库呢？你可以将他想成是 “外挂”，某些指令必须要有这些 “外挂” 才能够顺利完成程序的执行之意。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>/mnt</strong></td>\n<td style=\"text-align:center\">如果你想要 <mark>暂时挂载某些额外的设备</mark> ，一般建议你可以放置到这个目录中。在古早时候，这个目录的用途与 /media 相同啦！只是有了 /media 之后，这个目录就用来暂时挂载用了</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>/opt</strong></td>\n<td style=\"text-align:center\">这个是 <mark>给第三方协力软件放置的目录</mark> 。什么是第三方协力软件啊？ 举例来说，KDE 这个桌面管理系统是一个独立的计划，不过他可以安装到 Linux 系统中，因此 KDE 的软件就建议放置到此目录下了。 不过，以前的 Linux 系统中，我们还是习惯放置在 /usr/local 目录下呢！</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/srv</td>\n<td style=\"text-align:center\">srv 可以视为 “service” 的缩写，是一些网络服务启动之后，这些服务所需要取用的数据目录。 常见的服务例如 WWW, FTP 等等。举例来说，WWW 服务器需要的网页数据就可以放置在 /srv/www/ 里面。 不过，系统的服务数据如果尚未要提供给网际网络任何人浏览的话，默认还是建议放置到 /var/lib 下面即可。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/tmp</td>\n<td style=\"text-align:center\">这是让一般使用者或者是 <mark>正在执行的程序暂时放置文件</mark> 的地方。 这个目录是任何人都能够存取的，所以你需要定期的清理一下。当然，重要数据不可放置在此目录啊！ 因为 FHS 甚至建议在开机时，应该要将 /tmp 下的数据都删除唷！</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/home</td>\n<td style=\"text-align:center\">这是 <mark>系统默认的使用者主文件夹</mark> （home directory）。在你新增一个一般使用者帐号时， 默认的使用者主文件夹都会规范到这里来。比较重要的是，主文件夹有两种代号喔：~：代表目前这个使用者的主文件夹～dmtsai ：则代表 dmtsai 的主文件夹！</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/root</td>\n<td style=\"text-align:center\"><mark>系统管理员（root）的主文件夹</mark> 。之所以放在这里，是因为如果进入单人维护模式而仅挂载根目录时， 该目录就能够拥有 root 的主文件夹，所以我们会希望 root 的主文件夹与根目录放置在同一个分区中。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"usr-的意义与内容\"><a class=\"markdownIt-Anchor\" href=\"#usr-的意义与内容\">#</a> /usr 的意义与内容：</h2>\n<ul>\n<li>/usr 里面放置的数据属于可分享的与不可变动的（shareable,static）， 如果你知道如何通过网络进行分区的挂载，那么 /usr 确实可以分享给区域网络内的其他主机来使用喔！其实 usr 是 Unix Software Resource 的缩写， 也就是 “Unix 操作系统软件资源” 所放置的目录，而不是使用者的数据啦！这点要注意。 FHS 建议所有软件开发者，应该将他们的数据合理的分别放置到这个目录下的次目录，而不要自行创建该软件自己独立的目录。因为是所有系统默认的软件（distribution 发布者提供的软件）都会放置到 /usr 下面，因此这个目录有点类似 Windows 系统的 <code>C:\\Windows\\ （当中的一部份） + C:\\Programfiles\\</code>  这两个目录的综合体，系统刚安装完毕时，这个目录会占用最多的硬盘容量</li>\n</ul>\n<h2 id=\"var-的意义与内容\"><a class=\"markdownIt-Anchor\" href=\"#var-的意义与内容\">#</a> /var 的意义与内容：</h2>\n<ul>\n<li>如果 /usr 是安装时会占用较大硬盘容量的目录，那么 /var 就是在系统运行后才会渐渐占用硬盘容量的目录。 因为 /var 目录主要针对常态性变动的文件，包括高速缓存（cache）、登录文件（log file）以及某些软件运行所产生的文件， 包括程序文件（lock file, run file），或者例如 MySQL 数据库的文件等等</li>\n</ul>\n<h2 id=\"目录树\"><a class=\"markdownIt-Anchor\" href=\"#目录树\">#</a> 目录树</h2>\n<ul>\n<li>目录树的启始点为根目录 （/, root）；</li>\n<li>每一个目录不止能使用本地端的 partition 的文件系统，也可以使用网络上的 filesystem。举例来说， 可以利用 Network File System （NFS） 服务器挂载某特定目录等。</li>\n<li>每一个文件在此目录树中的文件名（包含完整路径）都是独一无二的。</li>\n</ul>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7Ftbsx.png\" alt=\"directorytree\"></p>\n<h2 id=\"绝对路径-相对路径\"><a class=\"markdownIt-Anchor\" href=\"#绝对路径-相对路径\">#</a> 绝对路径、相对路径</h2>\n<ul>\n<li>绝对路径：由根目录（/）开始写起的文件名或目录名称， 例如  <code>/home/dmtsai/.bashrc</code> ；</li>\n<li>相对路径：相对于目前路径的文件名写法。 例如  <code>./home/dmtsai</code>  或 <code>../../home/dmtsai/ </code> 等等。反正开头不是 / 就属于相对路径的写法</li>\n</ul>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://peter-pan001.github.io/my-blog/Linux/%E6%9B%B4%E6%8D%A2%E6%B8%85%E5%8D%8E%E6%BA%90/",
            "url": "https://peter-pan001.github.io/my-blog/Linux/%E6%9B%B4%E6%8D%A2%E6%B8%85%E5%8D%8E%E6%BA%90/",
            "title": "更换清华源",
            "date_published": "2022-01-09T06:08:20.000Z",
            "content_html": "<h2 id=\"具体步骤\"><a class=\"markdownIt-Anchor\" href=\"#具体步骤\">#</a> 具体步骤</h2>\n<ul>\n<li><code>rm -rf /etc/yum.repos.d/*</code> ，删除 /etc/yum.repos.d/ 的所有文件</li>\n<li>进入 /etc/yum.repos.d： <code>cd /etc/yum.repos.d/</code> , 使用 <code>ls</code>  查看该目录下所有文件，找到 <code>CentOS-Base.repo</code>  文件，没有则用 <code>touch</code>  创建文件</li>\n<li>进入 CentOS-Base.repo： <code>vi CentOS-Base.repo</code></li>\n</ul>\n<pre><code># CentOS-Base.repo\n#\n# The mirror system uses the connecting IP address of the client and the\n# update status of each mirror to pick mirrors that are updated to and\n# geographically close to the client.  You should use this for CentOS updates\n# unless you are manually picking other mirrors.\n#\n# If the mirrorlist= does not work for you, as a fall back you can try the\n# remarked out baseurl= line instead.\n#\n#\n\n[base]\nname=CentOS-$releasever - Base\nbaseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/os/$basearch/\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n#released updates\n[updates]\nname=CentOS-$releasever - Updates\nbaseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/updates/$basearch/\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n#additional packages that may be useful\n[extras]\nname=CentOS-$releasever - Extras\nbaseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/extras/$basearch/\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n#additional packages that extend functionality of existing packages\n[centosplus]\nname=CentOS-$releasever - Plus\nbaseurl=http://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/centosplus/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n</code></pre>\n<ul>\n<li>改为以上的 url 路径</li>\n<li>使用  <code>yum clean all</code>  清理 yum</li>\n<li>使用 <code>yum makecache</code></li>\n<li>使用 <code>yum update</code></li>\n</ul>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://peter-pan001.github.io/my-blog/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%8F%8Ayum%E6%BA%90%E9%97%AE%E9%A2%98/",
            "url": "https://peter-pan001.github.io/my-blog/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%8F%8Ayum%E6%BA%90%E9%97%AE%E9%A2%98/",
            "title": "网络配置及yum源问题",
            "date_published": "2022-01-09T06:06:31.000Z",
            "content_html": "<h1 id=\"centos7最小化安装后的网络配置\"><a class=\"markdownIt-Anchor\" href=\"#centos7最小化安装后的网络配置\">#</a> centOS7 最小化安装后的网络配置</h1>\n<h2 id=\"配置基本的网络信息\"><a class=\"markdownIt-Anchor\" href=\"#配置基本的网络信息\">#</a> 配置基本的网络信息</h2>\n<ul>\n<li>在安装程序的以太网配置中设置手动，添加如下信息\n<ul>\n<li>ip 地址</li>\n<li>子网掩码</li>\n<li>网关</li>\n<li>DNS 服务器</li>\n</ul>\n</li>\n<li>设置本地 localhost 地址</li>\n</ul>\n<h2 id=\"安装net-tools\"><a class=\"markdownIt-Anchor\" href=\"#安装net-tools\">#</a> 安装 net-tools</h2>\n<blockquote>\n<p>centOS 最小化安装默认没有 yum 、ifconfig 等常用命令，需要安装 net-tools 启用</p>\n</blockquote>\n<ol>\n<li>首先输入 id 与 pwd 登录终端</li>\n<li>终端输入以下命令：\n<ul>\n<li><code>cd  /etc/sysconfig/network-scripts</code></li>\n<li><code>vi ifcfg-ens33</code></li>\n</ul>\n</li>\n<li>进入 ifcfg 配置文件后，将 <code>ONBOOT=no</code>  改为 <code>ONBOOT=yes</code> ，在把 <code>BOOTPROTO</code>  设为 <code>static</code></li>\n<li>重启网卡： <code>service network restart</code></li>\n<li>使用 <code>ip addr</code> ，查看网络信息</li>\n<li>然后在终端输入命令安装 net-tools： <code>yum install net-tools</code></li>\n</ol>\n<h2 id=\"命令行安装vmware-tools\"><a class=\"markdownIt-Anchor\" href=\"#命令行安装vmware-tools\">#</a> 命令行安装 VMware-tools</h2>\n<blockquote>\n<p>若使用虚拟机学习 linux，安装 VMWare-tools 来对虚拟机与主机之间的切换</p>\n</blockquote>\n<ol>\n<li>在虚拟机软件的界面点击虚拟机，找到安装 VMware Tools 并点击</li>\n<li>在终端输入 <code>ls /dev</code></li>\n<li>输入 <code>mkdir /mnt/cdrom</code>  在 <code>/mnt</code>  目录下创建一个名为 <code>cdrom</code>  的目录</li>\n<li>输入 <code>mount -t iso9660 /dev/cdrom /mnt/cdrom</code>  将光盘挂载到 <code>/mnt/cdrom</code>  目录</li>\n<li>输入 “ls /mnt/cdrom/” 查看内容，输入 <code>cp /mnt/cdrom/VMwareTools-9.2.0-799703.tar.gz /root/vm.tar.gz</code> , 将名为 “VMwareTools-9.2.0-799703.tar.gz” 复制到 /root 目录下，并重新命名为 vm.tar.gz。<mark>(此时的版本后缀以本机为准)</mark></li>\n<li>在根目录下输入 <code>ls</code>  查看文件，输入 <code>tar -xzf vm.tar.gz</code>  将文件解压，输入 “ls” 查看文件，可发现新增目录 “vmware-tools-distrib”</li>\n<li>输入 <code>cd vmware-tools-distrib/</code>  进入名为 “vmware-tools-distrib” 的目录，输入 <code>./vmware-install.pl</code>  尝试安装，出现错误 “-bash: ./vmware-install.pl: /usr/bin/per: bad interpreter: No such file or directory”，表明未安装编译环境。</li>\n<li>输入 <code>yum -y install perl gcc make kernel-headers kernel-devel</code>  开始安装。</li>\n<li>在 “vmware-tools-distrib” 目录下重新输入 <code>./vmware-install.pl</code>  开始安装，一路上按回车键即可。</li>\n</ol>\n<h1 id=\"遇到突然ping不通外网的问题\"><a class=\"markdownIt-Anchor\" href=\"#遇到突然ping不通外网的问题\">#</a> 遇到突然 ping 不通外网的问题</h1>\n<ul>\n<li>终端输入以下命令：\n<ul>\n<li><code>systemctl restart NetworkManager</code></li>\n<li><code>systemctl restart network</code></li>\n<li><code>ip addr</code></li>\n</ul>\n</li>\n<li>重新 <code>ping</code>  即可</li>\n</ul>\n<h1 id=\"出现yum源报错file-contains-no-section-headers的解决方案\"><a class=\"markdownIt-Anchor\" href=\"#出现yum源报错file-contains-no-section-headers的解决方案\">#</a> 出现 yum 源报错：File contains no section headers 的解决方案</h1>\n<ol>\n<li>删除 <code>yum.repos.d</code>  目录内的所有文件： <code>rm -f /etc/yum.repos.d/*  </code></li>\n<li>下载阿里镜像： <code>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo </code></li>\n<li>清理缓存： <code>yum clean all</code></li>\n<li>验证： <code>sudo yum makecache</code> ，出现下图即为换源成功！<br>\n<img data-src=\"https://s4.ax1x.com/2022/01/09/7FYDjx.png\" alt=\"linuxyum\"></li>\n</ol>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://peter-pan001.github.io/my-blog/Linux/Linux%E5%BC%80%E7%AF%87/",
            "url": "https://peter-pan001.github.io/my-blog/Linux/Linux%E5%BC%80%E7%AF%87/",
            "title": "Linux开篇",
            "date_published": "2022-01-09T06:01:50.000Z",
            "content_html": "<h1 id=\"linux是什么\"><a class=\"markdownIt-Anchor\" href=\"#linux是什么\">#</a> Linux 是什么？</h1>\n<ul>\n<li>一套操作系统 OS</li>\n<li>处于计算机的核心与系统调用接口层</li>\n</ul>\n<h1 id=\"谁发明的\"><a class=\"markdownIt-Anchor\" href=\"#谁发明的\">#</a> 谁发明的？</h1>\n<ul>\n<li>Linus Torvalds（托瓦兹，1969 年出生）</li>\n</ul>\n<h1 id=\"当前it的角色定位\"><a class=\"markdownIt-Anchor\" href=\"#当前it的角色定位\">#</a> 当前 IT 的角色定位</h1>\n<ol>\n<li>\n<p>企业环境</p>\n<ul>\n<li>充当网络服务器，得益于 Linux 的稳定性，并且 Linux 与各大硬件厂商的深度合作如，Dell、HP、IBM 及 VMware 等</li>\n<li>关键服务的应用，如一些安全性可靠性高的操作，如充当金融账户接口任务</li>\n<li>高性能运算服务</li>\n</ul>\n</li>\n<li>\n<p>个人环境</p>\n<ul>\n<li>桌面电脑 Desktop。日常收发邮件，处理办公任务等</li>\n<li>移动端。如手机</li>\n<li>嵌入式系统。一些微计算机控制器，如路由器、robot 控制芯片，车机控制系统等</li>\n</ul>\n</li>\n<li>\n<p>云端</p>\n<ul>\n<li>云程序。硬件虚拟化，把实体主机变成逻辑上独立的虚拟硬件主机，实现一台实体机，多个 OS 同时运行</li>\n<li>端设备。树莓派</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"linux学习方向\"><a class=\"markdownIt-Anchor\" href=\"#linux学习方向\">#</a> Linux 学习方向</h1>\n<ol>\n<li>基本的计算机软硬件原理，计组，计网操作系统原理</li>\n<li>认识 linux 的结构，如何安装，使用 <code>man page</code>  等</li>\n<li>了解 Linux 文件系统与磁盘管理</li>\n<li>学习 Shell 与 Shell 脚本</li>\n<li>熟悉 Linux 权限管理</li>\n<li>学会如何充当一位 Linux 系统管理员的角色，分析登录文件，模块管理，备份策略等</li>\n<li>学看源码</li>\n</ol>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://peter-pan001.github.io/my-blog/Linux/LINUX%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/",
            "url": "https://peter-pan001.github.io/my-blog/Linux/LINUX%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/",
            "title": "LINUX课程笔记",
            "date_published": "2021-06-18T14:01:07.000Z",
            "content_html": "<h1 id=\"linux课程\"><a class=\"markdownIt-Anchor\" href=\"#linux课程\">#</a> Linux 课程</h1>\n<blockquote>\n<p>本篇文章基于《linux 就该这么学》编写，仅包含学校课程学习内容，并未包括该书本的完整知识！</p>\n</blockquote>\n<h2 id=\"重置root管理员密码\"><a class=\"markdownIt-Anchor\" href=\"#重置root管理员密码\">#</a> 重置 ROOT 管理员密码</h2>\n<ol>\n<li>重启 Linux 系统主机并出现引导界面时，按下键盘上的 <code> e 键</code> 进入内核编辑界面，如图所示</li>\n</ol>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7FJ3wD.png\" alt=\"yindao\"></p>\n<ol start=\"2\">\n<li>在 linux16 参数这行的最后面追加 <code>rd.break</code>  参数，然后按下  <code>Ctrl + X</code>  组合键来运行修改过的内核程序，如图所示</li>\n</ol>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7FJwOf.png\" alt=\"neihe\"></p>\n<ol start=\"3\">\n<li>大约 30 秒过后，进入到系统的紧急求援模式</li>\n</ol>\n<p><img data-src=\"https://s4.ax1x.com/2022/01/09/7FJ6Yj.png\" alt=\"jjqy\"></p>\n<ol start=\"4\">\n<li>依次输入以下命令，等待系统重启操作完毕，然后就可以使用新密码 linuxprobe 来登录 Linux 系统了</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mount</span> -o remount,rw /sysroot </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chroot</span> /sysroot </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">passwd</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">touch</span> /.autorelabel </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">exit</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">reboot</span></pre></td></tr></table></figure><h2 id=\"查看帮助命令\"><a class=\"markdownIt-Anchor\" href=\"#查看帮助命令\">#</a> 查看帮助命令</h2>\n<ol>\n<li>长格式</li>\n</ol>\n<pre><code class=\"language-s\">man --help\n</code></pre>\n<ol start=\"2\">\n<li>短格式</li>\n</ol>\n<pre><code class=\"language-s\">man -h\n</code></pre>\n<h2 id=\"常用的系统工作命令\"><a class=\"markdownIt-Anchor\" href=\"#常用的系统工作命令\">#</a> 常用的系统工作命令</h2>\n<h3 id=\"echo\"><a class=\"markdownIt-Anchor\" href=\"#echo\">#</a> echo</h3>\n<ul>\n<li><code>echo</code>  命令用于在终端输出字符串或变量提取后的值，格式为 <code>echo [字符串 | $变量]</code></li>\n<li>例如我们使用 $ 变量的方式提取变量 SHELL 的值，并将其输出到屏幕上：</li>\n</ul>\n<pre><code class=\"language-s\">[root@linuxprobe ~]# echo $SHELL \n/bin/bash\n</code></pre>\n<ul>\n<li>或者直接在  <code>echo</code>  后面加上要在命令行显示的字符信息:</li>\n</ul>\n<pre><code class=\"language-s\"># echo welcome\nwelcome\n</code></pre>\n<h3 id=\"date\"><a class=\"markdownIt-Anchor\" href=\"#date\">#</a> date</h3>\n<ul>\n<li><code>date</code>  命令用于显示及设置系统的时间或日期，格式为  <code>date [选项] [+指定的格式]</code></li>\n</ul>\n<ol>\n<li>按照默认格式查看当前系统时间的 date 命令</li>\n</ol>\n<pre><code class=\"language-s\">[root@linuxprobe ~]# date \nMon Aug 24 16:11:23 CST 2017\n</code></pre>\n<ol start=\"2\">\n<li>按照 “年 - 月 - 日 小时：分钟：秒” 的格式查看当前系统时间的  <code>date</code>  命令</li>\n</ol>\n<pre><code class=\"language-s\">[root@linuxprobe ~]# date &quot;+%Y-%m-%d %H:%M:%S&quot; \n2017-08-24 16:29:12\n</code></pre>\n<h3 id=\"reboot\"><a class=\"markdownIt-Anchor\" href=\"#reboot\">#</a> reboot</h3>\n<ul>\n<li><code>reboot</code>  命令用于重启系统，默认只能使用 root 管理员来重启</li>\n</ul>\n<pre><code class=\"language-s\">[root@linuxprobe ~]# reboot\n</code></pre>\n<h3 id=\"poweroff\"><a class=\"markdownIt-Anchor\" href=\"#poweroff\">#</a> poweroff</h3>\n<ul>\n<li><code>poweroff</code>  命令用于关闭系统，此默认只有 root 管理员才可以关闭电脑</li>\n</ul>\n<pre><code class=\"language-s\">[root@linuxprobe ~]# poweroff \n</code></pre>\n<h3 id=\"wget\"><a class=\"markdownIt-Anchor\" href=\"#wget\">#</a> wget</h3>\n<ul>\n<li>\n<p><code>wget</code>  命令用于在终端中下载网络文件，格式为  <code>wget [参数] 下载地址</code></p>\n</li>\n<li>\n<p><strong>命令参数</strong></p>\n<ul>\n<li><code>wget -b</code>  后台下载模式</li>\n<li><code>wget -P</code>  下载到指定目录</li>\n<li><code>wget -t</code>  最大尝试次数</li>\n<li><code>wget -c</code>  断点续传</li>\n<li><code>wget -p</code>  下载页面内所有资源，包括图片、视频等</li>\n<li><code>wget -r</code>  递归下载</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ps\"><a class=\"markdownIt-Anchor\" href=\"#ps\">#</a> ps</h3>\n<ul>\n<li><code>ps</code>  命令用于查看系统中的进程状态，格式为 <code>ps [参数]</code> (process status)</li>\n<li><strong>命令参数</strong>\n<ul>\n<li><code>wget -a</code>  显示所有进程（包括其他用户的进程）</li>\n<li><code>wget -u</code>  用户以及其他详细信息</li>\n<li><code>wget -x</code>  显示没有控制终端的进程</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"top\"><a class=\"markdownIt-Anchor\" href=\"#top\">#</a> top</h3>\n<ul>\n<li><code>top</code>  命令用于动态地监视进程活动与系统负载等信息，其格式为  <code>top</code></li>\n</ul>\n<h3 id=\"pidof\"><a class=\"markdownIt-Anchor\" href=\"#pidof\">#</a> pidof</h3>\n<ul>\n<li><code>pidof</code>  命令用于查询某个指定服务进程的 PID 值，格式为  <code>pidof [参数] [服务名称]</code></li>\n</ul>\n<pre><code class=\"language-s\">[root@linuxprobe ~]# pidof sshd \n2156\n</code></pre>\n<h3 id=\"kill\"><a class=\"markdownIt-Anchor\" href=\"#kill\">#</a> kill</h3>\n<ul>\n<li><code>kill</code>  命令用于终止某个指定 PID 的服务进程，格式为 <code>kill [参数] [进程 PID]</code></li>\n</ul>\n<h3 id=\"killall\"><a class=\"markdownIt-Anchor\" href=\"#killall\">#</a> killall</h3>\n<ul>\n<li><code>killall</code>  命令用于终止某个指定名称的服务所对应的全部进程，格式为： <code>killall [参数] [进程名称]</code></li>\n</ul>\n<hr>\n<h2 id=\"系统状态检测命令\"><a class=\"markdownIt-Anchor\" href=\"#系统状态检测命令\">#</a> 系统状态检测命令</h2>\n<h3 id=\"ifconfig\"><a class=\"markdownIt-Anchor\" href=\"#ifconfig\">#</a> ifconfig</h3>\n<ul>\n<li><code>ifconfig</code>  命令用于获取网卡配置与网络状态等信息，格式为  <code>ifconfig [网络设备] [参数]</code></li>\n<li>使用  <code>ifconfig</code>  命令来查看本机当前的网卡配置与网络状态等信息时，其实主要查看的就是网卡名称、inet 参数后面的 IP 地址、ether 参数后面的网卡物理地址（又称为 MAC 地址），以及 RX、TX 的接收数据包与发送数据包的个数及累计流量</li>\n</ul>\n<h3 id=\"uname\"><a class=\"markdownIt-Anchor\" href=\"#uname\">#</a> uname</h3>\n<ul>\n<li><code>uname</code>  命令用于查看系统内核与系统版本等信息，格式为 <code>uname [-a]</code></li>\n<li>在使用  <code>uname</code>  命令时，一般会固定搭配上 <code>-a</code>  参数来完整地查看当前系统的内核名称、主机名、内核发行版本、节点名、系统时间、硬件名称、硬件平台、处理器类型以及操作系统名称等信息</li>\n</ul>\n<pre><code class=\"language-s\">[root@linuxprobe ~]# uname -a \nLinux linuxprobe.com 3.10.0-123.el7.x86_64 #1 SMP Mon May 5 11:16:57 EDT 2017 \nx86_64 x86_64 x86_64 GNU/Linux \n</code></pre>\n<h3 id=\"uptime\"><a class=\"markdownIt-Anchor\" href=\"#uptime\">#</a> uptime</h3>\n<ul>\n<li><code>uptime</code>  用于查看系统的负载信息，格式为  <code>uptime</code></li>\n</ul>\n<pre><code class=\"language-s\">[root@linuxprobe ~]# uptime \n22:49:55 up 10 min, 2 users, load average: 0.01, 0.19, 0.18\n</code></pre>\n<h3 id=\"free\"><a class=\"markdownIt-Anchor\" href=\"#free\">#</a> free</h3>\n<ul>\n<li><code>free</code>  用于显示当前系统中内存的使用量信息，格式为 <code>free [-h]</code></li>\n</ul>\n<pre><code class=\"language-s\">[root@linuxprobe ~]# free -h \n</code></pre>\n<h3 id=\"who\"><a class=\"markdownIt-Anchor\" href=\"#who\">#</a> who</h3>\n<ul>\n<li><code>who</code>  用于查看当前登入主机的用户终端信息，格式为 <code>who [参数]</code></li>\n</ul>\n<h3 id=\"last\"><a class=\"markdownIt-Anchor\" href=\"#last\">#</a> last</h3>\n<ul>\n<li><code>last</code>  命令用于查看所有系统的登录记录，格式为 <code>last [参数]</code></li>\n</ul>\n<h3 id=\"history\"><a class=\"markdownIt-Anchor\" href=\"#history\">#</a> history</h3>\n<ul>\n<li><code>history</code>  命令用于显示历史执行过的命令，格式为 <code>history [-c]</code></li>\n</ul>\n<h2 id=\"工作目录切换命令\"><a class=\"markdownIt-Anchor\" href=\"#工作目录切换命令\">#</a> 工作目录切换命令</h2>\n<h3 id=\"pwd\"><a class=\"markdownIt-Anchor\" href=\"#pwd\">#</a> pwd</h3>\n<ul>\n<li><code>pwd</code>  命令用于显示用户当前所处的目录。如果用户不知道自己当前所处的目录，就必须使用它。例如：</li>\n</ul>\n<pre><code class=\"language-s\">[webber@localhost ~]$ pwd\n/home/webber                  //webber用户当前所在的目录\n[webber@localhost ~]$ su -        //从Webber用户切换到root用户\n</code></pre>\n<h3 id=\"cd\"><a class=\"markdownIt-Anchor\" href=\"#cd\">#</a> cd</h3>\n<ul>\n<li><code>cd</code>  命令用于切换工作路径，格式为 <code>cd [目录名称]</code></li>\n<li>除了常见的切换目录方式，还可以使用 <code>cd -</code>  命令返回到上一次所处的目录，使用 <code>cd..</code>  命令进入上级目录，以及使用 <code>cd ~</code>  命令切换到当前用户的家目录，亦或使用 <code>cd ~username</code>  切换到其他用户的家目录</li>\n</ul>\n<ol>\n<li>返回到上一次的目录</li>\n</ol>\n<pre><code class=\"language-s\">[root@linuxprobe bin]# cd - \n/etc \n[root@linuxprobe etc]# \n</code></pre>\n<ol start=\"2\">\n<li>快速切换到用户的家目录</li>\n</ol>\n<pre><code class=\"language-s\">[root@linuxprobe etc]# cd ~ \n[root@linuxprobe ~]# \n</code></pre>\n<h3 id=\"ls\"><a class=\"markdownIt-Anchor\" href=\"#ls\">#</a> ls</h3>\n<ul>\n<li><code>ls</code>  命令用于显示目录中的文件信息，格式为 <code>ls [选项] [文件] </code></li>\n</ul>\n",
            "tags": [
                "linux"
            ]
        }
    ]
}