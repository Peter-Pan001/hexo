<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://peter-pan001.github.io/my-blog</id>
    <title>理 想 净 土 • Posts by &#34;算法与数据结构&#34; category</title>
    <link href="https://peter-pan001.github.io/my-blog" />
    <updated>2021-04-12T11:48:22.000Z</updated>
    <category term="Java" />
    <category term="linux" />
    <category term="Linux" />
    <category term="network" />
    <category term="MySQL" />
    <category term="云计算" />
    <category term="JavaScript" />
    <category term="git、github" />
    <category term="html" />
    <category term="css" />
    <category term="前端" />
    <category term="数据分析" />
    <category term="算法与数据结构" />
    <category term="软考网络工程师" />
    <entry>
        <id>https://peter-pan001.github.io/my-blog/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BB%AA%E8%AE%BA/</id>
        <title>数据结构之绪论</title>
        <link rel="alternate" href="https://peter-pan001.github.io/my-blog/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BB%AA%E8%AE%BA/"/>
        <content type="html">&lt;h1 id=&#34;数据结构之绪论&#34;&gt;&lt;a href=&#34;#数据结构之绪论&#34; class=&#34;headerlink&#34; title=&#34;数据结构之绪论&#34;&gt;&lt;/a&gt;数据结构之绪论&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&#34;数据结构——知识架构&#34;&gt;&lt;a href=&#34;#数据结构——知识架构&#34; class=&#34;headerlink&#34; title=&#34;数据结构——知识架构&#34;&gt;&lt;/a&gt;数据结构——知识架构&lt;/h2&gt;&lt;p&gt; &lt;img data-src=&#34;https://z3.ax1x.com/2021/04/12/cD0qSO.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;什么是数据？&#34;&gt;&lt;a href=&#34;#什么是数据？&#34; class=&#34;headerlink&#34; title=&#34;什么是数据？&#34;&gt;&lt;/a&gt;什么是数据？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;是信息的载体，是可以让计算机识别的并处理的符号集合，从底层来说就是一些二进制的0和1。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据元素与数据项&#34;&gt;&lt;a href=&#34;#数据元素与数据项&#34; class=&#34;headerlink&#34; title=&#34;数据元素与数据项&#34;&gt;&lt;/a&gt;数据元素与数据项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据的基本单位就是数据元素，多个数据项构成一个数据元素，数据项是数据元素的最小表示单位&lt;/li&gt;
&lt;li&gt;&lt;p&gt;但对于现实世界中，评判什么是数据元素与数据项，需要根据具体需求来定义。例如，对于一个学生管理系统，每一个学生的账号就是一个数据元素，而每个学生的性别、年龄、爱好等个人信息就是一个个的数据项，这些数据项构成了学生这个数据元素。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z3.ax1x.com/2021/04/12/cD0XOH.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据结构与数据对象&#34;&gt;&lt;a href=&#34;#数据结构与数据对象&#34; class=&#34;headerlink&#34; title=&#34;数据结构与数据对象&#34;&gt;&lt;/a&gt;数据结构与数据对象&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据结构是相互具有一种或多种特定关系的数据元素的集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据对象时具有==相同性质==的数据元素的集合，是数据的子集&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;https://z3.ax1x.com/2021/04/12/cD0zTI.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据的逻辑结构&#34;&gt;&lt;a href=&#34;#数据的逻辑结构&#34; class=&#34;headerlink&#34; title=&#34;数据的逻辑结构&#34;&gt;&lt;/a&gt;数据的逻辑结构&lt;/h3&gt;&lt;h4 id=&#34;集合&#34;&gt;&lt;a href=&#34;#集合&#34; class=&#34;headerlink&#34; title=&#34;集合&#34;&gt;&lt;/a&gt;集合&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每个元素同属于一个集合&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;线性结构&#34;&gt;&lt;a href=&#34;#线性结构&#34; class=&#34;headerlink&#34; title=&#34;线性结构&#34;&gt;&lt;/a&gt;线性结构&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每个线性结构中只有一个前驱结点，线性结构中的每个数据元素（除了最后一个元素外）都只有唯一的后继结点，相互之间是一对一的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;树形结构&#34;&gt;&lt;a href=&#34;#树形结构&#34; class=&#34;headerlink&#34; title=&#34;树形结构&#34;&gt;&lt;/a&gt;树形结构&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每个树形结构都有一个根结点，每个子节点都只有唯一的父节点，而每个父节点不止一个子节点，相互之间是一对多的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;图（网）结构&#34;&gt;&lt;a href=&#34;#图（网）结构&#34; class=&#34;headerlink&#34; title=&#34;图（网）结构&#34;&gt;&lt;/a&gt;图（网）结构&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;各个数据元素间都有一定的关系，相互之间是多对多的关系&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z3.ax1x.com/2021/04/12/cDB9tP.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据的物理结构&#34;&gt;&lt;a href=&#34;#数据的物理结构&#34; class=&#34;headerlink&#34; title=&#34;数据的物理结构&#34;&gt;&lt;/a&gt;数据的物理结构&lt;/h3&gt;&lt;h4 id=&#34;顺序存储&#34;&gt;&lt;a href=&#34;#顺序存储&#34; class=&#34;headerlink&#34; title=&#34;顺序存储&#34;&gt;&lt;/a&gt;顺序存储&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;即逻辑上连续的数据元素在物理内存空间内也必须是连续的内存地址空间来进行存储，元素之间的关系由存储结构的邻接关系所体现&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z3.ax1x.com/2021/04/12/cDBF1S.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;链式存储&#34;&gt;&lt;a href=&#34;#链式存储&#34; class=&#34;headerlink&#34; title=&#34;链式存储&#34;&gt;&lt;/a&gt;链式存储&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在逻辑上相邻的元素可以在物理的存储空间中不相邻，只要用指针来表示各个元素间的逻辑关系即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z3.ax1x.com/2021/04/12/cDBk6g.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;索引存储&#34;&gt;&lt;a href=&#34;#索引存储&#34; class=&#34;headerlink&#34; title=&#34;索引存储&#34;&gt;&lt;/a&gt;索引存储&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在内存存储数据元素的同时，再创建索引表通过索引表内的索引项指向内存中的数据元素，形成某种相互关系&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z3.ax1x.com/2021/04/12/cDBnkq.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;散列存储&#34;&gt;&lt;a href=&#34;#散列存储&#34; class=&#34;headerlink&#34; title=&#34;散列存储&#34;&gt;&lt;/a&gt;散列存储&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;根据元素关键字直接计算出该元素所在内存的地址值，又称哈希（hash）存储&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据的运算&#34;&gt;&lt;a href=&#34;#数据的运算&#34; class=&#34;headerlink&#34; title=&#34;数据的运算&#34;&gt;&lt;/a&gt;数据的运算&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据的运算包括数据的定义与实现，定义偏向于逻辑层面，即针对运算的功能；而实现偏向于物理层面，即针对运算的具体步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;&lt;a href=&#34;#数据类型&#34; class=&#34;headerlink&#34; title=&#34;数据类型&#34;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个值的集合和定义此集合的一组操作的总称&lt;/li&gt;
&lt;li&gt;分为原子类型和结构类型：&lt;ul&gt;
&lt;li&gt;原子类型：即不可再分的数据类型，例如&lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;结构类型：其值可以分成若干部分，如一个方法中的各成员变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;抽象数据类型&#34;&gt;&lt;a href=&#34;#抽象数据类型&#34; class=&#34;headerlink&#34; title=&#34;抽象数据类型&#34;&gt;&lt;/a&gt;抽象数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用数学化的语言定义的数据逻辑结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;算法——知识架构&#34;&gt;&lt;a href=&#34;#算法——知识架构&#34; class=&#34;headerlink&#34; title=&#34;算法——知识架构&#34;&gt;&lt;/a&gt;算法——知识架构&lt;/h2&gt;&lt;p&gt;  &lt;img data-src=&#34;https://z3.ax1x.com/2021/04/12/cDBQpT.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;什么是算法？&#34;&gt;&lt;a href=&#34;#什么是算法？&#34; class=&#34;headerlink&#34; title=&#34;什么是算法？&#34;&gt;&lt;/a&gt;什么是算法？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;程序$=$数据结构$+$算法&lt;/li&gt;
&lt;li&gt;数据结构：即把需求写入计算机中，用计算机可以理解的语言来把需求的信息存进计算机中，并对其结构进行操作&lt;/li&gt;
&lt;li&gt;算法：解决需求的一种方案或方法，处理信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;算法的特性&#34;&gt;&lt;a href=&#34;#算法的特性&#34; class=&#34;headerlink&#34; title=&#34;算法的特性&#34;&gt;&lt;/a&gt;算法的特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有穷性&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;算法是有穷的，但程序时无穷的&lt;/li&gt;
&lt;li&gt;算法不可以是无限循环，这样的算法是死的，并且在有穷的时间内完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确定性&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;算法中的每条指令都是有意义的，输入同样的信息必须输出相同的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可行性&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;可通过已经实现的有限次运算步骤中实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有输入&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;一个算法必要要有0或多个输入，数量取决于需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有输出&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;一个算法必须要有一个或多个输出，不然会死循环！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;好的算法的特点&#34;&gt;&lt;a href=&#34;#好的算法的特点&#34; class=&#34;headerlink&#34; title=&#34;好的算法的特点&#34;&gt;&lt;/a&gt;好的算法的特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;正确性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须得出正确的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;可读性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以让人们很好的理解算法的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;健壮性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入错误数据时，不会输出莫名其妙的数据，而是通过判断来检测出输入数据的正误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;高效率与低内存&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即执行速度快，时间复杂度低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;算法效率的度量&#34;&gt;&lt;a href=&#34;#算法效率的度量&#34; class=&#34;headerlink&#34; title=&#34;算法效率的度量&#34;&gt;&lt;/a&gt;算法效率的度量&lt;/h3&gt;&lt;h4 id=&#34;时间复杂度&#34;&gt;&lt;a href=&#34;#时间复杂度&#34; class=&#34;headerlink&#34; title=&#34;时间复杂度&#34;&gt;&lt;/a&gt;时间复杂度&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;事前预估算法时间开销$T(n)$与问题规模$n$的关系&lt;/li&gt;
&lt;li&gt;它是一个函数，它定性描述该算法的运行时间。这是一个代表算法输入值的字符串的长度的函数。时间复杂度常用大O符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。例如，如果一个算法对于任何大小为 &lt;em&gt;n&lt;/em&gt; （必须比 $n_0$ 大）的输入，它至多需要 $5n^3 + 3n$ 的时间运行完毕，那么它的渐近时间复杂度是 O($n^3$)。(摘自Wikipedia)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;时间复杂度公式-nbsp-算法的渐进时间复杂度&#34;&gt;&lt;a href=&#34;#时间复杂度公式-nbsp-算法的渐进时间复杂度&#34; class=&#34;headerlink&#34; title=&#34;时间复杂度公式&amp;nbsp;(算法的渐进时间复杂度)&#34;&gt;&lt;/a&gt;时间复杂度公式&amp;nbsp;(算法的渐进时间复杂度)&lt;/h4&gt;&lt;script type=&#34;math/tex; mode=display&#34;&gt;T(n)=O(f(n))&lt;/script&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;其中$f(n)$ 表示每行代码执行次数之和，而 O 表示正比例关系，这个公式的全称是：==算法的渐进时间复杂度==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; for(int i = 0;i &amp;lt;= n;i++){
     int j = i;
     j++;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;假设每行代码的执行时间都是一样的，我们用$1$颗粒时间 来表示，那么这个例子的第一行耗时是1个颗粒时间，第三行的执行时间是 n个颗粒时间，第四行的执行时间也是 n个颗粒时间（第二行和第五行是符号，暂时忽略），那么总时间就是 1颗粒时间 + n颗粒时间 + n颗粒时间 ，即 (1+2n)个颗粒时间，即： $T(n) = (1+2n)颗粒时间$，从这个结果可以看出，这个算法的耗时是随着n的变化而变化，因此，我们可以简化的将这个算法的时间复杂度表示为：T(n) = O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;常见的时间复杂度量级有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常数阶 $O(1)$&lt;/li&gt;
&lt;li&gt;对数阶 $O(logN)$&lt;/li&gt;
&lt;li&gt;线性阶 $O(n)$&lt;/li&gt;
&lt;li&gt;线性对数阶 $O(nlogN)$&lt;/li&gt;
&lt;li&gt;平方阶 $O(n^2)$&lt;/li&gt;
&lt;li&gt;立方阶 $O(n^3)$&lt;/li&gt;
&lt;li&gt;K次方阶 $O(n^k)$&lt;/li&gt;
&lt;li&gt;指数阶 $(2^n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;时间复杂度运算&#34;&gt;&lt;a href=&#34;#时间复杂度运算&#34; class=&#34;headerlink&#34; title=&#34;时间复杂度运算&#34;&gt;&lt;/a&gt;时间复杂度运算&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;加法规则&lt;/strong&gt;&lt;/p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;T(n) = T_1(n) + T_2(n) = O(f(n)) + O(g(n)) = O(max(f(n), g(n)))&lt;/script&gt;&lt;ul&gt;
&lt;li&gt;多项相加，只保留最高阶的项，且系数变为1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;乘法规则&lt;/strong&gt;&lt;/p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;T(n) = T_1(n)×T_2(n) = O(f(n))×O(g(n)) = O(f(n)×g(n))&lt;/script&gt;&lt;ul&gt;
&lt;li&gt;多项相乘，全部保留&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;各常见时间复杂度关系&lt;/strong&gt;&lt;/p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;O(1)&lt;O(log_2 n)&lt;O(n)&lt;O(n log_2 n)&lt;O(n^2)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)&lt;/script&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;最坏时间复杂度&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最坏情况下算法的时间复杂度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;平均时间复杂度&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有输入示例等概率出现的情况下,算法的期望运行时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;最好时间复杂度&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最好情况下算法的时间复杂度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;空间复杂度&#34;&gt;&lt;a href=&#34;#空间复杂度&#34; class=&#34;headerlink&#34; title=&#34;空间复杂度&#34;&gt;&lt;/a&gt;空间复杂度&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;无论问题规模怎么变,算法运行所需的内存空间，都是固定的常量,算法空间复杂度为&lt;/p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;S(n) = O(1)&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;注:S表示 “Space”&lt;br&gt;算法原地工作——算法所需内存空间为常量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，同样反映的是一个趋势，因此我们用 S(n) 来定义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$S(n)=O(n)$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; void arr(int n){
     int arr1[n];
     int i;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;假设一个&lt;code&gt;int&lt;/code&gt;类型占&lt;code&gt;4B&lt;/code&gt;，则上面的代码占用的内存为：&lt;/p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;S(n)=4+4n+4&lt;/script&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;i&lt;/code&gt;变量占&lt;code&gt;4B&lt;/code&gt;，&lt;code&gt;n&lt;/code&gt;变量占&lt;code&gt;4B&lt;/code&gt;，数组 &lt;code&gt;arr[n]&lt;/code&gt;,占&lt;code&gt;4n&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$S(n)=O(n^2)$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; void one_arr(int n){
     int arr2[n][n];
     int i;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;此时上面的代码占用的内存为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$$S(n)=n^2+4$$
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简记为：$S(n)=O(n^2)$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$S(n)=O(n^2)+O(n)+O(1)$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; void one_arr1(int n){
     int arr2[n][n];
     int arr[n]
     int i;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;此时上面的代码占用的内存为：&lt;/p&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;S(n)=O(n^2)+O(n)+O(1)=O(n^2)&lt;/script&gt;&lt;ul&gt;
&lt;li&gt;只保留最高指数项&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MDQ3OTU1NQ==&#34;&gt;https://zhuanlan.zhihu.com/p/50479555&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;简书：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mNGNjYTVjZTA1NWE=&#34;&gt;https://www.jianshu.com/p/f4cca5ce055a&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="算法与数据结构" />
        <updated>2021-04-12T11:48:22.000Z</updated>
    </entry>
    <entry>
        <id>https://peter-pan001.github.io/my-blog/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</id>
        <title>算法入门教程</title>
        <link rel="alternate" href="https://peter-pan001.github.io/my-blog/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
        <content type="html">&lt;h1 id=&#34;算法入门&#34;&gt;&lt;a href=&#34;#算法入门&#34; class=&#34;headerlink&#34; title=&#34;算法入门&#34;&gt;&lt;/a&gt;算法入门&lt;/h1&gt;&lt;h2 id=&#34;初识算法&#34;&gt;&lt;a href=&#34;#初识算法&#34; class=&#34;headerlink&#34; title=&#34;初识算法&#34;&gt;&lt;/a&gt;初识算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;算法是最初为了解决数学上的问题，由于计算机编程与数学密切相关，因此算法也被广泛应用于计算机领域中。&lt;/li&gt;
&lt;li&gt;通过学习算法，可以更好地了解计算机底层的实现原理，对各程序有更加深刻的认识。&lt;/li&gt;
&lt;li&gt;算法可以帮助我们设计出更好的程序，优化程序的性能，对就职面试也有很大的帮助&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;算法的意义&#34;&gt;&lt;a href=&#34;#算法的意义&#34; class=&#34;headerlink&#34; title=&#34;算法的意义&#34;&gt;&lt;/a&gt;算法的意义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;算法是把人所想的点子（Idea）以编程语言的形式应用到机器或程序设计中&lt;/li&gt;
&lt;li&gt;人通过写算法表现自己的程序逻辑与设计方式，而通过编程语言作为载体，让计算机理解人们所要表达的设计逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;排序算法&#34;&gt;&lt;a href=&#34;#排序算法&#34; class=&#34;headerlink&#34; title=&#34;排序算法&#34;&gt;&lt;/a&gt;排序算法&lt;/h2&gt;&lt;h3 id=&#34;冒泡排序&#34;&gt;&lt;a href=&#34;#冒泡排序&#34; class=&#34;headerlink&#34; title=&#34;冒泡排序&#34;&gt;&lt;/a&gt;冒泡排序&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;冒泡排序（bubble Sort），是一种较简单的排序算法&lt;/li&gt;
&lt;li&gt;给定一组随机乱序的数组序列，通过比较相邻两个数的大小，按照从小到大的顺序 ，若前者比后者大，则交换位置，否则不需要；当经过一次循环迭代时，出现最大的数在该数组序列的末尾，此时已筛选出最大的数，即“浮出水面”，通过这种比较循环迭代的方式，类似于气泡浮出水面的形式，称为“冒泡”，这种方法也称“冒泡法”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;算法实现&#34;&gt;&lt;a href=&#34;#算法实现&#34; class=&#34;headerlink&#34; title=&#34;算法实现&#34;&gt;&lt;/a&gt;算法实现&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;详细步骤&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;对于给定的一个乱序的随机数组序列，比较相邻两个数，若前者比后者大，则交换。&lt;/li&gt;
&lt;li&gt;一轮循环后，出现最大的数，该数则跳出比较循环（根据此规律，每执行完一次循环，就会出现一个排好的数）&lt;/li&gt;
&lt;li&gt;重复执行步骤一，直到所有数字从小到大排列完成&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Java代码实现&#34;&gt;&lt;a href=&#34;#Java代码实现&#34; class=&#34;headerlink&#34; title=&#34;Java代码实现&#34;&gt;&lt;/a&gt;Java代码实现&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;import java.util.Arrays;

public class BubbleSort {

    public static void main(String[] args) {

        //初始化需要排序的数组
        int array[] = {9,2,11,7,12,5};

        //对需要排序的数组进行排序
        for (int i=1; i&amp;lt;array.length; i++){

            //针对待排序序列中除了已经排序好的元素之外，重复排序工作
            for(int j=0;j&amp;lt;array.length-i;j++){

                //当相邻两个元素需要交换时，交换相邻的两个元素
                if(array[j]&amp;gt;array[j+1]){
                    int temp = array[j];
                    array[j] = array[j+1];
                    array[j+1] = temp;
                }
            }
        }
        //打印出排序好的序列
        System.out.println(Arrays.toString(array));
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;插入排序&#34;&gt;&lt;a href=&#34;#插入排序&#34; class=&#34;headerlink&#34; title=&#34;插入排序&#34;&gt;&lt;/a&gt;插入排序&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;插入排序（Insert Sort），是一种较为简单的排序算法&lt;/li&gt;
&lt;li&gt;通过构建有序序列，对未排序的序列进行排序，有点类似于打扑克捋顺牌&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;算法实现-1&#34;&gt;&lt;a href=&#34;#算法实现-1&#34; class=&#34;headerlink&#34; title=&#34;算法实现&#34;&gt;&lt;/a&gt;算法实现&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;详细步骤&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;对于一个未排序的数组序列，选取第一个元素，该元素即被认定为已排序的，将该元素放入一个新的序列中，此序列存放排好数的序列&lt;/li&gt;
&lt;li&gt;把未排序的数组序列的第二个元素选取出来，对新数列的元素进行大小对比，从大到小排列&lt;/li&gt;
&lt;li&gt;后面的数重复进行步骤二&lt;/li&gt;
&lt;li&gt;直到旧数列的数全部被选到新序列中，此时的新序列则为排序好的序列&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Java实现&#34;&gt;&lt;a href=&#34;#Java实现&#34; class=&#34;headerlink&#34; title=&#34;Java实现&#34;&gt;&lt;/a&gt;Java实现&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;import java.util.Arrays;

public class InsertSort {

    public static void main(String[] args) {
        //初始化需要排序的数组
        int array[] = {9, 2, 11, 7, 12, 5};

        //初始化一个与待排序数组大小相同的数组，用来存放排序好的序列
        int sortArray[] = new int[array.length];

        //步骤1：待排序数组中选择第一个元素作为已经排序好的元素（数组的下标0表示第一个元素）
        sortArray[0] = array[0];

        //步骤2：依次遍历未排序的元素，将其插入已排序序列中
        for (int i = 1; i &amp;lt; array.length; i++) {
            //待排序元素
            int temp = array[i];
            //记录待排序元素需要插入已排序数组中的位置
            int index = i;
            //从已排序好的数组右边依次遍历数组，直到找到待排序元素需要插入的位置
            while(  index &amp;gt; 0  &amp;amp;&amp;amp; temp &amp;lt; sortArray[index-1] ){
                sortArray[index] = sortArray[index-1];
                index--;
            }
            //插入待排序元素
            sortArray[index] = temp;
        }

        //打印出排序好的序列
        System.out.println(Arrays.toString(sortArray));
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;选择排序&#34;&gt;&lt;a href=&#34;#选择排序&#34; class=&#34;headerlink&#34; title=&#34;选择排序&#34;&gt;&lt;/a&gt;选择排序&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;选择排序（Select Sort），一种较为直观的排序算法，具有存储空间小的特点&lt;/li&gt;
&lt;li&gt;通过对一个未排序的序列进行筛选，每次对整个序列进行筛选，筛选出最小的数，直到把所有的数都筛选完，即可得出最终的正确顺序&lt;/li&gt;
&lt;li&gt;选择排序的==主要优点与数据移动有关==。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的表进行排序总共进行至多$(n-1)$次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;算法实现-2&#34;&gt;&lt;a href=&#34;#算法实现-2&#34; class=&#34;headerlink&#34; title=&#34;算法实现&#34;&gt;&lt;/a&gt;算法实现&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;详细步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个未排序的序列，对整个序列进行数与数之间的比较，筛选出该序列中最小的数&lt;/li&gt;
&lt;li&gt;把筛选出的最小数与该序列的第一个元素的位置进行互换，此时序列的最小数就被选择到了序列的最前面&lt;/li&gt;
&lt;li&gt;每次循环迭代都会选出一个未排序序列中的最小数&lt;/li&gt;
&lt;li&gt;重复步骤1和2，得出最终的序列即为正确排序的序列（不需要开辟新的地址空间来存储新序列！！！）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;选出最小数的关键伪代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; //待排序的序列记为A，寻找最小元素的伪代码如下：
 min = A[0]
 for(int i=1;i&amp;lt;A.length;i++){
    if(A[i] &amp;lt; min){
      min = A[i]
    }
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Java实现-1&#34;&gt;&lt;a href=&#34;#Java实现-1&#34; class=&#34;headerlink&#34; title=&#34;Java实现&#34;&gt;&lt;/a&gt;Java实现&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;import java.util.Arrays;

public class SelectSort {

    public static void main(String[] args) {
        //初始化需要排序的数组
        int array[] = {9, 2, 11, 7, 12, 5};

        //依次进行选择排序，每次找出最小的元素，放入待排序的序列中
        for(int i=0;i&amp;lt;array.length;i++){

            //记录最小元素min和最小元素的数组下标索引minIndex
            int min = array[i];
            int minIndex = i;

            //在未排序的序列中找出最小的元素和对应数组中的位置
            for(int j=i+1;j&amp;lt;array.length;j++){
                if(array[j] &amp;lt; min){
                    min = array[j];
                    minIndex = j;
                }
            }

            //交换位置
            int temp = array[i];
            array[i] = array[minIndex];
            array[minIndex] = temp;
        }

        //打印出排序好的序列
        System.out.println(Arrays.toString(array));
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;希尔排序&#34;&gt;&lt;a href=&#34;#希尔排序&#34; class=&#34;headerlink&#34; title=&#34;希尔排序&#34;&gt;&lt;/a&gt;希尔排序&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;希尔排序（Shell Sort），也称为“缩小增量排序”，是插入排序的增强版，优先比较较远距离的元素&lt;/li&gt;
&lt;li&gt;插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；&lt;/li&gt;
&lt;li&gt;但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC84Nzc4MTczMQ==&#34;&gt;https://zhuanlan.zhihu.com/p/87781731&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;算法基本思想&#34;&gt;&lt;a href=&#34;#算法基本思想&#34; class=&#34;headerlink&#34; title=&#34;算法基本思想&#34;&gt;&lt;/a&gt;算法基本思想&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;设待排序列有n个元素，取一整数gap（$gap&amp;lt;n$）作为间隔，将全部元素分为gap个子序列，所有距离为gap的元素放在同一个子序列中&lt;/li&gt;
&lt;li&gt;在每一个子序列中分别采用直接插入排序&lt;/li&gt;
&lt;li&gt;然后缩小间隔gap，例如取$gap=\frac{gap}{2}$ ,重复上述的子序列划分和排序工作&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;算法实现-3&#34;&gt;&lt;a href=&#34;#算法实现-3&#34; class=&#34;headerlink&#34; title=&#34;算法实现&#34;&gt;&lt;/a&gt;算法实现&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;详细步骤&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;对于一个未排序的序列，首先对该序列进行“粗略排序”，例如取该序列元素个数的一半作为两个数的跨度（gap），即若元素个数为12，则$gap=6$，每跨越6个数进行两数比较（一号元素与六号元素，二号对七号……），然后两两成组即成了一个个小的子序列，每个子序列进行大小比较，换位后再回到原序列中，此时得到的就是“粗略排序”后的排序序列&lt;/li&gt;
&lt;li&gt;接着缩小gap的数值，对“粗略排序”好的序列再进行分组，由于已经进行了“粗略排序”，因此即使子序列的数量因gap值的缩小而增加，也不会花费太长的时间；每个子序列排好序后作为一个整体，进行直接插入排序&lt;/li&gt;
&lt;li&gt;重复步骤2，直到出现正确的序列&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;算法关键点&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;该算法对gap值的取值尤为关键&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Java实现-2&#34;&gt;&lt;a href=&#34;#Java实现-2&#34; class=&#34;headerlink&#34; title=&#34;Java实现&#34;&gt;&lt;/a&gt;Java实现&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;import java.util.Arrays;

public class ShellSort {

    public static void main(String[] args) {

        //初始化需要排序的数组
        int array[] = {9, 2, 11, 7, 12, 5};
        //初始化希尔排序的增量为数组长度
        int gap = array.length;
        //不断地进行插入排序，直至增量为1
        while (true) {
            //增量每次减半
            gap = gap/2;
            for (int i = 0; i &amp;lt; gap; i++) {
                //内部循环是一个插入排序
                for (int j = i + gap; j &amp;lt; array.length; j += gap) {
                    int temp = array[j];
                    int k = j - gap;
                    while (k &amp;gt;= 0 &amp;amp;&amp;amp; array[k] &amp;gt; temp) {
                        array[k + gap] = array[k];
                        k -= gap;
                    }
                    array[k + gap] = temp;
                }
            }
            //增量为1之后，希尔排序结束，退出循环
            if (gap == 1)
                break;
        }
        //打印出排序好的序列
        System.out.println(Arrays.toString(array));
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;快速排序&#34;&gt;&lt;a href=&#34;#快速排序&#34; class=&#34;headerlink&#34; title=&#34;快速排序&#34;&gt;&lt;/a&gt;快速排序&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;快速排序（Quick Sort），是一种效率比大多数排序算法都要高的排序算法&lt;/li&gt;
&lt;li&gt;快速排序实现的核心思想就是在待排序序列中选择一个基准值，然后将小于基准值的数字放在基准值左边，大于基准值的数字放在基准值右边，然后左右两边递归排序，整个排序过程中最关键部分就是寻找基准值在待排序序列中的索引位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;算法实现-4&#34;&gt;&lt;a href=&#34;#算法实现-4&#34; class=&#34;headerlink&#34; title=&#34;算法实现&#34;&gt;&lt;/a&gt;算法实现&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;详细步骤&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;给定一个未排序的序列，选取第一个元素作为基准值$key$，使用双指针$i$、$j$的方式，对第二个元素用$i$指向，对最后一个元素用$j$指向，然后$i++$ 直到指向的数比$key$基准值大，此时$i$停止；$j—$直到指向的数比$key$基准值小，此时$j$停止；$i$指向的数与$j$指向的数位置互换，这样，比$key$小的数就会在序列的左边，比$key$大的数就会在序列的右边&lt;/li&gt;
&lt;li&gt;在步骤一的$i$与$j$的位置继续进行循环，即$i++$与$j—$，直到出现步骤一的情况，交换两数位置&lt;/li&gt;
&lt;li&gt;当$i$与$j$两指针指向同一个数时，该数与基准值$key$交换位置，该数的位置即为基准值的位置，此时 以基准值为界限，分离出两个子序列，左边的子序列的数都比基准值$key$要小，右边的子序列的数都比基准值$key$要大。&lt;/li&gt;
&lt;li&gt;接着两个子序列再按照步骤一和步骤二的方法再每个子序列中在分离出两个子序列，此时整个序列有四个小的子序列，当所有序列都按照从小到大的顺序排列时，排序完成&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Java实现-3&#34;&gt;&lt;a href=&#34;#Java实现-3&#34; class=&#34;headerlink&#34; title=&#34;Java实现&#34;&gt;&lt;/a&gt;Java实现&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;import java.util.Arrays;

public class QuickSort {

    public static void main(String[] args) {
        //初始化需要排序的数组
        int array[] = {9, 2, 11, 7, 12, 5};
        //快速排序
        quickSort(array,0,array.length-1);
        //打印出排序好的序列
        System.out.println(Arrays.toString(array));
    }

    //快速排序
   private static void quickSort(int[] array,int low, int high){
        if(low &amp;lt; high){
            //找到分区的位置，左边右边分别进行快速排序
            int index = partition(array,low,high);
            quickSort(array,0,index-1);
            quickSort(array,index+1,high);
        }
   }

   //快速排序分区操作
   private static int partition(int[] array, int low, int high){
        //选择基准
        int pivot = array[low];
        //当左指针小于右指针时，重复操作
        while (low &amp;lt; high){
            while(low &amp;lt; high &amp;amp;&amp;amp; array[high] &amp;gt;= pivot){
                high = high - 1;
            }
            array[low] = array[high];
            while (low &amp;lt; high &amp;amp;&amp;amp; array[low] &amp;lt;= pivot){
                low = low + 1;
            }
            array[high] = array[low];
        }
        //最后赋值基准
        array[low] = pivot;
        //返回基准所在位置，基准位置已经排序好
        return low;
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;递归算法&#34;&gt;&lt;a href=&#34;#递归算法&#34; class=&#34;headerlink&#34; title=&#34;递归算法&#34;&gt;&lt;/a&gt;递归算法&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&#34;什么是递归？&#34;&gt;&lt;a href=&#34;#什么是递归？&#34; class=&#34;headerlink&#34; title=&#34;什么是递归？&#34;&gt;&lt;/a&gt;什么是递归？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在数学和计算机领域中，递归主要是指在函数的定义中使用函数自身的方法。顾名思义，递归主要包含两个意思，==递和归==，这个是递归思想的精华所在。递归就是有去（递去）有回（归来）。“有去” 是指递归问题可以分解成若干个规模较小、与原问题形式相同的子问题，这些子问题可以和原问题用相同的方法来求解。“有回” 是指这些问题的演化过程是一个从大到小，并且最终会有一个明确的终点，一旦达到终点，就可以从终点原路返回，解决原问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;更为直接的说法就是：递归的基本思想就是把大问题转化为相似的小问题解决。特别是在程序中的函数实现时，大问题的解决方案和小问题是一模一样的，所以就产生==解决一个问题会调用函数本身的情况，这个也是递归的定义。==&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;递归三要素&#34;&gt;&lt;a href=&#34;#递归三要素&#34; class=&#34;headerlink&#34; title=&#34;递归三要素&#34;&gt;&lt;/a&gt;递归三要素&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;递归终止条件———防止出现无限递归&lt;/li&gt;
&lt;li&gt;递归终止条件时的处理方法&lt;/li&gt;
&lt;li&gt;递归中重复的逻辑提取&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;recursion(big_problem){
   if (end_condition){  //满足递归的终止条件
       solve_end_condition;  //处理终止条件下的逻辑
       end;  //递归结束
   }else {
       recursion(small_problem);  //递归中重复的逻辑提取，缩小问题规模，调用自身方法，即为递归的最明显的特点
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;参考文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY3h5eGlhb3d1LmNvbS8xMTM1Lmh0bWw=&#34;&gt;https://www.cxyxiaowu.com/1135.html&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;斐波那契数列&#34;&gt;&lt;a href=&#34;#斐波那契数列&#34; class=&#34;headerlink&#34; title=&#34;斐波那契数列&#34;&gt;&lt;/a&gt;斐波那契数列&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;斐波那契数列（Fibonacci sequence），也称之为黄金分割数列，由意大利数学家列昂纳多・斐波那契（Leonardo Fibonacci）提出。斐波那契数列指的是这样的一个数列：1、1、2、3、5、8、13、21、34、……，这个数列从第 3 项开始，每一项都等于前面两项之和。在数学上，斐波那契数列可以被递推的方法定义如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;script type=&#34;math/tex; mode=display&#34;&gt;F(1)=1,F(2)=1,F(n)=F(n-1)+F(n-2) (n\geq3,n\in N^*)&lt;/script&gt;&lt;h4 id=&#34;用Java实现斐波那契数列&#34;&gt;&lt;a href=&#34;#用Java实现斐波那契数列&#34; class=&#34;headerlink&#34; title=&#34;用Java实现斐波那契数列&#34;&gt;&lt;/a&gt;用Java实现斐波那契数列&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class Fibonacci {

    public static void main(String[] args){
        System.out.println(fibonacci(1));
        System.out.println(fibonacci(2));
        System.out.println(fibonacci(3));
        System.out.println(fibonacci(4));
        System.out.println(fibonacci(5));
    }

    //斐波那契数列数列的计算
    private static int fibonacci(int n){
        //如果是终止条件，按照要求返回终止条件对应结果
        if( n==1 || n==2 ){
            return 1;
        }else {
            //非终止条件，按照要求把大的问题拆分成小问题，调用自身函数递归处理
            return fibonacci(n-1)+fibonacci(n-2);
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;分治算法&#34;&gt;&lt;a href=&#34;#分治算法&#34; class=&#34;headerlink&#34; title=&#34;分治算法&#34;&gt;&lt;/a&gt;分治算法&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分治法&lt;/strong&gt;是建基于多项分支递归的一种很重要的算法范型。字面上的解释是“分而治之”，分（divide）是将一个大的问题分解成一些小的问题分别求解，治 （conquer）则是将分解的问题答案合并在一起；即把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;主要思想&#34;&gt;&lt;a href=&#34;#主要思想&#34; class=&#34;headerlink&#34; title=&#34;主要思想&#34;&gt;&lt;/a&gt;主要思想&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对于一个规模较大的问题，将其拆分成一个个小的子问题，再对各个小的问题进行求解，最后将所有小问题的结果合并成大问题的解。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分治算法的可行性&#34;&gt;&lt;a href=&#34;#分治算法的可行性&#34; class=&#34;headerlink&#34; title=&#34;分治算法的可行性&#34;&gt;&lt;/a&gt;分治算法的可行性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;该问题是否可以拆分成小的问题&lt;/li&gt;
&lt;li&gt;每个小的问题能否很容易的解决&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实现步骤&#34;&gt;&lt;a href=&#34;#实现步骤&#34; class=&#34;headerlink&#34; title=&#34;实现步骤&#34;&gt;&lt;/a&gt;实现步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;对待求解的问题进行拆分，拆分成一个个小的，相互独立的子问题，形式与待求解问题形式一致&lt;/li&gt;
&lt;li&gt;若每个子问题容易求解则直接求解，否则采用递归的方式进行&lt;/li&gt;
&lt;li&gt;将各个子问题的解合并成该待求解问题的解&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;核心伪代码&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;divideAndConquer(big_problem){
   if (canSolve(big_problem)){ //问题可以直接求解则直接求解返回
       solve(big_problem); //求解
       return; 
   }else {
       small_problem_A = divide(big_problem); //不能直接求解的问题拆分
       small_problem_B = divide(big_problem); //不能直接求解的问题拆分
       divideAndConquer(small_problem_A); //递归求解子问题
       divideAndConquer(small_problem_B); //递归求解子问题
       return merge(); //合并子问题的解
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;分治法应用场景&#34;&gt;&lt;a href=&#34;#分治法应用场景&#34; class=&#34;headerlink&#34; title=&#34;分治法应用场景&#34;&gt;&lt;/a&gt;分治法应用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;二分查找&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全排列问题&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分治算法之最大子数组问题&#34;&gt;&lt;a href=&#34;#分治算法之最大子数组问题&#34; class=&#34;headerlink&#34; title=&#34;分治算法之最大子数组问题&#34;&gt;&lt;/a&gt;分治算法之最大子数组问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;最大子数组问题描述如下：假如我们有一个数组，数组中的元素有正数和负数，如何在数组中找到一段连续的子数组，使得子数组各个元素之和最大。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;最大子数组问题在生活中有很多实际情况可以与其对应，比如说我们观察某一股票在一段时间内的走势，请问如何找出在哪一天买入，哪一天卖出可以赚到最大差价（这里假设你已经知道股票的价格走势）？为了实现最大化的股票收益，我们需要考虑的是买进和卖出时候的价格变化幅度，因此从该股票的每日变化幅度来考虑这个问题更加合适。所以，我们可以将这个问题稍作变形：将股票价格走势对应为每日股票价格涨跌，涨记为正值，跌记为负值，然后一段时间就对应一个正负数数组，并试图找到该数组的最大子数组，就可以获得最大收益。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;分治算法的实现步骤&#34;&gt;&lt;a href=&#34;#分治算法的实现步骤&#34; class=&#34;headerlink&#34; title=&#34;分治算法的实现步骤&#34;&gt;&lt;/a&gt;分治算法的实现步骤&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;先找出数组中的中间元素$mid$ ,根据分治策略，把数组分成两个子数组，左边为$[low,mid]$,右边为$[mid+1,high]$&lt;/li&gt;
&lt;li&gt;判断最大子数组$[i,j]$的位置，即以下三种情况：&lt;ol&gt;
&lt;li&gt;最大子数组$[i,j]$完全在$[low,mid]$中：即$low\leq i &amp;lt; j \leq mid$&lt;/li&gt;
&lt;li&gt;最大子数组$[i,j]$完全在$[mid+1,high]$中：即$mid+1\leq i &amp;lt; j \leq high$&lt;/li&gt;
&lt;li&gt;最大子数组$[i,j]$完全在$[low,high]$中：即$low\leq i \leq mid \leq j \leq high$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;对三个子问题进行求解&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;Java实现-4&#34;&gt;&lt;a href=&#34;#Java实现-4&#34; class=&#34;headerlink&#34; title=&#34;Java实现&#34;&gt;&lt;/a&gt;Java实现&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;package divide_and_conquer;

public class MaxSubarray {

    //内部类，用来存储最大子数组的返回结果，
    private static class Result {
        int low;
        int high;
        int sum;

        public Result(int low, int high, int sum) {
            this.low = low;
            this.high = high;
            this.sum = sum;
        }

        @Override
        public String toString() {
            return &amp;quot;Result{&amp;quot; +
                    &amp;quot;low=&amp;quot; + low +
                    &amp;quot;, high=&amp;quot; + high +
                    &amp;quot;, sum=&amp;quot; + sum +
                    &amp;#39;}&amp;#39;;
        }
    }

    private static Result FindMaxCrossSubarray(int[]A,int low, int mid, int high){

        //寻找左边的连续最大值及记录位置
        int leftSum = Integer.MIN_VALUE;
        int sum = 0;
        int maxLeft = mid;
        for (int i=mid; i&amp;gt;=low; i--){
            sum = sum + A[i];
            if(sum &amp;gt; leftSum){
                leftSum = sum;
                maxLeft = i;
            }
        }

        //寻找右边的连续最大值及记录位置
        int rightSum = Integer.MIN_VALUE;
        int maxRight = mid+1;
        sum = 0;
        for ( int j=mid+1; j&amp;lt;=high;j++){
            sum = sum + A[j];
            if(sum &amp;gt; rightSum){
                rightSum = sum;
                maxRight = j;
            }
        }

        //返回跨越中间值的最大子数组结果
        return new Result(maxLeft,maxRight,leftSum + rightSum);
    }


    public static  Result FindMaxSubarray(int[] A, int low, int high){
        //数组只有一个元素时的处理情况
        if (high == low){
            return new Result(low,high,A[low]);
        }else {
            //对应思路中步骤1，找到中间元素
            int mid = (low + high)/2;
            //对应思路中步骤2，分别对应a,b,c三种情况求解最大子数组结果
            Result leftResult = FindMaxSubarray(A,low,mid);
            Result rightResult = FindMaxSubarray(A,mid+1,high);
            Result crossResult = FindMaxCrossSubarray(A,low,mid,high);
            //对应步骤3，比较
            if(leftResult.sum &amp;gt;= rightResult.sum &amp;amp;&amp;amp; leftResult.sum &amp;gt;= crossResult.sum){
                return leftResult;
            }else if (rightResult.sum &amp;gt;= leftResult.sum &amp;amp;&amp;amp; rightResult.sum &amp;gt;= crossResult.sum){
                return rightResult;
            }else {
                return crossResult;
            }
        }
    }

    public static void main(String[] args){
        int[] A = {12, -3, -16, 20, -19, -3, 18, 20, -7, 12, -9, 7, -10};
        System.out.println(FindMaxSubarray(A,0,A.length-1).toString());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;动态规划&#34;&gt;&lt;a href=&#34;#动态规划&#34; class=&#34;headerlink&#34; title=&#34;动态规划&#34;&gt;&lt;/a&gt;动态规划&lt;/h2&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;动态规划通常用于解决最优化问题，在这类问题中，通过做出一组选择来达到最优解。在做出每个选择的同时，通常会生成与原问题形式相同的子问题。当多于一个选择子集都生成相同的子问题时，动态规划技术通常就会很有效，其关键技术就是对每个这样的子问题都保存其解，当其重复出现时即可避免重复求解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;动态规划&lt;code&gt;（Dynamic Programming）&lt;/code&gt;在数学上属于运筹学的一个分支，是求解决策过程 &lt;code&gt;（decision process）&lt;/code&gt;最优化的数学方法，同时也是计算机科学与技术领域中一种常见的算法思想。&lt;/li&gt;
&lt;li&gt;动态规划算法与我们前面提及的分治算法相似，都是==通过组合子问题的解来求解原问题的解==。但是两者之间也有很大区别：&lt;ul&gt;
&lt;li&gt;分治法将问题划分为互不相交的子问题，递归的求解子问题，再将他们的解组合起来求解原问题的解；与之相反，动态规划应用于子问题相互重叠的情况，在这种情况下，分治法还是会做很多重复的不必要的工作，他会反复求解那些公共的子问题，而动态规划算法则对相同的每个子问题只会求解一次，将其结果保存起来，避免一些不必要的计算工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;钢条切割问题&#34;&gt;&lt;a href=&#34;#钢条切割问题&#34; class=&#34;headerlink&#34; title=&#34;钢条切割问题&#34;&gt;&lt;/a&gt;钢条切割问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;某个钢材公司购买长钢条，将其切割为短钢条出售，其中切割过程本身不考虑成本，公司管理层想知道最赚钱的钢材切割方案。假设我们知道该钢材公司出售一段长度为 i 米的钢条的价格为 $p(i)$ ，对应的价目表如下：&lt;/p&gt;
&lt;p&gt;|i        |1    |2    |3    |4    |5    |6    |7    |8    |9    |10|&lt;br&gt;|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|&lt;br&gt;|p(i)    |1    |5    |8    |9    |10    |17    |17    |20    |24    |30|&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所以，钢材切割问题的定义如下：当我们给定一段长度为 $n$ 米的钢条和对应的一个价格表（ $p(i)$, i = 1,2,3,…n)，求一个钢条切割方案，使得最终的销售收益 $r(n)$ 最大。注意：如果长度为 $n$ 英尺的钢条的价格 $p_n$  足够大，那么最优解就是不需要切割。（在这里，我们要求切割的钢条必须为整米长度）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题分析&lt;/strong&gt; ：考虑  = 4 的情况，那么有以下几种切割方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;切割为四段，长度为：1，1，1，1；总共卖$4×1=4$元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;切割为三段，长度为：1，1，2；总共卖$2×1+1×5=7$元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;切割为两段，长度为：1，3；总共卖$1×1+1×8=9$元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;切割为两段，长度为：2，2；总共卖$2×5=10$元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不切割，长度为：4；总共卖$1×9=9$元。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://z3.ax1x.com/2021/04/12/cDHnsJ.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;长度为 $n$ 的钢条，总共有 $2^{n-1}$ 种不同的切割方案，因为长度为 $n$ 的钢条，总共有 $n-1$ 个缝隙，每个缝隙都可以选择切或不切，==所以有 $2^{n-1}$  种不同切割方案。所以随着 $n$ 增大，切割方案总数呈指数级上升，遍历是不现实的==。在这里，很容易想到，当要分析长度为 $n$ 的钢条的最优解时，可以先将钢条切成两段。==将长度为 $n$ 的钢条随意切割的方案是 $2^{n-1}$ 种，但是只切两段的方案只有 $n-1$ 种，这样规避了指数级计算量==。将切成的两段，分别再当作子问题去求解，这就是如下分治策略解法：&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;自顶向下递归实现&#34;&gt;&lt;a href=&#34;#自顶向下递归实现&#34; class=&#34;headerlink&#34; title=&#34;自顶向下递归实现&#34;&gt;&lt;/a&gt;自顶向下递归实现&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;  int CutRod(const int *p, int n)
{
    if (n == 0)
    {
        return 0;
    }

    int q = -1;
    for (int i = 1; i &amp;lt;= n; ++i)
    {
        int tmp = p[i] + CutRod(p, n - i);
        if (q &amp;lt; tmp)
        {
            q = tmp;
        }
    }

    return q;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;自顶向下递归实现的&lt;code&gt;CutRod&lt;/code&gt;效率很差，原因在于&lt;code&gt;CutRod&lt;/code&gt;反复地用相同的参数值对自身进行递归调用，即它反复求解相同的子问题。它的运行时间为$T(n)=2^n$。对于长度为n的钢条&lt;code&gt;CutRod&lt;/code&gt;考察了所有$2^{n-1}$种可能的切割方案。递归调用树共有$2^{n-1}$个叶结点，每个叶结点对应一种可能的切割方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;动态规划算法一：带备忘录的自顶向下法&#34;&gt;&lt;a href=&#34;#动态规划算法一：带备忘录的自顶向下法&#34; class=&#34;headerlink&#34; title=&#34;动态规划算法一：带备忘录的自顶向下法&#34;&gt;&lt;/a&gt;动态规划算法一：带备忘录的自顶向下法&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;    int MemoizedCutRodAux(const int *p, int n, int *r)
    {
        if (r[n] &amp;gt;= 0)
        {
            return r[n];            //首先检查所需的值是否存在
        }

        int q = -1;
        if (n == 0)
        {
            q = 0;
        }
        else
        {
            for (int i = 1; i &amp;lt;= n; ++i)
            {
                int tmp = p[i] + MemoizedCutRodAux(p, n - i, r);
                if (q &amp;lt; tmp)
                {
                    q = tmp;
                }
            }
        }
        r[n] = q;

        return q;
    }

    int MemoizedCutRod(const int *p, int n)
    {
        int *r = new int[n + 1];
        for (int i = 0; i &amp;lt;= n; ++i)
        {
            r[i] = -1;
        }

        return MemoizedCutRodAux(p, n, r);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;上述代码与分治不同的地方在于初始化了数组&lt;code&gt;r[n]&lt;/code&gt;，将不同长度的最优解数值，储存在了该数组中，所以当不同的 $n$ 传进来时，如果在数组 $r$ 中有当前钢条长度的记录（&lt;code&gt;if r[n] &amp;gt;= 0 : return r[n]&lt;/code&gt;)，则直接返回结果，不再进行之后的计算，其余的递归思路与分治策略完全一样。此方法的时间复杂度为 $O(n^2)$  ，变为了多项式时间复杂度。可见，==动态规划算法用少量的空间，显著提升了算法效率。==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自顶向下的动态规划算法，仍然不是最理想的。例如在计算 $n =4 $时， $n = 0 $的情况被计算了8次，采用了备忘录的形式之后，虽然 $n = 0$  的情况只需要计算1次，查表有7次操作，但是这7次查表操作，都是在进入了一个相同的函数中，会有频繁的递归函数调用的开销。采用自底向上的动态规划算法，就可以规避这个问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;动态规划算法二：自底而上法&#34;&gt;&lt;a href=&#34;#动态规划算法二：自底而上法&#34; class=&#34;headerlink&#34; title=&#34;动态规划算法二：自底而上法&#34;&gt;&lt;/a&gt;动态规划算法二：自底而上法&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;int BottomUpCutRod(const int *p, int n)
{
    int *r = new int[n + 1];
    r[0] = 0;

    for (int i = 1; i &amp;lt;= n; ++i)
    {
        int q = -1;
        for (int j = 1; j &amp;lt;= i; ++j)
        {
            int tmp = p[j] + r[i - j];
            q = q &amp;gt; tmp ? q : tmp;
        }
        r[i] = q;
    }

    return r[n];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自底向上法不再使用函数递归调用，而采用子问题的自然顺序。在切割时，先由最小的1开始切割，若 $i&amp;lt;j$ ，则规模为 $j$ 的解中一定包含了规模为 $i$ 的全部解（此时子问题的规模，可以理解为之前递归函数的输入 $n$ ）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上述代码中，仍然先初始化一个数组 $r$  ，用于记录不同规模子问题的最优解，并且将 &lt;code&gt;r[0]&lt;/code&gt;  初始化为 0 ；之后对 $j = 1，2，… ，n$进行升序求解。不同于之前算法的是，此时直接访问 &lt;code&gt;r[j-i]&lt;/code&gt; 来获得规模为 $j-i$ 的子问题的解。因为自底向上求解时，若 $i&amp;lt;j$，当在求解规模为 $j$ 的子问题时， &lt;code&gt;r[i]&lt;/code&gt; 一定有数值，因为之前一定已经计算过。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自底向上算法的时间复杂度也为，但是避免了大量的递归函数调用的开销，算法更加稳定。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;贪心算法&#34;&gt;&lt;a href=&#34;#贪心算法&#34; class=&#34;headerlink&#34; title=&#34;贪心算法&#34;&gt;&lt;/a&gt;贪心算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;贪心算法（&lt;code&gt;greedy algorithm&lt;/code&gt;）是在对问题求解时，总是做出在当前看来是最好的选择。也就是说，==不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解==。&lt;/li&gt;
&lt;li&gt;贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是局部最优解能决定全局最优解。简单地说，问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。————摘自Wikipedia&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;贪心算法与动态规划算法的最大区别在于：贪心算法每次选择的时候都是按照贪心策略来选择的，满足当前情况的最优解，但是并不一定会是整体最优解；动态规划算法在选择考虑时会考虑所有的子情况，选择最优解，这会是整体的最优解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;关键与实现过程&#34;&gt;&lt;a href=&#34;#关键与实现过程&#34; class=&#34;headerlink&#34; title=&#34;关键与实现过程&#34;&gt;&lt;/a&gt;关键与实现过程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关键&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;创建数学模型来描述问题。&lt;/li&gt;
&lt;li&gt;把求解的问题分成若干个子问题。&lt;/li&gt;
&lt;li&gt;对每一子问题求解，得到子问题的局部最优解。&lt;/li&gt;
&lt;li&gt;把子问题的解局部最优解合成原来解问题的一个解。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现该算法的过程&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;从问题的某一初始解出发；&lt;code&gt;while&lt;/code&gt; 能朝给定总目标前进一步 &lt;code&gt;do&lt;/code&gt;，求出可行解的一个解元素；最后，由所有解元素组合成问题的一个可行解。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;贪心算法的可行条件&#34;&gt;&lt;a href=&#34;#贪心算法的可行条件&#34; class=&#34;headerlink&#34; title=&#34;贪心算法的可行条件&#34;&gt;&lt;/a&gt;贪心算法的可行条件&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;贪心选择&lt;/strong&gt; ： 当某一个问题的整体最优解可通过一系列局部的最优解的选择达到，并且每次做出的选择可以依赖以前做出的选择，但不需要依赖后面需要做出的选择。这就是贪心选择性质。对于一个具体问题，要确定它是否具有贪心选择性质，必须==证明每一步所作的贪心选择最终导致问题的整体最优解==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;最优子结构&lt;/strong&gt; ： 如果一个问题的最优解包含其子问题的最优解，则此问题具备最优子结构的性质。问题的最优子结构性质是该问题是否可以用贪心算法求解的关键所在。&lt;br&gt;贪心算法与动态规划算法求解的问题类似，都需要满足最优子结构的性质。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;贪心算法之分饼干&#34;&gt;&lt;a href=&#34;#贪心算法之分饼干&#34; class=&#34;headerlink&#34; title=&#34;贪心算法之分饼干&#34;&gt;&lt;/a&gt;贪心算法之分饼干&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;题目概述&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;有一群孩子和一堆饼干，每个孩子有一个饥饿度，每个饼干都有一个大小。每个孩子只能吃最多一个饼干，且只有饼干的大小大于孩子的饥饿度时，这个孩子才能吃饱。求解最多有多少孩子可以吃饱。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;输入输出样例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入两个数组，分别代表孩子的饥饿度和饼干的大小。输出最多有多少孩子可以吃饱的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;lang-yml&#34;&gt;Input: [1,2],[1,2,3]
Output: 2
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;在这个样例中，我们可以给两个孩子喂 &lt;code&gt;[1,2]、[1,3]、[2,3]&lt;/code&gt; 这三种组合的任意一种。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;题解&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;因为饥饿度最小的孩子最容易吃饱，所以我们先考虑这个孩子。为了尽量使得剩下的饼干可以满足饥饿度更大的孩子，所以我们应该把大于等于这个孩子饥饿度的、且大小最小的饼干给这个孩子。满足了这个孩子之后，我们采取同样的策略，考虑剩下孩子里饥饿度最小的孩子，直到没有满足条件的饼干存在。&lt;/li&gt;
&lt;li&gt;简而言之，这里的贪心策略是，给剩余孩子里最小饥饿度的孩子分配最小的能饱腹的饼干。至于具体实现，因为我们需要获得大小关系，一个便捷的方法就是把孩子和饼干分别排序。这样我们就可以从饥饿度最小的孩子和大小最小的饼干出发，计算有多少个对子可以满足条件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;排列组合遍历&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;class Solution {
  public int findContentChildren(int[] g, int[] s) {
      Arrays.sort(g); //孩子饥饿度数组
      Arrays.sort(s); //饼干大小数组
      int numOfChildren = g.length, numOfCookies = s.length;
      int count = 0;
      for (int i = 0, j = 0; i &amp;lt; numOfChildren &amp;amp;&amp;amp; j &amp;lt; numOfCookies; i++, j++) {
          while (j &amp;lt; numOfCookies &amp;amp;&amp;amp; g[i] &amp;gt; s[j]) {
              j++;
          }
          if (j &amp;lt; numOfCookies) {
              count++;
          }
      }
      return count;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;贪心策略&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public int findContentChildren(int[] grid, int[] size) {
  if (grid == null || size == null) return 0;
  Arrays.sort(grid);
  Arrays.sort(size);
  int gi = 0, si = 0;
  while (gi &amp;lt; grid.length &amp;amp;&amp;amp; si &amp;lt; size.length) {
      if (grid[gi] &amp;lt;= size[si]) {
          gi++;
      }
      si++;
  }
  return gi;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;贪心算法之分糖果&#34;&gt;&lt;a href=&#34;#贪心算法之分糖果&#34; class=&#34;headerlink&#34; title=&#34;贪心算法之分糖果&#34;&gt;&lt;/a&gt;贪心算法之分糖果&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;题目概述&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;一群孩子站成一排，每一个孩子有自己的评分。现在需要给这些孩子发糖果，规则是如果一个孩子的评分比自己身旁的一个孩子要高，那么这个孩子就必须得到比身旁孩子更多的糖果；所有孩子至少要有一个糖果。求解最少需要多少个糖果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;输入输出样例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入是一个数组，表示孩子的评分。输出是最少糖果的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;lang-yml&#34;&gt;Input: [1,0,2]
Output: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;在这个样例中，最少的糖果分法是 &lt;code&gt;[2,1,2]&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;题解&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们只需要简单的两次遍历即可：把所有孩子的糖果数初始化为 1；先从左往右遍历一遍，如果右边孩子的评分比左边的高，则右边孩子的糖果数更新为左边孩子的糖果数加 1；再从右往左遍历一遍，如果左边孩子的评分比右边的高，且左边孩子当前的糖果数不大于右边孩子的糖果数，则左边孩子的糖果数更新为右边孩子的糖果数加 1。通过这两次遍历，分配的糖果就可以满足题目要求了。这里的贪心策略即为，在每次遍历中，只考虑并更新相邻一侧的大小关系。&lt;/li&gt;
&lt;li&gt;在样例中，我们初始化糖果分配为&lt;code&gt;[1,1,1]&lt;/code&gt;，第一次遍历更新后的结果为 &lt;code&gt;[1,1,2]&lt;/code&gt;，第二次遍历更新后的结果为&lt;code&gt;[2,1,2]&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;二次遍历代码&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;class Solution {
  public int candy(int[] ratings) {
      int n = ratings.length;
      int[] left = new int[n];
      for (int i = 0; i &amp;lt; n; i++) {
          if (i &amp;gt; 0 &amp;amp;&amp;amp; ratings[i] &amp;gt; ratings[i - 1]) {
              left[i] = left[i - 1] + 1;
          } else {
              left[i] = 1;
          }
      }
      int right = 0, ret = 0;
      for (int i = n - 1; i &amp;gt;= 0; i--) {
          if (i &amp;lt; n - 1 &amp;amp;&amp;amp; ratings[i] &amp;gt; ratings[i + 1]) {
              right++;
          } else {
              right = 1;
          }
          ret += Math.max(left[i], right);
      }
      return ret;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;贪心策略代码&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;class Solution {
  public int candy(int[] ratings) {
      int[] left = new int[ratings.length];
      int[] right = new int[ratings.length];
      Arrays.fill(left, 1);
      Arrays.fill(right, 1);
      for(int i = 1; i &amp;lt; ratings.length; i++)
          if(ratings[i] &amp;gt; ratings[i - 1]) left[i] = left[i - 1] + 1;
      int count = left[ratings.length - 1];
      for(int i = ratings.length - 2; i &amp;gt;= 0; i--) {
          if(ratings[i] &amp;gt; ratings[i + 1]) right[i] = right[i + 1] + 1;
          count += Math.max(left[i], right[i]);
      }
      return count;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="算法与数据结构" />
        <updated>2021-04-12T11:47:39.000Z</updated>
    </entry>
</feed>
