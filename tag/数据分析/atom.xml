<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://peter-pan001.github.io/my-blog</id>
    <title>理 想 净 土 • Posts by &#34;数据分析&#34; tag</title>
    <link href="https://peter-pan001.github.io/my-blog" />
    <updated>2022-06-05T08:09:22.000Z</updated>
    <category term="Java" />
    <category term="linux" />
    <category term="Linux" />
    <category term="MySQL" />
    <category term="network" />
    <category term="git、github" />
    <category term="云计算" />
    <category term="JavaScript" />
    <category term="前端" />
    <category term="html" />
    <category term="css" />
    <category term="数据分析" />
    <category term="算法与数据结构" />
    <category term="软考网络工程师" />
    <entry>
        <id>https://peter-pan001.github.io/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/informatica%E6%89%A9%E5%B1%95</id>
        <title>informatica扩展</title>
        <link rel="alternate" href="https://peter-pan001.github.io/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/informatica%E6%89%A9%E5%B1%95"/>
        <content type="html">&lt;h2 id=&#34;powercenter-cdc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#powercenter-cdc&#34;&gt;#&lt;/a&gt; PowerCenter CDC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CDC 全称 Change Data Capture ，即变化数据捕获 。CDC 的执行原理是通过读取&lt;mark&gt;数据库日志&lt;/mark&gt; 获得数据库表的增量数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三种模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三种模式&#34;&gt;#&lt;/a&gt; 三种模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CDC Real-Time&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;基于 CDC 技术读取数据库日志，获得数据库增量数据，并实时将数据直接写入目标数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优势： 1. 可获取数据库增量数据 ； 2. 数据同步准实时，延迟秒级别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;缺点： 占用源数据库资源 ；多进程运行造成资源抢占 ，需要 CDC Batch 解决&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CDC Batch&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;也是基于 CDC 技术原理，只不过延迟为分钟级别&lt;/li&gt;
&lt;li&gt;所有 PowerCenter 的业务要使用 CDC 前，都要进行注册&lt;/li&gt;
&lt;li&gt;注册后的业务表会生成日志 log 文件，powerExchange 就会不断地读取这些 log 文件上的增量数据，并把它存放到临时文件 Condense File 上，当下游数据系统有需求时，在从临时文件中按需获取，大大降低数据库并发性能损耗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/XwkJYj.png&#34; alt=&#34;zxa&#34;&gt;&lt;/p&gt;
</content>
        <category term="数据分析" />
        <updated>2022-06-05T08:09:22.000Z</updated>
    </entry>
    <entry>
        <id>https://peter-pan001.github.io/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/informatica%E4%B9%8BWorkflow%E7%9B%91%E6%8E%A7</id>
        <title>informatica之Workflow监控</title>
        <link rel="alternate" href="https://peter-pan001.github.io/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/informatica%E4%B9%8BWorkflow%E7%9B%91%E6%8E%A7"/>
        <content type="html">&lt;h2 id=&#34;session&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#session&#34;&gt;#&lt;/a&gt; Session&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Session 是 Workflow 最基础的组成单元，即一个 Mapping 的实例化&lt;/li&gt;
&lt;li&gt;Mapping 只是一个 program ，仅描述业务逻辑，但对于执行，一些具体参数需要依靠 Session 进行配置，如源数据库、目标数据库、字符集等&lt;/li&gt;
&lt;li&gt;实际上 Session 为 Mapping 提供配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reusable-session&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#reusable-session&#34;&gt;#&lt;/a&gt; Reusable Session&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一次创建，多次使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在 Workflow Manager 选择 &lt;code&gt;Task Developer&lt;/code&gt; ，在 sub-menu 选择 Tasks—&amp;gt;Create, 输入创建的 Session 名即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/Xwklm8.png&#34; alt=&#34;fd&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/Xwk10S.png&#34; alt=&#34;qv&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;若在 Mapping 的 Folder 中出现黄色问号或红色感叹号则说明该 Mapping 不合法，需要到 Designer 排查 Mapping 的合法性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;非reusable-session&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#非reusable-session&#34;&gt;#&lt;/a&gt; 非 Reusable Session&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用非 Reusable Session 的前提是有一个 Workflow，在 WFM 中选择 Designer，创建一个新的 Workflow&lt;/li&gt;
&lt;li&gt;此时新的 workflow 仅有一个虚拟的开始点，此时需要同 Reusable Session 一样创建一个 Session ，并用连接线将开始点连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/Xwk3Tg.png&#34; alt=&#34;xz&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;左为非 Reusable ，右为 Reusable&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/XwkGkQ.png&#34; alt=&#34;ozx&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;仅有非 Reusable 转为 Reusable，反之失败&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="数据分析" />
        <updated>2022-06-05T07:32:56.000Z</updated>
    </entry>
    <entry>
        <id>https://peter-pan001.github.io/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Informatica%E4%B9%8BPC%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6</id>
        <title>Informatica之PC基础组件</title>
        <link rel="alternate" href="https://peter-pan001.github.io/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Informatica%E4%B9%8BPC%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6"/>
        <content type="html">&lt;h2 id=&#34;source组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#source组件&#34;&gt;#&lt;/a&gt; Source 组件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 PowerCenter 中，数据可以是数据库表 Table、文本文件 File、XML 文件、SAP 等应用系统、Hadoop、MQ 等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据源定义的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手工创建（极少使用，过于繁杂）
&lt;ul&gt;
&lt;li&gt;数据 DB 名后，对各个 table 的各个 field、Data Type、PK 和 FK 进行配置，当表有很多是，配置相当复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过数据库导入（常用！）
&lt;ul&gt;
&lt;li&gt;先建立数据库的 ODBC 链接（仅导入库表结构），然后导入源的结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据库源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库源&#34;&gt;#&lt;/a&gt; 数据库源&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;下面将 PowerCenter Designer 简称 PCD ，将 WorkFlow Manager 简称 WFM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 PCD 层面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库源的定义按照 Owner Name 进行分组&lt;/li&gt;
&lt;li&gt;源表结构定义虽然继承了数据库中的表定义。但数据类型会发生变化进而导致 Session 执行异常&lt;/li&gt;
&lt;li&gt;PowerCenter 的 PK、FK 是逻辑层面定义的，能与数据库不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 WFM 层面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可在 WFM 指定表名和 Schema（用户名），来对数据库进行连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文本文件源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文本文件源&#34;&gt;#&lt;/a&gt; 文本文件源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在 PCD 和 WFM 层面，有些文本文件源的属性都可以在这两个层面配置，但 WFM 的优先级更高&lt;/li&gt;
&lt;li&gt;在 PCD：
&lt;ul&gt;
&lt;li&gt;Flat File 源在 PowerCenter 中添加一列 &lt;code&gt;CurrentlyyProcessedFileName&lt;/code&gt;  对数据进行时间戳修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 WFM：
&lt;ul&gt;
&lt;li&gt;两个属性：
&lt;ul&gt;
&lt;li&gt;Input Type ： 默认文本文件输入 ；若选择 Command ，则将命令的输出作为输入（当文件名不固定时使用更高效）&lt;/li&gt;
&lt;li&gt;Source File Type ：可为 Direct ，指定一个含实际数据的文件名；或为 Indirect，指定一个文件列表（如 txt 文件），里面的.dat 文件才是真正的含数据文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;target组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#target组件&#34;&gt;#&lt;/a&gt; Target 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Target 的定义创建于 Source 一致，即可手动创建也可通过数据库连接导入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;数据库目标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库目标&#34;&gt;#&lt;/a&gt; 数据库目标&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;与 Source 的定义类似，在 WFM 中可以使用 Target 表名和 Schema 名定义&lt;/li&gt;
&lt;li&gt;三大在 WFM 使用的选项：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Truncate Target table option&lt;/code&gt;  ： 将数据导入 target 前将 target 清空&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Target Load Type&lt;/code&gt;  :
&lt;ul&gt;
&lt;li&gt;Normal: 默认使用&lt;/li&gt;
&lt;li&gt;Bulk：仅支持部分 DB，当可用时，提升写入性能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reject File&lt;/code&gt;  ：
&lt;ul&gt;
&lt;li&gt;控制异常数据的机制，当发生 PK 冲突导致数据无法插入数据库时，PC 会吧其数据写入 RejectFile，并反馈到开发者解决&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文本文件目标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文本文件目标&#34;&gt;#&lt;/a&gt; 文本文件目标&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在 PCD 层面
&lt;ul&gt;
&lt;li&gt;通过定义文件名端口，可将不同数据写入不同的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/XwFOwF.png&#34; alt=&#34;saw&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 WFM 层面
&lt;ul&gt;
&lt;li&gt;Flat File 作为目标可直接写入本地，或远程 FTP 、Queue，或使用 Loader 工具将 Flat File 加载到 DB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;expression表达式组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#expression表达式组件&#34;&gt;#&lt;/a&gt; Expression 表达式组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;该组件主要有做行级表达式计算，如多某个 field 进行四则运算等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 Expression 组件中，每个字段都有基本的数据类型以及字段长度的设置，但与其他组件不同的是多出了 I、O、V 三个选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I 即 Input&lt;/li&gt;
&lt;li&gt;O 即 Output&lt;/li&gt;
&lt;li&gt;V 即 Variable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于 Expression 选项，则是对字段的运算表达式填写&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/XwFzWR.png&#34; alt=&#34;qwr&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;filter组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#filter组件&#34;&gt;#&lt;/a&gt; Filter 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;该组件将不满足条件的数据过滤掉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;下图是将 SAL 字段过滤，筛选出 SAL 低于 5000 的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/Xwk9Qx.png&#34; alt=&#34;qix&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;source-qualifier&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#source-qualifier&#34;&gt;#&lt;/a&gt; Source Qualifier&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;主要用于连接数据源，将数据源中的数据类型转换为 PowerCenter 的数据类型，相当于一个万能插头，兼容各大数据库厂商&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;使用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用场景&#34;&gt;#&lt;/a&gt; 使用场景&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;异构的数据库源表需要进行 Join 计算
&lt;ul&gt;
&lt;li&gt;如两张表分别来自 Oracle 和 DB2 ，Oracle 的关联字段类型为 &lt;code&gt;varchar2&lt;/code&gt;  ,DB2 的关联字段类型为 &lt;code&gt;varchar&lt;/code&gt;  , 为保证关联后字段的数据类型一致，Source Qualifier 作为 “万金油” 实现数据类型的自动映射&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异构的数据库源表与目标表进行数据传输
&lt;ul&gt;
&lt;li&gt;即 Source 来自 Sql Server ，Target 来自 MySQL ，Source Quailfier 同样起到兼容作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;选项卡奥秘&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#选项卡奥秘&#34;&gt;#&lt;/a&gt; 选项卡奥秘&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/XwkVFH.png&#34; alt=&#34;qo&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 SQ 选项卡中，主要几个常用的选项实际上是 SQL 语句的可视化操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SQL query&lt;/code&gt;  —— 查询语句的编写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Source Filter&lt;/code&gt;  —— 过滤源表数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number of Sorted Port&lt;/code&gt;  —— 对所选列进行排序，数字大小即为字段排序数量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Select Distinct&lt;/code&gt;  —— 数据去重&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sorter组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sorter组件&#34;&gt;#&lt;/a&gt; Sorter 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;主要对字段进行升序或降序排列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;选项卡奥秘-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#选项卡奥秘-2&#34;&gt;#&lt;/a&gt; 选项卡奥秘&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/XwkefA.png&#34; alt=&#34;ucs&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Case Sensitive&lt;/code&gt;  ：是否对大小写敏感&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Distinct&lt;/code&gt;  ： 数据去重&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Null Treated Low&lt;/code&gt;  ：是否将空值作为小数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;joiner组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#joiner组件&#34;&gt;#&lt;/a&gt; Joiner 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;主要用于联表操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;两表进行关联操作时，有一方在 PowerCenter 中会被当做是 Master，另一方为 Detail。一般来讲，数据量小的表作为 Master 表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关联类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关联类型&#34;&gt;#&lt;/a&gt; 关联类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;内连接 —— 对应为 Normal Join&lt;/li&gt;
&lt;li&gt;左连接 —— 对应为 Master Outer Join&lt;/li&gt;
&lt;li&gt;右连接 —— 对应为 Detail Outer Join&lt;/li&gt;
&lt;li&gt;全连接 —— 对应为 Full Outer Join&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;下面举个例子来简述一下各个关联类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/Xwkult.png&#34; alt=&#34;hvio&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/XwkK6P.png&#34; alt=&#34;oia&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;sorted-joiner&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sorted-joiner&#34;&gt;#&lt;/a&gt; Sorted Joiner&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;该方法用于将进入 joiner 的数据有序，进而提升 joiner 性能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Sorted Joiner&lt;/code&gt;  采用  &lt;code&gt;Sorted-Merge&lt;/code&gt;  算法&lt;/li&gt;
&lt;li&gt;非  &lt;code&gt;Sorted Joiner&lt;/code&gt;  采用  &lt;code&gt;Nested-Loop&lt;/code&gt;  算法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;joiner作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#joiner作用&#34;&gt;#&lt;/a&gt; Joiner 作用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;异构数据库表关联&lt;/li&gt;
&lt;li&gt;数据库表与文本文件关联&lt;/li&gt;
&lt;li&gt;文件之间关联&lt;/li&gt;
&lt;li&gt;同构表关联&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注意： 一个 Joiner 只能同时对两张表关联，三张表需要两个 joiner&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;self-join-自关联&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#self-join-自关联&#34;&gt;#&lt;/a&gt; Self-Join 自关联&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;即同一张表扮演 Master 和 Detail 角色&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用条件：
&lt;ul&gt;
&lt;li&gt;在从 Source Qualifier 到 Joiner 的两个分支上，至少一个分支必须在 Source Qualifier 和 Joiner 之间增加一个其他组件。&lt;/li&gt;
&lt;li&gt;Joiner Key 必须是经过排序的。&lt;/li&gt;
&lt;li&gt;Joiner 需要使用 Sorted Input。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lookup组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lookup组件&#34;&gt;#&lt;/a&gt; Lookup 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;最复杂的一个组件 ，主要对查询的字段返回多个值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;lookup-caching-enabled&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lookup-caching-enabled&#34;&gt;#&lt;/a&gt; Lookup Caching enabled&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个提升性能的选项
&lt;ul&gt;
&lt;li&gt;启用后：首先被查表的所有数据被读入 PC ，对 Lookup Condition 中涉及的 Key 与其他字段形成一个索引。 然后 Lookup 表会一条条读取数据，与前面索引进行匹配，发现目标 Key ，将 Key 关联的值往下游传递，没匹配到则将空值传递到下游&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lookup-sql-override&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lookup-sql-override&#34;&gt;#&lt;/a&gt; Lookup SQL Override&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个提升性能选项
&lt;ul&gt;
&lt;li&gt;默认提交到数据库的 SQL 会进行 Order by 排序，会消耗数据库资源&lt;/li&gt;
&lt;li&gt;通过这个选项 实际将后面的排序语句进行注释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lookup-source-qualifier-和joiner对比&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lookup-source-qualifier-和joiner对比&#34;&gt;#&lt;/a&gt; Lookup 、Source Qualifier 和 Joiner 对比&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;以下将 Lookup 简写为 LKP ，Source Qualifier 简写为 SQ ，Joiner 简写为 JN&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;功能上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQ 可执行任何 SQL 语句&lt;/li&gt;
&lt;li&gt;JN 可实现四种关联类型 ，但仅能用 &lt;code&gt;=&lt;/code&gt;  进行比较&lt;/li&gt;
&lt;li&gt;LKP 不能实现四种关联，但可以用  &lt;code&gt;=&lt;/code&gt;  、 &lt;code&gt;&amp;gt;&lt;/code&gt;  、 &lt;code&gt;&amp;lt;&lt;/code&gt;  比较&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Active 与 Passive&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQ 和 JN 是 Active 组件&lt;/li&gt;
&lt;li&gt;LKP 是 Passive 组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行引擎&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LKP 和 JN 是 PowerCenter&lt;/li&gt;
&lt;li&gt;SQ 是数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stored-procedure组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stored-procedure组件&#34;&gt;#&lt;/a&gt; Stored Procedure 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在 PowerCenter 可调用数据库的存储过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;union组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#union组件&#34;&gt;#&lt;/a&gt; Union 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;应用于将多张表联合在一起&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;transaction-control组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#transaction-control组件&#34;&gt;#&lt;/a&gt; Transaction Control 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一个事务产生器，控制事务的提交与回滚&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;sequence组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sequence组件&#34;&gt;#&lt;/a&gt; Sequence 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;类似于数据库的 Sequence ， 每次取值自动增加&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;aggregator组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aggregator组件&#34;&gt;#&lt;/a&gt; Aggregator 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;用于数据聚合 ，如求和、求均值、求最值等运算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;rank组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rank组件&#34;&gt;#&lt;/a&gt; Rank 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;用于获取 Top 和 Bottom 的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;update-strategy组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#update-strategy组件&#34;&gt;#&lt;/a&gt; Update Strategy 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;该组件类似于 SQL 的 Insert、Update 与 Delete 语句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可在 WFM 中配置 Workflow 的 session，对 task 进行配置实现&lt;br&gt;
&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/XwkMOf.png&#34; alt=&#34;asd&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sql-transformation组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql-transformation组件&#34;&gt;#&lt;/a&gt; SQL Transformation 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;需求： 输入一个表名，开发者通过开发一个 Mapping 返回全表数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;script-mode&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#script-mode&#34;&gt;#&lt;/a&gt; Script Mode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;开发者给该组件发送一个 SQL 语句，让 PowerCenter 执行该语句，并返回该语句执行成功情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java-transformation组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java-transformation组件&#34;&gt;#&lt;/a&gt; Java Transformation 组件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;借助 Java 代码处理一些特定业务：如判断字段是否含有中文，汉字转拼音，加解密，行列转换等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;组件简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组件简介&#34;&gt;#&lt;/a&gt; 组件简介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Passive 与 Active&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Passive 的 Java 组件每个输入对应一个输出&lt;/li&gt;
&lt;li&gt;Active 则一个输入对应多个输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;router&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#router&#34;&gt;#&lt;/a&gt; Router&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;数据分发组件，将总部信息分发到各地的接口机和数据库&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="数据分析" />
        <updated>2022-06-04T09:54:40.000Z</updated>
    </entry>
    <entry>
        <id>https://peter-pan001.github.io/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%88%9D%E8%AF%86informatica</id>
        <title>初识informatica</title>
        <link rel="alternate" href="https://peter-pan001.github.io/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%88%9D%E8%AF%86informatica"/>
        <content type="html">&lt;h2 id=&#34;informatica&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#informatica&#34;&gt;#&lt;/a&gt; Informatica&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Informatica 是一个 ETL 工具的供应商公司，旗下的 PowerCenter 产品专门为企业做数据集成服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三大数据集成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三大数据集成&#34;&gt;#&lt;/a&gt; 三大数据集成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;下游集成&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即数据仓库（DW），数据仓库是所有应用系统的下游，所有数据流都会流入数据仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中游集成&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即数据交换平台任何平台与他的关系都是对等得到，用于支持所有系统间数据层的数据交换。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上游集成&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即主数据平台，且为交易型数据平台。用于管理企业核心数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;powercenter架构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#powercenter架构&#34;&gt;#&lt;/a&gt; PowerCenter 架构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PowerCenter 整体架构围绕着 ETL 进行，即对数据进行抽取、转换和加载&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/XwF7Q0.png&#34; alt=&#34;sda&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中包含三个客户端，也有一个服务端，server 和客户端可直接访问 Repository，数据库存放着元数据。&lt;/li&gt;
&lt;li&gt;各个客户端作用：
&lt;ul&gt;
&lt;li&gt;Designer - 开发数据抽取逻辑程序&lt;/li&gt;
&lt;li&gt;WorkFlow Manager - 开发 Session&lt;/li&gt;
&lt;li&gt;WorkFlow Monitor - 监控 WF&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;经过更新后，在 Server 和 Repository 之间新增个 Repository Server 服务，实际上是一个进程，进一步提升管理数据能力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/XwFbLT.png&#34; alt=&#34;qr&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再深入理解其他的含义：
&lt;ul&gt;
&lt;li&gt;Domain：
&lt;ul&gt;
&lt;li&gt;是 PowerCenter 服务器对象和服务对象集合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Node：
&lt;ul&gt;
&lt;li&gt;现实物理服务器在 PowerCenter 的逻辑名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IS：
&lt;ul&gt;
&lt;li&gt;即 Integration Services ，所有 ETL 操作都由其指挥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;R：
&lt;ul&gt;
&lt;li&gt;即 Repository Service, 访问 Repository 的一道门&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repository：
&lt;ul&gt;
&lt;li&gt;数据库某个用户下一系列的表及其中存放的数据，与源数据和 Target 表无关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/05/XwFLeU.png&#34; alt=&#34;rfw&#34;&gt;&lt;/p&gt;
</content>
        <category term="数据分析" />
        <updated>2022-06-04T09:19:58.000Z</updated>
    </entry>
    <entry>
        <id>https://peter-pan001.github.io/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/CDC%E6%8A%80%E6%9C%AF</id>
        <title>CDC技术</title>
        <link rel="alternate" href="https://peter-pan001.github.io/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/CDC%E6%8A%80%E6%9C%AF"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;CDC (全称 change data capture)- 变化数据捕获，是识别源系统中数据何时发生更改的过程，以便下游流程或系统可以对该更改执行操作。一个常见的用例是 &lt;mark&gt;反映不同目标系统中的更改，以便系统中的数据保持同步。&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;对于数据库而言，CDC 更像是一种软件的设计模式，用来确定与跟踪以及更改了的数据&lt;/li&gt;
&lt;li&gt;CDC 作为一种数据集成方法，常发生在数据仓库环境中，因为捕获和保留数据状态是数据仓库的核心功能之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/03/XaS7zF.png&#34; alt=&#34;CDC/01.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以银行常见的数据库事件为例：存款与取款的操作通过对变更数据进行捕获与实时数据传输保证数据的时效性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/03/XaSvIx.png&#34; alt=&#34;sd&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;etl中的cdc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#etl中的cdc&#34;&gt;#&lt;/a&gt; ETL 中的 CDC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;先讲一下 ETL 的概念，所谓 ETL，实际上就是对数据进行提取 Extract、转换 Translate、加载 Load，是一个数据集成过程。数据从各个源中提取并传递到数据仓库中，数据的抽取可通过数据库的批处理查询或 CDC 来获得数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cdc实现方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cdc实现方法&#34;&gt;#&lt;/a&gt; CDC 实现方法&lt;/h2&gt;
&lt;h3 id=&#34;audit-columns-审核列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#audit-columns-审核列&#34;&gt;#&lt;/a&gt; Audit Columns 审核列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;常见的方式是在当前的数据库表中添加如： &lt;code&gt;Last_Update&lt;/code&gt;  或  &lt;code&gt;Date_Modified&lt;/code&gt;  列来检索从上次提取数据以来所变更的行情况。&lt;/li&gt;
&lt;li&gt;主要逻辑：
&lt;ol&gt;
&lt;li&gt;获取 target 表的 &lt;code&gt;Created_Time&lt;/code&gt;  和  &lt;code&gt;Updated_Time&lt;/code&gt;  最大值&lt;/li&gt;
&lt;li&gt;从 source 表中选择 &lt;code&gt;Created_Time&lt;/code&gt;  大于 target 表中最大的 &lt;code&gt;Created_Time&lt;/code&gt;  所在行，此行为上次执行 CDC 后新建的行&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/03/XapmJf.png&#34; alt=&#34;sc&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从 source 表中选择  &lt;code&gt;Created_Time&lt;/code&gt;  大于 target 表中  &lt;code&gt;Updated_Time&lt;/code&gt;  最大值但小于 target 表  &lt;code&gt;Created_Time&lt;/code&gt;  最大值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/03/XapMQg.png&#34; alt=&#34;sw&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;插入 2 中的新行后修改 target 表中 3 的现有行&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;优势：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;借由本机应用逻辑构建 ，无需借助第三方工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;增加数据库开销、易出错并出现数据一致性问题、无脚本进行删除跟踪会导致删除语句不会传递到 target 上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;table-deltas-表-增量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#table-deltas-表-增量&#34;&gt;#&lt;/a&gt; Table Deltas 表 增量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过数据库快照对比数据库表修改前后的差异，有的也称时间戳查询&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/03/Xap8wn.png&#34; alt=&#34;ie&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优势：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;提供已更改数据的准确视图。仅使用本机 SQL Script&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对存储需求增加，需要使用数据源的三个副本： 源数据，修改前快照，修改后快照&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;扩展性较差&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;trigger-based-cdc-基于触发器的cdc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#trigger-based-cdc-基于触发器的cdc&#34;&gt;#&lt;/a&gt; Trigger-based CDC 基于触发器的 CDC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过定义数据库触发器并在影子表中创建自己的变更日志（change log），触发器在增删改查命令执行前或后进行触发，用于创建更改日志。（SQL Level 执行）&lt;/li&gt;
&lt;li&gt;该方法会导致各个表都需要 Trigger，在进行数据修改时，运行 Trigger 会造成额外性能开销与维护上的管理负担。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优势：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;shadow table 可提供所有事务的不可变详细日志 ，某些数据库在 SQL API 可提供支持&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;每次进行数据操作会要求数据库进行多次写入，间接降低数据库性能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;log-based-change-data-capture-基于日志的cdc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#log-based-change-data-capture-基于日志的cdc&#34;&gt;#&lt;/a&gt; Log-Based Change Data Capture 基于日志的 CDC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据库包含事务日志（也称为重做日志 transaction log），这些日志存储所有数据库事件，允许在发生崩溃时恢复数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2022/06/03/XapaSU.png&#34; alt=&#34;ix&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数据捕获是无需进行应用级更改，无需扫描操作表，会显著降低系统性能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;优势：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对 production 数据库系统的影响最新，各事务无需额外查询 ； 可在多个系统保持 ACID 的可靠性 ；无需修改 production 数据库系统模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;弊端：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;日志记录格式随数据库版本更新而需要修改数据库日志逻辑 ；需要系统管理源数据库更改事件元数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;data-integration-platforms-for-change-data-capture-数据集成平台的cdc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#data-integration-platforms-for-change-data-capture-数据集成平台的cdc&#34;&gt;#&lt;/a&gt; Data Integration Platforms for Change Data Capture 数据集成平台的 CDC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据集成平台可自动挖掘数据库 &lt;code&gt;change log&lt;/code&gt;  处理并管理其他元数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cdc应用实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cdc应用实例&#34;&gt;#&lt;/a&gt; CDC 应用实例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将数据流式传输到数据仓库&lt;/strong&gt;  – 当今数据管道的核心功能之一是将数据从源数据库移动到数据仓库。这是因为大多数操作数据库并非旨在支持密集的分析处理，而数据仓库非常适合这些类型的操作。在这里，CDC 是数据管道体系结构中的关键步骤，可促进从源数据仓库到目标数据仓库的数据迁移。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将本地数据迁移到云&lt;/strong&gt;  – 当组织希望执行资源密集型操作（如人工智能、机器学习或深度学习）时，他们通常会寻求基于云的数据仓库来促进高度资源密集型的数据处理过程。这样做的原因是，与本地部署相比，在云中运行这些操作的运营成本要低得多，这使得云的即用即付模型成为一个不错的选择。在这里，CDC 可以在促进从本地到云的数据迁移方面发挥重要作用。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="数据分析" />
        <updated>2022-06-03T13:59:07.000Z</updated>
    </entry>
</feed>
