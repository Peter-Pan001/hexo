{
    "version": "https://jsonfeed.org/version/1",
    "title": "理 想 净 土 • All posts by \"数据分析\" tag",
    "description": "不必匆忙，不必火花四溅，不必成为别人，只需成为自己",
    "home_page_url": "https://peter-pan001.github.io/my-blog",
    "items": [
        {
            "id": "https://peter-pan001.github.io/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/CDC%E6%8A%80%E6%9C%AF/",
            "url": "https://peter-pan001.github.io/my-blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/CDC%E6%8A%80%E6%9C%AF/",
            "title": "CDC技术",
            "date_published": "2022-06-03T13:59:07.000Z",
            "content_html": "<ul>\n<li>CDC (全称 change data capture)-变化数据捕获，是识别源系统中数据何时发生更改的过程，以便下游流程或系统可以对该更改执行操作。一个常见的用例是 ==反映不同目标系统中的更改，以便系统中的数据保持同步。==</li>\n<li>对于数据库而言，CDC更像是一种软件的设计模式，用来确定与跟踪以及更改了的数据</li>\n<li>CDC作为一种数据集成方法，常发生在数据仓库环境中，因为捕获和保留数据状态是数据仓库的核心功能之一。</li>\n</ul>\n<p><img data-src=\"https://s1.ax1x.com/2022/06/03/XaS7zF.png\" alt=\"CDC/01.png\"></p>\n<blockquote>\n<p>以银行常见的数据库事件为例：存款与取款的操作通过对变更数据进行捕获与实时数据传输保证数据的时效性</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2022/06/03/XaSvIx.png\" alt=\"sd\"></p>\n<h2 id=\"ETL中的CDC\"><a href=\"#ETL中的CDC\" class=\"headerlink\" title=\"ETL中的CDC\"></a>ETL中的CDC</h2><ul>\n<li>先讲一下ETL的概念，所谓ETL，实际上就是对数据进行提取Extract、转换Translate、加载Load，是一个数据集成过程。数据从各个源中提取并传递到数据仓库中，数据的抽取可通过数据库的批处理查询或CDC来获得数据。</li>\n</ul>\n<h2 id=\"CDC实现方法\"><a href=\"#CDC实现方法\" class=\"headerlink\" title=\"CDC实现方法\"></a>CDC实现方法</h2><h3 id=\"Audit-Columns-审核列\"><a href=\"#Audit-Columns-审核列\" class=\"headerlink\" title=\"Audit Columns 审核列\"></a>Audit Columns 审核列</h3><ul>\n<li>常见的方式是在当前的数据库表中添加如：<code>Last_Update</code> 或 <code>Date_Modified</code> 列来检索从上次提取数据以来所变更的行情况。</li>\n<li>主要逻辑：<ol>\n<li>获取target表的<code>Created_Time</code> 和 <code>Updated_Time</code>最大值</li>\n<li>从source表中选择<code>Created_Time</code> 大于 target表中最大的<code>Created_Time</code>所在行，此行为上次执行CDC后新建的行</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"https://s1.ax1x.com/2022/06/03/XapmJf.png\" alt=\"sc\"></p>\n<ol>\n<li>从source表中选择 <code>Created_Time</code>大于target表中 <code>Updated_Time</code>最大值但小于target表 <code>Created_Time</code>最大值</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2022/06/03/XapMQg.png\" alt=\"sw\"></p>\n<ol>\n<li>插入2中的新行后修改target表中3的现有行</li>\n</ol>\n<blockquote>\n<p>优势：</p>\n<p>借由本机应用逻辑构建 ，无需借助第三方工具</p>\n<p>缺点：</p>\n<p>增加数据库开销、易出错并出现数据一致性问题、无脚本进行删除跟踪会导致删除语句不会传递到target上</p>\n</blockquote>\n<h3 id=\"Table-Deltas-表-增量\"><a href=\"#Table-Deltas-表-增量\" class=\"headerlink\" title=\"Table Deltas 表 增量\"></a>Table Deltas 表 增量</h3><ul>\n<li>通过数据库快照对比数据库表修改前后的差异，有的也称时间戳查询</li>\n</ul>\n<p><img data-src=\"https://s1.ax1x.com/2022/06/03/Xap8wn.png\" alt=\"ie\"></p>\n<blockquote>\n<p>优势：</p>\n<p>提供已更改数据的准确视图。仅使用本机SQL Script</p>\n<p>缺点：</p>\n<p>对存储需求增加，需要使用数据源的三个副本： 源数据，修改前快照，修改后快照</p>\n<p>扩展性较差</p>\n</blockquote>\n<h3 id=\"Trigger-based-CDC-基于触发器的CDC\"><a href=\"#Trigger-based-CDC-基于触发器的CDC\" class=\"headerlink\" title=\"Trigger-based CDC 基于触发器的CDC\"></a>Trigger-based CDC 基于触发器的CDC</h3><ul>\n<li>通过定义数据库触发器并在影子表中创建自己的变更日志（change log），触发器在增删改查命令执行前或后进行触发，用于创建更改日志。（SQL Level执行）</li>\n<li>该方法会导致各个表都需要Trigger，在进行数据修改时，运行Trigger会造成额外性能开销与维护上的管理负担。</li>\n</ul>\n<blockquote>\n<p>优势：</p>\n<p>shadow table 可提供所有事务的不可变详细日志 ，某些数据库在SQL API可提供支持</p>\n<p>缺点：</p>\n<p>每次进行数据操作会要求数据库进行多次写入，间接降低数据库性能</p>\n</blockquote>\n<h3 id=\"Log-Based-Change-Data-Capture-基于日志的CDC\"><a href=\"#Log-Based-Change-Data-Capture-基于日志的CDC\" class=\"headerlink\" title=\"Log-Based Change Data Capture 基于日志的CDC\"></a>Log-Based Change Data Capture 基于日志的CDC</h3><ul>\n<li>数据库包含事务日志（也称为重做日志 transaction log），这些日志存储所有数据库事件，允许在发生崩溃时恢复数据库。</li>\n</ul>\n<p><img data-src=\"https://s1.ax1x.com/2022/06/03/XapaSU.png\" alt=\"ix\"></p>\n<blockquote>\n<p>数据捕获是无需进行应用级更改，无需扫描操作表，会显著降低系统性能</p>\n<p>优势：</p>\n<p>对production数据库系统的影响最新，各事务无需额外查询 ； 可在多个系统保持ACID的可靠性 ；无需修改production数据库系统模式</p>\n<p>弊端：</p>\n<p>日志记录格式随数据库版本更新而需要修改数据库日志逻辑 ；需要系统管理源数据库更改事件元数据</p>\n</blockquote>\n<h3 id=\"Data-Integration-Platforms-for-Change-Data-Capture-数据集成平台的CDC\"><a href=\"#Data-Integration-Platforms-for-Change-Data-Capture-数据集成平台的CDC\" class=\"headerlink\" title=\"Data Integration Platforms for Change Data Capture 数据集成平台的CDC\"></a>Data Integration Platforms for Change Data Capture 数据集成平台的CDC</h3><ul>\n<li>数据集成平台可自动挖掘数据库<code>change log</code>处理并管理其他元数据</li>\n</ul>\n<h2 id=\"CDC应用实例\"><a href=\"#CDC应用实例\" class=\"headerlink\" title=\"CDC应用实例\"></a>CDC应用实例</h2><ul>\n<li><strong>将数据流式传输到数据仓库</strong>  – 当今数据管道的核心功能之一是将数据从源数据库移动到数据仓库。这是因为大多数操作数据库并非旨在支持密集的分析处理，而数据仓库非常适合这些类型的操作。在这里，CDC是数据管道体系结构中的关键步骤，可促进从源数据仓库到目标数据仓库的数据迁移。</li>\n<li><strong>将本地数据迁移到云</strong>  – 当组织希望执行资源密集型操作（如人工智能、机器学习或深度学习）时，他们通常会寻求基于云的数据仓库来促进高度资源密集型的数据处理过程。这样做的原因是，与本地部署相比，在云中运行这些操作的运营成本要低得多，这使得云的即用即付模型成为一个不错的选择。在这里，CDC可以在促进从本地到云的数据迁移方面发挥重要作用。</li>\n</ul>\n",
            "tags": [
                "数据分析"
            ]
        }
    ]
}