{
    "version": "https://jsonfeed.org/version/1",
    "title": "理 想 净 土 • All posts by \"javascript\" tag",
    "description": "不必匆忙，不必火花四溅，不必成为别人，只需成为自己",
    "home_page_url": "https://peter-pan001.github.io/my-blog",
    "items": [
        {
            "id": "https://peter-pan001.github.io/my-blog/%E5%89%8D%E7%AB%AF/String%E5%92%8CObject%E8%A7%A3%E8%AF%BB/",
            "url": "https://peter-pan001.github.io/my-blog/%E5%89%8D%E7%AB%AF/String%E5%92%8CObject%E8%A7%A3%E8%AF%BB/",
            "title": "String和Object解读",
            "date_published": "2020-10-27T13:33:03.000Z",
            "content_html": "<h2 id=\"string和object解读\"><a class=\"markdownIt-Anchor\" href=\"#string和object解读\">#</a> String 和 Object 解读</h2>\n<h3 id=\"string-类型\"><a class=\"markdownIt-Anchor\" href=\"#string-类型\">#</a> String 类型</h3>\n<ul>\n<li>字符串可用单引号或双引号表示，即<pre><code class=\"language-javaScript\">var fomeName = &quot;Turing&quot;;\nvar NuseName = 'Kavane';\n</code></pre>\n</li>\n</ul>\n<h4 id=\"字符字面量\"><a class=\"markdownIt-Anchor\" href=\"#字符字面量\">#</a> 字符字面量</h4>\n<ul>\n<li>一些特殊的字符字面量，可采用转义字符，表示非打印字符，此处规则与 java 的一致</li>\n</ul>\n<h4 id=\"字符串特点\"><a class=\"markdownIt-Anchor\" href=\"#字符串特点\">#</a> 字符串特点</h4>\n<ul>\n<li>在 ECMAScript 中字符串是<strong>不可变的</strong>，要销毁掉原字符串，必须用另一个包含该原字符串的新字符串表示<pre><code class=\"language-javaScript\">var older =&quot;Open&quot;;\nolder = older+&quot;Stack&quot;;\n</code></pre>\n</li>\n</ul>\n<h4 id=\"转换为字符串\"><a class=\"markdownIt-Anchor\" href=\"#转换为字符串\">#</a> 转换为字符串</h4>\n<ul>\n<li>方法一：使用 <code>toString()</code>  方法<pre><code class=\"language-javaScript\">var age = 18;\nvar ageAsString = age.toString();//字符串：&quot;18&quot;\n</code></pre>\n</li>\n<li>方法二：使用 <code>String()</code>  方法<pre><code class=\"language-javaScript\">var info1 = true;\nvar info2;\nvar info3 = 10;\n \nalert(String(info1));//&quot;true&quot;\nalert(String(info2));//&quot;undefined&quot;\nalert(String(info3));//&quot;10&quot;\n\n</code></pre>\n</li>\n</ul>\n<h3 id=\"object类型\"><a class=\"markdownIt-Anchor\" href=\"#object类型\">#</a> Object 类型</h3>\n<ul>\n<li>ECMAScript 中的对象其实就是一组数据和功能的集合。对象可以通过执行 new 操作符后跟要创建的对象类型的名称来创建</li>\n<li>Object 的每个实例都具有下列属性和方法。\n<ul>\n<li><code>constructor</code> ：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）就是 Object ()。</li>\n<li><code>hasOwnProperty(propertyName)</code> ：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名（propertyName）必须以字符串形式指定（例如：o.hasOwnProperty (“name”)）。</li>\n<li><code>isPrototypeOf(object)</code> ：用于检查传入的对象是否是当前对象的原型（第 5 章将讨论原型）。</li>\n<li><code>propertyIsEnumerable(propertyName)</code> ：用于检查给定的属性是否能够使用 for-in 语句（本章后面将会讨论）来枚举。与 hasOwnProperty () 方法一样，作为参数的属性名必须以字符串形式指定。</li>\n<li><code>toLocaleString()</code> ：返回对象的字符串表示，该字符串与执行环境的地区对应。</li>\n<li><code>toString()</code> ：返回对象的字符串表示。</li>\n<li><code>valueOf()</code> ：返回对象的字符串、数值或布尔值表示。通常与 toString () 方法的返回值相同。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "JavaScript"
            ]
        }
    ]
}