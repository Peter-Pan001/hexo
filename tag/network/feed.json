{
    "version": "https://jsonfeed.org/version/1",
    "title": "理 想 净 土 • All posts by \"network\" tag",
    "description": "不必匆忙，不必火花四溅，不必成为别人，只需成为自己",
    "home_page_url": "https://peter-pan001.github.io/my-blog",
    "items": [
        {
            "id": "https://peter-pan001.github.io/my-blog/network/Servlet%E5%92%8CTomcat/",
            "url": "https://peter-pan001.github.io/my-blog/network/Servlet%E5%92%8CTomcat/",
            "title": "Servlet和Tomcat",
            "date_published": "2020-10-25T12:29:30.000Z",
            "content_html": "<h2 id=\"第一章-何为Tomcat？\"><a href=\"#第一章-何为Tomcat？\" class=\"headerlink\" title=\"第一章 何为Tomcat？\"></a>第一章 何为Tomcat？</h2><h3 id=\"Tomcat概述\"><a href=\"#Tomcat概述\" class=\"headerlink\" title=\"Tomcat概述\"></a>Tomcat概述</h3><ul>\n<li>简而言之，Tomcat简单的说就是一个运行JAVA的网络服务器，<strong>底层是Socket的一个程序，它也是JSP和Serlvet的一个容器。</strong></li>\n<li>通过Tomcat可以使别人访问到自己的网页的一个程序</li>\n</ul>\n<h3 id=\"Tomcat目录解读\"><a href=\"#Tomcat目录解读\" class=\"headerlink\" title=\"Tomcat目录解读\"></a>Tomcat目录解读</h3><!-- ![tomcat_dir.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizs61ddsfj30pk0bawfw.jpg) -->\n<p><img data-src=\"https://i.loli.net/2020/10/26/XARbpWP4JFDHvY8.jpg\" alt=\"tomcat_dir.png\"></p>\n<ul>\n<li><strong>各个文件的解读</strong></li>\n</ul>\n<ol>\n<li><strong>bin</strong>：启动和关闭tomcat的bat文件</li>\n<li><strong>conf</strong>：配置文件<ul>\n<li><strong>server.xml</strong>该文件用于配置server相关的信息，比如tomcat启动的端口号，配置主机(Host)</li>\n<li><strong>web.xml</strong>文件配置与web应用（web应用相当于一个web站点）</li>\n<li><strong>tomcat-user.xml</strong>配置用户名密码和相关权限.</li>\n</ul>\n</li>\n<li><strong>lib</strong>：该目录放置运行tomcat运行需要的jar包</li>\n<li><strong>logs</strong>：存放日志，当我们需要查看日志的时候，可以查询信息</li>\n<li><strong>webapps</strong>：放置我们的web应用</li>\n<li><strong>work工作目录</strong>：该目录用于存放jsp被访问后生成对应的server文件和.class文件 </li>\n</ol>\n<hr>\n<h2 id=\"第二章-Servlet\"><a href=\"#第二章-Servlet\" class=\"headerlink\" title=\"第二章 Servlet\"></a>第二章 Servlet</h2><h3 id=\"简述-java-servlet\"><a href=\"#简述-java-servlet\" class=\"headerlink\" title=\"简述 java servlet\"></a>简述 java servlet</h3><ul>\n<li><p>Servlet本质上就是一个java接口，在该接口中包含五个方法，分别是：</p>\n<ul>\n<li>初始化</li>\n<li>获取配置</li>\n<li>服务</li>\n<li>获取信息</li>\n<li><p>销毁</p>\n<pre><code class=\"lang-java\">public interface Servlet {\n\npublic void init(ServletConfig config) throws ServletException;\n\npublic ServletConfig getServletConfig();\n\npublic void service(ServletRequest req, ServletResponse res)\n        throws ServletException, IOException;\n\npublic String getServletInfo();\n\npublic void destroy();\n}\n</code></pre>\n<h3 id=\"Servlet有什么作用\"><a href=\"#Servlet有什么作用\" class=\"headerlink\" title=\"Servlet有什么作用\"></a>Servlet有什么作用</h3></li>\n</ul>\n</li>\n<li>在网上实现聊天、发帖等交互功能</li>\n</ul>\n<h3 id=\"浅谈HTTP协议\"><a href=\"#浅谈HTTP协议\" class=\"headerlink\" title=\"浅谈HTTP协议\"></a>浅谈HTTP协议</h3><ul>\n<li><p><strong>何为HTTP协议</strong></p>\n<ul>\n<li><strong>超文本传输协议（HTTP，HyperText Transfer Protocol)</strong> ~~~~是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。它是TCP/IP协议的一个应用层协议</li>\n<li>简单来说，HTTP协议就是客户端和服务器交互的一种通迅的格式。</li>\n</ul>\n</li>\n<li><p><strong>HTTP请求</strong></p>\n<ul>\n<li><p>浏览器向服务器请求某个web资源时，称之为浏览器向服务器发送了一个http请求。</p>\n</li>\n<li><p>一个完整http请求应该包含三个部分：</p>\n<ol>\n<li><strong>请求行</strong>——-描述客户端client的请求方式、请求资源名称以及HTTP版本号</li>\n<li><strong>多个消息头</strong>——-描述客户端请求哪台主机、以及客户端的环境信息</li>\n<li><strong>一个空行</strong></li>\n</ol>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong>请求行</strong></p>\n<ul>\n<li><strong>请求行中的GET称之为请求方式</strong>,请求方式有：<code>POST,GET,HEAD,OPTIONS,DELETE,TRACE,PUT</code></li>\n<li><strong>常用的方法</strong>：<strong>POST、GET</strong></li>\n<li><p>一般来说，当我们点击超链接，通过地址栏访问都是get请求方式。通过表单提交的数据一般是post方式。</p>\n</li>\n<li><p>可以简单理解GET方式用来查询数据,POST方式用来提交数据，get的提交速度比post快</p>\n</li>\n<li><p><strong>GET方式：在URL地址后附带的参数是有限制的，其数据容量通常不能超过1K</strong>。</p>\n</li>\n<li><p><strong>POST方式：可以在请求的实体内容中向服务器发送数据，传送的数据量无限制</strong>。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong>HTTP响应</strong></p>\n<ul>\n<li><p>一个HTTP响应代表着服务器向浏览器回送数据</p>\n</li>\n<li><p>一个完整的HTTP响应应该包含四个部分:</p>\n<ol>\n<li>一个状态行</li>\n<li>多个消息头</li>\n<li>一个空行</li>\n<li>实体内容</li>\n</ol>\n</li>\n<li><p><strong>状态行</strong></p>\n<ul>\n<li>格式：HTTP版本号　状态码　原因叙述</li>\n<li>状态行：HTTP/1.1 200 OK</li>\n<li><p>状态码用于表示服务器对请求的处理结果，它是一个三位的十进制数。响应状态码分为5类</p>\n<!-- ![servletzt.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizs7b2xu7j30m806iwha.jpg) -->\n<p><img data-src=\"https://i.loli.net/2020/10/26/FoCInYbJ6SvKXmV.png\" alt=\"servletzt.png\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"JavaWeb目录\"><a href=\"#JavaWeb目录\" class=\"headerlink\" title=\"JavaWeb目录\"></a>JavaWeb目录</h3><!-- ![webdir.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizs7w9yl1j30w00i0q3a.jpg) -->\n<p><img data-src=\"https://i.loli.net/2020/10/26/IVYlJMZNU8shmjb.png\" alt=\"webdir.png\"></p>\n<ul>\n<li>WEB-INF目录下的资源是不能直接被浏览器访问的</li>\n<li>web.xml文件是web程序的主要配置文件</li>\n<li>所有的classes文件都放在classes目录下</li>\n<li>jar文件放在lib目录下</li>\n</ul>\n<hr>\n<h3 id=\"Servlet生命周期\"><a href=\"#Servlet生命周期\" class=\"headerlink\" title=\"Servlet生命周期\"></a>Servlet生命周期</h3><ol>\n<li><strong>加载Servlet</strong>。当Tomcat第一次访问Servlet的时候，<strong>Tomcat会负责创建Servlet的实例</strong></li>\n<li><strong>初始化</strong>。当Servlet被实例化后，Tomcat会调用init()方法初始化这个对象</li>\n<li><strong>处理服务</strong>。当浏览器访问Servlet的时候，Servlet 会调用service()方法处理请求</li>\n<li><strong>销毁</strong>。当Tomcat关闭时或者检测到Servlet要从Tomcat删除的时候会自动调用destroy()方法，让该实例释放掉所占的资源。一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁</li>\n<li><strong>卸载</strong>。当Servlet调用完destroy()方法后，等待垃圾回收。如果有需要再次使用这个Servlet，会重新调用init()方法进行初始化操作。</li>\n</ol>\n<ul>\n<li><strong>总结：只要访问Servlet，service()就会被调用。init()只有第一次访问Servlet的时候才会被调用。<br>destroy()只有在Tomcat关闭的时候才会被调用。</strong></li>\n</ul>\n<hr>\n<h3 id=\"编写一个简单的servlet请求\"><a href=\"#编写一个简单的servlet请求\" class=\"headerlink\" title=\"编写一个简单的servlet请求\"></a>编写一个简单的servlet请求</h3><pre><code class=\"lang-java\">import javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n@WebServlet(name = &quot;Servlet&quot;)\npublic class Servlet extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n    }\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        super.doPost(request,response);\n        response.setContentType(&quot;text/html;charset=UTF-8&quot;);\n        PrintWriter out = response.getWriter();\n        out.println(&quot;hello world,servlet&quot;);\n        out.close();\n    }\n}\n</code></pre>\n<hr>\n<h3 id=\"Servlet的调用图\"><a href=\"#Servlet的调用图\" class=\"headerlink\" title=\"Servlet的调用图\"></a>Servlet的调用图</h3><!-- ![servlet01.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizs8khnchj313g0n0dkr.jpg) -->\n<p><img data-src=\"https://i.loli.net/2020/10/26/u4EhXdURHD7Kn2T.png\" alt=\"servlet01.png\"></p>\n<h3 id=\"Servlet细节\"><a href=\"#Servlet细节\" class=\"headerlink\" title=\"Servlet细节\"></a>Servlet细节</h3><ul>\n<li><strong>一个已经注册的Servlet可以被多次映射</strong><ul>\n<li>同一个Servlet可以被映射到多个URL中</li>\n</ul>\n</li>\n<li><strong>Servlet映射的URL可以使用通配符</strong><ul>\n<li>通配符的两种格式<ul>\n<li>*.扩展名</li>\n<li>正斜杠/开头并以/*结尾<ul>\n<li>其中*.扩展名的优先级最低</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Servlet是单例的\"><a href=\"#Servlet是单例的\" class=\"headerlink\" title=\"Servlet是单例的\"></a>Servlet是单例的</h3><hr>\n<h3 id=\"为什么Servlet是单例的？\"><a href=\"#为什么Servlet是单例的？\" class=\"headerlink\" title=\"为什么Servlet是单例的？\"></a>为什么Servlet是单例的？</h3><ul>\n<li><strong>浏览器多次对Servlet的请求</strong>，一般情况下，服务器只创建一个Servlet对象，也就是说，<strong>Servlet对象一旦创建类</strong>，<strong>就会驻留在内存中，后续的请求做服务，直到服务器关闭</strong></li>\n</ul>\n<h3 id=\"每次访问请求对象和响应对象都是新的\"><a href=\"#每次访问请求对象和响应对象都是新的\" class=\"headerlink\" title=\"每次访问请求对象和响应对象都是新的\"></a>每次访问请求对象和响应对象都是新的</h3><ul>\n<li><strong>对于每次访问要求，</strong>Servlet引擎都会<strong>创建一个新的HttpServletRequest请求对象和一个新的HttpServletResponse响应对象</strong>，然后将这两个对象<strong>作为参数传递给它调用的Servlet的service()方法，service方法再跟进请求方式分别调用doXxx方法</strong></li>\n</ul>\n<h3 id=\"线程安全问题\"><a href=\"#线程安全问题\" class=\"headerlink\" title=\"线程安全问题\"></a>线程安全问题</h3><ul>\n<li><p><strong>当多个用户访问Servlet的时候，服务器会为每个用户创建一个线程，当多个用户并发Servlet共享资源的时候就会出现线程安全问题</strong></p>\n<ul>\n<li><p>如果一个变量需要多个用户分享，则应当在访问该变量的时候，加入同步机制：</p>\n<pre><code class=\"lang-java\">synchronized(对象名){\n\n}\n</code></pre>\n</li>\n<li>如果一个变量不需要共享,则直接在<code>doGet()</code>或者<code>doPost()</code> 定义，这样不会存在线程安全问题</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"ServletConfig对象\"><a href=\"#ServletConfig对象\" class=\"headerlink\" title=\"ServletConfig对象\"></a>ServletConfig对象</h3><h4 id=\"何为ServletConfig对象\"><a href=\"#何为ServletConfig对象\" class=\"headerlink\" title=\"何为ServletConfig对象\"></a>何为ServletConfig对象</h4><hr>\n<h2 id=\"gt-通过此对象可以读取Web-xml中配置的初始化参数\"><a href=\"#gt-通过此对象可以读取Web-xml中配置的初始化参数\" class=\"headerlink\" title=\"&gt; 通过此对象可以读取Web.xml中配置的初始化参数\"></a>&gt; 通过此对象可以读取Web.xml中配置的初始化参数</h2><ul>\n<li>作用：<ul>\n<li>大大提高程序的灵活性</li>\n<li>当需要修改时，只需更改配置文件Web.xml即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ServletContext对象\"><a href=\"#ServletContext对象\" class=\"headerlink\" title=\"ServletContext对象\"></a>ServletContext对象</h3><h4 id=\"何为ServletContext对象\"><a href=\"#何为ServletContext对象\" class=\"headerlink\" title=\"何为ServletContext对象\"></a>何为ServletContext对象</h4><hr>\n<h2 id=\"gt-当Tomcat启动的时候，就会创建一个ServletContext对象，它代表着当前Web站点\"><a href=\"#gt-当Tomcat启动的时候，就会创建一个ServletContext对象，它代表着当前Web站点\" class=\"headerlink\" title=\"&gt; 当Tomcat启动的时候，就会创建一个ServletContext对象，它代表着当前Web站点\"></a>&gt; 当Tomcat启动的时候，就会创建一个ServletContext对象，它代表着当前Web站点</h2><ul>\n<li>作用：<ul>\n<li>ServletContext代表当前Web站点，那么<strong>所有Servlet都共享一个ServletContext对象</strong>，因此<strong>Servlet之间可以通过ServletContext实现通讯</strong></li>\n<li>ServletConfig获取的是配置单个Servlet的参数信息，<strong>ServletContext可以获取的是配置整个Web站点的参数信息</strong></li>\n<li><strong>利用ServletContext读取web站点的资源文件</strong></li>\n<li><strong>实现Servlet转发</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-request和response\"><a href=\"#第三章-request和response\" class=\"headerlink\" title=\"第三章 request和response\"></a>第三章 request和response</h2><h3 id=\"request、response对象\"><a href=\"#request、response对象\" class=\"headerlink\" title=\"request、response对象\"></a>request、response对象</h3><hr>\n<h2 id=\"gt-nbsp-Tomcat收到客户端的HTTP请求，会针对每一次请求，分别创建一个代表请求的-request对象和代表响应的response对象\"><a href=\"#gt-nbsp-Tomcat收到客户端的HTTP请求，会针对每一次请求，分别创建一个代表请求的-request对象和代表响应的response对象\" class=\"headerlink\" title=\"&gt;&nbsp;Tomcat收到客户端的HTTP请求，会针对每一次请求，分别创建一个代表请求的**request对象和代表响应的response对象\"></a>&gt;&nbsp;Tomcat收到客户端的HTTP请求，会针对每一次请求，分别创建一个代表请求的**request对象和代表响应的response对象</h2><ul>\n<li>我们在获取浏览器传输过来的数据时，通过使用request对象即可</li>\n<li>如果要向浏览器输出数据，则需要使用response对象</li>\n</ul>\n<h3 id=\"什么是HttpServletResponse对象？\"><a href=\"#什么是HttpServletResponse对象？\" class=\"headerlink\" title=\"什么是HttpServletResponse对象？\"></a>什么是HttpServletResponse对象？</h3><ul>\n<li>HTTP响应由<strong>状态行、实体内容、消息头和一个空行组成</strong>。HttpServletResponse对象就封装了HTTP响应的信息</li>\n</ul>\n<h4 id=\"调用getOutputStream-方法向浏览器输出数据\"><a href=\"#调用getOutputStream-方法向浏览器输出数据\" class=\"headerlink\" title=\"调用getOutputStream()方法向浏览器输出数据\"></a>调用getOutputStream()方法向浏览器输出数据</h4><ul>\n<li><p>代码：</p>\n<pre><code class=\"lang-java\">  //获取ServletOutputStream对象\n  ServletOutputStream ServletOutputStream= response。getOutputStream();\n\n  //使用meta标签和http消息头，告诉浏览器回送数据的编码和格式\n  servletOutputStream.write(&quot;&lt;meta http-equiv=&#39;content-type&#39; content=&#39;text/html;charset=UTF-8&#39;&gt;&quot;.getBytes());\n\n  servletOutputStream.write(&quot;我是吴亦凡&quot;.getBytes(&quot;UTF-8&quot;));\n</code></pre>\n</li>\n</ul>\n<h4 id=\"调用getWriter-方法向浏览器输出数据\"><a href=\"#调用getWriter-方法向浏览器输出数据\" class=\"headerlink\" title=\"调用getWriter()方法向浏览器输出数据\"></a>调用getWriter()方法向浏览器输出数据</h4><ul>\n<li><p>代码：</p>\n<pre><code class=\"lang-java\">  //设置浏览器用UTF-8编码显示数据\n  response.setContentType(&quot;text/html;charset=UTF-8&quot;);\n\n  //获取到printwriter对象\n  PrintWriter printwriter =response.getWriter();\n  printWriter.write(&quot;完成finish&quot;);\n</code></pre>\n</li>\n</ul>\n",
            "tags": [
                "network"
            ]
        }
    ]
}