<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>理 想 净 土 • Posts by &#34;java&#34; tag</title>
        <link>https://peter-pan001.github.io/my-blog</link>
        <description>不必匆忙，不必火花四溅，不必成为别人，只需成为自己</description>
        <language>zh-CN</language>
        <pubDate>Thu, 25 Mar 2021 10:39:52 +0800</pubDate>
        <lastBuildDate>Thu, 25 Mar 2021 10:39:52 +0800</lastBuildDate>
        <category>Java</category>
        <category>linux</category>
        <category>Linux</category>
        <category>network</category>
        <category>MySQL</category>
        <category>云计算</category>
        <category>git、github</category>
        <category>前端</category>
        <category>JavaScript</category>
        <category>html</category>
        <category>css</category>
        <category>算法与数据结构</category>
        <category>数据分析</category>
        <category>软考网络工程师</category>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BOV/</guid>
            <title>Java网络编程OV</title>
            <link>https://peter-pan001.github.io/my-blog/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BOV/</link>
            <category>Java</category>
            <pubDate>Thu, 25 Mar 2021 10:39:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Java网络编程OV&#34;&gt;&lt;a href=&#34;#Java网络编程OV&#34; class=&#34;headerlink&#34; title=&#34;Java网络编程OV&#34;&gt;&lt;/a&gt;Java网络编程OV&lt;/h1&gt;&lt;h2 id=&#34;一、入门&#34;&gt;&lt;a href=&#34;#一、入门&#34; class=&#34;headerlink&#34; title=&#34;一、入门&#34;&gt;&lt;/a&gt;一、入门&lt;/h2&gt;&lt;h3 id=&#34;1-1-软件结构&#34;&gt;&lt;a href=&#34;#1-1-软件结构&#34; class=&#34;headerlink&#34; title=&#34;1.1 软件结构&#34;&gt;&lt;/a&gt;1.1 软件结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C/S结构&lt;/strong&gt;： Client/Server,客户端访问数据库服务器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;B/S结构&lt;/strong&gt;： Browser/Server,浏览器访问数据库服务器&lt;/li&gt;
&lt;li&gt;&lt;font color=greed&gt;两种架构都离不开网络的支持&lt;/font&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-网络通信协议&#34;&gt;&lt;a href=&#34;#1-2-网络通信协议&#34; class=&#34;headerlink&#34; title=&#34;1.2 网络通信协议&#34;&gt;&lt;/a&gt;1.2 网络通信协议&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP/IP协议&lt;/strong&gt;：传输控制协议/因特网互联协议，是Internet最基本、最广泛的协议，它定义了计算机如何连入因特网，以及数据如何在他们之间进行传输的标准。&lt;br&gt;| 分层模型 | 相应的协议 |&lt;br&gt;|————-:|————:|&lt;br&gt;|应用层| HTTP、FTP、SMTP、SNMP、DNS|&lt;br&gt;|传输层|TCP、UDP|&lt;br&gt;|网络层|ICMP、IGMP、IP、ARP、RARP|&lt;br&gt;|数据链路层||&lt;br&gt;|物理层||&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-3-主要协议分类&#34;&gt;&lt;a href=&#34;#1-3-主要协议分类&#34; class=&#34;headerlink&#34; title=&#34;1.3 主要协议分类&#34;&gt;&lt;/a&gt;1.3 主要协议分类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;UDP&lt;/strong&gt;：用户数据报协议(User Datagram Protocol),UDP是无连接的通信协议，不考虑数据是否发送成功，即为不可靠连接，典型的例子有&lt;strong&gt;发短信&lt;/strong&gt;（发送端发送数据，不会确认接收端是否存在，并且接收端也不会反馈到发送端是否接收到数据）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但UDP的优点也很明显，消耗资源少，通讯效率高，所以对于音频、视频的传输时，偶尔出现丢包的现象也不会对最终的数据结果产生太大的影响&lt;/li&gt;
&lt;li&gt;在传输重要数据的时候，不建议使用UDP协议&lt;/li&gt;
&lt;li&gt;数据被限定在64KB以内&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TCP&lt;/strong&gt;：传输控制协议(Transmission Control Protocol),TCP是面向连接的通信协议，在通信之前，发送端和接收端必须建立逻辑连接，即确保发送端和接收端存在，再进行数据的传输，由客户端(发送端)对服务器(接收端)发送连接请求，即三次握手！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三次握手：TCP协议中，发送数据的准备阶段，由客户端和服务端进行三次交互，确保连接的可靠&lt;ul&gt;
&lt;li&gt;第一次握手：客户端向服务端发送连接请求，等待客户端收到连接请求&lt;/li&gt;
&lt;li&gt;第二次握手：服务端向客户端应答，通知客户端已收到连接请求&lt;/li&gt;
&lt;li&gt;第三次握手：客户端再次向服务端发送确认信息，确认连接&lt;br&gt;&lt;img data-src=&#34;./image/三次握手.png&#34; alt=&#34;三次握手&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-4网络编程三要素&#34;&gt;&lt;a href=&#34;#1-4网络编程三要素&#34; class=&#34;headerlink&#34; title=&#34;1.4网络编程三要素&#34;&gt;&lt;/a&gt;1.4网络编程三要素&lt;/h3&gt;&lt;h4 id=&#34;协议&#34;&gt;&lt;a href=&#34;#协议&#34; class=&#34;headerlink&#34; title=&#34;协议&#34;&gt;&lt;/a&gt;协议&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;计算机网络通信的规则&lt;h4 id=&#34;IP地址&#34;&gt;&lt;a href=&#34;#IP地址&#34; class=&#34;headerlink&#34; title=&#34;IP地址&#34;&gt;&lt;/a&gt;IP地址&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;互联网协议地址&lt;/li&gt;
&lt;li&gt;IP地址分类&lt;ul&gt;
&lt;li&gt;IPv4 ：一个32位的二进制数，被分成四个字节，都是0-255之间的整数，最多有42亿个，现在已经枯竭&lt;/li&gt;
&lt;li&gt;IPv6：一个128位的地址，每16个字节为一组，分成8组的十六进制数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用命令&lt;ul&gt;
&lt;li&gt;查看本机ip地址&lt;pre&gt;&lt;code class=&#34;lang-bash&#34;&gt;ipconfig
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;检查网络是否连通&lt;pre&gt;&lt;code class=&#34;lang-bash&#34;&gt;ping 空格 ip地址
ping 192.168.1.2
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;端口号&#34;&gt;&lt;a href=&#34;#端口号&#34; class=&#34;headerlink&#34; title=&#34;端口号&#34;&gt;&lt;/a&gt;端口号&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口号&lt;/strong&gt;是一个&lt;font color=red&gt;逻辑端口&lt;/font&gt;，我们无法直接看到，只能借助一些软件进行查看，当我们使用网络软件时，操作系统会自动为网络软件分配一个随机的端口号或者由系统指定端口号&lt;/li&gt;
&lt;li&gt;端口号的长度&lt;ul&gt;
&lt;li&gt;是由2个字节组成，取值范围在0-65535之间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;font color=red&gt;注意：
- 1024之前的端口不能使用，因为已经被系统分配给一些已知的网络软件
- 网络软件的端口号不能重复&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;常见的端口号&lt;ol&gt;
&lt;li&gt;80端口： 网络端口， www.baidu.com：80&lt;/li&gt;
&lt;li&gt;数据库  MySQL ：3306  Oracle：1521&lt;/li&gt;
&lt;li&gt;Tomcat服务器 ：8080 &lt;h2 id=&#34;二、TCP通信程序&#34;&gt;&lt;a href=&#34;#二、TCP通信程序&#34; class=&#34;headerlink&#34; title=&#34;二、TCP通信程序&#34;&gt;&lt;/a&gt;二、TCP通信程序&lt;/h2&gt;&lt;h3 id=&#34;2-1-概述&#34;&gt;&lt;a href=&#34;#2-1-概述&#34; class=&#34;headerlink&#34; title=&#34;2.1 概述&#34;&gt;&lt;/a&gt;2.1 概述&lt;/h3&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;TCP通信时两台计算机实现数据交互，&lt;strong&gt;必须区分客户端和服务端&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;通信的步骤：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;服务端程序要提前启动，等待客户端的连接（就像你玩LOL一样，必须下载客户端应用程序，才能对LOL服务端（区服）进行访问）&lt;/li&gt;
&lt;li&gt;客户端主动连接服务端，连接成功才能进行通信，但&lt;font color=blue&gt;服务端不能主动连接客户端&lt;/font&gt;，只能被动连接&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=purple&gt;Java中用于实现TCP通信的两个类&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=purple&gt;客户端&lt;/font&gt;&lt;/strong&gt;：&lt;code&gt;java java.net.Socket&lt;/code&gt;类表示，创建&lt;code&gt;Socket&lt;/code&gt;对象，向服务端发送连接请求，服务端响应请求，两端建立连接开始通信&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=purple&gt;服务端&lt;/font&gt;&lt;/strong&gt;：&lt;code&gt;java.net.ServerSocket&lt;/code&gt;类表示，创建&lt;code&gt;ServerSocket&lt;/code&gt;对象，相当于开启了一个服务，并等待客户端连接&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;服务端必须明确的两件事&lt;ol&gt;
&lt;li&gt;多个客户端和服务器进行交互，服务器必须明确和哪个客户端进行交互——&lt;strong&gt;在服务端有一个accept方法获取请求客户端对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;多个客户端和服务端进行交互，就需要多个IO流对象&lt;ol&gt;
&lt;li&gt;&lt;font color=greed&gt;服务端没有IO流，服务器可以请求客户端对象Socket&lt;/li&gt;
&lt;li&gt;使用每个客户端Socket中提供的IO流和客户端进行交互&amp;lt;/font&amp;gt; &lt;/li&gt;
&lt;li&gt;&lt;font color=purple&gt;服务器使用客户端的字节输入流读取客户端发送的数据&lt;/li&gt;
&lt;li&gt;服务器使用客户端的字节输出流给客户端回写数据&amp;lt;/font&amp;gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=red&gt;即服务器端使用客户端的流与客户端进行交互&lt;/font&gt;&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;./image/服务端与客户端通信.png&#34; alt=&#34;服务端与客户端通信&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-2-Socket-类&#34;&gt;&lt;a href=&#34;#2-2-Socket-类&#34; class=&#34;headerlink&#34; title=&#34;2.2 Socket 类&#34;&gt;&lt;/a&gt;2.2 Socket 类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Socket&lt;/code&gt;类：该类实现客户端套接字，套接字指的是两台设备之间通信的端点&lt;h4 id=&#34;TCP客户端&#34;&gt;&lt;a href=&#34;#TCP客户端&#34; class=&#34;headerlink&#34; title=&#34;TCP客户端&#34;&gt;&lt;/a&gt;TCP客户端&lt;/h4&gt;&lt;h5 id=&#34;构造方法&#34;&gt;&lt;a href=&#34;#构造方法&#34; class=&#34;headerlink&#34; title=&#34;构造方法&#34;&gt;&lt;/a&gt;&lt;strong&gt;构造方法&lt;/strong&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public Socket(String host ,int port)&lt;/code&gt; :创建套接字对象并将其连接到指定主机上的指定端口号，如果指定的host是null，则相当于指定地址为回环地址127.x.x.x&lt;/li&gt;
&lt;li&gt;参数：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String host&lt;/code&gt; ：服务器主机名/服务器IP地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int port&lt;/code&gt; ：服务器端口号&lt;h5 id=&#34;成员方法&#34;&gt;&lt;a href=&#34;#成员方法&#34; class=&#34;headerlink&#34; title=&#34;成员方法&#34;&gt;&lt;/a&gt;&lt;strong&gt;成员方法&lt;/strong&gt;&lt;/h5&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OutputStream getOutputStream();&lt;/code&gt; 返回此套接字的输出流&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InputStream getInputStream():&lt;/code&gt; 返回该套接字的输入流&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void close();&lt;/code&gt; 关闭此套接字&lt;h5 id=&#34;实现方法&#34;&gt;&lt;a href=&#34;#实现方法&#34; class=&#34;headerlink&#34; title=&#34;实现方法&#34;&gt;&lt;/a&gt;&lt;strong&gt;实现方法&lt;/strong&gt;&lt;/h5&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;创建一个客户端对象Socket，构造方法绑定服务器的ip地址和端口号&lt;/li&gt;
&lt;li&gt;使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象&lt;/li&gt;
&lt;li&gt;使用网络字节输出流OutputStream对象中的方法write，给服务器发送数据&lt;/li&gt;
&lt;li&gt;使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象&lt;/li&gt;
&lt;li&gt;使用网络字节输入流InputStream对象中的方法read，读取服务器回写的数据&lt;/li&gt;
&lt;li&gt;释放资源（Socket）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端和服务端进行交互，必须使用Socket中提供的网络流，不能使用自己创建的流对象&lt;/li&gt;
&lt;li&gt;当我们创建客户端对象Socket时，就会去请求服务器和客户端3次握手建立连接通信&lt;ul&gt;
&lt;li&gt;服务端没有启动，则抛出异常&lt;/li&gt;
&lt;li&gt;服务端已经启动，可以进行交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class TCPClient{
    public static void main(String[] args) throws IOException{
        Socket socket = new Socket(&amp;quot;127.0.0.1&amp;quot;,8888);//ip地址和端口号

        OutputStream os = socket.getOutputStream();

        os.write(&amp;quot;你好服务器&amp;quot;.getBytes());

        InputStream is = socket.getInputStream();

        byte[] bytes = new byte[1024];
        int len = is.read(bytes);
        System.out.println(new String(bytes,0,len));

        socket.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;TCP服务端&#34;&gt;&lt;a href=&#34;#TCP服务端&#34; class=&#34;headerlink&#34; title=&#34;TCP服务端&#34;&gt;&lt;/a&gt;TCP服务端&lt;/h4&gt;&lt;h5 id=&#34;表示服务端的类&#34;&gt;&lt;a href=&#34;#表示服务端的类&#34; class=&#34;headerlink&#34; title=&#34;表示服务端的类&#34;&gt;&lt;/a&gt;&lt;strong&gt;表示服务端的类&lt;/strong&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java.net.SreverSocket&lt;/code&gt; 此类实现服务器套接字&lt;h5 id=&#34;构造方法-1&#34;&gt;&lt;a href=&#34;#构造方法-1&#34; class=&#34;headerlink&#34; title=&#34;构造方法&#34;&gt;&lt;/a&gt;&lt;strong&gt;构造方法&lt;/strong&gt;&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServerSocket(int port)&lt;/code&gt; 创建绑定特定端口的服务器套接字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=red&gt;服务器端必须知道是哪个客户端请求的服务器，使用accept方法获取请求的客户端对象Socket&lt;/font&gt;&lt;/strong&gt;&lt;h5 id=&#34;服务器实现步骤&#34;&gt;&lt;a href=&#34;#服务器实现步骤&#34; class=&#34;headerlink&#34; title=&#34;服务器实现步骤&#34;&gt;&lt;/a&gt;&lt;strong&gt;服务器实现步骤&lt;/strong&gt;&lt;/h5&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;创建一个服务端对象ServerSocket对象和系统指定的端口号&lt;/li&gt;
&lt;li&gt;使用ServerSocket对象中的方法accept，获取到请求的客户端对象Socket&lt;/li&gt;
&lt;li&gt;使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象&lt;/li&gt;
&lt;li&gt;使用网络字节输入流InputStream对象中的方法read，读取客户端发送的数据&lt;/li&gt;
&lt;li&gt;使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象&lt;/li&gt;
&lt;li&gt;使用网络字节输出流OutputStream对象中的方法write，给客户端回写数据&lt;/li&gt;
&lt;li&gt;释放资源（Socket，ServerSocket）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class TCPServer{
    Public static void main(String[] args) throws IOException{
        ServerSocket server = new ServerSocket(8888);

        Socket socket = server.accept();

        InputStream is = socket.getInputStream();

        byte[] bytes = new byte[1024];
        int len = is.read(bytes);
        System.out.println(new String(bytes,0,len));

        OutputStream os = socket.getOutputStream();

        os.write(&amp;quot;收到谢谢&amp;quot;.getbytes());
        socket.close();
        server.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/Java%E5%9F%BA%E7%A1%80%E6%B7%B7%E5%90%88/</guid>
            <title>Java基础混合</title>
            <link>https://peter-pan001.github.io/my-blog/Java/Java%E5%9F%BA%E7%A1%80%E6%B7%B7%E5%90%88/</link>
            <category>Java</category>
            <pubDate>Thu, 25 Mar 2021 10:38:36 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;java基础混合&#34;&gt;&lt;a href=&#34;#java基础混合&#34; class=&#34;headerlink&#34; title=&#34;java基础混合&#34;&gt;&lt;/a&gt;java基础混合&lt;/h1&gt;&lt;h2 id=&#34;01-成员变量与局部变量的区别&#34;&gt;&lt;a href=&#34;#01-成员变量与局部变量的区别&#34; class=&#34;headerlink&#34; title=&#34;01 成员变量与局部变量的区别&#34;&gt;&lt;/a&gt;01 成员变量与局部变量的区别&lt;/h2&gt;&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;成员变量&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;局部变量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;在方法的外部，直接写在类中&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;在方法的内部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;作用在整个类中&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;只有方法当中可以使用，出了方法就不能使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;若没有赋值，会存在默认值，与数组规则一致&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;没有默认值，必须必须手动设置默认值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;位于堆内存中&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;位于栈内存中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;随着对象创建而产生，随着对象被垃圾回收而消失&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;随着方法进栈而产生，随着方法出栈而消失&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;代码案例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class demo01{
    String name ; //成员变量

    public void partA(){
        int num =15; //局部变量
        System.out.println(num);
        System.out.println(name);
    }
    public void partB(int c){//方法的参数就是局部变量

    //参数在方法调用时，必然会被赋值
    System.out.println(c);
    int age;//局部变量，没赋值不可用
    System.out.println(name);//可在partB中调用成员变量，但不能调用partA的局部变量num
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;02-关于java修饰符的作用范围&#34;&gt;&lt;a href=&#34;#02-关于java修饰符的作用范围&#34; class=&#34;headerlink&#34; title=&#34;02 关于java修饰符的作用范围&#34;&gt;&lt;/a&gt;02 关于java修饰符的作用范围&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;table-container&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;访问修饰符&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;本类&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;同包&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;子类&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;其他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;private&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;default&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;protected&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;public&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;03-this关键字&#34;&gt;&lt;a href=&#34;#03-this关键字&#34; class=&#34;headerlink&#34; title=&#34;03 this关键字&#34;&gt;&lt;/a&gt;03 this关键字&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;this&lt;br&gt;当方法的局部变量和类的成员变量重名的时候，采用“就近原则”，优先使用局部变量；&lt;br&gt;如果需要访问本类的成员变量，使用格式： this.成员变量名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于this的知识&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过谁调用的方法谁就是this&lt;/li&gt;
&lt;li&gt;使用this可以区分成员变量和局部变量&lt;/li&gt;
&lt;li&gt;this不能用于静态方法中（静态方法的对象已经实例化！）&lt;/li&gt;
&lt;li&gt;在构造方法中使用时，必须置于构造方法的第一行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;04-构造方法&#34;&gt;&lt;a href=&#34;#04-构造方法&#34; class=&#34;headerlink&#34; title=&#34;04 构造方法&#34;&gt;&lt;/a&gt;04 构造方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;什么是构造方法？&lt;br&gt;构造方法是专门用来创建对象的方法，当我们通过关键字new来创建对象时，其实就是在调用构造方法&lt;/li&gt;
&lt;li&gt;构造方法的格式&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; public 类名称(参数类型 参数名称){
     方法体
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red&gt;注意：&lt;/font&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构造方法的名称必须和所在的类名称完全一样，大小写也必须一样&lt;/li&gt;
&lt;li&gt;构造方法不要写返回值类型（void也不行）&lt;/li&gt;
&lt;li&gt;构造方法不能return一个具体的返回值&lt;/li&gt;
&lt;li&gt;如果没有编写任何构造方法，那么编译器会默认创建一个无参构造方法，方法体什么都不做&lt;/li&gt;
&lt;li&gt;构造方法也可以进行重载（重载：方法名称相同，参数个数\顺序\类型不同）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;代码展示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class teacher{
    private String name;
    private int age;
    //无其他任何构造方法创建时，会默认创建一个构造方法
    public teacher(){

    }
    public teacher(){
        //无参的构造方法
        System.out.println(&amp;quot;这是一个构造方法！&amp;quot;);
    }
    public teacher(String name, int age ){
        //有参的构造方法
        this.name=name;
        this.age= age;
    }
    //get/set构造器
    public void setName(String name){
        this.name= name;
    }
    public String getName(String name){
        return name;
    }
    public void setAge(int age){
        this.age= age;
    }
    public int getAge(int age){
        return age;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;一个标准的类所需的部分&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;所有的成员变量都需用private关键字修饰&lt;/li&gt;
&lt;li&gt;为每一个成员变量编写getting\setting构造器&lt;/li&gt;
&lt;li&gt;编写一个无参的构造方法&lt;/li&gt;
&lt;li&gt;编写一个有参的构造方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;05-Scanner类的使用&#34;&gt;&lt;a href=&#34;#05-Scanner类的使用&#34; class=&#34;headerlink&#34; title=&#34;05 Scanner类的使用&#34;&gt;&lt;/a&gt;05 Scanner类的使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过使用Scanner类，实现键盘输入功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导包 &lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;import java.util.Scanner;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;创建对象&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Scanner s = new Scanner(System.in);//s为对象名
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;使用对象&lt;br&gt;对象名.成员方法名&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;int num = s.nextInt();//键盘输入一个整型，并赋值给num变量
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;06-匿名对象&#34;&gt;&lt;a href=&#34;#06-匿名对象&#34; class=&#34;headerlink&#34; title=&#34;06 匿名对象&#34;&gt;&lt;/a&gt;06 匿名对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;匿名对象的基本了解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匿名对象就是只有右边的对象，没有左边的名字和赋值运输符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;new 类名();&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;new person().name =&amp;quot;大司马&amp;quot;;
new person().showName();//此时的匿名对象为全新的，不可引用上次的对象变量
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;匿名对象只能使用唯一的一次，下次在使用&lt;font color=red&gt;必须创建&lt;/font&gt;一个新的对象&lt;/li&gt;
&lt;li&gt;如果确定有一个对象只需使用唯一一次，则可以使用匿名对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;键盘输入与传参&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用匿名对象进行键盘输入&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;int num = new Scanner(System.in).nextInt();
System.out.println(num);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;对比一般键盘输入&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Scanner sc = new Scanner(System.in);
int num2= sc.nextInt();
System.out.println(num2);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用匿名对象传参&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class demo01{
  public static void main (String[] args){
      methoddemo(new Scanner(System.in));
  }
  public static void methoddemo(Scanner sc){
    int i = sc.nextInt();
    System.out.println(i);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;使用匿名对象用返回值键盘输入&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; public class demo01{
  public static void main (String[] args){
    Scanner sc = methodreturn();
    int num = sc.nextInt();
    System.out.println(&amp;quot;输入的值为：&amp;quot;+num);
  }
  public static void methodreturn){
    return new Scanner(System.in);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;07-Random类&#34;&gt;&lt;a href=&#34;#07-Random类&#34; class=&#34;headerlink&#34; title=&#34;07 Random类&#34;&gt;&lt;/a&gt;07 Random类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Random类用来生产随机数字&lt;/li&gt;
&lt;li&gt;使用步骤&lt;ol&gt;
&lt;li&gt;导包&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;import java.util.Random;
&lt;/code&gt;&lt;/pre&gt;
2.创建对象&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Random r = new Random();
&lt;/code&gt;&lt;/pre&gt;
3.使用&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;int num = r.nextInt();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有范围的生成随机数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;int n=5;
Random r= new Random();
int result = r.nextInt(n);//范围为[0,n)
int result2 = r.nextInt(n)+1;//范围为[1,n+1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;08-字符串String类&#34;&gt;&lt;a href=&#34;#08-字符串String类&#34; class=&#34;headerlink&#34; title=&#34;08 字符串String类&#34;&gt;&lt;/a&gt;08 字符串String类&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;String类概述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java.lang.String类表示字符串&lt;/li&gt;
&lt;li&gt;String类为&lt;font color=red&gt;final类型是不可修改&lt;/font&gt;的，也&lt;font color=red&gt;不能被继承&lt;/font&gt;，一旦创建了String对象，他的值就无法改变，如果需要对字符串进行修改，则需要使用StringBuffer或StringBuilder类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串的内容永不改变&lt;/li&gt;
&lt;li&gt;字符串可以共享使用&lt;/li&gt;
&lt;li&gt;底层原理是byte[]字节数组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三种创建方式&lt;ol&gt;
&lt;li&gt;使用无参构造，创建一个空字符串，无任何内容&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;String str1 = new String();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;根据字符数组创建字符串&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Char[] chars = {&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;C&amp;#39;};
String str2 = new String(charsnum);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;根据字节数组创建字符串&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;byte[] bytesnum ={97,98,99};
String str3 = new String(bytesnum);
System.out.println(str3);//打印的是其字节码对应的字符
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;直接创建（本质上也是创建了对象，只不过jvm帮你了！）&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;String str4 = &amp;quot;lesuit&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串比较&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘==’ 是对对象的地址值进行比较，若比较其内容，可以使用public boolean equals(Object obj)进行比较&lt;/li&gt;
&lt;li&gt;任何对象都能用object进行接收&lt;/li&gt;
&lt;li&gt;equals方法具有对称性，a.equals(b)和b.equals(a)效果一样&lt;/li&gt;
&lt;li&gt;比较的一个是常量一个是字符串时，字符串应该放在前面(“abc”.equals(Str))，否则会报错，出现空指针异常&lt;br&gt;例如：&lt;br&gt;```java&lt;br&gt;String str1 = “Hello”;&lt;br&gt;String str2 = “Hello”;&lt;br&gt;char[] arr = {‘H’,’e’,’l’,’l’,’o’};&lt;br&gt;String str3 = new String(arr);&lt;br&gt;String str4 = “hello”;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;System.out.println(str1.equals(Str2));//显然为true&lt;br&gt;System.out.println(str2.equals(Str1));//true&lt;br&gt;System.out.println(str1.equals(Str3));//true&lt;br&gt;System.out.println(str1.equals(Str4));//false&lt;/p&gt;
&lt;p&gt;String str5 = “black”;&lt;br&gt;System.out.println(“black”.equals(str5));//true,推荐使用&lt;br&gt;System.out.println(str5.equals(“black”));//虽然也为true但会出现空指针异常&lt;br&gt;```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串的获取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;常用方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;public int length(),获取字符串当中含有字符的个数，获取字符串长度&lt;/li&gt;
&lt;li&gt;public String concat(String str),将当前字符串和参数字符串拼接成为新的字符串&lt;/li&gt;
&lt;li&gt;public char charAt(int index),获取指定索引位置的单个字符（从0开始）&lt;/li&gt;
&lt;li&gt;public int indexOf(String str),查找参数字符串在本字符串中首次出现的位置，如果没有返回-1&lt;br&gt;```java&lt;br&gt;//获取字符串长度&lt;br&gt;int stringlen = “abcderfhijkouys”.length();&lt;br&gt;System.out.println(“字符串的长度：”+stringlen);&lt;br&gt;//拼接字符串&lt;br&gt;String str1 = “hello”; //hello&lt;br&gt;String str2 = “world”; //world&lt;br&gt;String str3 = str1.concat(str2); //helloworld &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;//查找单个字符&lt;br&gt;String str4 = “hello”;&lt;br&gt;char ch = str4.charAt(1);&lt;br&gt;System.out.println(str4+”的第一个字符是”+ch);&lt;br&gt;//查找参数字符串在原字符串出现的第一次的索引位置&lt;br&gt;String str6 = “nothingisimpossiblenothing”;&lt;br&gt;int index = str6.indexOf(“ing”);&lt;br&gt;System.out.println(index);//4&lt;br&gt;```&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串的截取方法&lt;ul&gt;
&lt;li&gt;public String substring(int index)，截取从参数位置一直到字符串结尾，返回新的字符串&lt;/li&gt;
&lt;li&gt;public String substring(int begin,int end),截取从begin开始end结束的字符串 [begin,end)&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;String str1 = &amp;quot;helloworld&amp;quot;;
String str2 = str1.substring(5);//world
string str3 = str1.substring(3,6);//low
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串的常用转换方法&lt;ul&gt;
&lt;li&gt;public char[] toCharArray(),将当前字符串拆分成字符数组作为返回值&lt;/li&gt;
&lt;li&gt;public byte[] getBytes(),获取当前字符串底层的字节数组&lt;/li&gt;
&lt;li&gt;public String replace(CharSequence oldString,CharSequence newString),将所有出现的原字符串替换为新字符串，返回替换之后的新字符串&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;//转换为字符数组
char[] chars = &amp;quot;Hello&amp;quot;.toCharArray();
System.out.println(chars[0]); //H
System.out.println(chars.length); //5
//转换为字节数组
byte[] bytes = &amp;quot;abc&amp;quot;.getBytes();
for(int i = 0;i&amp;lt;bytes.length,i++){
System.out.println(byte[i]);
}
//内容替换
String str1= &amp;quot;what the fuck&amp;quot;;
Sting str2= str1.replace(&amp;quot;fuck&amp;quot;,&amp;quot;****&amp;quot;);
System.out.println(str1);//what the fuck
System.out.println(Str2);//what the ****
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串分割方法&lt;ul&gt;
&lt;li&gt;public String[] split(String regex),按照参数的规则，将字符串切分成若干部分&lt;/li&gt;
&lt;li&gt;split方法的参数其实是一个正则表达式，要按照“ . ”进行切分，必须写成”\.“&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;String str1 =&amp;quot;what a beautiful world&amp;quot;;
String[] arr1 = str1.split(&amp;quot; &amp;quot;);//逢遇到空格就切割形成新的字符串
for(int i = 0; i&amp;lt;arr1.length;i++){
System.out.println(arr1[i]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;09-Arrays工具类&#34;&gt;&lt;a href=&#34;#09-Arrays工具类&#34; class=&#34;headerlink&#34; title=&#34;09 Arrays工具类&#34;&gt;&lt;/a&gt;09 Arrays工具类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;java.util.Arrays是一个与数组相关的工具类，里面提供了大量的静态方法，用来实现数组场景的操作&lt;/li&gt;
&lt;li&gt;public static String toString(数组名),将参数数组变成字符串[元素1，元素二….]&lt;/li&gt;
&lt;li&gt;&lt;p&gt;public static void sort(数组名)，按照默认升序对数组的元素进行排序（若元素为数值，则sort默认升序；若元素为字符串，则sort默认按照字母升序，若为自定义类型，需要通过Comparable接口支持）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;int[] intArray = {10,20,45};
String intStr = Arrays.toString(inArray);
System.out.println(intstr);

int[] arr1 = {1,5,89,63,12};
Arrays.sort(arr1);
System.out.println(Array.toString(arr1));

String[] arr2 = {&amp;quot;aaa&amp;quot;,&amp;quot;bbb&amp;quot;,&amp;quot;ccc&amp;quot;};
Arrays.sort(arr2);
System.out.println(Arrays.toString(arr2));

//倒序遍历
String str = &amp;quot;ahsdhancaciosihd&amp;quot;;
char[] chars = str.toCharArray();
Arrays.sort(chars);
for(int i =chars.length-1;i&amp;gt;=0;i--){//IDEA快捷键：数组名.forr
   System.out.println(chars[i]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10-Math工具类&#34;&gt;&lt;a href=&#34;#10-Math工具类&#34; class=&#34;headerlink&#34; title=&#34;10 Math工具类&#34;&gt;&lt;/a&gt;10 Math工具类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;java.util.Math类是数学相关的工具类，提供大量静态方法，完成与数学相关的操作&lt;ul&gt;
&lt;li&gt;public static double ads(double num)，获取绝对值&lt;/li&gt;
&lt;li&gt;public static double ceil(double num),向上取整&lt;/li&gt;
&lt;li&gt;public static double floor(double num),向下取整&lt;/li&gt;
&lt;li&gt;public static long round(double num),四舍五入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;11-抽象类与抽象方法&#34;&gt;&lt;a href=&#34;#11-抽象类与抽象方法&#34; class=&#34;headerlink&#34; title=&#34;11 抽象类与抽象方法&#34;&gt;&lt;/a&gt;11 抽象类与抽象方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;抽象方法&lt;br&gt;就是加上abstract关键字，然后去掉大括号，直接分号结束&lt;/li&gt;
&lt;li&gt;抽象类&lt;br&gt;抽象方法的所在类，必须是抽象类，在class前加abstract关键字&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能直接创建new抽象类对象&lt;/li&gt;
&lt;li&gt;必须用一个子类来继承抽象父类&lt;/li&gt;
&lt;li&gt;创建子类对象时进行使用&lt;/li&gt;
&lt;li&gt;抽象类不能创建对象，如果创建，编译无法通过而报错，只能创建其非抽象子类的对象（假设创建了抽象类的对象，调用了抽象类的方法，而抽象方法没有具体的方法体没有意义）&lt;/li&gt;
&lt;li&gt;抽象类中，可以有构造方法，是供子类创建对象时初始化父类使用的（子类的构造方法中，有默认的super()，需要方法父类的构造方法）&lt;/li&gt;
&lt;li&gt;抽象类中，不一定包含抽象方法，但是有抽象方法必定有抽象类（未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计）&lt;/li&gt;
&lt;li&gt;抽象类的子类，必须重写抽象父类中所有的抽象方法&lt;br&gt;```java&lt;br&gt;public abstract class Person{&lt;br&gt;//抽象方法，无方法体&lt;br&gt;public abstract void eat();&lt;br&gt;//普通方法&lt;br&gt;public void eating(){&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;}&lt;br&gt;}&lt;br&gt;```&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-接口（interface）&#34;&gt;&lt;a href=&#34;#12-接口（interface）&#34; class=&#34;headerlink&#34; title=&#34;12 接口（interface）&#34;&gt;&lt;/a&gt;12 接口（interface）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;接口概述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口就是多个类的公共规范&lt;/li&gt;
&lt;li&gt;接口是一种引用数据类型&lt;/li&gt;
&lt;li&gt;接口都可以定义抽象方法&lt;/li&gt;
&lt;li&gt;接口不能直接使用，必须有一个实现类来实现接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;格式：&lt;br&gt;public abstract 返回值类型 方法名（参数列表）; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public class 实现类名 implements 接口名{ }&lt;/li&gt;
&lt;li&gt;接口的实现类必须重写接口的所有抽象方法（去掉abstract，加上方法体）&lt;/li&gt;
&lt;li&gt;创建实现类对象，使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口默认方法&lt;ul&gt;
&lt;li&gt;格式：&lt;ul&gt;
&lt;li&gt;public default 返回值类型 方法名（参数列表）{  }&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用方法&lt;ol&gt;
&lt;li&gt;接口的默认方法，可以通过接口实现类对象直接调用&lt;/li&gt;
&lt;li&gt;也可以被接口实现类进行覆盖重写&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口静态方法&lt;ul&gt;
&lt;li&gt;格式：&lt;ul&gt;
&lt;li&gt;public static返回值类型 方法名（参数列表）{  }&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用方法&lt;ul&gt;
&lt;li&gt;通过接口名，直接调用其中的静态方法&lt;ul&gt;
&lt;li&gt;接口名.静态方法名（参数）;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口私有方法&lt;ul&gt;
&lt;li&gt;使用场景&lt;ul&gt;
&lt;li&gt;需要抽取一个公有方法，来解决两个默认方法之间代码重复的问题（公有方法不能让实现类使用）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;普通私有方法：解决多个默认方法之间重复代码问题&lt;ul&gt;
&lt;li&gt;private 返回值类型 方法名（参数）{  }&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;静态私有方法：解决多个静态方法之间重复代码问题&lt;ul&gt;
&lt;li&gt;private static 返回值类型 方法名（参数）{  }  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口的常量&lt;ul&gt;
&lt;li&gt;格式&lt;ul&gt;
&lt;li&gt;public static final 数据类型 常量名 = 数值；&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public static final int OUT_OF_BUSS = 12;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关于常量&lt;ul&gt;
&lt;li&gt;可以省略 public static final&lt;/li&gt;
&lt;li&gt;必须赋值&lt;/li&gt;
&lt;li&gt;常量名必须大写，多个单词用下划线分隔开 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/JavaSE%E5%B0%8F%E7%BB%93/</guid>
            <title>JavaSE小结</title>
            <link>https://peter-pan001.github.io/my-blog/Java/JavaSE%E5%B0%8F%E7%BB%93/</link>
            <category>Java</category>
            <pubDate>Tue, 05 Jan 2021 10:53:33 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;语言背景&#34;&gt;&lt;a href=&#34;#语言背景&#34; class=&#34;headerlink&#34; title=&#34;语言背景&#34;&gt;&lt;/a&gt;语言背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Java于1995年诞生，拥有跨平台、面向对象、泛型编程的特性，广泛应用于企业级Web引用开发和移动应用开发&lt;/li&gt;
&lt;li&gt;Java有三个版本&lt;ul&gt;
&lt;li&gt;JavaSE(标准版)&lt;/li&gt;
&lt;li&gt;JavaEE(企业版)&lt;/li&gt;
&lt;li&gt;JavaME(微型版)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2006年发布Hadoop&lt;/li&gt;
&lt;li&gt;JDK：java开发工具包，里面包含了各种用于java程序开发的基本工具包&lt;/li&gt;
&lt;li&gt;JRE：java运行环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基础语法&#34;&gt;&lt;a href=&#34;#基础语法&#34; class=&#34;headerlink&#34; title=&#34;基础语法&#34;&gt;&lt;/a&gt;基础语法&lt;/h2&gt;&lt;h3 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单行注释： &lt;code&gt;//&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;多行注释： &lt;code&gt;/**/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文档注释： &lt;code&gt;/** */&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;标识符&#34;&gt;&lt;a href=&#34;#标识符&#34; class=&#34;headerlink&#34; title=&#34;标识符&#34;&gt;&lt;/a&gt;标识符&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;标识符即关键字，如： &lt;code&gt;public&lt;/code&gt;、&lt;code&gt;finally&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;&lt;a href=&#34;#数据类型&#34; class=&#34;headerlink&#34; title=&#34;数据类型&#34;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基本数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;整型&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;byte&lt;/li&gt;
&lt;li&gt;short&lt;/li&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;long&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字符型&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;char&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浮点型&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;double&lt;/li&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;布尔型&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;引用数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;li&gt;接口&lt;/li&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类型转换&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;自动转换(低转高)&lt;/li&gt;
&lt;li&gt;强制转换(高转低)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;变量与常量&#34;&gt;&lt;a href=&#34;#变量与常量&#34; class=&#34;headerlink&#34; title=&#34;变量与常量&#34;&gt;&lt;/a&gt;变量与常量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type varName [=value];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;作用域&lt;ul&gt;
&lt;li&gt;类变量&lt;/li&gt;
&lt;li&gt;实例变量&lt;/li&gt;
&lt;li&gt;局部变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;final MIN_B = 10;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命名规范&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;见名知意&lt;/li&gt;
&lt;li&gt;驼峰命名法&lt;/li&gt;
&lt;li&gt;类命名首字母大写&lt;/li&gt;
&lt;li&gt;常量：&amp;nbsp;大写+下划线&lt;/li&gt;
&lt;li&gt;不使用驼峰命名法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运算符&#34;&gt;&lt;a href=&#34;#运算符&#34; class=&#34;headerlink&#34; title=&#34;运算符&#34;&gt;&lt;/a&gt;运算符&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;算术运算符&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+,-,*,/,%,++,--&lt;/code&gt;&amp;nbsp;(加、减、乘、除、取余数、自增、自减)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;赋值运算符&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关系运算符&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;,&amp;lt;,=&amp;gt;,&amp;lt;=,==,!=&lt;/code&gt;&amp;nbsp;&lt;code&gt;instance of&lt;/code&gt;&amp;nbsp;(大于、小于、大于等于、小于等于、等于、不等于、判断是否为类的实例化对象)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逻辑运算符&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;,||,!&lt;/code&gt;&amp;nbsp;(与、或、非)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;位运算符&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;,|,^,~,&amp;gt;&amp;gt;,&amp;lt;&amp;lt;,&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&amp;nbsp;(位与、位或、位异或、位非、左移、右移、无符号右移)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;条件运算符&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?:&lt;/code&gt;&amp;nbsp;(表达式 ？ 为真语句 ：为假语句)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展运算符&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+=,-=,*=,/=&lt;/code&gt;&amp;nbsp;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a+=2 === a=a+2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a*=2 === a==a*2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a-=2 === a=a-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a/=2 === a=a/2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;包机制&#34;&gt;&lt;a href=&#34;#包机制&#34; class=&#34;headerlink&#34; title=&#34;包机制&#34;&gt;&lt;/a&gt;包机制&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;域名倒写&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防止命名冲突&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;JavaDoc&#34;&gt;&lt;a href=&#34;#JavaDoc&#34; class=&#34;headerlink&#34; title=&#34;JavaDoc&#34;&gt;&lt;/a&gt;JavaDoc&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JDK帮助文档&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;javadoc&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@author&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@since&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@param&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@return&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@thoows&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;  public Class Welcome {
    /**
    * @author theMan
    * @param args
    * @since 1.0
    * @throws 无异常抛出
    */
    public static void main(String[] args){
      System.out.println(&amp;quot;welcome&amp;quot;);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;流程控制&#34;&gt;&lt;a href=&#34;#流程控制&#34; class=&#34;headerlink&#34; title=&#34;流程控制&#34;&gt;&lt;/a&gt;流程控制&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scanner&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;用户交互&amp;nbsp;&lt;code&gt;System.in&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;顺序结构&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;单选择结构&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if-else&lt;/code&gt;多选择结构&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switch&lt;/code&gt;多选结构&lt;ul&gt;
&lt;li&gt;jdk支持了&lt;code&gt;String&lt;/code&gt;类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;case&lt;/code&gt;穿透现象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;默认&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环结构&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt;避免死循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do-while&lt;/code&gt;先执行，后判断&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;增强for循环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特殊&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;跳出循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt;终止本次循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return&lt;/code&gt;结束方法运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;方法&#34;&gt;&lt;a href=&#34;#方法&#34; class=&#34;headerlink&#34; title=&#34;方法&#34;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;何为方法&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;修饰符 返回值 方法名(参数名){return 返回值;}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法调用&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;类名.方法&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;对象.方法&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法重载&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;名字相同，但参数列表不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命令行传参&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;给main方法传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可变长参数&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;必须放在最后一个参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;递归&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数组&#34;&gt;&lt;a href=&#34;#数组&#34; class=&#34;headerlink&#34; title=&#34;数组&#34;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数组举例&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new int[10]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{1,2,3}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;同一数组内的数据必须相同类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数组的使用&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;通过下标拿到值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArrayIndexOfBounds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;增强的for循环遍历&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二维数组&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new int[][]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array工具类&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排序算法&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;冒泡排序&lt;/li&gt;
&lt;li&gt;选择排序&lt;/li&gt;
&lt;li&gt;插入排序&lt;/li&gt;
&lt;li&gt;快速排序&lt;/li&gt;
&lt;li&gt;归并排序&lt;/li&gt;
&lt;li&gt;希尔排序&lt;/li&gt;
&lt;li&gt;堆排序&lt;/li&gt;
&lt;li&gt;桶排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;面向对象&#34;&gt;&lt;a href=&#34;#面向对象&#34; class=&#34;headerlink&#34; title=&#34;面向对象&#34;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;何为面向对象&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把相关的数据和方法组织为一个整体来看待，从更高的层次来进行系统建模，更贴近事物的自然运行模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;类与对象&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类是对象的抽象：即模板Class&lt;/li&gt;
&lt;li&gt;对象是类的实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构造方法&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;构造的重载&lt;ul&gt;
&lt;li&gt;默认为无参构造&lt;/li&gt;
&lt;li&gt;如果手动定义了一个有参构造就必须再加一个无参构造&lt;/li&gt;
&lt;li&gt;单例模式，需要构造器私有！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;new对象&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;栈存放引用&lt;/li&gt;
&lt;li&gt;堆存放具体的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;封装&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;属性私有，即：&lt;code&gt;get&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;继承&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;子类拥有父类的全部属性&lt;/li&gt;
&lt;li&gt;方法重写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;super&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Java是单继承，只可继承一个父类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;多态&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父类的引用指向子类的对象&amp;nbsp; &lt;code&gt;Person person = new Student();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instance of&lt;/code&gt;关键，如果匹配，可以进行类型之间的转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;修饰符&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abstract&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;接口&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;interface&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;约束：只能定义方法名&lt;/li&gt;
&lt;li&gt;子类实现接口时，必须重写其方法&lt;/li&gt;
&lt;li&gt;只有一个方法的接口叫做函数式接口，可使用&lt;code&gt;lamda&lt;/code&gt;表达式进行简化&lt;/li&gt;
&lt;li&gt;接口比抽象类更抽象&lt;/li&gt;
&lt;li&gt;一个类可以实现多个接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;内部类&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;局部内部类&lt;/li&gt;
&lt;li&gt;静态内部类&lt;/li&gt;
&lt;li&gt;匿名内部类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;异常&#34;&gt;&lt;a href=&#34;#异常&#34; class=&#34;headerlink&#34; title=&#34;异常&#34;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Throwable&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exception&lt;ul&gt;
&lt;li&gt;运行时异常&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1/0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ClassNotFound&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NullPoint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UnKonwnType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArrayIndexOutOfBounds&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;检查时异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Error&lt;ul&gt;
&lt;li&gt;AWT错误&lt;/li&gt;
&lt;li&gt;JVM错误&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StackOverFlow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OutOfMemory&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;五个关键字&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;try{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;catch(){}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finally{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;throw&lt;/code&gt;&amp;nbsp;手动抛出异常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;throws&lt;/code&gt;&amp;nbsp;方法抛出异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;自定义异常&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承&lt;code&gt;Exception&lt;/code&gt;类即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常用类&#34;&gt;&lt;a href=&#34;#常用类&#34; class=&#34;headerlink&#34; title=&#34;常用类&#34;&gt;&lt;/a&gt;常用类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Object类&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hashcode()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clone()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getClass()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notify()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equals()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Math类&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;常见的数学运算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Random类&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;生成随机数&amp;nbsp;&lt;code&gt;UUID&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File类&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;文件的增删改查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;包装类&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;自动装箱&lt;/li&gt;
&lt;li&gt;自动拆箱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Date类&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;simpleDateFormat&lt;/code&gt;:&amp;nbsp;&lt;code&gt;yyyy-MM-dd HH:mm:ss&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Calendar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String类&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;不可变性final,操作量较少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StringBuffer&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;可变长&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;多线程数据量较大&lt;/li&gt;
&lt;li&gt;效率低，安全&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StringBuilder&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;可变长&lt;/li&gt;
&lt;li&gt;单线程数据量较大&lt;/li&gt;
&lt;li&gt;效率高，不安全&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String str = &amp;quot;a&amp;quot;+1 + 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String str = &amp;#39;a&amp;#39; + 1 + 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String str = 1+2+&amp;#39;a&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;集合框架&#34;&gt;&lt;a href=&#34;#集合框架&#34; class=&#34;headerlink&#34; title=&#34;集合框架&#34;&gt;&lt;/a&gt;集合框架&lt;/h2&gt;&lt;h3 id=&#34;Collection&#34;&gt;&lt;a href=&#34;#Collection&#34; class=&#34;headerlink&#34; title=&#34;Collection&#34;&gt;&lt;/a&gt;Collection&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;List&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ArrayList&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contains()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getFirst()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getLast()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeFirst()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addFirst()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iterator迭代器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TreeSet&lt;/code&gt;&lt;h3 id=&#34;Map&#34;&gt;&lt;a href=&#34;#Map&#34; class=&#34;headerlink&#34; title=&#34;Map&#34;&gt;&lt;/a&gt;Map&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TreeMap&lt;/code&gt;&lt;h3 id=&#34;Collections工具类&#34;&gt;&lt;a href=&#34;#Collections工具类&#34; class=&#34;headerlink&#34; title=&#34;Collections工具类&#34;&gt;&lt;/a&gt;Collections工具类&lt;/h3&gt;&lt;h3 id=&#34;泛型&#34;&gt;&lt;a href=&#34;#泛型&#34; class=&#34;headerlink&#34; title=&#34;泛型&#34;&gt;&lt;/a&gt;泛型&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;约束，避免类型转换之间的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;I-O流&#34;&gt;&lt;a href=&#34;#I-O流&#34; class=&#34;headerlink&#34; title=&#34;I/O流&#34;&gt;&lt;/a&gt;I/O流&lt;/h2&gt;&lt;h3 id=&#34;字节流&#34;&gt;&lt;a href=&#34;#字节流&#34; class=&#34;headerlink&#34; title=&#34;字节流&#34;&gt;&lt;/a&gt;字节流&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;输出：&lt;code&gt;OutputStream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输入：&lt;code&gt;InputStream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字符流&#34;&gt;&lt;a href=&#34;#字符流&#34; class=&#34;headerlink&#34; title=&#34;字符流&#34;&gt;&lt;/a&gt;字符流&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reader&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wirter&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;节点流&#34;&gt;&lt;a href=&#34;#节点流&#34; class=&#34;headerlink&#34; title=&#34;节点流&#34;&gt;&lt;/a&gt;节点流&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CharArrayReader&lt;/code&gt;、&lt;code&gt;Wirter&lt;/code&gt;、&lt;code&gt;inputstream&lt;/code&gt;、&lt;code&gt;outputstream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StringReader&lt;/code&gt;、&lt;code&gt;Writer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipe&lt;/code&gt;、&lt;code&gt;pipedOutputStream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;处理流&#34;&gt;&lt;a href=&#34;#处理流&#34; class=&#34;headerlink&#34; title=&#34;处理流&#34;&gt;&lt;/a&gt;处理流&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;buffer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bufferInputStream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bufferOutputStream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bufferReader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bufferWriter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;data&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DataInputStream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DataOutputStream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;object流&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转换流&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;InputStreamReader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OutputStreamWriter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filter&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;四个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;print&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PrintWriter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PrintStream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多线程&#34;&gt;&lt;a href=&#34;#多线程&#34; class=&#34;headerlink&#34; title=&#34;多线程&#34;&gt;&lt;/a&gt;多线程&lt;/h2&gt;&lt;h3 id=&#34;进程和线程&#34;&gt;&lt;a href=&#34;#进程和线程&#34; class=&#34;headerlink&#34; title=&#34;进程和线程&#34;&gt;&lt;/a&gt;进程和线程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Start()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程创建的方式&#34;&gt;&lt;a href=&#34;#线程创建的方式&#34; class=&#34;headerlink&#34; title=&#34;线程创建的方式&#34;&gt;&lt;/a&gt;线程创建的方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Callable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;静态代理&#34;&gt;&lt;a href=&#34;#静态代理&#34; class=&#34;headerlink&#34; title=&#34;静态代理&#34;&gt;&lt;/a&gt;静态代理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new Thread(Runnable).start();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Lamda表达式&#34;&gt;&lt;a href=&#34;#Lamda表达式&#34; class=&#34;headerlink&#34; title=&#34;Lamda表达式&#34;&gt;&lt;/a&gt;Lamda表达式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数式编程&lt;/li&gt;
&lt;li&gt;避免内部类定义过多&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new Thread(()-&amp;gt;{System.out.printIn();}).start();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程的状态&#34;&gt;&lt;a href=&#34;#线程的状态&#34; class=&#34;headerlink&#34; title=&#34;线程的状态&#34;&gt;&lt;/a&gt;线程的状态&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;新建态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;就绪态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;阻塞态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;死亡态&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用的方法&#34;&gt;&lt;a href=&#34;#常用的方法&#34; class=&#34;headerlink&#34; title=&#34;常用的方法&#34;&gt;&lt;/a&gt;常用的方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sleep()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yield()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isLive()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setPriority()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interrupt()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程同步&#34;&gt;&lt;a href=&#34;#线程同步&#34; class=&#34;headerlink&#34; title=&#34;线程同步&#34;&gt;&lt;/a&gt;线程同步&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多个对象操作同一个资源，并发&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对列+锁&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Synchronized&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;同步方法&lt;/li&gt;
&lt;li&gt;同步代码块（常用）&lt;/li&gt;
&lt;li&gt;锁，第一个线程进来拿到锁，后面的就要排队了，直到这个线程释放锁，后面的线程才能拿到锁进去&lt;/li&gt;
&lt;li&gt;死锁，两个人都抱着对方的锁&lt;ul&gt;
&lt;li&gt;互斥&lt;/li&gt;
&lt;li&gt;请求与保持&lt;/li&gt;
&lt;li&gt;不剥夺条件&lt;/li&gt;
&lt;li&gt;循环等待条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lock&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trylock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unlock&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程通信&#34;&gt;&lt;a href=&#34;#线程通信&#34; class=&#34;headerlink&#34; title=&#34;线程通信&#34;&gt;&lt;/a&gt;线程通信&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;缓冲区：消息队列&lt;/li&gt;
&lt;li&gt;标志位：红绿灯&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notifyAll()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程池&#34;&gt;&lt;a href=&#34;#线程池&#34; class=&#34;headerlink&#34; title=&#34;线程池&#34;&gt;&lt;/a&gt;线程池&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;池化技术&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;池的大小&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最大连接数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保持时间&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络编程&#34;&gt;&lt;a href=&#34;#网络编程&#34; class=&#34;headerlink&#34; title=&#34;网络编程&#34;&gt;&lt;/a&gt;网络编程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Socket编程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;三次握手&lt;/li&gt;
&lt;li&gt;四次挥手&lt;/li&gt;
&lt;li&gt;面向连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;无连接&lt;/li&gt;
&lt;li&gt;Packet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;URL&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初识Tomcat&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;聊天通信&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件上传&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;GUI&#34;&gt;&lt;a href=&#34;#GUI&#34; class=&#34;headerlink&#34; title=&#34;GUI&#34;&gt;&lt;/a&gt;GUI&lt;/h2&gt;&lt;h3 id=&#34;AWT&#34;&gt;&lt;a href=&#34;#AWT&#34; class=&#34;headerlink&#34; title=&#34;AWT&#34;&gt;&lt;/a&gt;AWT&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Frame&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监听事件&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;鼠标&lt;/li&gt;
&lt;li&gt;键盘&lt;/li&gt;
&lt;li&gt;窗口&lt;/li&gt;
&lt;li&gt;动作事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Swing&#34;&gt;&lt;a href=&#34;#Swing&#34; class=&#34;headerlink&#34; title=&#34;Swing&#34;&gt;&lt;/a&gt;Swing&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文本框&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标签&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按钮&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文本域&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面板&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;布局方式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关闭窗口&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列表&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注解和反射&#34;&gt;&lt;a href=&#34;#注解和反射&#34; class=&#34;headerlink&#34; title=&#34;注解和反射&#34;&gt;&lt;/a&gt;注解和反射&lt;/h2&gt;&lt;h3 id=&#34;注解&#34;&gt;&lt;a href=&#34;#注解&#34; class=&#34;headerlink&#34; title=&#34;注解&#34;&gt;&lt;/a&gt;注解&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;元注解&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置注解&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自定义注解&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反射读取注解&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;反射&#34;&gt;&lt;a href=&#34;#反射&#34; class=&#34;headerlink&#34; title=&#34;反射&#34;&gt;&lt;/a&gt;反射&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Class&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;newInstance()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类加载机制&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Method&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;invoke(person1,&amp;quot;kevin&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;存在重载，需要些参数的类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Field&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set(person2,&amp;quot;marvin&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Construct&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;newInstance()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取的时候需要传递参数的class类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;破坏私有关键字&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setAccessible(true);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能分析&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;正常&amp;gt;检测关闭的反射&amp;gt;默认的反射&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;反射获得注解、泛型&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/</guid>
            <title>多线程笔记总结</title>
            <link>https://peter-pan001.github.io/my-blog/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/</link>
            <category>Java</category>
            <pubDate>Tue, 27 Oct 2020 22:03:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;JAVA多线程笔记总结&#34;&gt;&lt;a href=&#34;#JAVA多线程笔记总结&#34; class=&#34;headerlink&#34; title=&#34;JAVA多线程笔记总结&#34;&gt;&lt;/a&gt;JAVA多线程笔记总结&lt;/h1&gt;&lt;h2 id=&#34;线程简介&#34;&gt;&lt;a href=&#34;#线程简介&#34; class=&#34;headerlink&#34; title=&#34;线程简介&#34;&gt;&lt;/a&gt;线程简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;进程与线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;| 进程（process）                                              | 线程(Thread)                                                 |&lt;br&gt;| —————————————————————————————— | —————————————————————————————— |&lt;br&gt;| 进程是&lt;strong&gt;程序的一次执行&lt;/strong&gt;，是系统进行资源&lt;strong&gt;分配和调度的一个独立单位&lt;/strong&gt; | 线程作为资源&lt;strong&gt;调度&lt;/strong&gt;的基本单位，&lt;strong&gt;是程序的执行单元，执行路径&lt;/strong&gt; |&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;线程的3个基本状态&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;就绪&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阻塞&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;线程的5种基本操作&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阻塞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;被终止&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;线程的两个基本类型&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;用户级线程&lt;/strong&gt; ：管理过程全部由用户程序完成，&lt;strong&gt;操作系统内核心只对进程进行管理。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;系统级线程&lt;/strong&gt;(核心级线程)：&lt;strong&gt;由操作系统内核进行管理&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;何为多任务？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;生活中有很多例子，如：在开车时打电话吃零食；即一个对象同时进行多项任务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;何为多线程？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在打游戏时，游戏中出现的视频、音频、字幕、震动反馈等都是一个个的线程，在游戏这个应用程序下分支为多个线程，而游戏就是一个进程！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Java实现多线程&#34;&gt;&lt;a href=&#34;#Java实现多线程&#34; class=&#34;headerlink&#34; title=&#34;Java实现多线程&#34;&gt;&lt;/a&gt;Java实现多线程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法一：通过继承Thread类调用线程&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;继承Thread类&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class MyThread extends Thread {
        //线程体
    @Override//重写run方法
    public void run() {
        for (int x = 0; x &amp;lt; 200; x++) {
            System.out.println(x);
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;start()方法启动线程&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public static void main(String[] args) {
        //main线程
        //TextThread01该代码的类
        //创建一个线程对象
        TextThread01 textThread01 = new TextThread01();
        //调用start()方法启动线程
        textThread01.start();

        for (int i = 0; i &amp;lt; 2000; i++) {
            System.out.println(&amp;quot;打游戏  &amp;quot;+i);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法二：实现Runnable接口&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;实现Runnable接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; public class TextThread03 implements Runnable {
    @Override
    public void run() {
        //run方法线程体
        for (int i = 0; i &amp;lt; 200; i++) {
            System.out.println(&amp;quot;正在敲代码---&amp;quot;+i);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在主线程下创建Runnable接口实现类对象 ，并使用new Thread(对象名).start();启动线程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public static void main(String[] args) {
        //创建Runnable接口实现类对象
        TextThread03 thread03 = new TextThread03();
  //启动方式一：
//        Thread thread = new Thread();
//
//        thread.start();
 //启动方式二：
        new Thread(thread03).start();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方式三：实现Callable接口，需要返回值类型&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;实现callable接口，重写call方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class Text_Callable implements Callable&amp;lt;Boolean&amp;gt; {//此处的返回值类型为布尔类型
    private String url;//网络图片地址
    private String name;

    public Text_Callable(String url, String name) {
        this.url = url;
        this.name = name;
    }

    @Override
    public Boolean call() {
        WebDownloader webDownload = new WebDownloader();
        webDownload.downloader(url, name);
        System.out.println(&amp;quot;下载了文件名为&amp;quot; + name + &amp;quot;的文件&amp;quot;);
        return  true;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建线程对象(在main方法中)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; Text_Callable t1 = new Text_Callable(&amp;quot;https://pic2.zhimg.com/80/v2-517bd06e7b6fdaec9b9a0b3df525fc29_1440w.jpg&amp;quot;, &amp;quot;1.jpg&amp;quot;);
        Text_Callable t2 = new Text_Callable(&amp;quot;https://pic3.zhimg.com/80/v2-c9b19e6c66d08934922ed266d71fca5d_720w.jpg&amp;quot;, &amp;quot;2.jpg&amp;quot;);
        Text_Callable t3 = new Text_Callable(&amp;quot;https://pic4.zhimg.com/80/v2-c5eeefcb0c6c9f86553ace622a7e8329_720w.jpg&amp;quot;, &amp;quot;3.jpg&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建执行服务：创建线程池 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;ExecutorService ser = Executors.newFixedThreadPool(3);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配合future接口执行服务&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java\&#34;&gt;Future&amp;lt;Boolean&amp;gt; r1 = ser.submit(t1);
Future&amp;lt;Boolean&amp;gt; r2 = ser.submit(t2);
Future&amp;lt;Boolean&amp;gt; r3 = ser.submit(t3);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取结果&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;  boolean rs1 = r1.get();
  boolean rs2 = r2.get();
  boolean rs3 = r3.get();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6.关闭服务&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; ser.shutdownNow();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;并发与并行&#34;&gt;&lt;a href=&#34;#并发与并行&#34; class=&#34;headerlink&#34; title=&#34;并发与并行&#34;&gt;&lt;/a&gt;并发与并行&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;并行：&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;* 并行性是指**同一时刻**发生两个或多个事件
   * 并行是在不同的实体上的多个事件
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并发：&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;* 并发性是指**同一时间间隔内**发生两个或多个事件
   * 并发是**同一实体**上的多个事件
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Thread类源码分析&#34;&gt;&lt;a href=&#34;#Thread类源码分析&#34; class=&#34;headerlink&#34; title=&#34;Thread类源码分析&#34;&gt;&lt;/a&gt;Thread类源码分析&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设置线程名&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Thread.currentThread().getName()
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;守护线程  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;thread.setDaemon(true);//默认为false，表示用户线程

        thread.start();//启动守护线程

        new Thread(you).start();//启动用户线程
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优先级线程&lt;/p&gt;
&lt;p&gt;调用Thread.currentThread().getPriority()获得优先级线程的级别（int）&lt;/p&gt;
&lt;p&gt;创建MyPriority实现runnable接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;class MyPriority implements Runnable{
    @Override
    public void run() {
        System.out.println(Thread.currentThread().getName()+&amp;quot;---&amp;gt;&amp;quot;+Thread.currentThread().getPriority());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;new一个MyPriority对象，创建线程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;MyPriority myPriority = new MyPriority();
Thread t2 = new Thread(myPriority);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先设置优先级再启动线程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;t2.setPriority(1);//线程优先级范围1-10
        t2.start();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程生命周期&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;线程休眠(Thread.sleep())&lt;/p&gt;
&lt;p&gt;调用sleep方法会进入计时等待状态，等时间到了，&lt;strong&gt;进入的是就绪状态而并非是运行状态&lt;/strong&gt;！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;//模拟延时
           try {
               Thread.sleep(200);
           } catch (InterruptedException e) {
               e.printStackTrace();
           }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程礼让(Thread.yield())&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;让当前执行的线程执行但不阻塞，若让CPU重新调度，不一定会礼让&lt;/p&gt;
&lt;p&gt;  此时线程由&lt;strong&gt;运行态变为就绪态&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;  public class TextYield {
      public static void main(String[] args) {
          MyYield myYield = new MyYield();
          new Thread(myYield,&amp;quot;a&amp;quot;).start();//线程a

          new Thread(myYield,&amp;quot;b&amp;quot;).start();//线程b
      }
  }
  class MyYield implements Runnable{
      @Override
      public void run() {
          System.out.println(Thread.currentThread().getName()+&amp;quot;线程开始执行&amp;quot;);
          Thread.yield();//线程礼让
          System.out.println(Thread.currentThread().getName()+&amp;quot;线程停止执行&amp;quot;);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;线程霸占(Thread.join())&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java合并线程（即插队），其他线程阻塞，调用join方法，会等待该线程执行完毕后再执行别的线程&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class TextJoin implements Runnable {
    @Override
    public void run() {
        for (int i = 0; i &amp;lt; 200; i++) {
            System.out.println(&amp;quot;线程vip来了&amp;quot;+i);
        }
    }
    //vip线程霸占主线程
    public static void main(String[] args) throws InterruptedException{
        //main线程
        TextJoin textJoin = new TextJoin();
        Thread thread = new Thread(textJoin);
        thread.start();

        for (int i = 0; i &amp;lt; 200; i++) {
            if(i == 100){
                thread.join();//插队
            }
            System.out.println(&amp;quot;main&amp;quot;+i);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;interrupt方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们一般使用的是interrupt来&lt;strong&gt;请求终止线程&lt;/strong&gt;~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要注意的是：interrupt&lt;strong&gt;不会真正停止&lt;/strong&gt;一个线程，它仅仅是给这个线程发了一个信号告诉它，它应该要结束了(明白这一点非常重要！)&lt;/li&gt;
&lt;li&gt;也就是说：Java设计者实际上是&lt;strong&gt;想线程自己来终止&lt;/strong&gt;，通过上面的&lt;strong&gt;信号&lt;/strong&gt;，就可以判断处理什么业务了。&lt;/li&gt;
&lt;li&gt;具体到底中断还是继续运行，应该&lt;strong&gt;由被通知的线程自己处理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Thread t1 = new Thread( new Runnable(){
    public void run(){
        // 若未发生中断，就正常执行任务
        while(!Thread.currentThread.isInterrupted()){
            // 正常任务代码……
        }
        // 中断的处理代码……
        doSomething();
    }
} ).start();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程同步&#34;&gt;&lt;a href=&#34;#线程同步&#34; class=&#34;headerlink&#34; title=&#34;线程同步&#34;&gt;&lt;/a&gt;线程同步&lt;/h2&gt;&lt;h3 id=&#34;同步方法&#34;&gt;&lt;a href=&#34;#同步方法&#34; class=&#34;headerlink&#34; title=&#34;同步方法&#34;&gt;&lt;/a&gt;同步方法&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public synchronized void method(int args){}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;synchronized&lt;/code&gt;方法都必须获得该方法的对象的锁才能执行，否则线程会出现阻塞&lt;/li&gt;
&lt;li&gt;方法一旦执行就会独占该锁，指导该方法返回才释放锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;同步块&#34;&gt;&lt;a href=&#34;#同步块&#34; class=&#34;headerlink&#34; title=&#34;同步块&#34;&gt;&lt;/a&gt;同步块&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;synchronized (obj){}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;obj称为同步监视器&lt;/li&gt;
&lt;li&gt;obj可以是任何对象但推荐使用共享资源作为同步监视器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;死锁（DeadLock）&#34;&gt;&lt;a href=&#34;#死锁（DeadLock）&#34; class=&#34;headerlink&#34; title=&#34;死锁（DeadLock）&#34;&gt;&lt;/a&gt;死锁（DeadLock）&lt;/h2&gt;&lt;p&gt;造成死锁的原因可以&lt;strong&gt;概括&lt;/strong&gt;成三句话：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前线程&lt;strong&gt;拥有其他线程需要的&lt;/strong&gt;资源&lt;/li&gt;
&lt;li&gt;当前线程&lt;strong&gt;等待其他线程已拥有&lt;/strong&gt;的资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;都不放弃&lt;/strong&gt;自己拥有的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-1-锁顺序死锁&#34;&gt;&lt;a href=&#34;#1-1-锁顺序死锁&#34; class=&#34;headerlink&#34; title=&#34;1.1 锁顺序死锁&#34;&gt;&lt;/a&gt;1.1 锁顺序死锁&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; Makeup(int choice,String girlname){
        this.choice=choice;
        this.girlname=girlname;
    }
    @Override
    public void run() {
        //化妆
        try {
            makeup();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    //化妆：互相持有对方的锁，就是需要拿到对方的资源
    private void makeup() throws InterruptedException {
        if (choice == 0){
            synchronized (lipstick){
                System.out.println(this.girlname+&amp;quot;获得口红的锁&amp;quot;);
                Thread.sleep(1000);
                synchronized (mirror){
                    System.out.println(this.girlname+&amp;quot;获得镜子的锁&amp;quot;);
                }
            }
        }else {
            synchronized (mirror){
                System.out.println(this.girlname+&amp;quot;获得镜子的锁&amp;quot;);
                Thread.sleep(2000);
                synchronized (lipstick){
                    System.out.println(this.girlname+&amp;quot;获得口红的锁&amp;quot;);
                }
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-2-避免死锁的方法&#34;&gt;&lt;a href=&#34;#1-2-避免死锁的方法&#34; class=&#34;headerlink&#34; title=&#34;1.2 避免死锁的方法&#34;&gt;&lt;/a&gt;1.2 避免死锁的方法&lt;/h3&gt;&lt;p&gt;避免死锁可以概括成三种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;固定加锁的顺序&lt;/strong&gt;(针对锁顺序死锁)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开放调用&lt;/strong&gt;(针对对象之间协作造成的死锁)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用定时锁&lt;/strong&gt;—&amp;gt;&lt;code&gt;tryLock()&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;如果等待获取锁时间超时，则&lt;strong&gt;抛出异常而不是一直等待&lt;/strong&gt;！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-3线程池&#34;&gt;&lt;a href=&#34;#1-3线程池&#34; class=&#34;headerlink&#34; title=&#34;1.3线程池&#34;&gt;&lt;/a&gt;1.3线程池&lt;/h3&gt;&lt;p&gt;线程池可以看做是&lt;strong&gt;线程的集合&lt;/strong&gt;。在没有任务时线程处于空闲状态，当请求到来：线程池给这个请求分配一个空闲的线程，任务完成后回到线程池中等待下次任务&lt;strong&gt;(而不是销毁)&lt;/strong&gt;。这样就&lt;strong&gt;实现了线程的重用&lt;/strong&gt;。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</guid>
            <title>类与对象</title>
            <link>https://peter-pan001.github.io/my-blog/Java/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</link>
            <category>Java</category>
            <pubDate>Sun, 25 Oct 2020 22:01:29 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;什么是类？&#34;&gt;&lt;a href=&#34;#什么是类？&#34; class=&#34;headerlink&#34; title=&#34;什么是类？&#34;&gt;&lt;/a&gt;什么是类？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类&lt;/strong&gt;在面向对象编程中是一种面向对象计算机编程语言的构造，是创建对象的蓝图，描述了所创建的对象共同的属性和方法。&lt;/li&gt;
&lt;li&gt;类有接口和结构。接口描述了如何通过方法与类及其实例互操作，而结构描述了一个实例中数据如何划分为多个属性。&lt;/li&gt;
&lt;li&gt;类是与某个层[注 1]的对象的最具体的类型。类还可以有运行时表示形式（元对象），它为操作与类相关的元数据提供了运行时支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;回到现实来说，类究竟是什么？&#34;&gt;&lt;a href=&#34;#回到现实来说，类究竟是什么？&#34; class=&#34;headerlink&#34; title=&#34;回到现实来说，类究竟是什么？&#34;&gt;&lt;/a&gt;回到现实来说，类究竟是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在日常生活中，类无处不在，它是一种事物的原型(arcgetype)。对所有的动物来说，可以称为是一个类型，我们简称为“动物类”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;面向对象是什么？&#34;&gt;&lt;a href=&#34;#面向对象是什么？&#34; class=&#34;headerlink&#34; title=&#34;面向对象是什么？&#34;&gt;&lt;/a&gt;面向对象是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;面向对象程序设计&lt;/strong&gt;（英语：Object-oriented programming，缩写：OOP）是种具有对象概念的程序编程典范，同时也是一种程序开发的抽象方针。&lt;/li&gt;
&lt;li&gt;面向对象程序设计中的对&lt;strong&gt;每一个象都应该能够接受数据、处理数据并将数据传达给其它对象&lt;/strong&gt;，因此它们都可以被看作一个小型的“机器”，即对象。目前已经被证实的是，面向对象程序设计推广了程序的灵活性和可维护性，并且在大型项目设计中广为应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在Java中把类和对象联系起来&#34;&gt;&lt;a href=&#34;#在Java中把类和对象联系起来&#34; class=&#34;headerlink&#34; title=&#34;在Java中把类和对象联系起来&#34;&gt;&lt;/a&gt;在Java中把类和对象联系起来&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类（Class）：定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。&lt;/li&gt;
&lt;li&gt;对象：是类的实例。&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;总而言之，类是抽象的，而对象是具体的&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类的创建&#34;&gt;&lt;a href=&#34;#类的创建&#34; class=&#34;headerlink&#34; title=&#34;类的创建&#34;&gt;&lt;/a&gt;类的创建&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们在使用编译器时，创建的每一个&lt;code&gt;.java&lt;/code&gt;文件，实际上就是一个类，可以这样说，创建一个java文件，就意味着创建了一个类，而这个刚创建的类是抽象的，里面什么都没有，此时，需要你通过创建对象来把这个类给实例化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用对象的步骤&#34;&gt;&lt;a href=&#34;#使用对象的步骤&#34; class=&#34;headerlink&#34; title=&#34;使用对象的步骤&#34;&gt;&lt;/a&gt;使用对象的步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先创建对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法：&lt;ul&gt;
&lt;li&gt;类名 &amp;nbsp;对象名 &amp;nbsp;= &amp;nbsp;new &amp;nbsp;类名();&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例如：&lt;br&gt;&lt;code&gt;Car  sportCar = new Car();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用对象的属性：对象名&lt;code&gt;.&lt;/code&gt;属性&lt;code&gt;;&lt;/code&gt;    &lt;/li&gt;
&lt;li&gt;引用对象的方法：对象名&lt;code&gt;.&lt;/code&gt;方法名（）&lt;code&gt;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;例如：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;phone.voice =5;
phone.sendMessage();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意：一个java文件可以有多个类，但只能有一个&lt;code&gt;public&lt;/code&gt;修饰的类&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;成员变量与局部变量的区别&#34;&gt;&lt;a href=&#34;#成员变量与局部变量的区别&#34; class=&#34;headerlink&#34; title=&#34;成员变量与局部变量的区别&#34;&gt;&lt;/a&gt;成员变量与局部变量的区别&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;作用域不同&lt;ul&gt;
&lt;li&gt;局部变量的作用域仅限于定义它的方法中&lt;/li&gt;
&lt;li&gt;成员变量的作用域在整个类的内部&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始值不同&lt;ul&gt;
&lt;li&gt;Java会给成员变量一个初始值&lt;/li&gt;
&lt;li&gt;但不会给局部变量赋予初始值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在同一个方法中，不允许有同名的局部变量&lt;/li&gt;
&lt;li&gt;在不同的方法中，可以有同名的局部变量&lt;/li&gt;
&lt;li&gt;两类变量同名时，局部变量具有更高的优先级&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;什么是构造方法？&#34;&gt;&lt;a href=&#34;#什么是构造方法？&#34; class=&#34;headerlink&#34; title=&#34;什么是构造方法？&#34;&gt;&lt;/a&gt;什么是构造方法？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义：&lt;/strong&gt;构造器跟一般的实例方法十分相似；但是与其它方法不同，构造器没有返回类型，不会被继承，且不会有范围修饰符。构造器的函数名称一般与它所属的类的名称相同。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性：&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;new&lt;/code&gt;+构造方法，创建一个新的对象&lt;/li&gt;
&lt;li&gt;构造方法是定义在JAVA类的一个用来初始化对象的方法&lt;ul&gt;
&lt;li&gt;构造方法与类同名且没有返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当没有指定构造方法时，系统会自动添加无参的构造方法&lt;/li&gt;
&lt;li&gt;当有指定构造方法，无论是有参、无参的构造方法，都不会自动添加无参的构造方法&lt;/li&gt;
&lt;li&gt;构造方法的重载：方法名相同，但参数不同的多个方法，调用时会自动根据不同的参数选择相应的方法 &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;面向对象的内存分析&#34;&gt;&lt;a href=&#34;#面向对象的内存分析&#34; class=&#34;headerlink&#34; title=&#34;面向对象的内存分析&#34;&gt;&lt;/a&gt;面向对象的内存分析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在Java虚拟机中的内存区域划分&lt;ul&gt;
&lt;li&gt;栈（stack）&lt;/li&gt;
&lt;li&gt;堆（heap）&lt;/li&gt;
&lt;li&gt;方法区（methodarea）实际存在于堆之中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;栈&#34;&gt;&lt;a href=&#34;#栈&#34; class=&#34;headerlink&#34; title=&#34;栈&#34;&gt;&lt;/a&gt;栈&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;描述方法执行的内存模型&lt;/li&gt;
&lt;li&gt;方法被调用创建一个栈帧&lt;/li&gt;
&lt;li&gt;栈属于&lt;strong&gt;线程私有&lt;/strong&gt;，不能实现线程间共享&lt;/li&gt;
&lt;li&gt;由系统自动分配，速度快（物理上是连续的内存空间）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;堆&#34;&gt;&lt;a href=&#34;#堆&#34; class=&#34;headerlink&#34; title=&#34;堆&#34;&gt;&lt;/a&gt;堆&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用于存储创建好的对象和数组&lt;/li&gt;
&lt;li&gt;JVM只有一个堆，&lt;strong&gt;所有线程共享&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;物理上不是连续的内存空间，存在着速度慢的问题，但存储更加灵活！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法区（静态区）&#34;&gt;&lt;a href=&#34;#方法区（静态区）&#34; class=&#34;headerlink&#34; title=&#34;方法区（静态区）&#34;&gt;&lt;/a&gt;方法区（静态区）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用于存放程序中永远不变或唯一的内容&lt;ul&gt;
&lt;li&gt;例如：类信息、class对象、静态变量等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;静态方法（用static修饰方法）&#34;&gt;&lt;a href=&#34;#静态方法（用static修饰方法）&#34; class=&#34;headerlink&#34; title=&#34;静态方法（用static修饰方法）&#34;&gt;&lt;/a&gt;静态方法（用static修饰方法）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;静态方法中可以直接调用同类中的静态成员，但不能直接调用非静态方法&lt;/li&gt;
&lt;li&gt;在普通成员方法中，则可以直接访问同类的非静态变量和静态变量&lt;/li&gt;
&lt;li&gt;静态方法中不能直接调用非静态方法，需要通过对象来访问非静态方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;static关键字&#34;&gt;&lt;a href=&#34;#static关键字&#34; class=&#34;headerlink&#34; title=&#34;static关键字&#34;&gt;&lt;/a&gt;static关键字&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java中被&lt;code&gt;static&lt;/code&gt;修饰的成员成为静态成员或类成员。它属于整个类所有，而不是归某个对象所有，即被类的所有对象所共享静态成员可以使用类名直接访问，也可以使用对象名进行访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;修饰的成员变量和方法，从属于类！！！&lt;/li&gt;
&lt;li&gt;&lt;p&gt;普通变量和方法从属于对象！！！&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2020/10/22/xipTHVwdOJFGBcK.png&#34; alt=&#34;methodstatic.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/Java%E8%AF%AD%E5%8F%A5/</guid>
            <title>Java语句</title>
            <link>https://peter-pan001.github.io/my-blog/Java/Java%E8%AF%AD%E5%8F%A5/</link>
            <category>Java</category>
            <pubDate>Sun, 25 Oct 2020 20:51:19 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;Java-输入语句&#34;&gt;&lt;a href=&#34;#Java-输入语句&#34; class=&#34;headerlink&#34; title=&#34;Java 输入语句&#34;&gt;&lt;/a&gt;Java 输入语句&lt;/h2&gt;&lt;h3 id=&#34;1-1-使用Scanner类&#34;&gt;&lt;a href=&#34;#1-1-使用Scanner类&#34; class=&#34;headerlink&#34; title=&#34;1.1 使用Scanner类&#34;&gt;&lt;/a&gt;1.1 使用Scanner类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;步骤：&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;java.util&lt;/code&gt;包，即&lt;code&gt;import java.util.*;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;构造Scanner类对象，它属于标准输入流&lt;code&gt;System.in&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;即：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Scanner s = new Scanner(System.in);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用的&lt;code&gt;next()&lt;/code&gt;方法系列：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;next()&lt;/code&gt; &amp;nbsp;输入字符串（以空格作为分隔符）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nextInt()&lt;/code&gt; &amp;nbsp;输入整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nextLine()&lt;/code&gt; &amp;nbsp;输入字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nextDouble()&lt;/code&gt; &amp;nbsp;输入双精度数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-使用java-io-BufferReader和java-io-InputStreamReader&#34;&gt;&lt;a href=&#34;#1-2-使用java-io-BufferReader和java-io-InputStreamReader&#34; class=&#34;headerlink&#34; title=&#34;1.2 使用java.io.BufferReader和java.io.InputStreamReader&#34;&gt;&lt;/a&gt;1.2 使用java.io.BufferReader和java.io.InputStreamReader&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;导入io包&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;import java.io.*;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;构造&lt;code&gt;BufferReader&lt;/code&gt;类对象&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Bufferreader br = new BufferReader(new InputStreamReader)(System.in);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Java输出语句&#34;&gt;&lt;a href=&#34;#Java输出语句&#34; class=&#34;headerlink&#34; title=&#34;Java输出语句&#34;&gt;&lt;/a&gt;Java输出语句&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;分类：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;System.out.println();&lt;/code&gt;  换行打印&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.out.print();&lt;/code&gt; 不换行打印&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.out.write(1121);&lt;/code&gt; 字节输出 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.out.printf(&amp;quot;%+8.3f\n&amp;quot;,3.14);&lt;/code&gt; 按格式输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-1-换行打印&#34;&gt;&lt;a href=&#34;#2-1-换行打印&#34; class=&#34;headerlink&#34; title=&#34;2.1 换行打印&#34;&gt;&lt;/a&gt;2.1 换行打印&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;System.out.println();&lt;/code&gt; &amp;nbsp;是最常见的输出语句，把（）里的内容转换为字符串输出，并且换行&lt;ul&gt;
&lt;li&gt;若输出的是一个基本数据类型，则转换为字符串&lt;/li&gt;
&lt;li&gt;若输出的是对象，则会自动调用对象的&lt;code&gt;toString();&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-2-按格式输出&#34;&gt;&lt;a href=&#34;#2-2-按格式输出&#34; class=&#34;headerlink&#34; title=&#34;2.2 按格式输出&#34;&gt;&lt;/a&gt;2.2 按格式输出&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;System.out.printf(&amp;quot;%+8.3f\n&amp;quot;,3.14);&lt;/code&gt; &amp;nbsp;通过格式化文本和参数列表输出&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Java条件语句&#34;&gt;&lt;a href=&#34;#Java条件语句&#34; class=&#34;headerlink&#34; title=&#34;Java条件语句&#34;&gt;&lt;/a&gt;Java条件语句&lt;/h2&gt;&lt;h3 id=&#34;3-1-if语句&#34;&gt;&lt;a href=&#34;#3-1-if语句&#34; class=&#34;headerlink&#34; title=&#34;3.1 if语句&#34;&gt;&lt;/a&gt;3.1 if语句&lt;/h3&gt;&lt;h4 id=&#34;3-1-1-最普通的写法：&#34;&gt;&lt;a href=&#34;#3-1-1-最普通的写法：&#34; class=&#34;headerlink&#34; title=&#34;3.1.1 最普通的写法：&#34;&gt;&lt;/a&gt;3.1.1 最普通的写法：&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;  if(条件表达式){
      条件执行的语句;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-1-2-if-else写法：&#34;&gt;&lt;a href=&#34;#3-1-2-if-else写法：&#34; class=&#34;headerlink&#34; title=&#34;3.1.2 if....else写法：&#34;&gt;&lt;/a&gt;3.1.2 &lt;code&gt;if....else&lt;/code&gt;写法：&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;  if(条件表达式){
      条件执行的语句;
  } else{
      执行语句;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-1-3-多重if&#34;&gt;&lt;a href=&#34;#3-1-3-多重if&#34; class=&#34;headerlink&#34; title=&#34;3.1.3 多重if&#34;&gt;&lt;/a&gt;3.1.3 多重if&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;  if(条件1){
      代码块1;
  }else if(条件2){
      代码块2;
  }else if(条件3){
      代码块3;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-1-4-嵌套if&#34;&gt;&lt;a href=&#34;#3-1-4-嵌套if&#34; class=&#34;headerlink&#34; title=&#34;3.1.4 嵌套if&#34;&gt;&lt;/a&gt;3.1.4 嵌套if&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;  if(条件1){
      if(条件2){
          代码块1;
      }else{
          代码块2;
      }
  }else{
      代码块3;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-2-switch语句&#34;&gt;&lt;a href=&#34;#3-2-switch语句&#34; class=&#34;headerlink&#34; title=&#34;3.2 switch语句&#34;&gt;&lt;/a&gt;3.2 switch语句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;语法：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;switch(表达式){
    case 值1:
      执行的代码块1;
      break;
    case 值2:
      执行的代码块2;
      break;  
   default:
      默认的执行代码;   
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-3-while语句&#34;&gt;&lt;a href=&#34;#3-3-while语句&#34; class=&#34;headerlink&#34; title=&#34;3.3 while语句&#34;&gt;&lt;/a&gt;3.3 while语句&lt;/h3&gt;&lt;h4 id=&#34;3-3-1-基本写法&#34;&gt;&lt;a href=&#34;#3-3-1-基本写法&#34; class=&#34;headerlink&#34; title=&#34;3.3.1 基本写法&#34;&gt;&lt;/a&gt;3.3.1 基本写法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;```java
while(判断条件){
    循环语句;
}
```
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;先判断，后执行&lt;h4 id=&#34;3-3-2-do-while&#34;&gt;&lt;a href=&#34;#3-3-2-do-while&#34; class=&#34;headerlink&#34; title=&#34;3.3.2 do-while&#34;&gt;&lt;/a&gt;3.3.2 do-while&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;do{
   循环语句;
}while(判断条件);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;先执行，后判断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-4-for语句&#34;&gt;&lt;a href=&#34;#3-4-for语句&#34; class=&#34;headerlink&#34; title=&#34;3.4 for语句&#34;&gt;&lt;/a&gt;3.4 for语句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;语法：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;for(循环变量初始化;循环条件;循环变量变化){
    循环语句;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-5-braek语句&#34;&gt;&lt;a href=&#34;#3-5-braek语句&#34; class=&#34;headerlink&#34; title=&#34;3.5 braek语句&#34;&gt;&lt;/a&gt;3.5 braek语句&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;语法：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;if(条件){
    执行操作语句;
    break;//退出此循环，执行循环外的代码
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-6-continue语句&#34;&gt;&lt;a href=&#34;#3-6-continue语句&#34; class=&#34;headerlink&#34; title=&#34;3.6 continue语句&#34;&gt;&lt;/a&gt;3.6 continue语句&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;语法：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;if(条件){
    执行操作;
    continue;//通过continue结束本次循环，进行下一次循环
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/Java%E7%9A%84%E4%B8%80%E4%BA%9B%E7%B1%BB/</guid>
            <title>Java的一些类</title>
            <link>https://peter-pan001.github.io/my-blog/Java/Java%E7%9A%84%E4%B8%80%E4%BA%9B%E7%B1%BB/</link>
            <category>Java</category>
            <pubDate>Sun, 25 Oct 2020 20:50:18 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;Java的一些类&#34;&gt;&lt;a href=&#34;#Java的一些类&#34; class=&#34;headerlink&#34; title=&#34;Java的一些类&#34;&gt;&lt;/a&gt;Java的一些类&lt;/h2&gt;&lt;h3 id=&#34;StringBuilder和StringBuffer的使用&#34;&gt;&lt;a href=&#34;#StringBuilder和StringBuffer的使用&#34; class=&#34;headerlink&#34; title=&#34;StringBuilder和StringBuffer的使用&#34;&gt;&lt;/a&gt;StringBuilder和StringBuffer的使用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这两个方法的基本解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StringBuilder&lt;/code&gt;:线程不安全，效率高&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StringBuffer&lt;/code&gt;:线程安全，效率低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;StringBuilder s = new StringBuilder();//初始长度为16
StringBuider s1 = new StringBuilder(32);//初始length=32 
s.append();
s.delete(int start,int end);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;StringBuilder类的常用方法&#34;&gt;&lt;a href=&#34;#StringBuilder类的常用方法&#34; class=&#34;headerlink&#34; title=&#34;StringBuilder类的常用方法&#34;&gt;&lt;/a&gt;StringBuilder类的常用方法&lt;/h3&gt;&lt;p&gt;| 类名 | 方法名  | 解释 |&lt;br&gt;|:——:|:———:|:——:|&lt;br&gt;|StringBuilder|append(参数)|追加内容到当前&lt;code&gt;StringBuilder&lt;/code&gt;对象的末尾|&lt;br&gt;|StringBuilder|insert(位置，参数)|将内容插入到&lt;code&gt;StringBuilder&lt;/code&gt;对象的指定位置|&lt;br&gt;|String|toString()|将&lt;code&gt;StringBuilder&lt;/code&gt;对象转换为&lt;code&gt;String&lt;/code&gt;对象|&lt;br&gt;|int | length()|获取字符串长度|&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字符串&#34;&gt;&lt;a href=&#34;#字符串&#34; class=&#34;headerlink&#34; title=&#34;字符串&#34;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;h4 id=&#34;一、子串&#34;&gt;&lt;a href=&#34;#一、子串&#34; class=&#34;headerlink&#34; title=&#34;一、子串&#34;&gt;&lt;/a&gt;一、子串&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;String&lt;/code&gt;类中的&lt;code&gt;substring&lt;/code&gt;方法从一个字符串中提取一个子串&lt;/li&gt;
&lt;li&gt;例如：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;String s = &amp;quot;Hello&amp;quot;;
String t = s.substring(0,3);//substring方法用来计算子串的长度，（0，3）表示要复制从0-3的字符，即H、e、l
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;二、拼接&#34;&gt;&lt;a href=&#34;#二、拼接&#34; class=&#34;headerlink&#34; title=&#34;二、拼接&#34;&gt;&lt;/a&gt;二、拼接&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;通过使用&lt;code&gt;+&lt;/code&gt;实现&lt;/li&gt;
&lt;li&gt;常用方法：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;  String player = &amp;quot;vango&amp;quot;;
  String project = &amp;quot;sunflower&amp;quot;;
  String message = player + project;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;字符串与一个非字符串的值进行拼接，后者变成字符串&lt;/li&gt;
&lt;li&gt;可以与输出语句一起使用：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;System.out.println(&amp;quot;result:&amp;quot;+answer);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多个字符串放在一起，使用&lt;code&gt;join&lt;/code&gt;静态方法&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;String all = String.join(&amp;quot;/&amp;quot;,&amp;quot;S&amp;quot;,&amp;quot;M&amp;quot;,&amp;quot;L&amp;quot;);
//打印结果： all = “S/M/L”;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三、不可变字符串&#34;&gt;&lt;a href=&#34;#三、不可变字符串&#34; class=&#34;headerlink&#34; title=&#34;三、不可变字符串&#34;&gt;&lt;/a&gt;三、不可变字符串&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;类没有通过修改字符串的方法，修改方法为：提取加拼接&lt;ul&gt;
&lt;li&gt;例如：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;String s = &amp;quot;Hello&amp;quot;;
s = s.substring(0,3)+&amp;quot;p!&amp;quot;;
//  此时 s= help!
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;四、检查字符串是否相等&#34;&gt;&lt;a href=&#34;#四、检查字符串是否相等&#34; class=&#34;headerlink&#34; title=&#34;四、检查字符串是否相等&#34;&gt;&lt;/a&gt;四、检查字符串是否相等&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;方法：&lt;code&gt;s.equals(t)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;s和t都为字符串，该方法的逻辑是：若s=t ,则输出&lt;code&gt;true&lt;/code&gt;，否则，输出&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;s可为值，也可以为名称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;五、空串和NUll串&#34;&gt;&lt;a href=&#34;#五、空串和NUll串&#34; class=&#34;headerlink&#34; title=&#34;五、空串和NUll串&#34;&gt;&lt;/a&gt;五、空串和NUll串&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;空串就是长度为0的字符串,占用内存&lt;/li&gt;
&lt;li&gt;null是空引用，表示一个对象的值，没有分配内存，调用null的字符串的方法会抛出空指针异常。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空串的表示:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;if(str.length()== 0 ){

} 
//或者
if(str.equals(&amp;quot;&amp;quot;)){

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;null串表示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;if(str == null){

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;既不是空串，也不是null：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;if(str != null &amp;amp;&amp;amp;str.length()){

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;六、注意的点&#34;&gt;&lt;a href=&#34;#六、注意的点&#34; class=&#34;headerlink&#34; title=&#34;六、注意的点&#34;&gt;&lt;/a&gt;六、注意的点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;字符串&lt;code&gt;str&lt;/code&gt;中字符的索引从0开始，范围从0到&lt;code&gt;str.length()&lt;/code&gt;-1&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;indexOf&lt;/code&gt;进行字符或字符串查找时，如果匹配返回位置索引，如果没有匹配结果，返回-1&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;substring(beginIndex,endIndex)&lt;/code&gt;进行字符串提取时，包括&lt;code&gt;beginIndex&lt;/code&gt;位置的字符，不包括&lt;code&gt;endIndex&lt;/code&gt;位置的字符&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重写与重载（-Override和-Overload）&#34;&gt;&lt;a href=&#34;#重写与重载（-Override和-Overload）&#34; class=&#34;headerlink&#34; title=&#34;重写与重载（@Override和@Overload）&#34;&gt;&lt;/a&gt;重写与重载（@Override和@Overload）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;重写———存在于继承体系中，子类实现父类方法声明的一致相同方法&lt;ul&gt;
&lt;li&gt;访问权限：子类方法&lt;code&gt;&amp;gt;=&lt;/code&gt;父类方法&lt;/li&gt;
&lt;li&gt;返回类型：之类方法的返回类型为父类方法返回类型或子类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重载———存在于同一个类，方法存在且方法名相同，但参数类型、个数、顺序至少一个不同&lt;ul&gt;
&lt;li&gt;只有返回值不同的,不叫重载!!!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Java包装类（Wrapper-Class）&#34;&gt;&lt;a href=&#34;#Java包装类（Wrapper-Class）&#34; class=&#34;headerlink&#34; title=&#34;Java包装类（Wrapper Class）&#34;&gt;&lt;/a&gt;Java包装类（Wrapper Class）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;包装类就是讲基本类型数据转化为对象，即八种基本类型对应八种包装类&lt;br&gt;&lt;img data-src=&#34;https://i.loli.net/2020/10/22/RkB5PiTptcb4SWd.png&#34; alt=&#34;wrapperclass.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;自动装箱与自动拆箱&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自动装箱（auto-boxing）&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;基本类型自动封装到它相同的包装类里&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Integer i = 100;
//本质上，编译器编译时为我们提供了以下代码：
Integer i = nwe Integer(100);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动拆箱（unboxing）&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;包装类对象自动转换为基本类型&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;int a = new Integer(100);
//本质上：
int a = new integer(100).intValue();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特别的：&lt;br&gt;```java&lt;br&gt;Integer d1 = -129;&lt;br&gt;Integer d2 = -129;&lt;br&gt;System.out.println(d1==d2);&lt;br&gt;//输出的是false，因为在[-128,127]之间的数，按照基本类型处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Java中基本类型和字符串之间的转换&#34;&gt;&lt;a href=&#34;#Java中基本类型和字符串之间的转换&#34; class=&#34;headerlink&#34; title=&#34;Java中基本类型和字符串之间的转换&#34;&gt;&lt;/a&gt;Java中基本类型和字符串之间的转换&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本类型转字符串&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2020/10/22/uWZvGMkjOQDiBJa.png&#34; alt=&#34;switch001.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;实例：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;int c = 10;
String str1 = Integer.toString(c);
String str2 = String.valueOf(c);
String str3 = c+ &amp;quot; &amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串转基本类型&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2020/10/22/BWrCxUR4ckYzKqi.png&#34; alt=&#34;switch002.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;实例：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;String str = &amp;quot;8&amp;quot;;
int d = Integer.parseInt(str);
int e = Integer.valueOf(str);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/Java%E5%B0%81%E8%A3%85/</guid>
            <title>Java封装</title>
            <link>https://peter-pan001.github.io/my-blog/Java/Java%E5%B0%81%E8%A3%85/</link>
            <category>Java</category>
            <pubDate>Thu, 22 Oct 2020 22:53:14 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;封装的需求&#34;&gt;&lt;a href=&#34;#封装的需求&#34; class=&#34;headerlink&#34; title=&#34;封装的需求&#34;&gt;&lt;/a&gt;封装的需求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;程序设计在追求“高内聚，低耦合”的特点&lt;ul&gt;
&lt;li&gt;所谓“高内聚”，即是封装代码细节，提高可维护性&lt;/li&gt;
&lt;li&gt;所谓“低耦合”，即是简化外部调用，便于使用者使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这样一来，提高了代码的安全性和复用性&lt;h2 id=&#34;概念&#34;&gt;&lt;a href=&#34;#概念&#34; class=&#34;headerlink&#34; title=&#34;概念&#34;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来&lt;strong&gt;实现对隐藏信息的操作和访问&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;封装的好处&#34;&gt;&lt;a href=&#34;#封装的好处&#34; class=&#34;headerlink&#34; title=&#34;封装的好处&#34;&gt;&lt;/a&gt;封装的好处&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;a.只能通过规定的方法访问数据&lt;/li&gt;
&lt;li&gt;b.隐藏类的实例细节，方便修改和实现&lt;/li&gt;
&lt;li&gt;c.适当的封装，可以将对象使用接口的程序实现部分隐藏起来，不让用户看到，同时确保用户无法任意更改对象内部的重要资料，增强代码安全性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2020/10/22/In3jwPMrUOl6L2s.png&#34; alt=&#34;fengzhuangstep.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Java的访问修饰符&#34;&gt;&lt;a href=&#34;#Java的访问修饰符&#34; class=&#34;headerlink&#34; title=&#34;Java的访问修饰符&#34;&gt;&lt;/a&gt;Java的访问修饰符&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;java的访问修饰符包括&lt;code&gt;private&lt;/code&gt;、&lt;code&gt;default&lt;/code&gt;、&lt;code&gt;protected&lt;/code&gt;、&lt;code&gt;public&lt;/code&gt;&lt;br&gt;| 访问修饰符 | 本类  |  同包   |  子类  |  所有类|&lt;br&gt;| :———-:| :———-:| :———-:| :———-:| :———-:|&lt;br&gt;|private| √||||&lt;br&gt;|default|√|√|||&lt;br&gt;|protected|√|√|√||&lt;br&gt;|public|√|√|√|√|&lt;/li&gt;
&lt;li&gt;对属性一律&lt;code&gt;private&lt;/code&gt;私有化&lt;/li&gt;
&lt;li&gt;普通类使用&lt;code&gt;public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;This关键字&#34;&gt;&lt;a href=&#34;#This关键字&#34; class=&#34;headerlink&#34; title=&#34;This关键字&#34;&gt;&lt;/a&gt;This关键字&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;This 也被成为创建好对象的地址,但不可用于静态方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用语法：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class TextThis{
   int a,b,c;
   TextThis(int a,int b){
      this.a=a;
      this.b=b;
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;this.&lt;/code&gt;属性名，表示操作当前对象的属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.&lt;/code&gt;方法，表示调用当前对象的方法&lt;/li&gt;
&lt;li&gt;我们在封装对象的属性时，经常会用到&lt;code&gt;this&lt;/code&gt;关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/Java%E5%A4%9A%E6%80%81/</guid>
            <title>Java多态</title>
            <link>https://peter-pan001.github.io/my-blog/Java/Java%E5%A4%9A%E6%80%81/</link>
            <category>Java</category>
            <pubDate>Thu, 22 Oct 2020 22:53:14 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;概念&#34;&gt;&lt;a href=&#34;#概念&#34; class=&#34;headerlink&#34; title=&#34;概念&#34;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;多态，是面向对象的程序设计语言最核心的特征。多态，意味着一个对象有着多重特征，可以在特定的情况下，表现不同的状态，从而对应着不同的属性和方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多态的作用&#34;&gt;&lt;a href=&#34;#多态的作用&#34; class=&#34;headerlink&#34; title=&#34;多态的作用&#34;&gt;&lt;/a&gt;多态的作用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;消除类型之间的耦合关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;主要的特点&#34;&gt;&lt;a href=&#34;#主要的特点&#34; class=&#34;headerlink&#34; title=&#34;主要的特点&#34;&gt;&lt;/a&gt;主要的特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;多态是方法的多态，二不是属性的多态&lt;/li&gt;
&lt;li&gt;多态存在的三个必要条件 &lt;ul&gt;
&lt;li&gt;要有继承；&lt;/li&gt;
&lt;li&gt;要有重写；&lt;/li&gt;
&lt;li&gt;父类引用指向子类对象。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用该父类引用调用子类重写的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;代码演示&#34;&gt;&lt;a href=&#34;#代码演示&#34; class=&#34;headerlink&#34; title=&#34;代码演示&#34;&gt;&lt;/a&gt;代码演示&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class TextPlay{
    public static void main(String[] args){
        Animal a = new Animal();
        animalCry(a);
        Dog d = new Dog();
    }

    static void animalCry(Animal a){
        a.shout();   //父类引用子类对象
    }
}
class Animal{
    public void shout(){
        System.out.println(&amp;quot;叫&amp;quot;);
    }
}

class Dog extends Animal{  //继承父类
    public void shout(){
        System.out.println(&amp;quot;汪汪汪&amp;quot;);//方法重写
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多态的分类&#34;&gt;&lt;a href=&#34;#多态的分类&#34; class=&#34;headerlink&#34; title=&#34;多态的分类&#34;&gt;&lt;/a&gt;多态的分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;引用多态&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;父类的引用可以指向本类的对象&lt;/li&gt;
&lt;li&gt;父类的引用可以指向子类的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法多态&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;创建本类对象时，调用的方法为本类方法&lt;/li&gt;
&lt;li&gt;创建子类对象时，调用方法为子类重写的方法或者继承的方法  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对象的转换（ClassCastException）&#34;&gt;&lt;a href=&#34;#对象的转换（ClassCastException）&#34; class=&#34;headerlink&#34; title=&#34;对象的转换（ClassCastException）&#34;&gt;&lt;/a&gt;对象的转换（ClassCastException）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代码演示&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; Animal d = new Dog();//自动向上转型
 Dog d2 = (Dog)d;//强制向下转型
 //在Dog类中加上看门的方法，新建一个cat类，则
 animalCry(new Cat());
 Dog d2 = (Dog)d;
 Animal c = new Cat();
 Dog d3 = (Dog) c; //Cat强转Dog，编译未报错，但实际上不能转换
 d3.door();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;总而言之，子类转向父类没有风险，而父类转向子类会存在风险&lt;/li&gt;
&lt;li&gt;解决方法：我们可以使用&lt;code&gt;instance of&lt;/code&gt;运算符，来解决引用对象的类型，避免类型转换的安全性问题&lt;ul&gt;
&lt;li&gt;例如：&lt;br&gt;```java&lt;br&gt;Dog dog = new Dog();&lt;br&gt;Animal animal = new Dog ;//向上类型转换&lt;br&gt;if(Animal instance of Dog){&lt;br&gt;  Dog dog2 = (Dog)Animal;&lt;br&gt;}else{&lt;br&gt;  System.out.println(“无法进行转换”);&lt;br&gt;}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;抽象类-abstract&#34;&gt;&lt;a href=&#34;#抽象类-abstract&#34; class=&#34;headerlink&#34; title=&#34;抽象类(abstract)&#34;&gt;&lt;/a&gt;抽象类(abstract)&lt;/h2&gt;&lt;h3 id=&#34;基本了解&#34;&gt;&lt;a href=&#34;#基本了解&#34; class=&#34;headerlink&#34; title=&#34;基本了解&#34;&gt;&lt;/a&gt;基本了解&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;抽象类&lt;/strong&gt;，即只有方法声明，无方法体的一种类，它的出现避免了子类设计的随意性，并严格限制子类设计，为子类提供模板&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语法&#34;&gt;&lt;a href=&#34;#语法&#34; class=&#34;headerlink&#34; title=&#34;语法&#34;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在定义的类前使用&lt;code&gt;abstract&lt;/code&gt;关键字修饰的即为抽象类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; public abstract 类名(){

 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;作用&#34;&gt;&lt;a href=&#34;#作用&#34; class=&#34;headerlink&#34; title=&#34;作用&#34;&gt;&lt;/a&gt;作用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;限制规定子类必须实现某些方法，但不关注实现细节&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用规则&#34;&gt;&lt;a href=&#34;#使用规则&#34; class=&#34;headerlink&#34; title=&#34;使用规则&#34;&gt;&lt;/a&gt;使用规则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;abstract&lt;/code&gt;定义抽象类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abstract&lt;/code&gt;定义抽象方法时，只是声明，而不需要实现&lt;/li&gt;
&lt;li&gt;包含抽象方法的类是抽象类&lt;/li&gt;
&lt;li&gt;抽象类可以包含普通方法，也可以没有抽象方法&lt;/li&gt;
&lt;li&gt;抽象类不能直接创建，可以定义引用变量                    &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注意的点&#34;&gt;&lt;a href=&#34;#注意的点&#34; class=&#34;headerlink&#34; title=&#34;注意的点&#34;&gt;&lt;/a&gt;注意的点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;有抽象方法的类能定义抽象类&lt;/li&gt;
&lt;li&gt;抽象类不能实例化，并且不能用&lt;code&gt;new&lt;/code&gt;来实例化抽象类&lt;/li&gt;
&lt;li&gt;抽象类可汗属性、方法、构造方法，但构造方法不能用来&lt;code&gt;new&lt;/code&gt;实例，只能用来被子类调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抽象类只能用来被继承&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抽象方法必须被子类实现&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;接口-Interface&#34;&gt;&lt;a href=&#34;#接口-Interface&#34; class=&#34;headerlink&#34; title=&#34;接口(Interface)&#34;&gt;&lt;/a&gt;接口(Interface)&lt;/h2&gt;&lt;h3 id=&#34;概念-1&#34;&gt;&lt;a href=&#34;#概念-1&#34; class=&#34;headerlink&#34; title=&#34;概念&#34;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;类是一种具体实现体，而接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部数据，也不关心这些类里方法的实现细节，它值规定这些类里必须提供某些方法&lt;/li&gt;
&lt;li&gt;接口的出现，实现了程序设计中设计与实现的分离，可以说是抽象类的延伸&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本语法&#34;&gt;&lt;a href=&#34;#基本语法&#34; class=&#34;headerlink&#34; title=&#34;基本语法&#34;&gt;&lt;/a&gt;基本语法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修饰符 &lt;code&gt;interface&lt;/code&gt; 接口名 &lt;code&gt;extends&lt;/code&gt; 父接口1，父接口2{&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修饰符一般建议使用&lt;code&gt;public&lt;/code&gt;，不能使用&lt;code&gt;private&lt;/code&gt;和&lt;code&gt;protected&lt;/code&gt;修饰接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实际代码演示：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;  //方法必须公有化
  public interface flyable{
      void fly();//这里只能含有常量，抽象方法
  }
  class plane implements flyable{
      //可以实现一个或多个接口
      public void fly(){
          System.out.println(&amp;quot;飞机飞起来了&amp;quot;);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;注意的点-1&#34;&gt;&lt;a href=&#34;#注意的点-1&#34; class=&#34;headerlink&#34; title=&#34;注意的点&#34;&gt;&lt;/a&gt;注意的点&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;接口在使用过程中，还经常与匿名内部类配合使用&lt;/li&gt;
&lt;li&gt;匿名内部类就是没有名字的内部类&lt;/li&gt;
&lt;li&gt;多用于关注实现而不关注实现类名称&lt;/li&gt;
&lt;li&gt;接口支持多继承&lt;/li&gt;
&lt;li&gt;接口的字段默认都是&lt;code&gt;static&lt;/code&gt;和&lt;code&gt;final&lt;/code&gt;                                &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;回调的实现（callback）&#34;&gt;&lt;a href=&#34;#回调的实现（callback）&#34; class=&#34;headerlink&#34; title=&#34;回调的实现（callback）&#34;&gt;&lt;/a&gt;回调的实现（callback）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;多态的扩展&lt;/li&gt;
&lt;li&gt;可以指出某个特定事件发生时应该采取得到动作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内部类（Inner）&#34;&gt;&lt;a href=&#34;#内部类（Inner）&#34; class=&#34;headerlink&#34; title=&#34;内部类（Inner）&#34;&gt;&lt;/a&gt;内部类（Inner）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;特点：&lt;ul&gt;
&lt;li&gt;只能让外部类直接访问，不可在同包中的其他类直接访问&lt;/li&gt;
&lt;li&gt;可访问外部类私有属性，但外部类不能访问内部类的内部属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用场景：&lt;ul&gt;
&lt;li&gt;只为所在外部类通过服务的情况下优先使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分类&lt;ul&gt;
&lt;li&gt;成员内部类&lt;ul&gt;
&lt;li&gt;静态&lt;/li&gt;
&lt;li&gt;非静态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;匿名内部类（只用一次的类，也称局部内部类 ）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;异常机制&#34;&gt;&lt;a href=&#34;#异常机制&#34; class=&#34;headerlink&#34; title=&#34;异常机制&#34;&gt;&lt;/a&gt;异常机制&lt;/h2&gt;&lt;h3 id=&#34;何为异常-Excpetion&#34;&gt;&lt;a href=&#34;#何为异常-Excpetion&#34; class=&#34;headerlink&#34; title=&#34;何为异常(Excpetion)&#34;&gt;&lt;/a&gt;何为异常(Excpetion)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;异常就是程序中的一些错误，有些异常是可以避免错误的，例如一些IDE可以提示你报错的代码语法错误。&lt;h3 id=&#34;异常分类&#34;&gt;&lt;a href=&#34;#异常分类&#34; class=&#34;headerlink&#34; title=&#34;异常分类&#34;&gt;&lt;/a&gt;异常分类&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查性异常&lt;/strong&gt; ： 常见的有用户错误或问题引起的异常&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行时异常&lt;/strong&gt; ： 运行时异常是可以避免的异常，但在编译时常被忽略&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误&lt;/strong&gt; ： 错误不是异常，而是脱离程序员控制的问题，错误在代码中常被忽略&lt;h3 id=&#34;关于异常&#34;&gt;&lt;a href=&#34;#关于异常&#34; class=&#34;headerlink&#34; title=&#34;关于异常&#34;&gt;&lt;/a&gt;关于异常&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;在Exception分支中有一个重要的子类 &lt;code&gt;RuntimeException&lt;/code&gt;(运行时异常)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; 数组下标越界&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NullPointerException&lt;/code&gt; 空指针异常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArithmeicException&lt;/code&gt; 算术异常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MissingResourceException&lt;/code&gt; 丢失资源&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ClassNotFoundException&lt;/code&gt;找不到类异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这些异常都是不检查异常，程序中可选择捕获异常，也可以不处理&lt;h3 id=&#34;Error与Exception的区别&#34;&gt;&lt;a href=&#34;#Error与Exception的区别&#34; class=&#34;headerlink&#34; title=&#34;Error与Exception的区别&#34;&gt;&lt;/a&gt;Error与Exception的区别&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Error&lt;/code&gt;通常是灾难性的致命错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机(JVM)一般会选择终止线程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Exception&lt;/code&gt;通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/Java%E6%95%B0%E7%BB%84/</guid>
            <title>Java数组</title>
            <link>https://peter-pan001.github.io/my-blog/Java/Java%E6%95%B0%E7%BB%84/</link>
            <category>Java</category>
            <pubDate>Thu, 22 Oct 2020 22:53:14 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;数组的基本使用&#34;&gt;&lt;a href=&#34;#数组的基本使用&#34; class=&#34;headerlink&#34; title=&#34;数组的基本使用&#34;&gt;&lt;/a&gt;数组的基本使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;什么是数组？形如&lt;code&gt;int[]score ={79,9,2,45};&lt;/code&gt;称作数组&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-1-声明数组&#34;&gt;&lt;a href=&#34;#1-1-声明数组&#34; class=&#34;headerlink&#34; title=&#34;1.1 声明数组&#34;&gt;&lt;/a&gt;1.1 声明数组&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;语法：&lt;ul&gt;
&lt;li&gt;数据类型 &amp;nbsp;&lt;code&gt;[]&lt;/code&gt;&amp;nbsp;数组名 &lt;/li&gt;
&lt;li&gt;或者：数据类型 &amp;nbsp;数组名[]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例如：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;int[] scores;//最好采用这种写法
double height[]; //不推荐这种写法
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意！&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在声明数组的同时不能指定数组长度,以下为错误写法&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;int[] arr = new int[4]{95,16,77,25};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-2-分配空间&#34;&gt;&lt;a href=&#34;#1-2-分配空间&#34; class=&#34;headerlink&#34; title=&#34;1.2 分配空间&#34;&gt;&lt;/a&gt;1.2 分配空间&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;语法：&lt;ul&gt;
&lt;li&gt;数组名 &amp;nbsp; &lt;code&gt;=&lt;/code&gt; &amp;nbsp;数据类型&lt;code&gt;[&lt;/code&gt;数组长度&lt;code&gt;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-3-赋值&#34;&gt;&lt;a href=&#34;#1-3-赋值&#34; class=&#34;headerlink&#34; title=&#34;1.3 赋值&#34;&gt;&lt;/a&gt;1.3 赋值&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数组从0开始计算（一位数组按顺序排列数字）&lt;ul&gt;
&lt;li&gt;语法：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;score[0] = 92;//score数组的一号元素的数值为92
score[1] = 98;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使用循环操作打印Java数组&#34;&gt;&lt;a href=&#34;#使用循环操作打印Java数组&#34; class=&#34;headerlink&#34; title=&#34;使用循环操作打印Java数组&#34;&gt;&lt;/a&gt;使用循环操作打印Java数组&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码演示：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;int[] scores ={88,82,99,86,95};
for(int i =0;i&amp;lt;score.length;i++){
    System.out.println(scores[i]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;数组名&lt;code&gt;.length&lt;/code&gt;为获取数组的长度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用Arrays类按顺序打印Java数组&#34;&gt;&lt;a href=&#34;#使用Arrays类按顺序打印Java数组&#34; class=&#34;headerlink&#34; title=&#34;使用Arrays类按顺序打印Java数组&#34;&gt;&lt;/a&gt;使用Arrays类按顺序打印Java数组&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先导入&lt;code&gt;Arrays&lt;/code&gt;类&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;import java.utol.Arrays;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;然后排序&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Arrays.sort(数组名);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;整体演示&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;//定义一个整型数组
int[] score ={75,88,91,64,73};
//使用Arrays类的sort()方法对数组进行排序
Arrays.sort(score);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;将数组转换为字符串&#34;&gt;&lt;a href=&#34;#将数组转换为字符串&#34; class=&#34;headerlink&#34; title=&#34;将数组转换为字符串&#34;&gt;&lt;/a&gt;将数组转换为字符串&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;语法：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Array.toString(数组名);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;例如：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;System.out.println(Array.toString(scores));
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用for-each遍历数组&#34;&gt;&lt;a href=&#34;#使用for-each遍历数组&#34; class=&#34;headerlink&#34; title=&#34;使用for-each遍历数组&#34;&gt;&lt;/a&gt;使用for-each遍历数组&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;语法：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;for(元素类型 元素变量  : 遍历对象){
    执行的代码;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;例如&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;//对一维数组而言
int arr[] = {2, 3, 1};
for (int x : arr) { 
System.out.println(x); //逐个输出数组元素的值 
//对List数组来说
//创建List并添加元素 
List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;(); 
list.add(&amp;quot;1&amp;quot;); 
list.add(&amp;quot;3&amp;quot;); 
list.add(&amp;quot;4&amp;quot;); 
//利用froeach语句输出集合元素 
System.out.println(&amp;quot;----2----froeach语句输出集合元素&amp;quot;); 
for (String x : list) { 
System.out.println(x); 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Java中使用二维数组&#34;&gt;&lt;a href=&#34;#Java中使用二维数组&#34; class=&#34;headerlink&#34; title=&#34;Java中使用二维数组&#34;&gt;&lt;/a&gt;Java中使用二维数组&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;声明数组并分配空间&lt;ul&gt;
&lt;li&gt;数据类型 &amp;nbsp;&lt;code&gt;[][]&lt;/code&gt; 数组名 &lt;code&gt;=&lt;/code&gt; &lt;code&gt;new&lt;/code&gt; 数据类型 &lt;code&gt;[&lt;/code&gt;行的个数&lt;code&gt;]``[&lt;/code&gt;列的个数&lt;code&gt;]&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;例如：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;int [][] nums = new int[5][6];
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;赋值&lt;ul&gt;
&lt;li&gt;数组名&lt;code&gt;[&lt;/code&gt;行索引&lt;code&gt;]``[&lt;/code&gt;列索引&lt;code&gt;]&lt;/code&gt; = 值;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;处理数组&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/Java%E6%96%B9%E6%B3%95/</guid>
            <title>Java方法</title>
            <link>https://peter-pan001.github.io/my-blog/Java/Java%E6%96%B9%E6%B3%95/</link>
            <category>Java</category>
            <pubDate>Thu, 22 Oct 2020 22:53:14 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;语法：&lt;br&gt;访问修饰符 返回值类型 方法名(参数列表){&lt;pre&gt;&lt;code&gt;方法体
&lt;/code&gt;&lt;/pre&gt;}&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问修饰符：&lt;/strong&gt;方法运行被访问的权限范围，通常可以设置为&lt;code&gt;public&lt;/code&gt;,&lt;code&gt;protected&lt;/code&gt;,&lt;code&gt;private&lt;/code&gt;,甚至可以省略&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回值类型：&lt;/strong&gt;方法返回值的类型，如果方法不返回任何值，则返回值类型指定为&lt;code&gt;void&lt;/code&gt;;如果方法具有返回值，则需要指定返回值类型，并且在方法体中使用&lt;code&gt;return&lt;/code&gt;语句返回值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法名：&lt;/strong&gt;定义方法的名字，必须使用合法的标识符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参数列表：&lt;/strong&gt;可以有多个，多个参数之间用逗号隔开，每个参数由参数类型和参数名组成，此时方法分成四类&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无参无返回值的方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无参有返回值的方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有参无返回值的方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有参有返回值的方法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-1-无参无返回值方法的使用&#34;&gt;&lt;a href=&#34;#1-1-无参无返回值方法的使用&#34; class=&#34;headerlink&#34; title=&#34;1.1 无参无返回值方法的使用&#34;&gt;&lt;/a&gt;1.1 无参无返回值方法的使用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;第一步：定义方法（即概述中的语法）&lt;/li&gt;
&lt;li&gt;第二步：调用方法&lt;ul&gt;
&lt;li&gt;先创建类的对象，再通过对象名&lt;code&gt;.&lt;/code&gt;方法名&lt;code&gt;(``)&lt;/code&gt;;实现&lt;/li&gt;
&lt;li&gt;例如：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class Person{
    Person teacher = new Person();
    public void teach{
        System.out.println(&amp;quot;teaching.....&amp;quot;);
    }
    teacher.teach();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-无参有返回值方法的使用&#34;&gt;&lt;a href=&#34;#1-2-无参有返回值方法的使用&#34; class=&#34;headerlink&#34; title=&#34;1.2 无参有返回值方法的使用&#34;&gt;&lt;/a&gt;1.2 无参有返回值方法的使用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2020/10/22/9lLHstn56icf8jG.png&#34; alt=&#34;methodreturn.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;如果方法的返回类型为&lt;code&gt;void&lt;/code&gt;，则方法中不能使用&lt;code&gt;return&lt;/code&gt;返回&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;方法的返回值最多只能有一个，不能返回多个值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;方法返回值的类型必须兼容&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-3-有参无返回值方法的使用&#34;&gt;&lt;a href=&#34;#1-3-有参无返回值方法的使用&#34; class=&#34;headerlink&#34; title=&#34;1.3 有参无返回值方法的使用&#34;&gt;&lt;/a&gt;1.3 有参无返回值方法的使用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;语法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象名&lt;code&gt;.&lt;/code&gt;方法名&lt;code&gt;(&lt;/code&gt;实参1,实参2,….&lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用带参方法时，必须保证实参的数量，类型，数据顺序与形参一一对应&lt;/li&gt;
&lt;li&gt;调用方法时，实参不需要知道数据类型&lt;/li&gt;
&lt;li&gt;方法的参数可以是基本类型，也可以是引用类型（即String，数组）&lt;/li&gt;
&lt;li&gt;当方法参数有多个时，使用逗号分隔&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;方法的重载&#34;&gt;&lt;a href=&#34;#方法的重载&#34; class=&#34;headerlink&#34; title=&#34;方法的重载&#34;&gt;&lt;/a&gt;方法的重载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;概念理解：&lt;/strong&gt;如果同一个类包含了两个或两个以上方法名相同，方法参数的个数、顺序或类型不同的方法&lt;ul&gt;
&lt;li&gt;判断依据&lt;ol&gt;
&lt;li&gt;必须是在同一个类中&lt;/li&gt;
&lt;li&gt;方法名相同&lt;/li&gt;
&lt;li&gt;方法参数的个数、顺序或类型不同&lt;/li&gt;
&lt;li&gt;与方法的修饰符或返回值没有关系 &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/Java%E7%9A%84Stream%E6%B5%81/</guid>
            <title>Java的Stream流</title>
            <link>https://peter-pan001.github.io/my-blog/Java/Java%E7%9A%84Stream%E6%B5%81/</link>
            <category>Java</category>
            <pubDate>Thu, 22 Oct 2020 22:53:14 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;第一章-简单体验一下Stream流&#34;&gt;&lt;a href=&#34;#第一章-简单体验一下Stream流&#34; class=&#34;headerlink&#34; title=&#34;第一章 简单体验一下Stream流&#34;&gt;&lt;/a&gt;第一章 简单体验一下Stream流&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们使用Stream流的方式，可以用来遍历集合，对集合中的数据进行过滤等，Stream流是在jdk1.8之后出现 &lt;/li&gt;
&lt;li&gt;代码示例&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class DemoTextStream{
  public static void main(String[] args){
      // 创建一个list集合，用来存储姓名
      List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
      list.add(&amp;quot;李冰冰&amp;quot;);
      list.add(&amp;quot;彭于晏&amp;quot;);
      list.add(&amp;quot;李易峰&amp;quot;);
      list.add(&amp;quot;李沁&amp;quot;);
      list.add(&amp;quot;王思聪&amp;quot;);
      // 对List集合的元素进行过滤，只要以张开头的元素，存储到一个新的集合中
      // 对listA集合进行过滤，只要姓名长度为三的人
      // 遍历集合
      list.Stream()
              .filter(name-&amp;gt;name.startsWith(&amp;quot;李&amp;quot;))
              .filter(name-&amp;gt;name.length()==3)
              .foreach(name-&amp;gt;System.out.println(name));
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;流式思想的概述&#34;&gt;&lt;a href=&#34;#流式思想的概述&#34; class=&#34;headerlink&#34; title=&#34;流式思想的概述&#34;&gt;&lt;/a&gt;流式思想的概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;对于流式思想，可以&lt;strong&gt;把它想象成工厂的“流水线”&lt;/strong&gt;。通过一系列的加工、过滤得到最后的产品&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;何为Stream&#34;&gt;&lt;a href=&#34;#何为Stream&#34; class=&#34;headerlink&#34; title=&#34;何为Stream&#34;&gt;&lt;/a&gt;何为Stream&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stream流实际上是一个来自数据源的元素队列&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Java中的Stream并不会存储元素，而是按需计算&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第二章-获取Stream流的方式&#34;&gt;&lt;a href=&#34;#第二章-获取Stream流的方式&#34; class=&#34;headerlink&#34; title=&#34;第二章 获取Stream流的方式&#34;&gt;&lt;/a&gt;第二章 获取Stream流的方式&lt;/h2&gt;&lt;h2 id=&#34;java-util-stream-Stream-lt-T-gt-是java中新加入的最常用的流接口&#34;&gt;&lt;a href=&#34;#java-util-stream-Stream-lt-T-gt-是java中新加入的最常用的流接口&#34; class=&#34;headerlink&#34; title=&#34;- java.util.stream.Stream&amp;lt;T&amp;gt;是java中新加入的最常用的流接口&#34;&gt;&lt;/a&gt;- &lt;code&gt;java.util.stream.Stream&amp;lt;T&amp;gt;&lt;/code&gt;是java中新加入的&lt;strong&gt;最常用的流接口&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;获取流的两种方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;所有的collection集合都可以通过stream默认方法获取流&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stream接口的静态方法of可以获取数组对应的流&lt;/strong&gt;&lt;code&gt;static&amp;lt;T&amp;gt; Stream&amp;lt;T&amp;gt; of(T...values)&lt;/code&gt;参数是一个&lt;strong&gt;可变参数&lt;/strong&gt;，可以通过这个方法传递一个数组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;代码演示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class DemoMethodAcq{
  public static void main(String[] args){
      //把集合转换为Stream流
      List&amp;lt;String&amp;gt; list = new Arraylist&amp;lt;String&amp;gt;();
      Stream&amp;lt;String&amp;gt; str = list.stream();

      Set&amp;lt;String&amp;gt; set = new HashSet&amp;lt;&amp;gt;();
      Stream&amp;lt;String&amp;gt; stream2 = set.stream();

      Map&amp;lt;String,String&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
      //获取键，存储到一个Set集合中
      Set&amp;lt;String&amp;gt; keyset =map.keyset();
      Stream&amp;lt;String&amp;gt; Stream3 = keyset.stream();

      //获取值，存储到一个Collection集合中
      Collection&amp;lt;String&amp;gt; values = map.values();
      Stream&amp;lt;String&amp;gt; stream4 = values.stream();

      //获取键值对
      Set&amp;lt;Map.Entry&amp;lt;String,String&amp;gt;&amp;gt; entries = map.entries();
      Stream&amp;lt;Map.Entry&amp;lt;String,String&amp;gt;&amp;gt; stream5 = entries.stream();

      //把数组转换为Stream流
      Stream&amp;lt;Integer&amp;gt; stream6 = Stream.of(1,2,3,4,5);
      //可变参数可以传递数组
      Integer[] arr = {1,2,3,4,5};
      Stream&amp;lt;Integer&amp;gt; stream7 = Stream.of(arr);
      String[] arr2 ={&amp;quot;a&amp;quot;,&amp;quot;bb&amp;quot;,&amp;quot;ccc&amp;quot;};
      Stream&amp;lt;String&amp;gt; stream8 = Stream.of(arr2);

  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第三章-Stream流的常用方法&#34;&gt;&lt;a href=&#34;#第三章-Stream流的常用方法&#34; class=&#34;headerlink&#34; title=&#34;第三章 Stream流的常用方法&#34;&gt;&lt;/a&gt;第三章 Stream流的常用方法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;流模型的操作被分为两种方法：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.&lt;strong&gt;延迟方法&lt;/strong&gt;:&amp;nbsp;&amp;nbsp;&amp;nbsp;返回值类型仍然是&lt;code&gt;Stream&lt;/code&gt;接口自身类型的方法，因此支持链式调用（除了延时方法其他均为终结方法）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.&lt;strong&gt;终结方法&lt;/strong&gt;:&amp;nbsp;&amp;nbsp;&amp;nbsp;返回值类型不在是&lt;code&gt;Stream&lt;/code&gt;接口自身类型的方法，因此不在支持类似&lt;code&gt;StringBuilder&lt;/code&gt;那样的链式调用（终结方法包括&lt;code&gt;count&lt;/code&gt;和&lt;code&gt;forEach&lt;/code&gt;方法）&lt;/p&gt;
&lt;h3 id=&#34;1、forEach方法（逐一处理）&#34;&gt;&lt;a href=&#34;#1、forEach方法（逐一处理）&#34; class=&#34;headerlink&#34; title=&#34;1、forEach方法（逐一处理）&#34;&gt;&lt;/a&gt;1、forEach方法（逐一处理）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先，此方法&lt;strong&gt;非for循环的for-each循环方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;其标准格式为：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;void forEach(Consumer&amp;lt;? suoer T&amp;gt; action);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;forEach方法是通过接收一个Consumer接口函数，会使每一个流元素交给该函数处理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可以简记为：&lt;ul&gt;
&lt;li&gt;forEach是用来遍历流数据的&lt;/li&gt;
&lt;li&gt;它是一个终结方法，遍历之后就不能继续调用Stream流中的其他方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码演示：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class Demo_forEach{
    public static void main(String[] args){
        //获取一个Stream流
        Stream&amp;lt;String&amp;gt; stream = Stream.of(&amp;quot;张三&amp;quot;，&amp;quot;李四&amp;quot;，&amp;quot;w王五&amp;quot;，&amp;quot;赵六&amp;quot;);
        //使用Stream流中的方法forEach对Stream流中的数据进行遍历
        stream.forEach((String name)-&amp;gt; {
            System.out.println(name);
        });
        /* 简写可以这样：
         stream.forEach(name-&amp;gt; 
            System.out.println(name)
        );
        */
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2、filter方法（过滤）&#34;&gt;&lt;a href=&#34;#2、filter方法（过滤）&#34; class=&#34;headerlink&#34; title=&#34;2、filter方法（过滤）&#34;&gt;&lt;/a&gt;2、filter方法（过滤）&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用&lt;code&gt;filter&lt;/code&gt;方法可以将一个流转换成另一个字节流&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Stream&amp;lt;T&amp;gt; filter(Predicate&amp;lt;? super T&amp;gt; predicate);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;此接口接收一个&lt;code&gt;Predicate&lt;/code&gt;函数式接口参数作为筛选条件,即：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;boolean test(T t);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;该方法是Predicate接口中的一个抽象方法&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class Demo_filter{
public static void main(String[] args){
    //创建一个Stream流
    Stream&amp;lt;String&amp;gt; stream = Stream.of(&amp;quot;李冰冰&amp;quot;,&amp;quot;李易峰&amp;quot;,&amp;quot;彭于晏&amp;quot;,&amp;quot;李沁&amp;quot;,&amp;quot;王思聪&amp;quot;);
    //对Stream流中的元素进行过滤，筛选出姓“李”的人
    Stream&amp;lt;String&amp;gt; stream2 = stream.filter((String name)-&amp;gt;{
        return name.startWith(&amp;quot;李&amp;quot;);
    });
    //遍历stream2
    stream.forEach(name-&amp;gt; System.out.println(name));
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stream流属于管道流，只能被消费一次&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第一次Stream流调用完毕后，数据会流到下一个Stream上&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;此时第一个Stream流消费完毕，就会关闭&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3、map方法（映射）&#34;&gt;&lt;a href=&#34;#3、map方法（映射）&#34; class=&#34;headerlink&#34; title=&#34;3、map方法（映射）&#34;&gt;&lt;/a&gt;3、map方法（映射）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map方法&lt;/strong&gt;是将流中的元素映射到另一个流中，可以使用map方法&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;&amp;lt;R&amp;gt; Stream&amp;lt;R&amp;gt; map{Function&amp;lt;? super T,? extends R&amp;gt; mapper};
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;该接口需要一个&lt;code&gt;Function&lt;/code&gt;的函数式接口参数&lt;/li&gt;
&lt;li&gt;使用的是Function接口的抽象方法：&lt;br&gt;&lt;code&gt;R apply(T t);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;代码演示：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class Demo_map{
    public static void main(String[] args){
        //获取一个String类型的Stream流
        Stream&amp;lt;String&amp;gt; stream = Stream.of(&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;4&amp;quot;,&amp;quot;5&amp;quot;);
        //使用map方法，把字符串类型的整数，转换（映射）到Integer类型的整数
        Stream&amp;lt;Integer&amp;gt; stream2 = stream.map((String s)-&amp;gt;{
            return Integer.parseInt(s);
        });
        //遍历stream2
        stream2.forEach(i-&amp;gt; System.out.println(i));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4、count方法（统计个数）&#34;&gt;&lt;a href=&#34;#4、count方法（统计个数）&#34; class=&#34;headerlink&#34; title=&#34;4、count方法（统计个数）&#34;&gt;&lt;/a&gt;4、count方法（统计个数）&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;Stream流通过&lt;code&gt;count&lt;/code&gt;方法来对流中的元素进行统计，即：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;long count();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;count方法是一个终结方法，返回值是一个Long类型的整数，不能再继续调用Stream流中的其他方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;import java.util.stream.Stream;

public class Demo_count{
    public static void main(String[] args){
        Stream&amp;lt;String&amp;gt; stream = Stream.of(&amp;quot;李冰冰&amp;quot;,&amp;quot;李易峰&amp;quot;,&amp;quot;王思聪&amp;quot;);
        Stream&amp;lt;String&amp;gt; result = stream.filter(s-&amp;gt; s.startWith(&amp;quot;李&amp;quot;));
        System.out.println(result.count());//输出为2

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5、limit方法（截取使用前几个）&#34;&gt;&lt;a href=&#34;#5、limit方法（截取使用前几个）&#34; class=&#34;headerlink&#34; title=&#34;5、limit方法（截取使用前几个）&#34;&gt;&lt;/a&gt;5、limit方法（截取使用前几个）&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;lang-limit```方法可以对流进行截取，只取用前n个，即：&#34;&gt;```java
Stream&amp;lt;T&amp;gt; limit(long maxSize);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参数是一个Long类型，如果集合当前长度大于参数则进行截取，否则不操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;limit方法是一个延迟方法，返回的是一个新的流，可以调用Stream流的其他方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;代码展示：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;public class Demo_limit{
  public static void main(String[] args){
      //获取一个Stream流
      String[] arr = {&amp;quot;李冰冰&amp;quot;,&amp;quot;李易峰&amp;quot;,&amp;quot;王思聪&amp;quot;};
      Stream&amp;lt;String&amp;gt; stream = Stream.of(arr);
      //使用Limit对Stream流中的元素进行截取，只要前2个元素
      Stream&amp;lt;String&amp;gt; stream2 =stream.limit(2);
      //遍历stream2
      stream2.forEach(name-&amp;gt; System.out.println(name));
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6、skip方法（跳过前几个）&#34;&gt;&lt;a href=&#34;#6、skip方法（跳过前几个）&#34; class=&#34;headerlink&#34; title=&#34;6、skip方法（跳过前几个）&#34;&gt;&lt;/a&gt;6、skip方法（跳过前几个）&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果需要跳过前几个元素，可以使用&lt;code&gt;skip&lt;/code&gt;方法进行截取流，即：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Stream&amp;lt;T&amp;gt; skip(long n);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;若要跳过的元素个数n大于流中元素的个数，则会截取流，得到一个长度为0的空流（新流）&lt;/li&gt;
&lt;li&gt;代码展示：&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; public class Demo_limit{
        public static void main(String[] args){
        //获取一个Stream流
        String[] arr = {&amp;quot;李冰冰&amp;quot;,&amp;quot;李易峰&amp;quot;,&amp;quot;王思聪&amp;quot;};
        Stream&amp;lt;String&amp;gt; stream = Stream.of(arr);
        //使用skip跳过前2个元素
        Stream&amp;lt;String&amp;gt; stream2 =stream.skip(2);
        //遍历stream2
        stream2.forEach(name-&amp;gt; System.out.println(name));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;7、concat方法（组合）&#34;&gt;&lt;a href=&#34;#7、concat方法（组合）&#34; class=&#34;headerlink&#34; title=&#34;7、concat方法（组合）&#34;&gt;&lt;/a&gt;7、concat方法（组合）&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果有两个流，需要合并为一个流，则需要使用&lt;code&gt;concat&lt;/code&gt;静态方法，即：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;static &amp;lt;T&amp;gt; Stream&amp;lt;T&amp;gt; concat(Stream&amp;lt;? extends T&amp;gt; a, Stream&amp;lt;? extends T&amp;gt; b);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;备注：这是一个静态方法，与&lt;code&gt;java.lang.String&lt;/code&gt;当中的&lt;code&gt;concat&lt;/code&gt;方法不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码展示：&lt;br&gt;```java&lt;br&gt;import java.util.stream.Stream;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;public class Demo_concat{&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static void main(String[] args){
    Stream&amp;lt;String&amp;gt; streamA = Stream.of(&amp;quot;李冰冰&amp;quot;);
    Stream&amp;lt;String&amp;gt; streamB = Stream.of(&amp;quot;李易峰&amp;quot;);
    Stream&amp;lt;String&amp;gt; result = Stream.concat(streamA,streamB);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;br&gt;```&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/Java%E7%BB%A7%E6%89%BF/</guid>
            <title>Java继承</title>
            <link>https://peter-pan001.github.io/my-blog/Java/Java%E7%BB%A7%E6%89%BF/</link>
            <category>Java</category>
            <pubDate>Thu, 22 Oct 2020 22:53:14 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;关于继承&#34;&gt;&lt;a href=&#34;#关于继承&#34; class=&#34;headerlink&#34; title=&#34;关于继承&#34;&gt;&lt;/a&gt;关于继承&lt;/h2&gt;&lt;h3 id=&#34;概念&#34;&gt;&lt;a href=&#34;#概念&#34; class=&#34;headerlink&#34; title=&#34;概念&#34;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;继承是类与类的一种关系，是一种“is a”的关系&lt;/li&gt;
&lt;li&gt;继承可以使得子类具有父类别的各种属性和方法，而&lt;strong&gt;不需要再次编写相同的代码&lt;/strong&gt;。在令子类别继承父类别的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;继承的特性&#34;&gt;&lt;a href=&#34;#继承的特性&#34; class=&#34;headerlink&#34; title=&#34;继承的特性&#34;&gt;&lt;/a&gt;继承的特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Java只有单继承，即只有一个父类&lt;/li&gt;
&lt;li&gt;没有调用&lt;code&gt;extend&lt;/code&gt;，则父类为&lt;code&gt;java.lang&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;instance of&lt;/code&gt;判断对象类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;超类、子类&#34;&gt;&lt;a href=&#34;#超类、子类&#34; class=&#34;headerlink&#34; title=&#34;超类、子类&#34;&gt;&lt;/a&gt;超类、子类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对于java中继承的某些知识，在这里需要给读者插补一点类的基本知识，让文章更具有可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;超类&#34;&gt;&lt;a href=&#34;#超类&#34; class=&#34;headerlink&#34; title=&#34;超类&#34;&gt;&lt;/a&gt;超类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;超类，也称父类，Java只允许一个class继承自一个类，因此，一个类有且仅有一个父类。只有&lt;code&gt;Object&lt;/code&gt;类特殊，它没有父类，所有它是所有类的父类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;子类&#34;&gt;&lt;a href=&#34;#子类&#34; class=&#34;headerlink&#34; title=&#34;子类&#34;&gt;&lt;/a&gt;子类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;子类就是继承父类的所有方法，在此基础上在实现子类自己的一些方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;继承的优点&#34;&gt;&lt;a href=&#34;#继承的优点&#34; class=&#34;headerlink&#34; title=&#34;继承的优点&#34;&gt;&lt;/a&gt;继承的优点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;子类拥有父类的属性和方法&lt;/li&gt;
&lt;li&gt;实现代码复用&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用语法&#34;&gt;&lt;a href=&#34;#使用语法&#34; class=&#34;headerlink&#34; title=&#34;使用语法&#34;&gt;&lt;/a&gt;使用语法&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Class Student extends Person{

}//student就是子类，Person就是父类
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;继承的初始化顺序&#34;&gt;&lt;a href=&#34;#继承的初始化顺序&#34; class=&#34;headerlink&#34; title=&#34;继承的初始化顺序&#34;&gt;&lt;/a&gt;继承的初始化顺序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;初始化父类在初始化子类&lt;/li&gt;
&lt;li&gt;先执行初始化对象中的属性，再执行构造方法中的初始化&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://i.loli.net/2020/10/22/DFxfgikLnOCmu2E.png&#34; alt=&#34;initialstep.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;方法的重写-override&#34;&gt;&lt;a href=&#34;#方法的重写-override&#34; class=&#34;headerlink&#34; title=&#34;方法的重写(override)&#34;&gt;&lt;/a&gt;方法的重写(override)&lt;/h2&gt;&lt;h3 id=&#34;概念-1&#34;&gt;&lt;a href=&#34;#概念-1&#34; class=&#34;headerlink&#34; title=&#34;概念&#34;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果子类对继承父类的方法不满意，是可以重写父类继承的方法的，当调用方法时会优先调用子类的方法&lt;/li&gt;
&lt;li&gt;使用规则：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@override&lt;/code&gt;的注释下的方法即为重写的方法，其本质是覆盖父类的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语法规则&#34;&gt;&lt;a href=&#34;#语法规则&#34; class=&#34;headerlink&#34; title=&#34;语法规则&#34;&gt;&lt;/a&gt;语法规则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;返回值类型、方法名、参数类型与个数这三者必须与父类继承的方法相同，这样才叫做方法的重写&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子类访问权限大于父类访问权限&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;final关键字&#34;&gt;&lt;a href=&#34;#final关键字&#34; class=&#34;headerlink&#34; title=&#34;final关键字&#34;&gt;&lt;/a&gt;final关键字&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;,即“最终的”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;可以修饰类、方法、属性和变量&lt;ul&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;修饰类，则该类&lt;strong&gt;不允许被继承&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;修饰方法，则该方法&lt;strong&gt;不允许被覆盖（重写）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;修饰属性，则该类的属性不会进行隐式的初始化（类的初始化属性必须有值）或在构造方法中赋值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;修饰变量，则该变量的值&lt;strong&gt;只能赋一次值&lt;/strong&gt;，即为常量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Super关键字&#34;&gt;&lt;a href=&#34;#Super关键字&#34; class=&#34;headerlink&#34; title=&#34;Super关键字&#34;&gt;&lt;/a&gt;Super关键字&lt;/h2&gt;&lt;h3 id=&#34;概念-2&#34;&gt;&lt;a href=&#34;#概念-2&#34; class=&#34;headerlink&#34; title=&#34;概念&#34;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;super&lt;/code&gt;关键字是指示编译器调用超类方法的特殊关键字&lt;/li&gt;
&lt;li&gt;直接父类对象的引用，通过&lt;code&gt;super&lt;/code&gt;来访问父类中被子类覆盖的方法或属性&lt;/li&gt;
&lt;li&gt;在对象内部使用，可以代表父类对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用语法-1&#34;&gt;&lt;a href=&#34;#使用语法-1&#34; class=&#34;headerlink&#34; title=&#34;使用语法&#34;&gt;&lt;/a&gt;使用语法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对父类属性的访问&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;super.age;//age是父类的一个属性
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;对父类方法的访问&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;super.eat();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;调用父类&lt;code&gt;toString&lt;/code&gt;方法&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;super.toString();//默认父类为object类
//输出格式为：全路径@全限定名Hashcode
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特殊使用法！！！&lt;/strong&gt;&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;super(变量1，变量2)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;这样使用会使父类的私有域进行初始化，也称调用超类的构造器  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;super应用&#34;&gt;&lt;a href=&#34;#super应用&#34; class=&#34;headerlink&#34; title=&#34;super应用&#34;&gt;&lt;/a&gt;super应用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;子类在构造过程中必须调用其父类的构造方法&lt;/li&gt;
&lt;li&gt;如果子类的构造方法中没有显示调用父类的构造方法，则系统默认调用父类无参的构造方法&lt;/li&gt;
&lt;li&gt;如果显示的调用构造方法，必须在子类的构造方法的&lt;strong&gt;第一行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果子类构造方法中既没有显式调用父类的构造方法，二父类又没有无参的构造方法，则编译出错&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Object类&#34;&gt;&lt;a href=&#34;#Object类&#34; class=&#34;headerlink&#34; title=&#34;Object类&#34;&gt;&lt;/a&gt;Object类&lt;/h2&gt;&lt;h3 id=&#34;概念-3&#34;&gt;&lt;a href=&#34;#概念-3&#34; class=&#34;headerlink&#34; title=&#34;概念&#34;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Object&lt;/code&gt;类是所有类的父类，如果一个类没有使用&lt;code&gt;extends&lt;/code&gt;关键字来明确标识继承另一个类，那么这个类默认继承&lt;code&gt;object&lt;/code&gt;类&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;方法&#34;&gt;&lt;a href=&#34;#方法&#34; class=&#34;headerlink&#34; title=&#34;方法&#34;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;toString()&lt;/code&gt;方法&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;Object&lt;/code&gt;类中定义&lt;code&gt;toString()&lt;/code&gt;方法的时候放的对象时哈希码（即对象地址字符串）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equals()&lt;/code&gt;方法&lt;ul&gt;
&lt;li&gt;比较的是对象的引用是否执行同一块内存地址&lt;/li&gt;
&lt;li&gt;一般情况下比较两个对象时比较它的值是否一致，所有要进行重写&lt;code&gt;@Override&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://peter-pan001.github.io/my-blog/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</guid>
            <title>Java网络编程</title>
            <link>https://peter-pan001.github.io/my-blog/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
            <category>Java</category>
            <pubDate>Thu, 22 Oct 2020 22:53:14 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1、概述&#34;&gt;&lt;a href=&#34;#1、概述&#34; class=&#34;headerlink&#34; title=&#34;1、概述&#34;&gt;&lt;/a&gt;1、概述&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;计算机之间通过传输介质、通信设施和网络通信协议互联，实现资源共享和数据传输。而我们的网络编程就是&lt;strong&gt;使用程序使互联网的两个（或多个）计算机之间进行数据传输。&lt;/strong&gt;当然java语言，为了实现两个计算机之间的数据传输，提供了一系列的接口，使得开发人员可以方便的实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2、OSI与TCP-IP模型&#34;&gt;&lt;a href=&#34;#2、OSI与TCP-IP模型&#34; class=&#34;headerlink&#34; title=&#34;2、OSI与TCP/IP模型&#34;&gt;&lt;/a&gt;2、OSI与TCP/IP模型&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&#34;模型对比&#34;&gt;&lt;a href=&#34;#模型对比&#34; class=&#34;headerlink&#34; title=&#34;模型对比&#34;&gt;&lt;/a&gt;模型对比&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;http://ww1.sinaimg.cn/large/007uxMgDgy1gizstyuicoj30m80h0gne.jpg&#34; alt=&#34;image-20200623105550900.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP/IP支持跨层封装 ；但OSI不支持&lt;/li&gt;
&lt;li&gt;TCP/IP仅仅支持IP网络协议 ；OSI支持多种网络层协议&lt;/li&gt;
&lt;li&gt;TCP是面向连接的可靠的传输协议&lt;/li&gt;
&lt;li&gt;UDP是非面向连接的不可靠的传输协议&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;TCP-IP模型中的协议剖析&#34;&gt;&lt;a href=&#34;#TCP-IP模型中的协议剖析&#34; class=&#34;headerlink&#34; title=&#34;TCP/IP模型中的协议剖析&#34;&gt;&lt;/a&gt;TCP/IP模型中的协议剖析&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;http://ww1.sinaimg.cn/large/007uxMgDgy1gizsusacczj30ta0gbtab.jpg&#34; alt=&#34;image-20200623110038567.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;该模型中几个主要的协议术语及其作用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TCP（传输控制协议）&lt;/strong&gt;：通过使用一个校验码检验数据是否发生错误，在接收和转发中都使用计算校验和，并同时对数据进行加密&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;UDP（用户数据报协议）&lt;/strong&gt;：UDP使用底层的互联网协议来传送报文，同IP一样提供不可靠的无连接数据包传输服务。它不提供报文到达确认、排序、及流量控制等功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;FTP（文件传输协议）&lt;/strong&gt;：让用户连接上一个远程计算机（这些计算机上运行着FTP服务器程序）察看远程计算机有哪些文件，然后把文件从远程计算机上拷到本地计算机，或把本地计算机的文件送到远程计算机去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SMTP（邮件消息传输协议）&lt;/strong&gt;：SMTP是一种提供可靠且有效电子邮件传输的协议。它是建立在FTP文件传输服务上的一种邮件服务，主要用于传输系统之间的邮件信息并提供来信有关的通知。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; SMTP重要的特性之一是它能跨越网络传输邮件，也即“SMTP邮件中继”。使用SMTP，可实现相同网络上处理机之间的邮件传输，也可以通过中继器或网关实现某处理机与其它网络之间的邮件传输。具有域名服务系统(DNS)功能的邮件交换服务器还可以用来识别出传输邮件的下一跳IP地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3、IP&#34;&gt;&lt;a href=&#34;#3、IP&#34; class=&#34;headerlink&#34; title=&#34;3、IP&#34;&gt;&lt;/a&gt;3、IP&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IP（网际协议）&lt;/strong&gt; ：提高网络可扩展性，为主机提供一种无连接的数据传输服务&lt;/li&gt;
&lt;li&gt;唯一定位一台网络上的计算机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;127.0.0.1&lt;/code&gt;为本机地址&lt;code&gt;localhost&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4、端口（port）&#34;&gt;&lt;a href=&#34;#4、端口（port）&#34; class=&#34;headerlink&#34; title=&#34;4、端口（port）&#34;&gt;&lt;/a&gt;4、端口（port）&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;端口表示计算机的一个程序的进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不同的进程有不同的端口号，并且端口号不能重复（单个协议下）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;端口号范围限制为 0 ~ 65535&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;端口分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;公有端口 0 ~ 1023&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP ：80&lt;/li&gt;
&lt;li&gt;HTTPS ：443&lt;/li&gt;
&lt;li&gt;FTP ： 21&lt;/li&gt;
&lt;li&gt;Telnet ：23&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;程序注册端口： 1024 ~ 49151 分配用户或程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tomcat ：8080&lt;/li&gt;
&lt;li&gt;MySQL ：3306&lt;/li&gt;
&lt;li&gt;Oracle ：1521&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态私有 49152 ~ 65535&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-bash&#34;&gt; netstat -ano #查看所有端口
 netstat -ano|findstr &amp;quot;8080&amp;quot; # 查看指定端口
 tasklist|findstr &amp;quot;8696&amp;quot; # 查看指定端口的进程
 ctrl + shift +ESC # 调用任务管理器
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5、TCP实现聊天&#34;&gt;&lt;a href=&#34;#5、TCP实现聊天&#34; class=&#34;headerlink&#34; title=&#34;5、TCP实现聊天&#34;&gt;&lt;/a&gt;5、TCP实现聊天&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;客户端（Client）&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获取服务端的地址与端口号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;连接服务器端口，建立socket连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;发送信息（IO流）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关闭资源&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;Socket socket = null;
OutputStream os = null;
        try {

            //首先要知道服务端的地址和端口号
            InetAddress serverIp = InetAddress.getByName(&amp;quot;127.0.0.1&amp;quot;);
            int port = 9999;

            //建立socket连接
            socket = new Socket(serverIp,9999);

            //发送信息
            os = socket.getOutputStream();
            os.write(&amp;quot;我们已经成为好友，可以开始聊天&amp;quot;.getBytes());
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            if (os != null){
                try {
                    os.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (socket != null){
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;服务端（Server）&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;建立socket服务器端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调用端口的accept方法,等待用户端连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;读取用户信息（IO流）的inputStream&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建立管道流，把数据从字节流转换为字符流&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关闭资源&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt;    ServerSocket serverSocket = null;
     Socket socket = null;
      InputStream is = null;
        ByteArrayOutputStream baos = null;
        try {
            //给一个服务端的地址
             serverSocket = new ServerSocket(9999);
            //等待客户端接入
             socket = serverSocket.accept();
            //读取客户端信息
             is = socket.getInputStream();

            //管道流
             baos = new ByteArrayOutputStream();
            byte[] buffer = new byte[1024];
            int len;
            while ((len=is.read(buffer))!= -1){
                baos.write(buffer,0,len);
            }
            System.out.println(baos.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            //关闭资源
            if(baos !=null){
                try {
                    baos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (is !=null){
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (socket != null){
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (serverSocket != null){
                try {
                    serverSocket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6、TCP实现文件上传&#34;&gt;&lt;a href=&#34;#6、TCP实现文件上传&#34; class=&#34;headerlink&#34; title=&#34;6、TCP实现文件上传&#34;&gt;&lt;/a&gt;6、TCP实现文件上传&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;服务端（Server）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; public static void main(String[] args) throws Exception {
         //创建服务
         ServerSocket serverSocket = new ServerSocket(9000);
         //监听客户端连接
         Socket socket = serverSocket.accept();
         //获取输入流
         InputStream is = socket.getInputStream();
         //此处写文件路径最好使用绝对路径，否则会报错
         File file = new File(&amp;quot;G://IDEA_Project/FIST/src/receive.jpg&amp;quot;);
         //文件输出
         FileOutputStream fos = new FileOutputStream(file);
         byte[] buffer = new byte[1024];
         int len;
         while ((len = is.read(buffer))!=-1){
             fos.write(buffer,0,len);
         }

         //通知客户端接收完毕
         OutputStream os = socket.getOutputStream();
         os.write(&amp;quot;服务端接收完毕，你可以断开连接&amp;quot;.getBytes());

         //关闭资源 (后创建先关闭原则)
         fos.close();
         is.close();
         socket.close();
         serverSocket.close();
     }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;客户端（client）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; public static void main(String[] args) throws Exception {
         //创建一个socket连接
         Socket socket = new Socket(InetAddress.getByName(&amp;quot;127.0.0.1&amp;quot;), 9000);
         //建立一个输出流
         OutputStream os = socket.getOutputStream();
         //此处写文件路径最好使用绝对路径，否则会报错
         File file = new File(&amp;quot;G://IDEA_Project/FIST/src/lld.jpg&amp;quot;);
         //读取文件
         FileInputStream fis = new FileInputStream(file);
         //写入文件
         byte[] buffer = new byte[1024];
         int len;
         while ((len= fis.read(buffer)) !=-1){
             os.write(buffer,0,len);
         }
         //通知服务器，我已经结束啦
         socket.shutdownOutput();

         //确认服务端接收完毕，才断开连接
         InputStream is = socket.getInputStream();

         ByteArrayOutputStream baos = new ByteArrayOutputStream();

         byte[] buffer2 =new byte[1024];
         int len2;
         while ((len2 = is.read(buffer2)) != -1){
             baos.write(buffer2,0,len2);
         }
         System.out.println(baos.toString());
         //关闭资源 (后创建先关闭原则)
         baos.close();
         is.close();
         fis.close();
         os.close();
         socket.close();
     }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7、UDP实现消息的发送&#34;&gt;&lt;a href=&#34;#7、UDP实现消息的发送&#34; class=&#34;headerlink&#34; title=&#34;7、UDP实现消息的发送&#34;&gt;&lt;/a&gt;7、UDP实现消息的发送&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;客户端&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; public static void main(String[] args) throws Exception {
         //建立一个socket
         DatagramSocket socket = new DatagramSocket();
         //建立数据包
         String msg = &amp;quot;Hello,Server!&amp;quot;;
         //发送目的地
         InetAddress localhost = InetAddress.getByName(&amp;quot;localhost&amp;quot;);
         int port =9090;
         //数据，数据长度的起始，目的地信息
         DatagramPacket packet = new DatagramPacket(msg.getBytes(), 0, msg.getBytes().length, localhost, port);
         //发送包
         socket.send(packet);
         //关闭流
         socket.close();

     }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;服务端&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-java&#34;&gt; public static void main(String[] args) throws Exception {
         //开放端口
         DatagramSocket socket = new DatagramSocket(9090);
         //接收数据包
         byte[] buffer = new byte[1024];
         DatagramPacket packet = new DatagramPacket(buffer, 0, buffer.length);
         //接收包
         socket.receive(packet);
         //打印输出目的端地址及数据内容
         System.out.println(packet.getAddress().getHostName());
         System.out.println(new String(packet.getData(), 0, packet.getLength()));
         //关闭流
         socket.close();
     }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8、UDP实现循环发送&#34;&gt;&lt;a href=&#34;#8、UDP实现循环发送&#34; class=&#34;headerlink&#34; title=&#34;8、UDP实现循环发送&#34;&gt;&lt;/a&gt;8、UDP实现循环发送&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sender端&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; ```java&lt;br&gt;  public static void main(String[] args) throws Exception {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     //建立端口
     DatagramSocket socket = new DatagramSocket(8888);

     //数据,通过控制台输入数据
     BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;       while (true){
           String data =  reader.readLine();
           byte[] datas = data.getBytes();

           DatagramPacket packet = new DatagramPacket(datas,0,datas.length,new InetSocketAddress(&amp;quot;localhost&amp;quot;,6666));

           socket.send(packet);

           if (data.equals(&amp;quot;bye&amp;quot;)){
               break;
           }
       }

       socket.close();
   }
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;


+ **Receive端**

   ```java
   public static void main(String[] args) throws Exception {
           DatagramSocket socket = new DatagramSocket(6666);
           while (true){

               byte[] container = new byte[1024];
               DatagramPacket packet = new DatagramPacket(container, 0, container.length);
               //阻塞式接收
               socket.receive(packet);

               byte[] data = packet.getData();
               String receiveData = new String(data, 0, data.length);
               System.out.println(receiveData);

               if (receiveData.equals(&amp;quot;bye&amp;quot;)){
                   break;
               }

           }
           //关闭流
           socket.close();
       }
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;实际示例：&lt;ul&gt;
&lt;li&gt;在线咨询：通信双方既是发送方，也是接收方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
