{
    "version": "https://jsonfeed.org/version/1",
    "title": "理 想 净 土 • All posts by \"git、github\" tag",
    "description": "不必匆忙，不必火花四溅，不必成为别人，只需成为自己",
    "home_page_url": "https://peter-pan001.github.io/my-blog",
    "items": [
        {
            "id": "https://peter-pan001.github.io/my-blog/git/git%E4%B8%8Egithub%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BA%86%E8%A7%A3/",
            "url": "https://peter-pan001.github.io/my-blog/git/git%E4%B8%8Egithub%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BA%86%E8%A7%A3/",
            "title": "git与github的基本了解",
            "date_published": "2020-10-25T12:32:42.000Z",
            "content_html": " <!-- 图片文件在博客目录 -->\n<h2 id=\"git的基本概述\"><a href=\"#git的基本概述\" class=\"headerlink\" title=\"git的基本概述\"></a>git的基本概述</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><ul>\n<li><p><strong>git（分布式版本控制系统）</strong></p>\n</li>\n<li><p><strong>git</strong> &nbsp;是目前世界上最先进的分布式版本控制系统（没有之一）！</p>\n</li>\n<li><p><strong>Linus</strong> &nbsp;花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p>\n</li>\n<li><p><strong>Git</strong> &nbsp;迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p>\n</li>\n<li><p>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p>\n</li>\n</ul>\n<h3 id=\"集中式和分布式\"><a href=\"#集中式和分布式\" class=\"headerlink\" title=\"集中式和分布式\"></a>集中式和分布式</h3><ul>\n<li><p>Linux旗下的CVS和SVN都是集中式的版本控制系统，但git是分布式的版本控制系统</p>\n</li>\n<li><p><strong>何为集中式版本控制系统？</strong></p>\n<ul>\n<li><p>版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p>\n<!-- ![image-20200619205612791.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizt4sfy8aj30lq0gk77a.jpg) -->\n<p><img data-src=\"https://i.loli.net/2020/10/26/ZE9hXMW3YsPwJdL.jpg\" alt=\"gitfunbu.jpg\"></p>\n</li>\n</ul>\n<h3 id=\"何为分布式版本控制系统？\"><a href=\"#何为分布式版本控制系统？\" class=\"headerlink\" title=\"何为分布式版本控制系统？\"></a>何为分布式版本控制系统？</h3></li>\n</ul>\n<ul>\n<li>分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</li>\n</ul>\n<!-- ![image-20200619210019521.png](http://ww1.sinaimg.cn/large/007uxMgDgy1gizt5wmg7wj30m60gfdj7.jpg) -->\n<p><img data-src=\"https://i.loli.net/2020/10/26/CRZxh47WeIM9byv.jpg\" alt=\"gitfenbu2.jpg\"></p>\n<ul>\n<li><p>集中式VS分布式</p>\n<p> |                  |                        集中式（SVN）                         |                        分布式（Git）                         |<br> | :———————: | :—————————————————————————————: | :—————————————————————————————: |<br> | 是否有中央服务器 | 有。开发人员需要从中央服务器获得最新版本的项目然后在本地开发，开发完推送给中央服务器。因此脱离服务器开发者是几乎无法工作的 |      没有中央服务器，开发人员本地都有 Local Repository       |<br> |     网络依赖     | 必须要联网才能工作，而且对网络的依赖性较强，如果推送的文件比较大而且网络状况欠佳，则提交文件的速度会受到很大的限制 | 分布式在没有网络的情况下也可以执行<code>commit</code>、查看版本提交记录、以及分支操作，在有网络的情况下执行<code>push</code> 到 <code>Remote Repository</code>。 |<br> |   文件存储格式   |                  按照原始文件存储，体积较大                  |                 按照元数据方式存储，体积很小                 |<br> |   是否有版本号   |                              有                              |                             没有                             |<br> |  分支操作的影响  |         创建新的分支则所有的人都会拥有和你一样的分支         |   分支操作不会影响其他开发人员    |<br> |       提交       |   提交的文件会直接记录到中央版本库   |       提交是本地操作，需要执行push操作才会到主要版本库       |</p>\n</li>\n</ul>\n<h2 id=\"git的三种数据状态\"><a href=\"#git的三种数据状态\" class=\"headerlink\" title=\"git的三种数据状态\"></a>git的三种数据状态</h2><hr>\n<h3 id=\"暂存态\"><a href=\"#暂存态\" class=\"headerlink\" title=\"暂存态\"></a>暂存态</h3><ul>\n<li>git传输文件实际上是进行数据的传输，每个用户机都存在一个数据的暂存区（temp），当用户机没有网络时，可以在本地把要上传到本地数据库的文件数据先放到暂存区（temp），待网络通畅时git会自动提交数据到指定的本地数据库（仓库）。此状态为——已暂存（staged）状态</li>\n</ul>\n<h3 id=\"提交态\"><a href=\"#提交态\" class=\"headerlink\" title=\"提交态\"></a>提交态</h3><ul>\n<li>当文件安全的保存到本地数据库时，此状态为——已提交（commit）状态</li>\n</ul>\n<h3 id=\"修改态\"><a href=\"#修改态\" class=\"headerlink\" title=\"修改态\"></a>修改态</h3><ul>\n<li>若文件只是进行更改内容，但尚未保存到数据库中，那么此状态就为——已修改（modify）状态</li>\n</ul>\n<h2 id=\"git的工作原理\"><a href=\"#git的工作原理\" class=\"headerlink\" title=\"git的工作原理\"></a>git的工作原理</h2><hr>\n<h3 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h3><ul>\n<li><strong>git</strong> &nbsp;的工作原理不同于集中式版本控制系统（CVCS），git赋予每个用户机上一个本地数据库，此数据库可同步到服务器的数据库中，当用户对文件做每一次的修改时，会把该文件的所有版本文件保存到本地数据库（即克隆文件），这样做的好处是，当没有网络时，也可以对文件的版本进行控制，而且要修改时，把修改后的文件进行标记，待网络通畅后会把被标记的文件提交到数据库中，供其他开发者使用。</li>\n</ul>\n<h2 id=\"获取Git仓库\"><a href=\"#获取Git仓库\" class=\"headerlink\" title=\"获取Git仓库\"></a>获取Git仓库</h2><h3 id=\"获取方式\"><a href=\"#获取方式\" class=\"headerlink\" title=\"获取方式\"></a>获取方式</h3><ol>\n<li>将尚未进行版本控制的本地目录转换为 Git 仓库</li>\n<li>从其它服务器 <strong>克隆</strong> 一个已存在的 Git 仓库</li>\n</ol>\n<h3 id=\"在已存在的目录中初始化仓库\"><a href=\"#在已存在的目录中初始化仓库\" class=\"headerlink\" title=\"在已存在的目录中初始化仓库\"></a>在已存在的目录中初始化仓库</h3><ul>\n<li><p>第一步：打开<code>git bash</code></p>\n</li>\n<li><p>第二步：输入进入目录的命令</p>\n<pre><code class=\"lang-bash\"> $cd /f/gitproject\n</code></pre>\n</li>\n<li><p>第三步：初始化仓库</p>\n<pre><code class=\"lang-bash\"> $git init\n</code></pre>\n</li>\n</ul>\n<p>此步骤会在已创建的目录下生成一个.git的子目录（该目录为隐藏文件）</p>\n<h3 id=\"添加文件\"><a href=\"#添加文件\" class=\"headerlink\" title=\"添加文件\"></a>添加文件</h3><h4 id=\"创建文件\"><a href=\"#创建文件\" class=\"headerlink\" title=\"创建文件\"></a>创建文件</h4><ul>\n<li><p>方法一：在创建的<code>gitproject</code>目录下直接右键创建一个文件（例如：helloworld.java）</p>\n</li>\n<li><p>方法二：在创建的<code>gitproject</code>目录下右键<code>git bash here</code> ，使用命令创建</p>\n<pre><code class=\"lang-bash\"> $touch helloworld.java  //创建文件\n $git status //查看文件状态\n</code></pre>\n</li>\n<li><p>方法三：直接打开<code>git bash</code> ，用Linux命令切换到<code>gitproject</code>目录下，输入方法二的命令即可！</p>\n<h4 id=\"把文件放入暂存区\"><a href=\"#把文件放入暂存区\" class=\"headerlink\" title=\"把文件放入暂存区\"></a>把文件放入暂存区</h4></li>\n<li><p>通过Linux命令</p>\n<pre><code class=\"lang-bash\"> $git add helloworld.java\n</code></pre>\n</li>\n<li><p>此时再输入 git status 查看状态</p>\n<h4 id=\"把文件提交到仓库\"><a href=\"#把文件提交到仓库\" class=\"headerlink\" title=\"把文件提交到仓库\"></a>把文件提交到仓库</h4><pre><code class=\"lang-bash\"> $git commit -m&quot;new file helloworld.java&quot;\n</code></pre>\n<p> (-m为message)</p>\n<h4 id=\"查看是否已提交\"><a href=\"#查看是否已提交\" class=\"headerlink\" title=\"查看是否已提交\"></a>查看是否已提交</h4><pre><code class=\"lang-bash\"> $git status\n</code></pre>\n<p> 如出现下图所示则提交成功</p>\n <!-- ![image-20200620142410488.png](http://ww1.sinaimg.cn/large/007uxMgDgy1giztadgl3fj30dq08lwew.jpg) -->\n<p> <img data-src=\"https://i.loli.net/2020/10/26/Vhz9NZ3Tpyo8Onj.jpg\" alt=\"gitcmd.jpg\"></p>\n</li>\n</ul>\n<h3 id=\"克隆仓库\"><a href=\"#克隆仓库\" class=\"headerlink\" title=\"克隆仓库\"></a>克隆仓库</h3><ul>\n<li>命令</li>\n</ul>\n<pre><code class=\"lang-bash\">$git clone &lt;url&gt;\n</code></pre>\n<h3 id=\"查看当前文件状态\"><a href=\"#查看当前文件状态\" class=\"headerlink\" title=\"查看当前文件状态\"></a>查看当前文件状态</h3><ul>\n<li>命令<pre><code class=\"lang-bash\">$git status\n</code></pre>\n</li>\n</ul>\n",
            "tags": [
                "git、github"
            ]
        }
    ]
}